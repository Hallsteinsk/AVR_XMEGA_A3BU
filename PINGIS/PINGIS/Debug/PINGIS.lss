
PINGIS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ee6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  00001ee6  00001f7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000252  00802004  00802004  00001f7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001fb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00001ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000efba  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004af5  00000000  00000000  000113e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007373  00000000  00000000  00015ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000153c  00000000  00000000  0001d24c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00031e6c  00000000  00000000  0001e788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006c20  00000000  00000000  000505f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00057214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b9d3  00000000  00000000  0005772c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c5       	rjmp	.+2868   	; 0xb6e <__vector_14>
      3a:	00 00       	nop
      3c:	c5 c5       	rjmp	.+2954   	; 0xbc8 <__vector_15>
      3e:	00 00       	nop
      40:	f0 c5       	rjmp	.+3040   	; 0xc22 <__vector_16>
      42:	00 00       	nop
      44:	1b c6       	rjmp	.+3126   	; 0xc7c <__vector_17>
      46:	00 00       	nop
      48:	46 c6       	rjmp	.+3212   	; 0xcd6 <__vector_18>
      4a:	00 00       	nop
      4c:	71 c6       	rjmp	.+3298   	; 0xd30 <__vector_19>
      4e:	00 00       	nop
      50:	9c c6       	rjmp	.+3384   	; 0xd8a <__vector_20>
      52:	00 00       	nop
      54:	c7 c6       	rjmp	.+3470   	; 0xde4 <__vector_21>
      56:	00 00       	nop
      58:	f2 c6       	rjmp	.+3556   	; 0xe3e <__vector_22>
      5a:	00 00       	nop
      5c:	1d c7       	rjmp	.+3642   	; 0xe98 <__vector_23>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c0       	rjmp	.+416    	; 0x23e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ce c0       	rjmp	.+412    	; 0x23e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cc c0       	rjmp	.+408    	; 0x23e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ca c0       	rjmp	.+404    	; 0x23e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_47>
      c0:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_48>
      c4:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_49>
      c8:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_50>
      cc:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_51>
      d0:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__vector_52>
      d4:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__vector_53>
      d8:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_54>
      dc:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_55>
      e0:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_56>
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	90 c0       	rjmp	.+288    	; 0x23e <__bad_interrupt>
     11e:	00 00       	nop
     120:	8e c0       	rjmp	.+284    	; 0x23e <__bad_interrupt>
     122:	00 00       	nop
     124:	8c c0       	rjmp	.+280    	; 0x23e <__bad_interrupt>
     126:	00 00       	nop
     128:	8a c0       	rjmp	.+276    	; 0x23e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	de c6       	rjmp	.+3516   	; 0xef2 <__vector_77>
     136:	00 00       	nop
     138:	09 c7       	rjmp	.+3602   	; 0xf4c <__vector_78>
     13a:	00 00       	nop
     13c:	34 c7       	rjmp	.+3688   	; 0xfa6 <__vector_79>
     13e:	00 00       	nop
     140:	5f c7       	rjmp	.+3774   	; 0x1000 <__vector_80>
     142:	00 00       	nop
     144:	8a c7       	rjmp	.+3860   	; 0x105a <__vector_81>
     146:	00 00       	nop
     148:	b5 c7       	rjmp	.+3946   	; 0x10b4 <__vector_82>
     14a:	00 00       	nop
     14c:	e0 c7       	rjmp	.+4032   	; 0x110e <__vector_83>
     14e:	00 00       	nop
     150:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_84>
     154:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_85>
     158:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__vector_86>
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_108>
     1b4:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__vector_109>
     1b8:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_110>
     1bc:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__vector_111>
     1c0:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_112>
     1c4:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__vector_113>
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e6 ee       	ldi	r30, 0xE6	; 230
     214:	fe e1       	ldi	r31, 0x1E	; 30
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a4 30       	cpi	r26, 0x04	; 4
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	22 e2       	ldi	r18, 0x22	; 34
     228:	a4 e0       	ldi	r26, 0x04	; 4
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a6 35       	cpi	r26, 0x56	; 86
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <main>
     23a:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     240:	04 c0       	rjmp	.+8      	; 0x24a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     242:	61 50       	subi	r22, 0x01	; 1
     244:	71 09       	sbc	r23, r1
     246:	81 09       	sbc	r24, r1
     248:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     24a:	61 15       	cp	r22, r1
     24c:	71 05       	cpc	r23, r1
     24e:	81 05       	cpc	r24, r1
     250:	91 05       	cpc	r25, r1
     252:	b9 f7       	brne	.-18     	; 0x242 <__portable_avr_delay_cycles+0x2>
     254:	08 95       	ret

00000256 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     26e:	00 e0       	ldi	r16, 0x00	; 0
     270:	16 e0       	ldi	r17, 0x06	; 6
     272:	68 94       	set
     274:	ff 24       	eor	r15, r15
     276:	f3 f8       	bld	r15, 3
     278:	f8 01       	movw	r30, r16
     27a:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     27c:	6e e0       	ldi	r22, 0x0E	; 14
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	dd df       	rcall	.-70     	; 0x240 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     286:	f8 01       	movw	r30, r16
     288:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     28a:	6e e0       	ldi	r22, 0x0E	; 14
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	d6 df       	rcall	.-84     	; 0x240 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     294:	0f 2e       	mov	r0, r31
     296:	fb e2       	ldi	r31, 0x2B	; 43
     298:	bf 2e       	mov	r11, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     29e:	80 ea       	ldi	r24, 0xA0	; 160
     2a0:	99 e0       	ldi	r25, 0x09	; 9
     2a2:	9b d3       	rcall	.+1846   	; 0x9da <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     2a4:	c1 2c       	mov	r12, r1
     2a6:	d1 2c       	mov	r13, r1
     2a8:	76 01       	movw	r14, r12
     2aa:	00 e4       	ldi	r16, 0x40	; 64
     2ac:	12 e4       	ldi	r17, 0x42	; 66
     2ae:	2f e0       	ldi	r18, 0x0F	; 15
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	43 e0       	ldi	r20, 0x03	; 3
     2b4:	be 01       	movw	r22, r28
     2b6:	6f 5f       	subi	r22, 0xFF	; 255
     2b8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ba:	80 ea       	ldi	r24, 0xA0	; 160
     2bc:	99 e0       	ldi	r25, 0x09	; 9
     2be:	bc d3       	rcall	.+1912   	; 0xa38 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2c0:	00 e6       	ldi	r16, 0x60	; 96
     2c2:	16 e0       	ldi	r17, 0x06	; 6
     2c4:	ff 24       	eor	r15, r15
     2c6:	f3 94       	inc	r15
     2c8:	f8 01       	movw	r30, r16
     2ca:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     2cc:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     2ce:	be 01       	movw	r22, r28
     2d0:	6f 5f       	subi	r22, 0xFF	; 255
     2d2:	7f 4f       	sbci	r23, 0xFF	; 255
     2d4:	80 ea       	ldi	r24, 0xA0	; 160
     2d6:	99 e0       	ldi	r25, 0x09	; 9
     2d8:	c9 d3       	rcall	.+1938   	; 0xa6c <usart_spi_select_device>
     2da:	f8 01       	movw	r30, r16
     2dc:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     2de:	e0 ea       	ldi	r30, 0xA0	; 160
     2e0:	f9 e0       	ldi	r31, 0x09	; 9
     2e2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     2e4:	85 ff       	sbrs	r24, 5
     2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     2e8:	80 ea       	ldi	r24, 0xA0	; 160
     2ea:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     2ee:	e0 ea       	ldi	r30, 0xA0	; 160
     2f0:	f9 e0       	ldi	r31, 0x09	; 9
     2f2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     2f4:	86 ff       	sbrs	r24, 6
     2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     2f8:	e0 ea       	ldi	r30, 0xA0	; 160
     2fa:	f9 e0       	ldi	r31, 0x09	; 9
     2fc:	80 e4       	ldi	r24, 0x40	; 64
     2fe:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     300:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     302:	be 01       	movw	r22, r28
     304:	6f 5f       	subi	r22, 0xFF	; 255
     306:	7f 4f       	sbci	r23, 0xFF	; 255
     308:	80 ea       	ldi	r24, 0xA0	; 160
     30a:	99 e0       	ldi	r25, 0x09	; 9
     30c:	c5 d3       	rcall	.+1930   	; 0xa98 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     30e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     310:	89 83       	std	Y+1, r24	; 0x01
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	80 ea       	ldi	r24, 0xA0	; 160
     31a:	99 e0       	ldi	r25, 0x09	; 9
     31c:	a7 d3       	rcall	.+1870   	; 0xa6c <usart_spi_select_device>
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     324:	e0 ea       	ldi	r30, 0xA0	; 160
     326:	f9 e0       	ldi	r31, 0x09	; 9
     328:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     32a:	85 ff       	sbrs	r24, 5
     32c:	fd cf       	rjmp	.-6      	; 0x328 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     32e:	86 ea       	ldi	r24, 0xA6	; 166
     330:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     334:	e0 ea       	ldi	r30, 0xA0	; 160
     336:	f9 e0       	ldi	r31, 0x09	; 9
     338:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     33a:	86 ff       	sbrs	r24, 6
     33c:	fd cf       	rjmp	.-6      	; 0x338 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     33e:	e0 ea       	ldi	r30, 0xA0	; 160
     340:	f9 e0       	ldi	r31, 0x09	; 9
     342:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     344:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     346:	80 81       	ld	r24, Z
     348:	be 01       	movw	r22, r28
     34a:	6f 5f       	subi	r22, 0xFF	; 255
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	80 ea       	ldi	r24, 0xA0	; 160
     350:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     352:	a2 d3       	rcall	.+1860   	; 0xa98 <usart_spi_deselect_device>
     354:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	be 01       	movw	r22, r28
     35a:	6f 5f       	subi	r22, 0xFF	; 255
     35c:	7f 4f       	sbci	r23, 0xFF	; 255
     35e:	80 ea       	ldi	r24, 0xA0	; 160
     360:	99 e0       	ldi	r25, 0x09	; 9
     362:	84 d3       	rcall	.+1800   	; 0xa6c <usart_spi_select_device>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     36a:	e0 ea       	ldi	r30, 0xA0	; 160
     36c:	f9 e0       	ldi	r31, 0x09	; 9
     36e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     370:	85 ff       	sbrs	r24, 5
     372:	fd cf       	rjmp	.-6      	; 0x36e <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     374:	88 ec       	ldi	r24, 0xC8	; 200
     376:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     37a:	e0 ea       	ldi	r30, 0xA0	; 160
     37c:	f9 e0       	ldi	r31, 0x09	; 9
     37e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     380:	86 ff       	sbrs	r24, 6
     382:	fd cf       	rjmp	.-6      	; 0x37e <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     384:	e0 ea       	ldi	r30, 0xA0	; 160
     386:	f9 e0       	ldi	r31, 0x09	; 9
     388:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     38a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     38c:	80 81       	ld	r24, Z
     38e:	be 01       	movw	r22, r28
     390:	6f 5f       	subi	r22, 0xFF	; 255
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	80 ea       	ldi	r24, 0xA0	; 160
     396:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     398:	7f d3       	rcall	.+1790   	; 0xa98 <usart_spi_deselect_device>
     39a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     39c:	89 83       	std	Y+1, r24	; 0x01
     39e:	be 01       	movw	r22, r28
     3a0:	6f 5f       	subi	r22, 0xFF	; 255
     3a2:	7f 4f       	sbci	r23, 0xFF	; 255
     3a4:	80 ea       	ldi	r24, 0xA0	; 160
     3a6:	99 e0       	ldi	r25, 0x09	; 9
     3a8:	61 d3       	rcall	.+1730   	; 0xa6c <usart_spi_select_device>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     3b0:	e0 ea       	ldi	r30, 0xA0	; 160
     3b2:	f9 e0       	ldi	r31, 0x09	; 9
     3b4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     3ba:	82 ea       	ldi	r24, 0xA2	; 162
     3bc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     3c0:	e0 ea       	ldi	r30, 0xA0	; 160
     3c2:	f9 e0       	ldi	r31, 0x09	; 9
     3c4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     3c6:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <st7565r_init+0x16e>
     3ca:	e0 ea       	ldi	r30, 0xA0	; 160
     3cc:	f9 e0       	ldi	r31, 0x09	; 9
     3ce:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     3d0:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     3d2:	80 81       	ld	r24, Z
     3d4:	be 01       	movw	r22, r28
     3d6:	6f 5f       	subi	r22, 0xFF	; 255
     3d8:	7f 4f       	sbci	r23, 0xFF	; 255
     3da:	80 ea       	ldi	r24, 0xA0	; 160
     3dc:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     3de:	5c d3       	rcall	.+1720   	; 0xa98 <usart_spi_deselect_device>
     3e0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     3e2:	89 83       	std	Y+1, r24	; 0x01
     3e4:	be 01       	movw	r22, r28
     3e6:	6f 5f       	subi	r22, 0xFF	; 255
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	80 ea       	ldi	r24, 0xA0	; 160
     3ec:	99 e0       	ldi	r25, 0x09	; 9
     3ee:	3e d3       	rcall	.+1660   	; 0xa6c <usart_spi_select_device>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     3f6:	e0 ea       	ldi	r30, 0xA0	; 160
     3f8:	f9 e0       	ldi	r31, 0x09	; 9
     3fa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     3fc:	85 ff       	sbrs	r24, 5
     3fe:	fd cf       	rjmp	.-6      	; 0x3fa <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     400:	8f e2       	ldi	r24, 0x2F	; 47
     402:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     406:	e0 ea       	ldi	r30, 0xA0	; 160
     408:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     40a:	81 81       	ldd	r24, Z+1	; 0x01
     40c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     40e:	fd cf       	rjmp	.-6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     410:	e0 ea       	ldi	r30, 0xA0	; 160
     412:	f9 e0       	ldi	r31, 0x09	; 9
     414:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     416:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     418:	80 81       	ld	r24, Z
     41a:	be 01       	movw	r22, r28
     41c:	6f 5f       	subi	r22, 0xFF	; 255
     41e:	7f 4f       	sbci	r23, 0xFF	; 255
     420:	80 ea       	ldi	r24, 0xA0	; 160
     422:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     424:	39 d3       	rcall	.+1650   	; 0xa98 <usart_spi_deselect_device>
     426:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     428:	89 83       	std	Y+1, r24	; 0x01
     42a:	be 01       	movw	r22, r28
     42c:	6f 5f       	subi	r22, 0xFF	; 255
     42e:	7f 4f       	sbci	r23, 0xFF	; 255
     430:	80 ea       	ldi	r24, 0xA0	; 160
     432:	99 e0       	ldi	r25, 0x09	; 9
     434:	1b d3       	rcall	.+1590   	; 0xa6c <usart_spi_select_device>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     43c:	e0 ea       	ldi	r30, 0xA0	; 160
     43e:	f9 e0       	ldi	r31, 0x09	; 9
     440:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     442:	85 ff       	sbrs	r24, 5
     444:	fd cf       	rjmp	.-6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     446:	88 ef       	ldi	r24, 0xF8	; 248
     448:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     44c:	e0 ea       	ldi	r30, 0xA0	; 160
     44e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     450:	81 81       	ldd	r24, Z+1	; 0x01
     452:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     454:	fd cf       	rjmp	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     456:	e0 ea       	ldi	r30, 0xA0	; 160
     458:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     45a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     45c:	81 83       	std	Z+1, r24	; 0x01
     45e:	80 81       	ld	r24, Z
     460:	be 01       	movw	r22, r28
     462:	6f 5f       	subi	r22, 0xFF	; 255
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	80 ea       	ldi	r24, 0xA0	; 160
     468:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     46a:	16 d3       	rcall	.+1580   	; 0xa98 <usart_spi_deselect_device>
     46c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	be 01       	movw	r22, r28
     472:	6f 5f       	subi	r22, 0xFF	; 255
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	80 ea       	ldi	r24, 0xA0	; 160
     478:	99 e0       	ldi	r25, 0x09	; 9
     47a:	f8 d2       	rcall	.+1520   	; 0xa6c <usart_spi_select_device>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     482:	e0 ea       	ldi	r30, 0xA0	; 160
     484:	f9 e0       	ldi	r31, 0x09	; 9
     486:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     488:	85 ff       	sbrs	r24, 5
     48a:	fd cf       	rjmp	.-6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     48c:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     490:	e0 ea       	ldi	r30, 0xA0	; 160
     492:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     494:	81 81       	ldd	r24, Z+1	; 0x01
     496:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     498:	fd cf       	rjmp	.-6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     49a:	e0 ea       	ldi	r30, 0xA0	; 160
     49c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     49e:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     4a0:	81 83       	std	Z+1, r24	; 0x01
     4a2:	80 81       	ld	r24, Z
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	80 ea       	ldi	r24, 0xA0	; 160
     4ac:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     4ae:	f4 d2       	rcall	.+1512   	; 0xa98 <usart_spi_deselect_device>
     4b0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	be 01       	movw	r22, r28
     4b6:	6f 5f       	subi	r22, 0xFF	; 255
     4b8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ba:	80 ea       	ldi	r24, 0xA0	; 160
     4bc:	99 e0       	ldi	r25, 0x09	; 9
     4be:	d6 d2       	rcall	.+1452   	; 0xa6c <usart_spi_select_device>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4c6:	e0 ea       	ldi	r30, 0xA0	; 160
     4c8:	f9 e0       	ldi	r31, 0x09	; 9
     4ca:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     4cc:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4d0:	81 e2       	ldi	r24, 0x21	; 33
     4d2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     4d6:	e0 ea       	ldi	r30, 0xA0	; 160
     4d8:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     4da:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     4dc:	86 ff       	sbrs	r24, 6
     4de:	fd cf       	rjmp	.-6      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4e0:	e0 ea       	ldi	r30, 0xA0	; 160
     4e2:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     4e4:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     4e6:	81 83       	std	Z+1, r24	; 0x01
     4e8:	80 81       	ld	r24, Z
     4ea:	be 01       	movw	r22, r28
     4ec:	6f 5f       	subi	r22, 0xFF	; 255
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	80 ea       	ldi	r24, 0xA0	; 160
     4f2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     4f4:	d1 d2       	rcall	.+1442   	; 0xa98 <usart_spi_deselect_device>
     4f6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     4f8:	89 83       	std	Y+1, r24	; 0x01
     4fa:	be 01       	movw	r22, r28
     4fc:	6f 5f       	subi	r22, 0xFF	; 255
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	80 ea       	ldi	r24, 0xA0	; 160
     502:	99 e0       	ldi	r25, 0x09	; 9
     504:	b3 d2       	rcall	.+1382   	; 0xa6c <usart_spi_select_device>
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     50c:	e0 ea       	ldi	r30, 0xA0	; 160
     50e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     510:	81 81       	ldd	r24, Z+1	; 0x01
     512:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     514:	fd cf       	rjmp	.-6      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     516:	81 e8       	ldi	r24, 0x81	; 129
     518:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     51c:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     51e:	f9 e0       	ldi	r31, 0x09	; 9
     520:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     522:	86 ff       	sbrs	r24, 6
     524:	fd cf       	rjmp	.-6      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     526:	e0 ea       	ldi	r30, 0xA0	; 160
     528:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     52a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     52c:	81 83       	std	Z+1, r24	; 0x01
     52e:	80 81       	ld	r24, Z
     530:	be 01       	movw	r22, r28
     532:	6f 5f       	subi	r22, 0xFF	; 255
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	80 ea       	ldi	r24, 0xA0	; 160
     538:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     53a:	ae d2       	rcall	.+1372   	; 0xa98 <usart_spi_deselect_device>
     53c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	be 01       	movw	r22, r28
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	80 ea       	ldi	r24, 0xA0	; 160
     548:	99 e0       	ldi	r25, 0x09	; 9
     54a:	90 d2       	rcall	.+1312   	; 0xa6c <usart_spi_select_device>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     552:	e0 ea       	ldi	r30, 0xA0	; 160
     554:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     556:	81 81       	ldd	r24, Z+1	; 0x01
     558:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     55a:	fd cf       	rjmp	.-6      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     55c:	81 e2       	ldi	r24, 0x21	; 33
     55e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     562:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     564:	f9 e0       	ldi	r31, 0x09	; 9
     566:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     568:	86 ff       	sbrs	r24, 6
     56a:	fd cf       	rjmp	.-6      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     56c:	e0 ea       	ldi	r30, 0xA0	; 160
     56e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     570:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     572:	81 83       	std	Z+1, r24	; 0x01
     574:	80 81       	ld	r24, Z
     576:	be 01       	movw	r22, r28
     578:	6f 5f       	subi	r22, 0xFF	; 255
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	80 ea       	ldi	r24, 0xA0	; 160
     57e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     580:	8b d2       	rcall	.+1302   	; 0xa98 <usart_spi_deselect_device>
     582:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	be 01       	movw	r22, r28
     588:	6f 5f       	subi	r22, 0xFF	; 255
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
     58c:	80 ea       	ldi	r24, 0xA0	; 160
     58e:	99 e0       	ldi	r25, 0x09	; 9
     590:	6d d2       	rcall	.+1242   	; 0xa6c <usart_spi_select_device>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     598:	e0 ea       	ldi	r30, 0xA0	; 160
     59a:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     59c:	81 81       	ldd	r24, Z+1	; 0x01
     59e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5a0:	fd cf       	rjmp	.-6      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     5a2:	8f ea       	ldi	r24, 0xAF	; 175
     5a4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5a8:	e0 ea       	ldi	r30, 0xA0	; 160
     5aa:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5ac:	81 81       	ldd	r24, Z+1	; 0x01
     5ae:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5b0:	fd cf       	rjmp	.-6      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5b2:	e0 ea       	ldi	r30, 0xA0	; 160
     5b4:	f9 e0       	ldi	r31, 0x09	; 9
     5b6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5b8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ba:	80 81       	ld	r24, Z
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	80 ea       	ldi	r24, 0xA0	; 160
     5c4:	99 e0       	ldi	r25, 0x09	; 9
     5c6:	68 d2       	rcall	.+1232   	; 0xa98 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     5c8:	0f 90       	pop	r0
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	08 95       	ret

000005de <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1f 92       	push	r1
     5e4:	1f 92       	push	r1
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     5f0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     5f4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     5f8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     5fc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     600:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     604:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     608:	6c e0       	ldi	r22, 0x0C	; 12
     60a:	81 e4       	ldi	r24, 0x41	; 65
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a9 d2       	rcall	.+1362   	; 0xb62 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     610:	8f b7       	in	r24, 0x3f	; 63
     612:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     614:	f8 94       	cli
	return flags;
     616:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     618:	e0 e5       	ldi	r30, 0x50	; 80
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	82 60       	ori	r24, 0x02	; 2
     620:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     622:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     624:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     626:	81 ff       	sbrs	r24, 1
     628:	fd cf       	rjmp	.-6      	; 0x624 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	80 e4       	ldi	r24, 0x40	; 64
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	98 d2       	rcall	.+1328   	; 0xb62 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     632:	8f b7       	in	r24, 0x3f	; 63
     634:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     636:	f8 94       	cli
	return flags;
     638:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     63a:	e0 e5       	ldi	r30, 0x50	; 80
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	8e 7f       	andi	r24, 0xFE	; 254
     642:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     644:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	1f 92       	push	r1
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     65a:	9f b7       	in	r25, 0x3f	; 63
     65c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     65e:	f8 94       	cli
	return flags;
     660:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     662:	e8 2f       	mov	r30, r24
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	e0 59       	subi	r30, 0x90	; 144
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	60 95       	com	r22
     66c:	80 81       	ld	r24, Z
     66e:	68 23       	and	r22, r24
     670:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     672:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <gfx_mono_st7565r_put_byte>:
	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
}
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	1f 92       	push	r1
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	08 2f       	mov	r16, r24
     68e:	f6 2e       	mov	r15, r22
     690:	14 2f       	mov	r17, r20
     692:	e4 d0       	rcall	.+456    	; 0x85c <gfx_mono_framebuffer_put_byte>
     694:	0f 70       	andi	r16, 0x0F	; 15
     696:	00 6b       	ori	r16, 0xB0	; 176
     698:	8b e2       	ldi	r24, 0x2B	; 43
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	be 01       	movw	r22, r28
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	80 ea       	ldi	r24, 0xA0	; 160
     6a4:	99 e0       	ldi	r25, 0x09	; 9
     6a6:	e2 d1       	rcall	.+964    	; 0xa6c <usart_spi_select_device>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f9 e0       	ldi	r31, 0x09	; 9
     6b2:	91 81       	ldd	r25, Z+1	; 0x01
     6b4:	95 ff       	sbrs	r25, 5
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <gfx_mono_st7565r_put_byte+0x36>
     6b8:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     6bc:	e0 ea       	ldi	r30, 0xA0	; 160
     6be:	f9 e0       	ldi	r31, 0x09	; 9
     6c0:	81 81       	ldd	r24, Z+1	; 0x01
     6c2:	86 ff       	sbrs	r24, 6
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <gfx_mono_st7565r_put_byte+0x44>
     6c6:	e0 ea       	ldi	r30, 0xA0	; 160
     6c8:	f9 e0       	ldi	r31, 0x09	; 9
     6ca:	80 e4       	ldi	r24, 0x40	; 64
     6cc:	81 83       	std	Z+1, r24	; 0x01
     6ce:	80 81       	ld	r24, Z
     6d0:	be 01       	movw	r22, r28
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	80 ea       	ldi	r24, 0xA0	; 160
     6d8:	99 e0       	ldi	r25, 0x09	; 9
     6da:	de d1       	rcall	.+956    	; 0xa98 <usart_spi_deselect_device>
     6dc:	0f 2d       	mov	r16, r15
     6de:	0f 77       	andi	r16, 0x7F	; 127
     6e0:	02 95       	swap	r16
     6e2:	0f 70       	andi	r16, 0x0F	; 15
     6e4:	00 61       	ori	r16, 0x10	; 16
     6e6:	8b e2       	ldi	r24, 0x2B	; 43
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	be 01       	movw	r22, r28
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	80 ea       	ldi	r24, 0xA0	; 160
     6f2:	99 e0       	ldi	r25, 0x09	; 9
     6f4:	bb d1       	rcall	.+886    	; 0xa6c <usart_spi_select_device>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
     700:	81 81       	ldd	r24, Z+1	; 0x01
     702:	85 ff       	sbrs	r24, 5
     704:	fd cf       	rjmp	.-6      	; 0x700 <gfx_mono_st7565r_put_byte+0x84>
     706:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     70a:	e0 ea       	ldi	r30, 0xA0	; 160
     70c:	f9 e0       	ldi	r31, 0x09	; 9
     70e:	81 81       	ldd	r24, Z+1	; 0x01
     710:	86 ff       	sbrs	r24, 6
     712:	fd cf       	rjmp	.-6      	; 0x70e <gfx_mono_st7565r_put_byte+0x92>
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	81 83       	std	Z+1, r24	; 0x01
     71c:	80 81       	ld	r24, Z
     71e:	be 01       	movw	r22, r28
     720:	6f 5f       	subi	r22, 0xFF	; 255
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	80 ea       	ldi	r24, 0xA0	; 160
     726:	99 e0       	ldi	r25, 0x09	; 9
     728:	b7 d1       	rcall	.+878    	; 0xa98 <usart_spi_deselect_device>
     72a:	0f 2d       	mov	r16, r15
     72c:	0f 70       	andi	r16, 0x0F	; 15
     72e:	8b e2       	ldi	r24, 0x2B	; 43
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	be 01       	movw	r22, r28
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	80 ea       	ldi	r24, 0xA0	; 160
     73a:	99 e0       	ldi	r25, 0x09	; 9
     73c:	97 d1       	rcall	.+814    	; 0xa6c <usart_spi_select_device>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     744:	e0 ea       	ldi	r30, 0xA0	; 160
     746:	f9 e0       	ldi	r31, 0x09	; 9
     748:	81 81       	ldd	r24, Z+1	; 0x01
     74a:	85 ff       	sbrs	r24, 5
     74c:	fd cf       	rjmp	.-6      	; 0x748 <gfx_mono_st7565r_put_byte+0xcc>
     74e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     752:	e0 ea       	ldi	r30, 0xA0	; 160
     754:	f9 e0       	ldi	r31, 0x09	; 9
     756:	81 81       	ldd	r24, Z+1	; 0x01
     758:	86 ff       	sbrs	r24, 6
     75a:	fd cf       	rjmp	.-6      	; 0x756 <gfx_mono_st7565r_put_byte+0xda>
     75c:	e0 ea       	ldi	r30, 0xA0	; 160
     75e:	f9 e0       	ldi	r31, 0x09	; 9
     760:	80 e4       	ldi	r24, 0x40	; 64
     762:	81 83       	std	Z+1, r24	; 0x01
     764:	80 81       	ld	r24, Z
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	80 ea       	ldi	r24, 0xA0	; 160
     76e:	99 e0       	ldi	r25, 0x09	; 9
     770:	93 d1       	rcall	.+806    	; 0xa98 <usart_spi_deselect_device>
     772:	8b e2       	ldi	r24, 0x2B	; 43
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	be 01       	movw	r22, r28
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	80 ea       	ldi	r24, 0xA0	; 160
     77e:	99 e0       	ldi	r25, 0x09	; 9
     780:	75 d1       	rcall	.+746    	; 0xa6c <usart_spi_select_device>
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     788:	e0 ea       	ldi	r30, 0xA0	; 160
     78a:	f9 e0       	ldi	r31, 0x09	; 9
     78c:	81 81       	ldd	r24, Z+1	; 0x01
     78e:	85 ff       	sbrs	r24, 5
     790:	fd cf       	rjmp	.-6      	; 0x78c <gfx_mono_st7565r_put_byte+0x110>
     792:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     796:	e0 ea       	ldi	r30, 0xA0	; 160
     798:	f9 e0       	ldi	r31, 0x09	; 9
     79a:	81 81       	ldd	r24, Z+1	; 0x01
     79c:	86 ff       	sbrs	r24, 6
     79e:	fd cf       	rjmp	.-6      	; 0x79a <gfx_mono_st7565r_put_byte+0x11e>
     7a0:	e0 ea       	ldi	r30, 0xA0	; 160
     7a2:	f9 e0       	ldi	r31, 0x09	; 9
     7a4:	80 e4       	ldi	r24, 0x40	; 64
     7a6:	81 83       	std	Z+1, r24	; 0x01
     7a8:	80 81       	ld	r24, Z
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     7b0:	be 01       	movw	r22, r28
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	99 e0       	ldi	r25, 0x09	; 9
     7ba:	6e d1       	rcall	.+732    	; 0xa98 <usart_spi_deselect_device>
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	08 95       	ret

000007ca <gfx_mono_st7565r_init>:
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	90 e2       	ldi	r25, 0x20	; 32
     7dc:	3a d0       	rcall	.+116    	; 0x852 <gfx_mono_set_framebuffer>
     7de:	3b dd       	rcall	.-1418   	; 0x256 <st7565r_init>
     7e0:	8b e2       	ldi	r24, 0x2B	; 43
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	be 01       	movw	r22, r28
     7e6:	6f 5f       	subi	r22, 0xFF	; 255
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	80 ea       	ldi	r24, 0xA0	; 160
     7ec:	99 e0       	ldi	r25, 0x09	; 9
     7ee:	3e d1       	rcall	.+636    	; 0xa6c <usart_spi_select_device>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     7f6:	e0 ea       	ldi	r30, 0xA0	; 160
     7f8:	f9 e0       	ldi	r31, 0x09	; 9
     7fa:	81 81       	ldd	r24, Z+1	; 0x01
     7fc:	85 ff       	sbrs	r24, 5
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <gfx_mono_st7565r_init+0x30>
     800:	80 e4       	ldi	r24, 0x40	; 64
     802:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     806:	e0 ea       	ldi	r30, 0xA0	; 160
     808:	f9 e0       	ldi	r31, 0x09	; 9
     80a:	81 81       	ldd	r24, Z+1	; 0x01
     80c:	86 ff       	sbrs	r24, 6
     80e:	fd cf       	rjmp	.-6      	; 0x80a <gfx_mono_st7565r_init+0x40>
     810:	e0 ea       	ldi	r30, 0xA0	; 160
     812:	f9 e0       	ldi	r31, 0x09	; 9
     814:	80 e4       	ldi	r24, 0x40	; 64
     816:	81 83       	std	Z+1, r24	; 0x01
     818:	80 81       	ld	r24, Z
     81a:	be 01       	movw	r22, r28
     81c:	6f 5f       	subi	r22, 0xFF	; 255
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	80 ea       	ldi	r24, 0xA0	; 160
     822:	99 e0       	ldi	r25, 0x09	; 9
     824:	39 d1       	rcall	.+626    	; 0xa98 <usart_spi_deselect_device>
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	0a c0       	rjmp	.+20     	; 0x83e <gfx_mono_st7565r_init+0x74>
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	61 2f       	mov	r22, r17
     82e:	80 2f       	mov	r24, r16
     830:	25 df       	rcall	.-438    	; 0x67c <gfx_mono_st7565r_put_byte>
     832:	1f 5f       	subi	r17, 0xFF	; 255
     834:	10 38       	cpi	r17, 0x80	; 128
     836:	c9 f7       	brne	.-14     	; 0x82a <gfx_mono_st7565r_init+0x60>
     838:	0f 5f       	subi	r16, 0xFF	; 255
     83a:	04 30       	cpi	r16, 0x04	; 4
     83c:	11 f0       	breq	.+4      	; 0x842 <gfx_mono_st7565r_init+0x78>
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	f4 cf       	rjmp	.-24     	; 0x82a <gfx_mono_st7565r_init+0x60>
     842:	0f 90       	pop	r0
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     84e:	14 c0       	rjmp	.+40     	; 0x878 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     850:	08 95       	ret

00000852 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     852:	80 93 04 22 	sts	0x2204, r24	; 0x802204 <fbpointer>
     856:	90 93 05 22 	sts	0x2205, r25	; 0x802205 <fbpointer+0x1>
     85a:	08 95       	ret

0000085c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     85c:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <fbpointer>
     860:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <fbpointer+0x1>
     864:	90 e8       	ldi	r25, 0x80	; 128
     866:	89 9f       	mul	r24, r25
     868:	20 0d       	add	r18, r0
     86a:	31 1d       	adc	r19, r1
     86c:	11 24       	eor	r1, r1
     86e:	f9 01       	movw	r30, r18
     870:	e6 0f       	add	r30, r22
     872:	f1 1d       	adc	r31, r1
     874:	40 83       	st	Z, r20
     876:	08 95       	ret

00000878 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     878:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <fbpointer>
     87c:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <fbpointer+0x1>
     880:	90 e8       	ldi	r25, 0x80	; 128
     882:	89 9f       	mul	r24, r25
     884:	20 0d       	add	r18, r0
     886:	31 1d       	adc	r19, r1
     888:	11 24       	eor	r1, r1
     88a:	f9 01       	movw	r30, r18
     88c:	e6 0f       	add	r30, r22
     88e:	f1 1d       	adc	r31, r1
}
     890:	80 81       	ld	r24, Z
     892:	08 95       	ret

00000894 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	e4 2f       	mov	r30, r20
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	e8 0f       	add	r30, r24
     8a4:	f1 1d       	adc	r31, r1
     8a6:	e1 38       	cpi	r30, 0x81	; 129
     8a8:	f1 05       	cpc	r31, r1
     8aa:	1c f0       	brlt	.+6      	; 0x8b2 <gfx_mono_generic_draw_horizontal_line+0x1e>
     8ac:	c0 e8       	ldi	r28, 0x80	; 128
     8ae:	4c 2f       	mov	r20, r28
     8b0:	48 1b       	sub	r20, r24
     8b2:	44 23       	and	r20, r20
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <gfx_mono_generic_draw_horizontal_line+0x24>
     8b6:	4a c0       	rjmp	.+148    	; 0x94c <gfx_mono_generic_draw_horizontal_line+0xb8>
     8b8:	d6 2f       	mov	r29, r22
     8ba:	d6 95       	lsr	r29
     8bc:	d6 95       	lsr	r29
     8be:	d6 95       	lsr	r29
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	98 e0       	ldi	r25, 0x08	; 8
     8c4:	d9 9f       	mul	r29, r25
     8c6:	60 19       	sub	r22, r0
     8c8:	71 09       	sbc	r23, r1
     8ca:	11 24       	eor	r1, r1
     8cc:	e1 e0       	ldi	r30, 0x01	; 1
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	df 01       	movw	r26, r30
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <gfx_mono_generic_draw_horizontal_line+0x44>
     8d4:	aa 0f       	add	r26, r26
     8d6:	bb 1f       	adc	r27, r27
     8d8:	6a 95       	dec	r22
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <gfx_mono_generic_draw_horizontal_line+0x40>
     8dc:	fa 2e       	mov	r15, r26
     8de:	21 30       	cpi	r18, 0x01	; 1
     8e0:	21 f0       	breq	.+8      	; 0x8ea <gfx_mono_generic_draw_horizontal_line+0x56>
     8e2:	98 f0       	brcs	.+38     	; 0x90a <gfx_mono_generic_draw_horizontal_line+0x76>
     8e4:	22 30       	cpi	r18, 0x02	; 2
     8e6:	19 f1       	breq	.+70     	; 0x92e <gfx_mono_generic_draw_horizontal_line+0x9a>
     8e8:	31 c0       	rjmp	.+98     	; 0x94c <gfx_mono_generic_draw_horizontal_line+0xb8>
     8ea:	c4 2f       	mov	r28, r20
     8ec:	1f ef       	ldi	r17, 0xFF	; 255
     8ee:	18 0f       	add	r17, r24
     8f0:	01 2f       	mov	r16, r17
     8f2:	0c 0f       	add	r16, r28
     8f4:	60 2f       	mov	r22, r16
     8f6:	8d 2f       	mov	r24, r29
     8f8:	aa df       	rcall	.-172    	; 0x84e <gfx_mono_st7565r_get_byte>
     8fa:	4f 2d       	mov	r20, r15
     8fc:	48 2b       	or	r20, r24
     8fe:	60 2f       	mov	r22, r16
     900:	8d 2f       	mov	r24, r29
     902:	bc de       	rcall	.-648    	; 0x67c <gfx_mono_st7565r_put_byte>
     904:	c1 50       	subi	r28, 0x01	; 1
     906:	a1 f7       	brne	.-24     	; 0x8f0 <gfx_mono_generic_draw_horizontal_line+0x5c>
     908:	21 c0       	rjmp	.+66     	; 0x94c <gfx_mono_generic_draw_horizontal_line+0xb8>
     90a:	c4 2f       	mov	r28, r20
     90c:	1f ef       	ldi	r17, 0xFF	; 255
     90e:	18 0f       	add	r17, r24
     910:	fa 2e       	mov	r15, r26
     912:	f0 94       	com	r15
     914:	01 2f       	mov	r16, r17
     916:	0c 0f       	add	r16, r28
     918:	60 2f       	mov	r22, r16
     91a:	8d 2f       	mov	r24, r29
     91c:	98 df       	rcall	.-208    	; 0x84e <gfx_mono_st7565r_get_byte>
     91e:	4f 2d       	mov	r20, r15
     920:	48 23       	and	r20, r24
     922:	60 2f       	mov	r22, r16
     924:	8d 2f       	mov	r24, r29
     926:	aa de       	rcall	.-684    	; 0x67c <gfx_mono_st7565r_put_byte>
     928:	c1 50       	subi	r28, 0x01	; 1
     92a:	a1 f7       	brne	.-24     	; 0x914 <gfx_mono_generic_draw_horizontal_line+0x80>
     92c:	0f c0       	rjmp	.+30     	; 0x94c <gfx_mono_generic_draw_horizontal_line+0xb8>
     92e:	c4 2f       	mov	r28, r20
     930:	1f ef       	ldi	r17, 0xFF	; 255
     932:	18 0f       	add	r17, r24
     934:	01 2f       	mov	r16, r17
     936:	0c 0f       	add	r16, r28
     938:	60 2f       	mov	r22, r16
     93a:	8d 2f       	mov	r24, r29
     93c:	88 df       	rcall	.-240    	; 0x84e <gfx_mono_st7565r_get_byte>
     93e:	4f 2d       	mov	r20, r15
     940:	48 27       	eor	r20, r24
     942:	60 2f       	mov	r22, r16
     944:	8d 2f       	mov	r24, r29
     946:	9a de       	rcall	.-716    	; 0x67c <gfx_mono_st7565r_put_byte>
     948:	c1 50       	subi	r28, 0x01	; 1
     94a:	a1 f7       	brne	.-24     	; 0x934 <gfx_mono_generic_draw_horizontal_line+0xa0>
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	08 95       	ret

00000958 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
	if (height == 0) {
     962:	22 23       	and	r18, r18
     964:	69 f0       	breq	.+26     	; 0x980 <gfx_mono_generic_draw_filled_rect+0x28>
     966:	f4 2e       	mov	r15, r20
     968:	18 2f       	mov	r17, r24
     96a:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     96c:	df ef       	ldi	r29, 0xFF	; 255
     96e:	d6 0f       	add	r29, r22
     970:	6d 2f       	mov	r22, r29
     972:	6c 0f       	add	r22, r28
     974:	20 2f       	mov	r18, r16
     976:	4f 2d       	mov	r20, r15
     978:	81 2f       	mov	r24, r17
     97a:	8c df       	rcall	.-232    	; 0x894 <gfx_mono_generic_draw_horizontal_line>
     97c:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     97e:	c1 f7       	brne	.-16     	; 0x970 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	08 95       	ret

0000098c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     996:	c6 2f       	mov	r28, r22
     998:	d0 e0       	ldi	r29, 0x00	; 0
     99a:	de 01       	movw	r26, r28
     99c:	02 2e       	mov	r0, r18
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <ioport_configure_port_pin+0x18>
     9a0:	b5 95       	asr	r27
     9a2:	a7 95       	ror	r26
     9a4:	0a 94       	dec	r0
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <ioport_configure_port_pin+0x14>
     9a8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     9aa:	50 8b       	std	Z+16, r21	; 0x10
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     9b2:	28 30       	cpi	r18, 0x08	; 8
     9b4:	31 05       	cpc	r19, r1
     9b6:	89 f7       	brne	.-30     	; 0x99a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     9b8:	40 ff       	sbrs	r20, 0
     9ba:	0a c0       	rjmp	.+20     	; 0x9d0 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     9bc:	41 ff       	sbrs	r20, 1
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     9c0:	fc 01       	movw	r30, r24
     9c2:	65 83       	std	Z+5, r22	; 0x05
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     9c6:	fc 01       	movw	r30, r24
     9c8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     9ca:	fc 01       	movw	r30, r24
     9cc:	61 83       	std	Z+1, r22	; 0x01
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     9d0:	fc 01       	movw	r30, r24
     9d2:	62 83       	std	Z+2, r22	; 0x02
	}
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     9da:	80 3a       	cpi	r24, 0xA0	; 160
     9dc:	28 e0       	ldi	r18, 0x08	; 8
     9de:	92 07       	cpc	r25, r18
     9e0:	21 f4       	brne	.+8      	; 0x9ea <usart_spi_init+0x10>
     9e2:	60 e1       	ldi	r22, 0x10	; 16
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	34 ce       	rjmp	.-920    	; 0x650 <sysclk_enable_module>
     9e8:	08 95       	ret
     9ea:	80 3b       	cpi	r24, 0xB0	; 176
     9ec:	28 e0       	ldi	r18, 0x08	; 8
     9ee:	92 07       	cpc	r25, r18
     9f0:	21 f4       	brne	.+8      	; 0x9fa <usart_spi_init+0x20>
     9f2:	60 e2       	ldi	r22, 0x20	; 32
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	2c ce       	rjmp	.-936    	; 0x650 <sysclk_enable_module>
     9f8:	08 95       	ret
     9fa:	80 3a       	cpi	r24, 0xA0	; 160
     9fc:	29 e0       	ldi	r18, 0x09	; 9
     9fe:	92 07       	cpc	r25, r18
     a00:	21 f4       	brne	.+8      	; 0xa0a <usart_spi_init+0x30>
     a02:	60 e1       	ldi	r22, 0x10	; 16
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	24 ce       	rjmp	.-952    	; 0x650 <sysclk_enable_module>
     a08:	08 95       	ret
     a0a:	80 3b       	cpi	r24, 0xB0	; 176
     a0c:	29 e0       	ldi	r18, 0x09	; 9
     a0e:	92 07       	cpc	r25, r18
     a10:	21 f4       	brne	.+8      	; 0xa1a <usart_spi_init+0x40>
     a12:	60 e2       	ldi	r22, 0x20	; 32
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	1c ce       	rjmp	.-968    	; 0x650 <sysclk_enable_module>
     a18:	08 95       	ret
     a1a:	80 3a       	cpi	r24, 0xA0	; 160
     a1c:	2a e0       	ldi	r18, 0x0A	; 10
     a1e:	92 07       	cpc	r25, r18
     a20:	21 f4       	brne	.+8      	; 0xa2a <usart_spi_init+0x50>
     a22:	60 e1       	ldi	r22, 0x10	; 16
     a24:	85 e0       	ldi	r24, 0x05	; 5
     a26:	14 ce       	rjmp	.-984    	; 0x650 <sysclk_enable_module>
     a28:	08 95       	ret
     a2a:	80 3a       	cpi	r24, 0xA0	; 160
     a2c:	9b 40       	sbci	r25, 0x0B	; 11
     a2e:	19 f4       	brne	.+6      	; 0xa36 <usart_spi_init+0x5c>
     a30:	60 e1       	ldi	r22, 0x10	; 16
     a32:	86 e0       	ldi	r24, 0x06	; 6
     a34:	0d ce       	rjmp	.-998    	; 0x650 <sysclk_enable_module>
     a36:	08 95       	ret

00000a38 <usart_spi_setup_device>:
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	00 d0       	rcall	.+0      	; 0xa42 <usart_spi_setup_device+0xa>
     a42:	00 d0       	rcall	.+0      	; 0xa44 <usart_spi_setup_device+0xc>
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	09 83       	std	Y+1, r16	; 0x01
     a4a:	1a 83       	std	Y+2, r17	; 0x02
     a4c:	2b 83       	std	Y+3, r18	; 0x03
     a4e:	3c 83       	std	Y+4, r19	; 0x04
     a50:	4d 83       	std	Y+5, r20	; 0x05
     a52:	1e 82       	std	Y+6, r1	; 0x06
     a54:	be 01       	movw	r22, r28
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	cb d7       	rcall	.+3990   	; 0x19f2 <usart_init_spi>
     a5c:	26 96       	adiw	r28, 0x06	; 6
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     a6c:	fb 01       	movw	r30, r22
     a6e:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     a70:	e8 2f       	mov	r30, r24
     a72:	e6 95       	lsr	r30
     a74:	e6 95       	lsr	r30
     a76:	e6 95       	lsr	r30
     a78:	40 e2       	ldi	r20, 0x20	; 32
     a7a:	e4 9f       	mul	r30, r20
     a7c:	f0 01       	movw	r30, r0
     a7e:	11 24       	eor	r1, r1
     a80:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     a82:	87 70       	andi	r24, 0x07	; 7
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	a9 01       	movw	r20, r18
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <usart_spi_select_device+0x24>
     a8c:	44 0f       	add	r20, r20
     a8e:	55 1f       	adc	r21, r21
     a90:	8a 95       	dec	r24
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     a94:	46 83       	std	Z+6, r20	; 0x06
     a96:	08 95       	ret

00000a98 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     a98:	fb 01       	movw	r30, r22
     a9a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     a9c:	e8 2f       	mov	r30, r24
     a9e:	e6 95       	lsr	r30
     aa0:	e6 95       	lsr	r30
     aa2:	e6 95       	lsr	r30
     aa4:	40 e2       	ldi	r20, 0x20	; 32
     aa6:	e4 9f       	mul	r30, r20
     aa8:	f0 01       	movw	r30, r0
     aaa:	11 24       	eor	r1, r1
     aac:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     aae:	87 70       	andi	r24, 0x07	; 7
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	a9 01       	movw	r20, r18
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <usart_spi_deselect_device+0x24>
     ab8:	44 0f       	add	r20, r20
     aba:	55 1f       	adc	r21, r21
     abc:	8a 95       	dec	r24
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     ac0:	45 83       	std	Z+5, r20	; 0x05
     ac2:	08 95       	ret

00000ac4 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     ac4:	43 e0       	ldi	r20, 0x03	; 3
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	80 ee       	ldi	r24, 0xE0	; 224
     acc:	97 e0       	ldi	r25, 0x07	; 7
     ace:	5e df       	rcall	.-324    	; 0x98c <ioport_configure_port_pin>
     ad0:	43 e0       	ldi	r20, 0x03	; 3
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	62 e0       	ldi	r22, 0x02	; 2
     ad6:	80 ee       	ldi	r24, 0xE0	; 224
     ad8:	97 e0       	ldi	r25, 0x07	; 7
     ada:	58 df       	rcall	.-336    	; 0x98c <ioport_configure_port_pin>
     adc:	43 e0       	ldi	r20, 0x03	; 3
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	60 e1       	ldi	r22, 0x10	; 16
     ae2:	80 e6       	ldi	r24, 0x60	; 96
     ae4:	96 e0       	ldi	r25, 0x06	; 6
     ae6:	52 df       	rcall	.-348    	; 0x98c <ioport_configure_port_pin>
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	50 e4       	ldi	r21, 0x40	; 64
     aec:	60 e2       	ldi	r22, 0x20	; 32
     aee:	80 e6       	ldi	r24, 0x60	; 96
     af0:	96 e0       	ldi	r25, 0x06	; 6
     af2:	4c df       	rcall	.-360    	; 0x98c <ioport_configure_port_pin>
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	5b e1       	ldi	r21, 0x1B	; 27
     af8:	60 e2       	ldi	r22, 0x20	; 32
     afa:	80 e8       	ldi	r24, 0x80	; 128
     afc:	96 e0       	ldi	r25, 0x06	; 6
     afe:	46 df       	rcall	.-372    	; 0x98c <ioport_configure_port_pin>
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	5b e1       	ldi	r21, 0x1B	; 27
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	80 ea       	ldi	r24, 0xA0	; 160
     b08:	96 e0       	ldi	r25, 0x06	; 6
     b0a:	40 df       	rcall	.-384    	; 0x98c <ioport_configure_port_pin>
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	5b e1       	ldi	r21, 0x1B	; 27
     b10:	64 e0       	ldi	r22, 0x04	; 4
     b12:	80 ea       	ldi	r24, 0xA0	; 160
     b14:	96 e0       	ldi	r25, 0x06	; 6
     b16:	3a df       	rcall	.-396    	; 0x98c <ioport_configure_port_pin>
     b18:	43 e0       	ldi	r20, 0x03	; 3
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	62 e0       	ldi	r22, 0x02	; 2
     b1e:	80 e6       	ldi	r24, 0x60	; 96
     b20:	96 e0       	ldi	r25, 0x06	; 6
     b22:	34 df       	rcall	.-408    	; 0x98c <ioport_configure_port_pin>
     b24:	43 e0       	ldi	r20, 0x03	; 3
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	68 e0       	ldi	r22, 0x08	; 8
     b2a:	80 e6       	ldi	r24, 0x60	; 96
     b2c:	96 e0       	ldi	r25, 0x06	; 6
     b2e:	2e df       	rcall	.-420    	; 0x98c <ioport_configure_port_pin>
     b30:	43 e0       	ldi	r20, 0x03	; 3
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	68 e0       	ldi	r22, 0x08	; 8
     b36:	80 ea       	ldi	r24, 0xA0	; 160
     b38:	96 e0       	ldi	r25, 0x06	; 6
     b3a:	28 df       	rcall	.-432    	; 0x98c <ioport_configure_port_pin>
     b3c:	43 e0       	ldi	r20, 0x03	; 3
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	80 e6       	ldi	r24, 0x60	; 96
     b44:	96 e0       	ldi	r25, 0x06	; 6
     b46:	22 df       	rcall	.-444    	; 0x98c <ioport_configure_port_pin>
     b48:	43 e0       	ldi	r20, 0x03	; 3
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	68 e0       	ldi	r22, 0x08	; 8
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	96 e0       	ldi	r25, 0x06	; 6
     b52:	1c df       	rcall	.-456    	; 0x98c <ioport_configure_port_pin>
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e1       	ldi	r22, 0x10	; 16
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	96 e0       	ldi	r25, 0x06	; 6
     b5e:	16 cf       	rjmp	.-468    	; 0x98c <ioport_configure_port_pin>
     b60:	08 95       	ret

00000b62 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     b62:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     b64:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     b66:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     b68:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     b6a:	60 83       	st	Z, r22
	ret                             // Return to caller
     b6c:	08 95       	ret

00000b6e <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	0b b6       	in	r0, 0x3b	; 59
     b7a:	0f 92       	push	r0
     b7c:	2f 93       	push	r18
     b7e:	3f 93       	push	r19
     b80:	4f 93       	push	r20
     b82:	5f 93       	push	r21
     b84:	6f 93       	push	r22
     b86:	7f 93       	push	r23
     b88:	8f 93       	push	r24
     b8a:	9f 93       	push	r25
     b8c:	af 93       	push	r26
     b8e:	bf 93       	push	r27
     b90:	ef 93       	push	r30
     b92:	ff 93       	push	r31
     b94:	e0 91 4c 22 	lds	r30, 0x224C	; 0x80224c <tc_tcc0_ovf_callback>
     b98:	f0 91 4d 22 	lds	r31, 0x224D	; 0x80224d <tc_tcc0_ovf_callback+0x1>
     b9c:	30 97       	sbiw	r30, 0x00	; 0
     b9e:	09 f0       	breq	.+2      	; 0xba2 <__vector_14+0x34>
     ba0:	19 95       	eicall
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0b be       	out	0x3b, r0	; 59
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	0f 90       	pop	r0
     bc4:	1f 90       	pop	r1
     bc6:	18 95       	reti

00000bc8 <__vector_15>:
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	0b b6       	in	r0, 0x3b	; 59
     bd4:	0f 92       	push	r0
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	4f 93       	push	r20
     bdc:	5f 93       	push	r21
     bde:	6f 93       	push	r22
     be0:	7f 93       	push	r23
     be2:	8f 93       	push	r24
     be4:	9f 93       	push	r25
     be6:	af 93       	push	r26
     be8:	bf 93       	push	r27
     bea:	ef 93       	push	r30
     bec:	ff 93       	push	r31
     bee:	e0 91 4a 22 	lds	r30, 0x224A	; 0x80224a <tc_tcc0_err_callback>
     bf2:	f0 91 4b 22 	lds	r31, 0x224B	; 0x80224b <tc_tcc0_err_callback+0x1>
     bf6:	30 97       	sbiw	r30, 0x00	; 0
     bf8:	09 f0       	breq	.+2      	; 0xbfc <__vector_15+0x34>
     bfa:	19 95       	eicall
     bfc:	ff 91       	pop	r31
     bfe:	ef 91       	pop	r30
     c00:	bf 91       	pop	r27
     c02:	af 91       	pop	r26
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	7f 91       	pop	r23
     c0a:	6f 91       	pop	r22
     c0c:	5f 91       	pop	r21
     c0e:	4f 91       	pop	r20
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	0f 90       	pop	r0
     c16:	0b be       	out	0x3b, r0	; 59
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <__vector_16>:
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	0b b6       	in	r0, 0x3b	; 59
     c2e:	0f 92       	push	r0
     c30:	2f 93       	push	r18
     c32:	3f 93       	push	r19
     c34:	4f 93       	push	r20
     c36:	5f 93       	push	r21
     c38:	6f 93       	push	r22
     c3a:	7f 93       	push	r23
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	af 93       	push	r26
     c42:	bf 93       	push	r27
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
     c48:	e0 91 48 22 	lds	r30, 0x2248	; 0x802248 <tc_tcc0_cca_callback>
     c4c:	f0 91 49 22 	lds	r31, 0x2249	; 0x802249 <tc_tcc0_cca_callback+0x1>
     c50:	30 97       	sbiw	r30, 0x00	; 0
     c52:	09 f0       	breq	.+2      	; 0xc56 <__vector_16+0x34>
     c54:	19 95       	eicall
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0b be       	out	0x3b, r0	; 59
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <__vector_17>:
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	0b b6       	in	r0, 0x3b	; 59
     c88:	0f 92       	push	r0
     c8a:	2f 93       	push	r18
     c8c:	3f 93       	push	r19
     c8e:	4f 93       	push	r20
     c90:	5f 93       	push	r21
     c92:	6f 93       	push	r22
     c94:	7f 93       	push	r23
     c96:	8f 93       	push	r24
     c98:	9f 93       	push	r25
     c9a:	af 93       	push	r26
     c9c:	bf 93       	push	r27
     c9e:	ef 93       	push	r30
     ca0:	ff 93       	push	r31
     ca2:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <tc_tcc0_ccb_callback>
     ca6:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <tc_tcc0_ccb_callback+0x1>
     caa:	30 97       	sbiw	r30, 0x00	; 0
     cac:	09 f0       	breq	.+2      	; 0xcb0 <__vector_17+0x34>
     cae:	19 95       	eicall
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	7f 91       	pop	r23
     cbe:	6f 91       	pop	r22
     cc0:	5f 91       	pop	r21
     cc2:	4f 91       	pop	r20
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0b be       	out	0x3b, r0	; 59
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <__vector_18>:
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	0b b6       	in	r0, 0x3b	; 59
     ce2:	0f 92       	push	r0
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
     cfc:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <tc_tcc0_ccc_callback>
     d00:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <tc_tcc0_ccc_callback+0x1>
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	09 f0       	breq	.+2      	; 0xd0a <__vector_18+0x34>
     d08:	19 95       	eicall
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0b be       	out	0x3b, r0	; 59
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <__vector_19>:
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	0b b6       	in	r0, 0x3b	; 59
     d3c:	0f 92       	push	r0
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
     d56:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <tc_tcc0_ccd_callback>
     d5a:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <tc_tcc0_ccd_callback+0x1>
     d5e:	30 97       	sbiw	r30, 0x00	; 0
     d60:	09 f0       	breq	.+2      	; 0xd64 <__vector_19+0x34>
     d62:	19 95       	eicall
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	7f 91       	pop	r23
     d72:	6f 91       	pop	r22
     d74:	5f 91       	pop	r21
     d76:	4f 91       	pop	r20
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	0f 90       	pop	r0
     d7e:	0b be       	out	0x3b, r0	; 59
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	0f 90       	pop	r0
     d86:	1f 90       	pop	r1
     d88:	18 95       	reti

00000d8a <__vector_20>:
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	0b b6       	in	r0, 0x3b	; 59
     d96:	0f 92       	push	r0
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
     db0:	e0 91 40 22 	lds	r30, 0x2240	; 0x802240 <tc_tcc1_ovf_callback>
     db4:	f0 91 41 22 	lds	r31, 0x2241	; 0x802241 <tc_tcc1_ovf_callback+0x1>
     db8:	30 97       	sbiw	r30, 0x00	; 0
     dba:	09 f0       	breq	.+2      	; 0xdbe <__vector_20+0x34>
     dbc:	19 95       	eicall
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0b be       	out	0x3b, r0	; 59
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <__vector_21>:
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	0b b6       	in	r0, 0x3b	; 59
     df0:	0f 92       	push	r0
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
     e0a:	e0 91 3e 22 	lds	r30, 0x223E	; 0x80223e <tc_tcc1_err_callback>
     e0e:	f0 91 3f 22 	lds	r31, 0x223F	; 0x80223f <tc_tcc1_err_callback+0x1>
     e12:	30 97       	sbiw	r30, 0x00	; 0
     e14:	09 f0       	breq	.+2      	; 0xe18 <__vector_21+0x34>
     e16:	19 95       	eicall
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0b be       	out	0x3b, r0	; 59
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_22>:
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	0b b6       	in	r0, 0x3b	; 59
     e4a:	0f 92       	push	r0
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
     e64:	e0 91 3c 22 	lds	r30, 0x223C	; 0x80223c <tc_tcc1_cca_callback>
     e68:	f0 91 3d 22 	lds	r31, 0x223D	; 0x80223d <tc_tcc1_cca_callback+0x1>
     e6c:	30 97       	sbiw	r30, 0x00	; 0
     e6e:	09 f0       	breq	.+2      	; 0xe72 <__vector_22+0x34>
     e70:	19 95       	eicall
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0b be       	out	0x3b, r0	; 59
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__vector_23>:
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	0b b6       	in	r0, 0x3b	; 59
     ea4:	0f 92       	push	r0
     ea6:	2f 93       	push	r18
     ea8:	3f 93       	push	r19
     eaa:	4f 93       	push	r20
     eac:	5f 93       	push	r21
     eae:	6f 93       	push	r22
     eb0:	7f 93       	push	r23
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
     eb6:	af 93       	push	r26
     eb8:	bf 93       	push	r27
     eba:	ef 93       	push	r30
     ebc:	ff 93       	push	r31
     ebe:	e0 91 3a 22 	lds	r30, 0x223A	; 0x80223a <tc_tcc1_ccb_callback>
     ec2:	f0 91 3b 22 	lds	r31, 0x223B	; 0x80223b <tc_tcc1_ccb_callback+0x1>
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	09 f0       	breq	.+2      	; 0xecc <__vector_23+0x34>
     eca:	19 95       	eicall
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0b be       	out	0x3b, r0	; 59
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <__vector_77>:
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	0b b6       	in	r0, 0x3b	; 59
     efe:	0f 92       	push	r0
     f00:	2f 93       	push	r18
     f02:	3f 93       	push	r19
     f04:	4f 93       	push	r20
     f06:	5f 93       	push	r21
     f08:	6f 93       	push	r22
     f0a:	7f 93       	push	r23
     f0c:	8f 93       	push	r24
     f0e:	9f 93       	push	r25
     f10:	af 93       	push	r26
     f12:	bf 93       	push	r27
     f14:	ef 93       	push	r30
     f16:	ff 93       	push	r31
     f18:	e0 91 38 22 	lds	r30, 0x2238	; 0x802238 <tc_tcd0_ovf_callback>
     f1c:	f0 91 39 22 	lds	r31, 0x2239	; 0x802239 <tc_tcd0_ovf_callback+0x1>
     f20:	30 97       	sbiw	r30, 0x00	; 0
     f22:	09 f0       	breq	.+2      	; 0xf26 <__vector_77+0x34>
     f24:	19 95       	eicall
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0b be       	out	0x3b, r0	; 59
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_78>:
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	0b b6       	in	r0, 0x3b	; 59
     f58:	0f 92       	push	r0
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	4f 93       	push	r20
     f60:	5f 93       	push	r21
     f62:	6f 93       	push	r22
     f64:	7f 93       	push	r23
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
     f72:	e0 91 36 22 	lds	r30, 0x2236	; 0x802236 <tc_tcd0_err_callback>
     f76:	f0 91 37 22 	lds	r31, 0x2237	; 0x802237 <tc_tcd0_err_callback+0x1>
     f7a:	30 97       	sbiw	r30, 0x00	; 0
     f7c:	09 f0       	breq	.+2      	; 0xf80 <__vector_78+0x34>
     f7e:	19 95       	eicall
     f80:	ff 91       	pop	r31
     f82:	ef 91       	pop	r30
     f84:	bf 91       	pop	r27
     f86:	af 91       	pop	r26
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	7f 91       	pop	r23
     f8e:	6f 91       	pop	r22
     f90:	5f 91       	pop	r21
     f92:	4f 91       	pop	r20
     f94:	3f 91       	pop	r19
     f96:	2f 91       	pop	r18
     f98:	0f 90       	pop	r0
     f9a:	0b be       	out	0x3b, r0	; 59
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	1f 90       	pop	r1
     fa4:	18 95       	reti

00000fa6 <__vector_79>:
     fa6:	1f 92       	push	r1
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	0f 92       	push	r0
     fae:	11 24       	eor	r1, r1
     fb0:	0b b6       	in	r0, 0x3b	; 59
     fb2:	0f 92       	push	r0
     fb4:	2f 93       	push	r18
     fb6:	3f 93       	push	r19
     fb8:	4f 93       	push	r20
     fba:	5f 93       	push	r21
     fbc:	6f 93       	push	r22
     fbe:	7f 93       	push	r23
     fc0:	8f 93       	push	r24
     fc2:	9f 93       	push	r25
     fc4:	af 93       	push	r26
     fc6:	bf 93       	push	r27
     fc8:	ef 93       	push	r30
     fca:	ff 93       	push	r31
     fcc:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <tc_tcd0_cca_callback>
     fd0:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <tc_tcd0_cca_callback+0x1>
     fd4:	30 97       	sbiw	r30, 0x00	; 0
     fd6:	09 f0       	breq	.+2      	; 0xfda <__vector_79+0x34>
     fd8:	19 95       	eicall
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	0f 90       	pop	r0
     ff4:	0b be       	out	0x3b, r0	; 59
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <__vector_80>:
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	0b b6       	in	r0, 0x3b	; 59
    100c:	0f 92       	push	r0
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
    1026:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <tc_tcd0_ccb_callback>
    102a:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <tc_tcd0_ccb_callback+0x1>
    102e:	30 97       	sbiw	r30, 0x00	; 0
    1030:	09 f0       	breq	.+2      	; 0x1034 <__vector_80+0x34>
    1032:	19 95       	eicall
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	bf 91       	pop	r27
    103a:	af 91       	pop	r26
    103c:	9f 91       	pop	r25
    103e:	8f 91       	pop	r24
    1040:	7f 91       	pop	r23
    1042:	6f 91       	pop	r22
    1044:	5f 91       	pop	r21
    1046:	4f 91       	pop	r20
    1048:	3f 91       	pop	r19
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0b be       	out	0x3b, r0	; 59
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <__vector_81>:
    105a:	1f 92       	push	r1
    105c:	0f 92       	push	r0
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	0f 92       	push	r0
    1062:	11 24       	eor	r1, r1
    1064:	0b b6       	in	r0, 0x3b	; 59
    1066:	0f 92       	push	r0
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
    1080:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <tc_tcd0_ccc_callback>
    1084:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <tc_tcd0_ccc_callback+0x1>
    1088:	30 97       	sbiw	r30, 0x00	; 0
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_81+0x34>
    108c:	19 95       	eicall
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0b be       	out	0x3b, r0	; 59
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <__vector_82>:
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	0b b6       	in	r0, 0x3b	; 59
    10c0:	0f 92       	push	r0
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
    10da:	e0 91 2e 22 	lds	r30, 0x222E	; 0x80222e <tc_tcd0_ccd_callback>
    10de:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <tc_tcd0_ccd_callback+0x1>
    10e2:	30 97       	sbiw	r30, 0x00	; 0
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <__vector_82+0x34>
    10e6:	19 95       	eicall
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0b be       	out	0x3b, r0	; 59
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_83>:
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	0b b6       	in	r0, 0x3b	; 59
    111a:	0f 92       	push	r0
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
    1134:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <tc_tcd1_ovf_callback>
    1138:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <tc_tcd1_ovf_callback+0x1>
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	09 f0       	breq	.+2      	; 0x1142 <__vector_83+0x34>
    1140:	19 95       	eicall
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0b be       	out	0x3b, r0	; 59
    115e:	0f 90       	pop	r0
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	0f 90       	pop	r0
    1164:	1f 90       	pop	r1
    1166:	18 95       	reti

00001168 <__vector_84>:
    1168:	1f 92       	push	r1
    116a:	0f 92       	push	r0
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	0f 92       	push	r0
    1170:	11 24       	eor	r1, r1
    1172:	0b b6       	in	r0, 0x3b	; 59
    1174:	0f 92       	push	r0
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
    118e:	e0 91 2a 22 	lds	r30, 0x222A	; 0x80222a <tc_tcd1_err_callback>
    1192:	f0 91 2b 22 	lds	r31, 0x222B	; 0x80222b <tc_tcd1_err_callback+0x1>
    1196:	30 97       	sbiw	r30, 0x00	; 0
    1198:	09 f0       	breq	.+2      	; 0x119c <__vector_84+0x34>
    119a:	19 95       	eicall
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0b be       	out	0x3b, r0	; 59
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <__vector_85>:
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	0b b6       	in	r0, 0x3b	; 59
    11ce:	0f 92       	push	r0
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31
    11e8:	e0 91 28 22 	lds	r30, 0x2228	; 0x802228 <tc_tcd1_cca_callback>
    11ec:	f0 91 29 22 	lds	r31, 0x2229	; 0x802229 <tc_tcd1_cca_callback+0x1>
    11f0:	30 97       	sbiw	r30, 0x00	; 0
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <__vector_85+0x34>
    11f4:	19 95       	eicall
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0b be       	out	0x3b, r0	; 59
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti

0000121c <__vector_86>:
    121c:	1f 92       	push	r1
    121e:	0f 92       	push	r0
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	0f 92       	push	r0
    1224:	11 24       	eor	r1, r1
    1226:	0b b6       	in	r0, 0x3b	; 59
    1228:	0f 92       	push	r0
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	e0 91 26 22 	lds	r30, 0x2226	; 0x802226 <tc_tcd1_ccb_callback>
    1246:	f0 91 27 22 	lds	r31, 0x2227	; 0x802227 <tc_tcd1_ccb_callback+0x1>
    124a:	30 97       	sbiw	r30, 0x00	; 0
    124c:	09 f0       	breq	.+2      	; 0x1250 <__vector_86+0x34>
    124e:	19 95       	eicall
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0b be       	out	0x3b, r0	; 59
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_47>:
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	0b b6       	in	r0, 0x3b	; 59
    1282:	0f 92       	push	r0
    1284:	2f 93       	push	r18
    1286:	3f 93       	push	r19
    1288:	4f 93       	push	r20
    128a:	5f 93       	push	r21
    128c:	6f 93       	push	r22
    128e:	7f 93       	push	r23
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
    1294:	af 93       	push	r26
    1296:	bf 93       	push	r27
    1298:	ef 93       	push	r30
    129a:	ff 93       	push	r31
    129c:	e0 91 24 22 	lds	r30, 0x2224	; 0x802224 <tc_tce0_ovf_callback>
    12a0:	f0 91 25 22 	lds	r31, 0x2225	; 0x802225 <tc_tce0_ovf_callback+0x1>
    12a4:	30 97       	sbiw	r30, 0x00	; 0
    12a6:	09 f0       	breq	.+2      	; 0x12aa <__vector_47+0x34>
    12a8:	19 95       	eicall
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0b be       	out	0x3b, r0	; 59
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_48>:
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	0b b6       	in	r0, 0x3b	; 59
    12dc:	0f 92       	push	r0
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
    12f6:	e0 91 22 22 	lds	r30, 0x2222	; 0x802222 <tc_tce0_err_callback>
    12fa:	f0 91 23 22 	lds	r31, 0x2223	; 0x802223 <tc_tce0_err_callback+0x1>
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	09 f0       	breq	.+2      	; 0x1304 <__vector_48+0x34>
    1302:	19 95       	eicall
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0b be       	out	0x3b, r0	; 59
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <__vector_49>:
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	0b b6       	in	r0, 0x3b	; 59
    1336:	0f 92       	push	r0
    1338:	2f 93       	push	r18
    133a:	3f 93       	push	r19
    133c:	4f 93       	push	r20
    133e:	5f 93       	push	r21
    1340:	6f 93       	push	r22
    1342:	7f 93       	push	r23
    1344:	8f 93       	push	r24
    1346:	9f 93       	push	r25
    1348:	af 93       	push	r26
    134a:	bf 93       	push	r27
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
    1350:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <tc_tce0_cca_callback>
    1354:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <tc_tce0_cca_callback+0x1>
    1358:	30 97       	sbiw	r30, 0x00	; 0
    135a:	09 f0       	breq	.+2      	; 0x135e <__vector_49+0x34>
    135c:	19 95       	eicall
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0b be       	out	0x3b, r0	; 59
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	0f 90       	pop	r0
    1380:	1f 90       	pop	r1
    1382:	18 95       	reti

00001384 <__vector_50>:
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
    138e:	0b b6       	in	r0, 0x3b	; 59
    1390:	0f 92       	push	r0
    1392:	2f 93       	push	r18
    1394:	3f 93       	push	r19
    1396:	4f 93       	push	r20
    1398:	5f 93       	push	r21
    139a:	6f 93       	push	r22
    139c:	7f 93       	push	r23
    139e:	8f 93       	push	r24
    13a0:	9f 93       	push	r25
    13a2:	af 93       	push	r26
    13a4:	bf 93       	push	r27
    13a6:	ef 93       	push	r30
    13a8:	ff 93       	push	r31
    13aa:	e0 91 1e 22 	lds	r30, 0x221E	; 0x80221e <tc_tce0_ccb_callback>
    13ae:	f0 91 1f 22 	lds	r31, 0x221F	; 0x80221f <tc_tce0_ccb_callback+0x1>
    13b2:	30 97       	sbiw	r30, 0x00	; 0
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <__vector_50+0x34>
    13b6:	19 95       	eicall
    13b8:	ff 91       	pop	r31
    13ba:	ef 91       	pop	r30
    13bc:	bf 91       	pop	r27
    13be:	af 91       	pop	r26
    13c0:	9f 91       	pop	r25
    13c2:	8f 91       	pop	r24
    13c4:	7f 91       	pop	r23
    13c6:	6f 91       	pop	r22
    13c8:	5f 91       	pop	r21
    13ca:	4f 91       	pop	r20
    13cc:	3f 91       	pop	r19
    13ce:	2f 91       	pop	r18
    13d0:	0f 90       	pop	r0
    13d2:	0b be       	out	0x3b, r0	; 59
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <__vector_51>:
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	0b b6       	in	r0, 0x3b	; 59
    13ea:	0f 92       	push	r0
    13ec:	2f 93       	push	r18
    13ee:	3f 93       	push	r19
    13f0:	4f 93       	push	r20
    13f2:	5f 93       	push	r21
    13f4:	6f 93       	push	r22
    13f6:	7f 93       	push	r23
    13f8:	8f 93       	push	r24
    13fa:	9f 93       	push	r25
    13fc:	af 93       	push	r26
    13fe:	bf 93       	push	r27
    1400:	ef 93       	push	r30
    1402:	ff 93       	push	r31
    1404:	e0 91 1c 22 	lds	r30, 0x221C	; 0x80221c <tc_tce0_ccc_callback>
    1408:	f0 91 1d 22 	lds	r31, 0x221D	; 0x80221d <tc_tce0_ccc_callback+0x1>
    140c:	30 97       	sbiw	r30, 0x00	; 0
    140e:	09 f0       	breq	.+2      	; 0x1412 <__vector_51+0x34>
    1410:	19 95       	eicall
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	0b be       	out	0x3b, r0	; 59
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	0f 90       	pop	r0
    1434:	1f 90       	pop	r1
    1436:	18 95       	reti

00001438 <__vector_52>:
    1438:	1f 92       	push	r1
    143a:	0f 92       	push	r0
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	0f 92       	push	r0
    1440:	11 24       	eor	r1, r1
    1442:	0b b6       	in	r0, 0x3b	; 59
    1444:	0f 92       	push	r0
    1446:	2f 93       	push	r18
    1448:	3f 93       	push	r19
    144a:	4f 93       	push	r20
    144c:	5f 93       	push	r21
    144e:	6f 93       	push	r22
    1450:	7f 93       	push	r23
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	af 93       	push	r26
    1458:	bf 93       	push	r27
    145a:	ef 93       	push	r30
    145c:	ff 93       	push	r31
    145e:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <tc_tce0_ccd_callback>
    1462:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <tc_tce0_ccd_callback+0x1>
    1466:	30 97       	sbiw	r30, 0x00	; 0
    1468:	09 f0       	breq	.+2      	; 0x146c <__vector_52+0x34>
    146a:	19 95       	eicall
    146c:	ff 91       	pop	r31
    146e:	ef 91       	pop	r30
    1470:	bf 91       	pop	r27
    1472:	af 91       	pop	r26
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	7f 91       	pop	r23
    147a:	6f 91       	pop	r22
    147c:	5f 91       	pop	r21
    147e:	4f 91       	pop	r20
    1480:	3f 91       	pop	r19
    1482:	2f 91       	pop	r18
    1484:	0f 90       	pop	r0
    1486:	0b be       	out	0x3b, r0	; 59
    1488:	0f 90       	pop	r0
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	0f 90       	pop	r0
    148e:	1f 90       	pop	r1
    1490:	18 95       	reti

00001492 <__vector_53>:
    1492:	1f 92       	push	r1
    1494:	0f 92       	push	r0
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	0f 92       	push	r0
    149a:	11 24       	eor	r1, r1
    149c:	0b b6       	in	r0, 0x3b	; 59
    149e:	0f 92       	push	r0
    14a0:	2f 93       	push	r18
    14a2:	3f 93       	push	r19
    14a4:	4f 93       	push	r20
    14a6:	5f 93       	push	r21
    14a8:	6f 93       	push	r22
    14aa:	7f 93       	push	r23
    14ac:	8f 93       	push	r24
    14ae:	9f 93       	push	r25
    14b0:	af 93       	push	r26
    14b2:	bf 93       	push	r27
    14b4:	ef 93       	push	r30
    14b6:	ff 93       	push	r31
    14b8:	e0 91 18 22 	lds	r30, 0x2218	; 0x802218 <tc_tce1_ovf_callback>
    14bc:	f0 91 19 22 	lds	r31, 0x2219	; 0x802219 <tc_tce1_ovf_callback+0x1>
    14c0:	30 97       	sbiw	r30, 0x00	; 0
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <__vector_53+0x34>
    14c4:	19 95       	eicall
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0b be       	out	0x3b, r0	; 59
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti

000014ec <__vector_54>:
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	0b b6       	in	r0, 0x3b	; 59
    14f8:	0f 92       	push	r0
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
    1512:	e0 91 16 22 	lds	r30, 0x2216	; 0x802216 <tc_tce1_err_callback>
    1516:	f0 91 17 22 	lds	r31, 0x2217	; 0x802217 <tc_tce1_err_callback+0x1>
    151a:	30 97       	sbiw	r30, 0x00	; 0
    151c:	09 f0       	breq	.+2      	; 0x1520 <__vector_54+0x34>
    151e:	19 95       	eicall
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0b be       	out	0x3b, r0	; 59
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_55>:
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	0b b6       	in	r0, 0x3b	; 59
    1552:	0f 92       	push	r0
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	4f 93       	push	r20
    155a:	5f 93       	push	r21
    155c:	6f 93       	push	r22
    155e:	7f 93       	push	r23
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	ef 93       	push	r30
    156a:	ff 93       	push	r31
    156c:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <tc_tce1_cca_callback>
    1570:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <tc_tce1_cca_callback+0x1>
    1574:	30 97       	sbiw	r30, 0x00	; 0
    1576:	09 f0       	breq	.+2      	; 0x157a <__vector_55+0x34>
    1578:	19 95       	eicall
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	7f 91       	pop	r23
    1588:	6f 91       	pop	r22
    158a:	5f 91       	pop	r21
    158c:	4f 91       	pop	r20
    158e:	3f 91       	pop	r19
    1590:	2f 91       	pop	r18
    1592:	0f 90       	pop	r0
    1594:	0b be       	out	0x3b, r0	; 59
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__vector_56>:
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	0b b6       	in	r0, 0x3b	; 59
    15ac:	0f 92       	push	r0
    15ae:	2f 93       	push	r18
    15b0:	3f 93       	push	r19
    15b2:	4f 93       	push	r20
    15b4:	5f 93       	push	r21
    15b6:	6f 93       	push	r22
    15b8:	7f 93       	push	r23
    15ba:	8f 93       	push	r24
    15bc:	9f 93       	push	r25
    15be:	af 93       	push	r26
    15c0:	bf 93       	push	r27
    15c2:	ef 93       	push	r30
    15c4:	ff 93       	push	r31
    15c6:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <tc_tce1_ccb_callback>
    15ca:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <tc_tce1_ccb_callback+0x1>
    15ce:	30 97       	sbiw	r30, 0x00	; 0
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <__vector_56+0x34>
    15d2:	19 95       	eicall
    15d4:	ff 91       	pop	r31
    15d6:	ef 91       	pop	r30
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	7f 91       	pop	r23
    15e2:	6f 91       	pop	r22
    15e4:	5f 91       	pop	r21
    15e6:	4f 91       	pop	r20
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	0f 90       	pop	r0
    15ee:	0b be       	out	0x3b, r0	; 59
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <__vector_108>:
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	0b b6       	in	r0, 0x3b	; 59
    1606:	0f 92       	push	r0
    1608:	2f 93       	push	r18
    160a:	3f 93       	push	r19
    160c:	4f 93       	push	r20
    160e:	5f 93       	push	r21
    1610:	6f 93       	push	r22
    1612:	7f 93       	push	r23
    1614:	8f 93       	push	r24
    1616:	9f 93       	push	r25
    1618:	af 93       	push	r26
    161a:	bf 93       	push	r27
    161c:	ef 93       	push	r30
    161e:	ff 93       	push	r31
    1620:	e0 91 10 22 	lds	r30, 0x2210	; 0x802210 <tc_tcf0_ovf_callback>
    1624:	f0 91 11 22 	lds	r31, 0x2211	; 0x802211 <tc_tcf0_ovf_callback+0x1>
    1628:	30 97       	sbiw	r30, 0x00	; 0
    162a:	09 f0       	breq	.+2      	; 0x162e <__vector_108+0x34>
    162c:	19 95       	eicall
    162e:	ff 91       	pop	r31
    1630:	ef 91       	pop	r30
    1632:	bf 91       	pop	r27
    1634:	af 91       	pop	r26
    1636:	9f 91       	pop	r25
    1638:	8f 91       	pop	r24
    163a:	7f 91       	pop	r23
    163c:	6f 91       	pop	r22
    163e:	5f 91       	pop	r21
    1640:	4f 91       	pop	r20
    1642:	3f 91       	pop	r19
    1644:	2f 91       	pop	r18
    1646:	0f 90       	pop	r0
    1648:	0b be       	out	0x3b, r0	; 59
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <__vector_109>:
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	0f 92       	push	r0
    165c:	11 24       	eor	r1, r1
    165e:	0b b6       	in	r0, 0x3b	; 59
    1660:	0f 92       	push	r0
    1662:	2f 93       	push	r18
    1664:	3f 93       	push	r19
    1666:	4f 93       	push	r20
    1668:	5f 93       	push	r21
    166a:	6f 93       	push	r22
    166c:	7f 93       	push	r23
    166e:	8f 93       	push	r24
    1670:	9f 93       	push	r25
    1672:	af 93       	push	r26
    1674:	bf 93       	push	r27
    1676:	ef 93       	push	r30
    1678:	ff 93       	push	r31
    167a:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <tc_tcf0_err_callback>
    167e:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <tc_tcf0_err_callback+0x1>
    1682:	30 97       	sbiw	r30, 0x00	; 0
    1684:	09 f0       	breq	.+2      	; 0x1688 <__vector_109+0x34>
    1686:	19 95       	eicall
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	bf 91       	pop	r27
    168e:	af 91       	pop	r26
    1690:	9f 91       	pop	r25
    1692:	8f 91       	pop	r24
    1694:	7f 91       	pop	r23
    1696:	6f 91       	pop	r22
    1698:	5f 91       	pop	r21
    169a:	4f 91       	pop	r20
    169c:	3f 91       	pop	r19
    169e:	2f 91       	pop	r18
    16a0:	0f 90       	pop	r0
    16a2:	0b be       	out	0x3b, r0	; 59
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_110>:
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	0b b6       	in	r0, 0x3b	; 59
    16ba:	0f 92       	push	r0
    16bc:	2f 93       	push	r18
    16be:	3f 93       	push	r19
    16c0:	4f 93       	push	r20
    16c2:	5f 93       	push	r21
    16c4:	6f 93       	push	r22
    16c6:	7f 93       	push	r23
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	ef 93       	push	r30
    16d2:	ff 93       	push	r31
    16d4:	e0 91 0c 22 	lds	r30, 0x220C	; 0x80220c <tc_tcf0_cca_callback>
    16d8:	f0 91 0d 22 	lds	r31, 0x220D	; 0x80220d <tc_tcf0_cca_callback+0x1>
    16dc:	30 97       	sbiw	r30, 0x00	; 0
    16de:	09 f0       	breq	.+2      	; 0x16e2 <__vector_110+0x34>
    16e0:	19 95       	eicall
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0b be       	out	0x3b, r0	; 59
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	0f 90       	pop	r0
    1704:	1f 90       	pop	r1
    1706:	18 95       	reti

00001708 <__vector_111>:
    1708:	1f 92       	push	r1
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	0b b6       	in	r0, 0x3b	; 59
    1714:	0f 92       	push	r0
    1716:	2f 93       	push	r18
    1718:	3f 93       	push	r19
    171a:	4f 93       	push	r20
    171c:	5f 93       	push	r21
    171e:	6f 93       	push	r22
    1720:	7f 93       	push	r23
    1722:	8f 93       	push	r24
    1724:	9f 93       	push	r25
    1726:	af 93       	push	r26
    1728:	bf 93       	push	r27
    172a:	ef 93       	push	r30
    172c:	ff 93       	push	r31
    172e:	e0 91 0a 22 	lds	r30, 0x220A	; 0x80220a <tc_tcf0_ccb_callback>
    1732:	f0 91 0b 22 	lds	r31, 0x220B	; 0x80220b <tc_tcf0_ccb_callback+0x1>
    1736:	30 97       	sbiw	r30, 0x00	; 0
    1738:	09 f0       	breq	.+2      	; 0x173c <__vector_111+0x34>
    173a:	19 95       	eicall
    173c:	ff 91       	pop	r31
    173e:	ef 91       	pop	r30
    1740:	bf 91       	pop	r27
    1742:	af 91       	pop	r26
    1744:	9f 91       	pop	r25
    1746:	8f 91       	pop	r24
    1748:	7f 91       	pop	r23
    174a:	6f 91       	pop	r22
    174c:	5f 91       	pop	r21
    174e:	4f 91       	pop	r20
    1750:	3f 91       	pop	r19
    1752:	2f 91       	pop	r18
    1754:	0f 90       	pop	r0
    1756:	0b be       	out	0x3b, r0	; 59
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_112>:
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	0b b6       	in	r0, 0x3b	; 59
    176e:	0f 92       	push	r0
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	6f 93       	push	r22
    177a:	7f 93       	push	r23
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
    1780:	af 93       	push	r26
    1782:	bf 93       	push	r27
    1784:	ef 93       	push	r30
    1786:	ff 93       	push	r31
    1788:	e0 91 08 22 	lds	r30, 0x2208	; 0x802208 <tc_tcf0_ccc_callback>
    178c:	f0 91 09 22 	lds	r31, 0x2209	; 0x802209 <tc_tcf0_ccc_callback+0x1>
    1790:	30 97       	sbiw	r30, 0x00	; 0
    1792:	09 f0       	breq	.+2      	; 0x1796 <__vector_112+0x34>
    1794:	19 95       	eicall
    1796:	ff 91       	pop	r31
    1798:	ef 91       	pop	r30
    179a:	bf 91       	pop	r27
    179c:	af 91       	pop	r26
    179e:	9f 91       	pop	r25
    17a0:	8f 91       	pop	r24
    17a2:	7f 91       	pop	r23
    17a4:	6f 91       	pop	r22
    17a6:	5f 91       	pop	r21
    17a8:	4f 91       	pop	r20
    17aa:	3f 91       	pop	r19
    17ac:	2f 91       	pop	r18
    17ae:	0f 90       	pop	r0
    17b0:	0b be       	out	0x3b, r0	; 59
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	0f 90       	pop	r0
    17b8:	1f 90       	pop	r1
    17ba:	18 95       	reti

000017bc <__vector_113>:
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	11 24       	eor	r1, r1
    17c6:	0b b6       	in	r0, 0x3b	; 59
    17c8:	0f 92       	push	r0
    17ca:	2f 93       	push	r18
    17cc:	3f 93       	push	r19
    17ce:	4f 93       	push	r20
    17d0:	5f 93       	push	r21
    17d2:	6f 93       	push	r22
    17d4:	7f 93       	push	r23
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	ef 93       	push	r30
    17e0:	ff 93       	push	r31
    17e2:	e0 91 06 22 	lds	r30, 0x2206	; 0x802206 <tc_tcf0_ccd_callback>
    17e6:	f0 91 07 22 	lds	r31, 0x2207	; 0x802207 <tc_tcf0_ccd_callback+0x1>
    17ea:	30 97       	sbiw	r30, 0x00	; 0
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <__vector_113+0x34>
    17ee:	19 95       	eicall
    17f0:	ff 91       	pop	r31
    17f2:	ef 91       	pop	r30
    17f4:	bf 91       	pop	r27
    17f6:	af 91       	pop	r26
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	7f 91       	pop	r23
    17fe:	6f 91       	pop	r22
    1800:	5f 91       	pop	r21
    1802:	4f 91       	pop	r20
    1804:	3f 91       	pop	r19
    1806:	2f 91       	pop	r18
    1808:	0f 90       	pop	r0
    180a:	0b be       	out	0x3b, r0	; 59
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	0f 90       	pop	r0
    1812:	1f 90       	pop	r1
    1814:	18 95       	reti

00001816 <tc_enable>:
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	1f 92       	push	r1
    181e:	1f 92       	push	r1
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	2f b7       	in	r18, 0x3f	; 63
    1826:	2a 83       	std	Y+2, r18	; 0x02
    1828:	f8 94       	cli
    182a:	1a 81       	ldd	r17, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	39 2f       	mov	r19, r25
    1830:	21 15       	cp	r18, r1
    1832:	88 e0       	ldi	r24, 0x08	; 8
    1834:	38 07       	cpc	r19, r24
    1836:	49 f4       	brne	.+18     	; 0x184a <tc_enable+0x34>
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1840:	64 e0       	ldi	r22, 0x04	; 4
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1848:	4f c0       	rjmp	.+158    	; 0x18e8 <tc_enable+0xd2>
    184a:	20 34       	cpi	r18, 0x40	; 64
    184c:	88 e0       	ldi	r24, 0x08	; 8
    184e:	38 07       	cpc	r19, r24
    1850:	49 f4       	brne	.+18     	; 0x1864 <tc_enable+0x4e>
    1852:	62 e0       	ldi	r22, 0x02	; 2
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    185a:	64 e0       	ldi	r22, 0x04	; 4
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1862:	42 c0       	rjmp	.+132    	; 0x18e8 <tc_enable+0xd2>
    1864:	21 15       	cp	r18, r1
    1866:	89 e0       	ldi	r24, 0x09	; 9
    1868:	38 07       	cpc	r19, r24
    186a:	49 f4       	brne	.+18     	; 0x187e <tc_enable+0x68>
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1874:	64 e0       	ldi	r22, 0x04	; 4
    1876:	84 e0       	ldi	r24, 0x04	; 4
    1878:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    187c:	35 c0       	rjmp	.+106    	; 0x18e8 <tc_enable+0xd2>
    187e:	20 34       	cpi	r18, 0x40	; 64
    1880:	89 e0       	ldi	r24, 0x09	; 9
    1882:	38 07       	cpc	r19, r24
    1884:	49 f4       	brne	.+18     	; 0x1898 <tc_enable+0x82>
    1886:	62 e0       	ldi	r22, 0x02	; 2
    1888:	84 e0       	ldi	r24, 0x04	; 4
    188a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    188e:	64 e0       	ldi	r22, 0x04	; 4
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1896:	28 c0       	rjmp	.+80     	; 0x18e8 <tc_enable+0xd2>
    1898:	21 15       	cp	r18, r1
    189a:	8a e0       	ldi	r24, 0x0A	; 10
    189c:	38 07       	cpc	r19, r24
    189e:	49 f4       	brne	.+18     	; 0x18b2 <tc_enable+0x9c>
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	85 e0       	ldi	r24, 0x05	; 5
    18a4:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    18a8:	64 e0       	ldi	r22, 0x04	; 4
    18aa:	85 e0       	ldi	r24, 0x05	; 5
    18ac:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    18b0:	1b c0       	rjmp	.+54     	; 0x18e8 <tc_enable+0xd2>
    18b2:	20 34       	cpi	r18, 0x40	; 64
    18b4:	8a e0       	ldi	r24, 0x0A	; 10
    18b6:	38 07       	cpc	r19, r24
    18b8:	49 f4       	brne	.+18     	; 0x18cc <tc_enable+0xb6>
    18ba:	62 e0       	ldi	r22, 0x02	; 2
    18bc:	85 e0       	ldi	r24, 0x05	; 5
    18be:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    18c2:	64 e0       	ldi	r22, 0x04	; 4
    18c4:	85 e0       	ldi	r24, 0x05	; 5
    18c6:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    18ca:	0e c0       	rjmp	.+28     	; 0x18e8 <tc_enable+0xd2>
    18cc:	21 15       	cp	r18, r1
    18ce:	3b 40       	sbci	r19, 0x0B	; 11
    18d0:	49 f4       	brne	.+18     	; 0x18e4 <tc_enable+0xce>
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	86 e0       	ldi	r24, 0x06	; 6
    18d6:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    18da:	64 e0       	ldi	r22, 0x04	; 4
    18dc:	86 e0       	ldi	r24, 0x06	; 6
    18de:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <tc_enable+0xd2>
    18e4:	1f bf       	out	0x3f, r17	; 63
    18e6:	10 c0       	rjmp	.+32     	; 0x1908 <tc_enable+0xf2>
    18e8:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <sleepmgr_locks+0x1>
    18ec:	8f 3f       	cpi	r24, 0xFF	; 255
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <tc_enable+0xdc>
    18f0:	ff cf       	rjmp	.-2      	; 0x18f0 <tc_enable+0xda>
    18f2:	8f b7       	in	r24, 0x3f	; 63
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	f8 94       	cli
    18f8:	99 81       	ldd	r25, Y+1	; 0x01
    18fa:	e0 e5       	ldi	r30, 0x50	; 80
    18fc:	f2 e2       	ldi	r31, 0x22	; 34
    18fe:	81 81       	ldd	r24, Z+1	; 0x01
    1900:	8f 5f       	subi	r24, 0xFF	; 255
    1902:	81 83       	std	Z+1, r24	; 0x01
    1904:	9f bf       	out	0x3f, r25	; 63
    1906:	1f bf       	out	0x3f, r17	; 63
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	08 95       	ret

00001914 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1914:	81 15       	cp	r24, r1
    1916:	28 e0       	ldi	r18, 0x08	; 8
    1918:	92 07       	cpc	r25, r18
    191a:	29 f4       	brne	.+10     	; 0x1926 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    191c:	60 93 4c 22 	sts	0x224C, r22	; 0x80224c <tc_tcc0_ovf_callback>
    1920:	70 93 4d 22 	sts	0x224D, r23	; 0x80224d <tc_tcc0_ovf_callback+0x1>
    1924:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1926:	80 34       	cpi	r24, 0x40	; 64
    1928:	28 e0       	ldi	r18, 0x08	; 8
    192a:	92 07       	cpc	r25, r18
    192c:	29 f4       	brne	.+10     	; 0x1938 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    192e:	60 93 40 22 	sts	0x2240, r22	; 0x802240 <tc_tcc1_ovf_callback>
    1932:	70 93 41 22 	sts	0x2241, r23	; 0x802241 <tc_tcc1_ovf_callback+0x1>
    1936:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1938:	81 15       	cp	r24, r1
    193a:	29 e0       	ldi	r18, 0x09	; 9
    193c:	92 07       	cpc	r25, r18
    193e:	29 f4       	brne	.+10     	; 0x194a <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    1940:	60 93 38 22 	sts	0x2238, r22	; 0x802238 <tc_tcd0_ovf_callback>
    1944:	70 93 39 22 	sts	0x2239, r23	; 0x802239 <tc_tcd0_ovf_callback+0x1>
    1948:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    194a:	80 34       	cpi	r24, 0x40	; 64
    194c:	29 e0       	ldi	r18, 0x09	; 9
    194e:	92 07       	cpc	r25, r18
    1950:	29 f4       	brne	.+10     	; 0x195c <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1952:	60 93 2c 22 	sts	0x222C, r22	; 0x80222c <tc_tcd1_ovf_callback>
    1956:	70 93 2d 22 	sts	0x222D, r23	; 0x80222d <tc_tcd1_ovf_callback+0x1>
    195a:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    195c:	81 15       	cp	r24, r1
    195e:	2a e0       	ldi	r18, 0x0A	; 10
    1960:	92 07       	cpc	r25, r18
    1962:	29 f4       	brne	.+10     	; 0x196e <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    1964:	60 93 24 22 	sts	0x2224, r22	; 0x802224 <tc_tce0_ovf_callback>
    1968:	70 93 25 22 	sts	0x2225, r23	; 0x802225 <tc_tce0_ovf_callback+0x1>
    196c:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    196e:	80 34       	cpi	r24, 0x40	; 64
    1970:	2a e0       	ldi	r18, 0x0A	; 10
    1972:	92 07       	cpc	r25, r18
    1974:	29 f4       	brne	.+10     	; 0x1980 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    1976:	60 93 18 22 	sts	0x2218, r22	; 0x802218 <tc_tce1_ovf_callback>
    197a:	70 93 19 22 	sts	0x2219, r23	; 0x802219 <tc_tce1_ovf_callback+0x1>
    197e:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1980:	81 15       	cp	r24, r1
    1982:	9b 40       	sbci	r25, 0x0B	; 11
    1984:	21 f4       	brne	.+8      	; 0x198e <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    1986:	60 93 10 22 	sts	0x2210, r22	; 0x802210 <tc_tcf0_ovf_callback>
    198a:	70 93 11 22 	sts	0x2211, r23	; 0x802211 <tc_tcf0_ovf_callback+0x1>
    198e:	08 95       	ret

00001990 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    19a2:	d9 01       	movw	r26, r18
    19a4:	c8 01       	movw	r24, r16
    19a6:	b6 95       	lsr	r27
    19a8:	a7 95       	ror	r26
    19aa:	97 95       	ror	r25
    19ac:	87 95       	ror	r24
    19ae:	48 17       	cp	r20, r24
    19b0:	59 07       	cpc	r21, r25
    19b2:	6a 07       	cpc	r22, r26
    19b4:	7b 07       	cpc	r23, r27
    19b6:	70 f4       	brcc	.+28     	; 0x19d4 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    19b8:	6a 01       	movw	r12, r20
    19ba:	7b 01       	movw	r14, r22
    19bc:	cc 0c       	add	r12, r12
    19be:	dd 1c       	adc	r13, r13
    19c0:	ee 1c       	adc	r14, r14
    19c2:	ff 1c       	adc	r15, r15
    19c4:	c9 01       	movw	r24, r18
    19c6:	b8 01       	movw	r22, r16
    19c8:	a7 01       	movw	r20, r14
    19ca:	96 01       	movw	r18, r12
    19cc:	68 d2       	rcall	.+1232   	; 0x1e9e <__udivmodsi4>
    19ce:	21 50       	subi	r18, 0x01	; 1
    19d0:	31 09       	sbc	r19, r1
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    19d8:	83 2f       	mov	r24, r19
    19da:	8f 70       	andi	r24, 0x0F	; 15
    19dc:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    19de:	2e 83       	std	Y+6, r18	; 0x06
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	08 95       	ret

000019f2 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	1f 92       	push	r1
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	7c 01       	movw	r14, r24
    1a08:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <usart_init_spi+0x1e>
    1a0e:	cf c1       	rjmp	.+926    	; 0x1dae <usart_init_spi+0x3bc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1a10:	80 3c       	cpi	r24, 0xC0	; 192
    1a12:	91 05       	cpc	r25, r1
    1a14:	29 f4       	brne	.+10     	; 0x1a20 <usart_init_spi+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1a16:	60 e1       	ldi	r22, 0x10	; 16
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a1e:	c7 c1       	rjmp	.+910    	; 0x1dae <usart_init_spi+0x3bc>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1a20:	80 e8       	ldi	r24, 0x80	; 128
    1a22:	e8 16       	cp	r14, r24
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	f8 06       	cpc	r15, r24
    1a28:	29 f4       	brne	.+10     	; 0x1a34 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1a2a:	62 e0       	ldi	r22, 0x02	; 2
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a32:	bd c1       	rjmp	.+890    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1a34:	e1 14       	cp	r14, r1
    1a36:	e1 e0       	ldi	r30, 0x01	; 1
    1a38:	fe 06       	cpc	r15, r30
    1a3a:	29 f4       	brne	.+10     	; 0x1a46 <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a44:	b4 c1       	rjmp	.+872    	; 0x1dae <usart_init_spi+0x3bc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1a46:	f0 e8       	ldi	r31, 0x80	; 128
    1a48:	ef 16       	cp	r14, r31
    1a4a:	f3 e0       	ldi	r31, 0x03	; 3
    1a4c:	ff 06       	cpc	r15, r31
    1a4e:	29 f4       	brne	.+10     	; 0x1a5a <usart_init_spi+0x68>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a58:	aa c1       	rjmp	.+852    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1a5a:	30 e9       	ldi	r19, 0x90	; 144
    1a5c:	e3 16       	cp	r14, r19
    1a5e:	33 e0       	ldi	r19, 0x03	; 3
    1a60:	f3 06       	cpc	r15, r19
    1a62:	29 f4       	brne	.+10     	; 0x1a6e <usart_init_spi+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a6c:	a0 c1       	rjmp	.+832    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1a6e:	e1 14       	cp	r14, r1
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	f8 06       	cpc	r15, r24
    1a74:	29 f4       	brne	.+10     	; 0x1a80 <usart_init_spi+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1a76:	62 e0       	ldi	r22, 0x02	; 2
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a7e:	97 c1       	rjmp	.+814    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1a80:	e0 e4       	ldi	r30, 0x40	; 64
    1a82:	ee 16       	cp	r14, r30
    1a84:	e2 e0       	ldi	r30, 0x02	; 2
    1a86:	fe 06       	cpc	r15, r30
    1a88:	29 f4       	brne	.+10     	; 0x1a94 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1a8a:	62 e0       	ldi	r22, 0x02	; 2
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a92:	8d c1       	rjmp	.+794    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1a94:	f0 e2       	ldi	r31, 0x20	; 32
    1a96:	ef 16       	cp	r14, r31
    1a98:	f3 e0       	ldi	r31, 0x03	; 3
    1a9a:	ff 06       	cpc	r15, r31
    1a9c:	29 f4       	brne	.+10     	; 0x1aa8 <usart_init_spi+0xb6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1a9e:	64 e0       	ldi	r22, 0x04	; 4
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1aa6:	83 c1       	rjmp	.+774    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1aa8:	e1 14       	cp	r14, r1
    1aaa:	38 e0       	ldi	r19, 0x08	; 8
    1aac:	f3 06       	cpc	r15, r19
    1aae:	29 f4       	brne	.+10     	; 0x1aba <usart_init_spi+0xc8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1ab8:	7a c1       	rjmp	.+756    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1aba:	e1 14       	cp	r14, r1
    1abc:	89 e0       	ldi	r24, 0x09	; 9
    1abe:	f8 06       	cpc	r15, r24
    1ac0:	29 f4       	brne	.+10     	; 0x1acc <usart_init_spi+0xda>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1ac2:	61 e0       	ldi	r22, 0x01	; 1
    1ac4:	84 e0       	ldi	r24, 0x04	; 4
    1ac6:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1aca:	71 c1       	rjmp	.+738    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1acc:	e1 14       	cp	r14, r1
    1ace:	ea e0       	ldi	r30, 0x0A	; 10
    1ad0:	fe 06       	cpc	r15, r30
    1ad2:	29 f4       	brne	.+10     	; 0x1ade <usart_init_spi+0xec>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	85 e0       	ldi	r24, 0x05	; 5
    1ad8:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1adc:	68 c1       	rjmp	.+720    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1ade:	e1 14       	cp	r14, r1
    1ae0:	fb e0       	ldi	r31, 0x0B	; 11
    1ae2:	ff 06       	cpc	r15, r31
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <usart_init_spi+0xfe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	86 e0       	ldi	r24, 0x06	; 6
    1aea:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1aee:	5f c1       	rjmp	.+702    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1af0:	30 e4       	ldi	r19, 0x40	; 64
    1af2:	e3 16       	cp	r14, r19
    1af4:	38 e0       	ldi	r19, 0x08	; 8
    1af6:	f3 06       	cpc	r15, r19
    1af8:	29 f4       	brne	.+10     	; 0x1b04 <usart_init_spi+0x112>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1afa:	62 e0       	ldi	r22, 0x02	; 2
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1b02:	55 c1       	rjmp	.+682    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1b04:	80 e4       	ldi	r24, 0x40	; 64
    1b06:	e8 16       	cp	r14, r24
    1b08:	89 e0       	ldi	r24, 0x09	; 9
    1b0a:	f8 06       	cpc	r15, r24
    1b0c:	29 f4       	brne	.+10     	; 0x1b18 <usart_init_spi+0x126>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b0e:	62 e0       	ldi	r22, 0x02	; 2
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1b16:	4b c1       	rjmp	.+662    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1b18:	e0 e4       	ldi	r30, 0x40	; 64
    1b1a:	ee 16       	cp	r14, r30
    1b1c:	ea e0       	ldi	r30, 0x0A	; 10
    1b1e:	fe 06       	cpc	r15, r30
    1b20:	29 f4       	brne	.+10     	; 0x1b2c <usart_init_spi+0x13a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1b22:	62 e0       	ldi	r22, 0x02	; 2
    1b24:	85 e0       	ldi	r24, 0x05	; 5
    1b26:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1b2a:	41 c1       	rjmp	.+642    	; 0x1dae <usart_init_spi+0x3bc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1b2c:	f0 e9       	ldi	r31, 0x90	; 144
    1b2e:	ef 16       	cp	r14, r31
    1b30:	f8 e0       	ldi	r31, 0x08	; 8
    1b32:	ff 06       	cpc	r15, r31
    1b34:	29 f4       	brne	.+10     	; 0x1b40 <usart_init_spi+0x14e>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b36:	64 e0       	ldi	r22, 0x04	; 4
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1b3e:	37 c1       	rjmp	.+622    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1b40:	30 e9       	ldi	r19, 0x90	; 144
    1b42:	e3 16       	cp	r14, r19
    1b44:	39 e0       	ldi	r19, 0x09	; 9
    1b46:	f3 06       	cpc	r15, r19
    1b48:	29 f4       	brne	.+10     	; 0x1b54 <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b4a:	64 e0       	ldi	r22, 0x04	; 4
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1b52:	2d c1       	rjmp	.+602    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1b54:	80 e9       	ldi	r24, 0x90	; 144
    1b56:	e8 16       	cp	r14, r24
    1b58:	8a e0       	ldi	r24, 0x0A	; 10
    1b5a:	f8 06       	cpc	r15, r24
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <usart_init_spi+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b5e:	64 e0       	ldi	r22, 0x04	; 4
    1b60:	85 e0       	ldi	r24, 0x05	; 5
    1b62:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1b66:	23 c1       	rjmp	.+582    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1b68:	e0 e9       	ldi	r30, 0x90	; 144
    1b6a:	ee 16       	cp	r14, r30
    1b6c:	eb e0       	ldi	r30, 0x0B	; 11
    1b6e:	fe 06       	cpc	r15, r30
    1b70:	29 f4       	brne	.+10     	; 0x1b7c <usart_init_spi+0x18a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b72:	64 e0       	ldi	r22, 0x04	; 4
    1b74:	86 e0       	ldi	r24, 0x06	; 6
    1b76:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1b7a:	19 c1       	rjmp	.+562    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1b7c:	f0 ec       	ldi	r31, 0xC0	; 192
    1b7e:	ef 16       	cp	r14, r31
    1b80:	f8 e0       	ldi	r31, 0x08	; 8
    1b82:	ff 06       	cpc	r15, r31
    1b84:	29 f4       	brne	.+10     	; 0x1b90 <usart_init_spi+0x19e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1b86:	68 e0       	ldi	r22, 0x08	; 8
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1b8e:	0f c1       	rjmp	.+542    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1b90:	30 ec       	ldi	r19, 0xC0	; 192
    1b92:	e3 16       	cp	r14, r19
    1b94:	39 e0       	ldi	r19, 0x09	; 9
    1b96:	f3 06       	cpc	r15, r19
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1b9a:	68 e0       	ldi	r22, 0x08	; 8
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
    1b9e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1ba2:	05 c1       	rjmp	.+522    	; 0x1dae <usart_init_spi+0x3bc>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1ba4:	80 ea       	ldi	r24, 0xA0	; 160
    1ba6:	e8 16       	cp	r14, r24
    1ba8:	88 e0       	ldi	r24, 0x08	; 8
    1baa:	f8 06       	cpc	r15, r24
    1bac:	69 f4       	brne	.+26     	; 0x1bc8 <usart_init_spi+0x1d6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1bae:	60 e1       	ldi	r22, 0x10	; 16
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1bb6:	e0 ea       	ldi	r30, 0xA0	; 160
    1bb8:	f8 e0       	ldi	r31, 0x08	; 8
    1bba:	84 81       	ldd	r24, Z+4	; 0x04
    1bbc:	8f 7e       	andi	r24, 0xEF	; 239
    1bbe:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	24 81       	ldd	r18, Z+4	; 0x04
    1bc4:	22 50       	subi	r18, 0x02	; 2
    1bc6:	53 c0       	rjmp	.+166    	; 0x1c6e <usart_init_spi+0x27c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1bc8:	f0 ea       	ldi	r31, 0xA0	; 160
    1bca:	ef 16       	cp	r14, r31
    1bcc:	f9 e0       	ldi	r31, 0x09	; 9
    1bce:	ff 06       	cpc	r15, r31
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <usart_init_spi+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1bd2:	60 e1       	ldi	r22, 0x10	; 16
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1bda:	e9 c0       	rjmp	.+466    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1bdc:	30 ea       	ldi	r19, 0xA0	; 160
    1bde:	e3 16       	cp	r14, r19
    1be0:	3a e0       	ldi	r19, 0x0A	; 10
    1be2:	f3 06       	cpc	r15, r19
    1be4:	29 f4       	brne	.+10     	; 0x1bf0 <usart_init_spi+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1be6:	60 e1       	ldi	r22, 0x10	; 16
    1be8:	85 e0       	ldi	r24, 0x05	; 5
    1bea:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1bee:	df c0       	rjmp	.+446    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1bf0:	80 ea       	ldi	r24, 0xA0	; 160
    1bf2:	e8 16       	cp	r14, r24
    1bf4:	8b e0       	ldi	r24, 0x0B	; 11
    1bf6:	f8 06       	cpc	r15, r24
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <usart_init_spi+0x212>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1bfa:	60 e1       	ldi	r22, 0x10	; 16
    1bfc:	86 e0       	ldi	r24, 0x06	; 6
    1bfe:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c02:	d5 c0       	rjmp	.+426    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1c04:	e0 eb       	ldi	r30, 0xB0	; 176
    1c06:	ee 16       	cp	r14, r30
    1c08:	e8 e0       	ldi	r30, 0x08	; 8
    1c0a:	fe 06       	cpc	r15, r30
    1c0c:	29 f4       	brne	.+10     	; 0x1c18 <usart_init_spi+0x226>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1c0e:	60 e2       	ldi	r22, 0x20	; 32
    1c10:	83 e0       	ldi	r24, 0x03	; 3
    1c12:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c16:	cb c0       	rjmp	.+406    	; 0x1dae <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1c18:	f0 eb       	ldi	r31, 0xB0	; 176
    1c1a:	ef 16       	cp	r14, r31
    1c1c:	f9 e0       	ldi	r31, 0x09	; 9
    1c1e:	ff 06       	cpc	r15, r31
    1c20:	29 f4       	brne	.+10     	; 0x1c2c <usart_init_spi+0x23a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1c22:	60 e2       	ldi	r22, 0x20	; 32
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c2a:	c1 c0       	rjmp	.+386    	; 0x1dae <usart_init_spi+0x3bc>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1c2c:	30 e8       	ldi	r19, 0x80	; 128
    1c2e:	e3 16       	cp	r14, r19
    1c30:	34 e0       	ldi	r19, 0x04	; 4
    1c32:	f3 06       	cpc	r15, r19
    1c34:	29 f4       	brne	.+10     	; 0x1c40 <usart_init_spi+0x24e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1c36:	60 e4       	ldi	r22, 0x40	; 64
    1c38:	83 e0       	ldi	r24, 0x03	; 3
    1c3a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c3e:	b7 c0       	rjmp	.+366    	; 0x1dae <usart_init_spi+0x3bc>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1c40:	80 ea       	ldi	r24, 0xA0	; 160
    1c42:	e8 16       	cp	r14, r24
    1c44:	84 e0       	ldi	r24, 0x04	; 4
    1c46:	f8 06       	cpc	r15, r24
    1c48:	29 f4       	brne	.+10     	; 0x1c54 <usart_init_spi+0x262>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1c4a:	60 e4       	ldi	r22, 0x40	; 64
    1c4c:	85 e0       	ldi	r24, 0x05	; 5
    1c4e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c52:	ad c0       	rjmp	.+346    	; 0x1dae <usart_init_spi+0x3bc>
    1c54:	f7 01       	movw	r30, r14
    1c56:	84 81       	ldd	r24, Z+4	; 0x04
    1c58:	8f 7e       	andi	r24, 0xEF	; 239
    1c5a:	84 83       	std	Z+4, r24	; 0x04
    1c5c:	fb 01       	movw	r30, r22
    1c5e:	24 81       	ldd	r18, Z+4	; 0x04
    1c60:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1c62:	c7 01       	movw	r24, r14
    1c64:	f0 ea       	ldi	r31, 0xA0	; 160
    1c66:	ef 16       	cp	r14, r31
    1c68:	f8 e0       	ldi	r31, 0x08	; 8
    1c6a:	ff 06       	cpc	r15, r31
    1c6c:	49 f4       	brne	.+18     	; 0x1c80 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1c6e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1c72:	84 fd       	sbrc	r24, 4
    1c74:	a5 c0       	rjmp	.+330    	; 0x1dc0 <usart_init_spi+0x3ce>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1c76:	0f 2e       	mov	r0, r31
    1c78:	f1 e1       	ldi	r31, 0x11	; 17
    1c7a:	df 2e       	mov	r13, r31
    1c7c:	f0 2d       	mov	r31, r0
    1c7e:	a4 c0       	rjmp	.+328    	; 0x1dc8 <usart_init_spi+0x3d6>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1c80:	80 3b       	cpi	r24, 0xB0	; 176
    1c82:	38 e0       	ldi	r19, 0x08	; 8
    1c84:	93 07       	cpc	r25, r19
    1c86:	91 f0       	breq	.+36     	; 0x1cac <usart_init_spi+0x2ba>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1c88:	80 3a       	cpi	r24, 0xA0	; 160
    1c8a:	e9 e0       	ldi	r30, 0x09	; 9
    1c8c:	9e 07       	cpc	r25, r30
    1c8e:	49 f4       	brne	.+18     	; 0x1ca2 <usart_init_spi+0x2b0>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1c90:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1c94:	34 fd       	sbrc	r19, 4
    1c96:	9b c0       	rjmp	.+310    	; 0x1dce <usart_init_spi+0x3dc>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1c98:	0f 2e       	mov	r0, r31
    1c9a:	f9 e1       	ldi	r31, 0x19	; 25
    1c9c:	df 2e       	mov	r13, r31
    1c9e:	f0 2d       	mov	r31, r0
    1ca0:	16 c0       	rjmp	.+44     	; 0x1cce <usart_init_spi+0x2dc>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1ca2:	80 3b       	cpi	r24, 0xB0	; 176
    1ca4:	f9 e0       	ldi	r31, 0x09	; 9
    1ca6:	9f 07       	cpc	r25, r31
    1ca8:	f1 f0       	breq	.+60     	; 0x1ce6 <usart_init_spi+0x2f4>
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <usart_init_spi+0x2c2>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1cac:	0f 2e       	mov	r0, r31
    1cae:	f5 e1       	ldi	r31, 0x15	; 21
    1cb0:	df 2e       	mov	r13, r31
    1cb2:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1cb4:	80 3a       	cpi	r24, 0xA0	; 160
    1cb6:	3a e0       	ldi	r19, 0x0A	; 10
    1cb8:	93 07       	cpc	r25, r19
    1cba:	49 f4       	brne	.+18     	; 0x1cce <usart_init_spi+0x2dc>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1cbc:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1cc0:	84 fd       	sbrc	r24, 4
    1cc2:	8a c0       	rjmp	.+276    	; 0x1dd8 <usart_init_spi+0x3e6>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1cc4:	0f 2e       	mov	r0, r31
    1cc6:	f1 e2       	ldi	r31, 0x21	; 33
    1cc8:	df 2e       	mov	r13, r31
    1cca:	f0 2d       	mov	r31, r0
    1ccc:	15 c0       	rjmp	.+42     	; 0x1cf8 <usart_init_spi+0x306>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1cce:	80 3a       	cpi	r24, 0xA0	; 160
    1cd0:	9b 40       	sbci	r25, 0x0B	; 11
    1cd2:	91 f4       	brne	.+36     	; 0x1cf8 <usart_init_spi+0x306>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1cd4:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1cd8:	84 fd       	sbrc	r24, 4
    1cda:	0a c0       	rjmp	.+20     	; 0x1cf0 <usart_init_spi+0x2fe>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1cdc:	0f 2e       	mov	r0, r31
    1cde:	f9 e2       	ldi	r31, 0x29	; 41
    1ce0:	df 2e       	mov	r13, r31
    1ce2:	f0 2d       	mov	r31, r0
    1ce4:	09 c0       	rjmp	.+18     	; 0x1cf8 <usart_init_spi+0x306>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1ce6:	0f 2e       	mov	r0, r31
    1ce8:	fd e1       	ldi	r31, 0x1D	; 29
    1cea:	df 2e       	mov	r13, r31
    1cec:	f0 2d       	mov	r31, r0
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <usart_init_spi+0x306>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1cf0:	0f 2e       	mov	r0, r31
    1cf2:	fd e2       	ldi	r31, 0x2D	; 45
    1cf4:	df 2e       	mov	r13, r31
    1cf6:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1cf8:	ed 2d       	mov	r30, r13
    1cfa:	e6 95       	lsr	r30
    1cfc:	e6 95       	lsr	r30
    1cfe:	e6 95       	lsr	r30
    1d00:	30 e2       	ldi	r19, 0x20	; 32
    1d02:	e3 9f       	mul	r30, r19
    1d04:	f0 01       	movw	r30, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	fa 5f       	subi	r31, 0xFA	; 250
    1d0a:	3d 2d       	mov	r19, r13
    1d0c:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	03 2e       	mov	r0, r19
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <usart_init_spi+0x328>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <usart_init_spi+0x324>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1d1e:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1d20:	22 30       	cpi	r18, 0x02	; 2
    1d22:	10 f0       	brcs	.+4      	; 0x1d28 <usart_init_spi+0x336>
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <usart_init_spi+0x338>
    1d28:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1d2a:	df 01       	movw	r26, r30
    1d2c:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1d2e:	a3 0f       	add	r26, r19
    1d30:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d32:	9f b7       	in	r25, 0x3f	; 63
    1d34:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1d36:	f8 94       	cli
	return flags;
    1d38:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1d3a:	2c 91       	ld	r18, X
    1d3c:	27 70       	andi	r18, 0x07	; 7
    1d3e:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1d40:	9c 91       	ld	r25, X
    1d42:	94 2b       	or	r25, r20
    1d44:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d46:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1d48:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1d4a:	f7 01       	movw	r30, r14
    1d4c:	85 81       	ldd	r24, Z+5	; 0x05
    1d4e:	80 6c       	ori	r24, 0xC0	; 192
    1d50:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1d52:	f8 01       	movw	r30, r16
    1d54:	84 81       	ldd	r24, Z+4	; 0x04
    1d56:	8d 7f       	andi	r24, 0xFD	; 253
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	29 f4       	brne	.+10     	; 0x1d66 <usart_init_spi+0x374>
		usart->CTRLC |= USART_UCPHA_bm;
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	85 81       	ldd	r24, Z+5	; 0x05
    1d60:	82 60       	ori	r24, 0x02	; 2
    1d62:	85 83       	std	Z+5, r24	; 0x05
    1d64:	04 c0       	rjmp	.+8      	; 0x1d6e <usart_init_spi+0x37c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1d66:	f7 01       	movw	r30, r14
    1d68:	85 81       	ldd	r24, Z+5	; 0x05
    1d6a:	8d 7f       	andi	r24, 0xFD	; 253
    1d6c:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    1d6e:	f8 01       	movw	r30, r16
    1d70:	85 81       	ldd	r24, Z+5	; 0x05
    1d72:	88 23       	and	r24, r24
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <usart_init_spi+0x38e>
		(usart)->CTRLC |= USART_DORD_bm;
    1d76:	f7 01       	movw	r30, r14
    1d78:	85 81       	ldd	r24, Z+5	; 0x05
    1d7a:	84 60       	ori	r24, 0x04	; 4
    1d7c:	85 83       	std	Z+5, r24	; 0x05
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <usart_init_spi+0x396>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1d80:	f7 01       	movw	r30, r14
    1d82:	85 81       	ldd	r24, Z+5	; 0x05
    1d84:	8b 7f       	andi	r24, 0xFB	; 251
    1d86:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1d88:	f8 01       	movw	r30, r16
    1d8a:	40 81       	ld	r20, Z
    1d8c:	51 81       	ldd	r21, Z+1	; 0x01
    1d8e:	62 81       	ldd	r22, Z+2	; 0x02
    1d90:	73 81       	ldd	r23, Z+3	; 0x03
    1d92:	00 e0       	ldi	r16, 0x00	; 0
    1d94:	12 e1       	ldi	r17, 0x12	; 18
    1d96:	2a e7       	ldi	r18, 0x7A	; 122
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	c7 01       	movw	r24, r14
    1d9c:	f9 dd       	rcall	.-1038   	; 0x1990 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1d9e:	f7 01       	movw	r30, r14
    1da0:	84 81       	ldd	r24, Z+4	; 0x04
    1da2:	88 60       	ori	r24, 0x08	; 8
    1da4:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1da6:	84 81       	ldd	r24, Z+4	; 0x04
    1da8:	80 61       	ori	r24, 0x10	; 16
    1daa:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1dac:	1a c0       	rjmp	.+52     	; 0x1de2 <usart_init_spi+0x3f0>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1dae:	f7 01       	movw	r30, r14
    1db0:	84 81       	ldd	r24, Z+4	; 0x04
    1db2:	8f 7e       	andi	r24, 0xEF	; 239
    1db4:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1db6:	f8 01       	movw	r30, r16
    1db8:	24 81       	ldd	r18, Z+4	; 0x04
    1dba:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1dbc:	c7 01       	movw	r24, r14
    1dbe:	60 cf       	rjmp	.-320    	; 0x1c80 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1dc0:	0f 2e       	mov	r0, r31
    1dc2:	f5 e1       	ldi	r31, 0x15	; 21
    1dc4:	df 2e       	mov	r13, r31
    1dc6:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1dc8:	80 ea       	ldi	r24, 0xA0	; 160
    1dca:	98 e0       	ldi	r25, 0x08	; 8
    1dcc:	6a cf       	rjmp	.-300    	; 0x1ca2 <usart_init_spi+0x2b0>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1dce:	0f 2e       	mov	r0, r31
    1dd0:	fd e1       	ldi	r31, 0x1D	; 29
    1dd2:	df 2e       	mov	r13, r31
    1dd4:	f0 2d       	mov	r31, r0
    1dd6:	7b cf       	rjmp	.-266    	; 0x1cce <usart_init_spi+0x2dc>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1dd8:	0f 2e       	mov	r0, r31
    1dda:	f5 e2       	ldi	r31, 0x25	; 37
    1ddc:	df 2e       	mov	r13, r31
    1dde:	f0 2d       	mov	r31, r0
    1de0:	8b cf       	rjmp	.-234    	; 0x1cf8 <usart_init_spi+0x306>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1de2:	0f 90       	pop	r0
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	df 90       	pop	r13
    1df2:	08 95       	ret

00001df4 <updateScreen>:
	while (true) {
		/* Intentionally left empty. */
	}
}

static void updateScreen(void){
    1df4:	0f 93       	push	r16
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
	gfx_mono_generic_draw_vertical_line(126, y, 15, GFX_PIXEL_SET);
	gfx_mono_generic_draw_vertical_line(127, y, 15, GFX_PIXEL_SET);
}

static void clearBall(int x, int y){
	gfx_mono_generic_draw_filled_rect(x, y, 4, 4, GFX_PIXEL_CLR);
    1dfa:	c2 e0       	ldi	r28, 0x02	; 2
    1dfc:	d0 e2       	ldi	r29, 0x20	; 32
    1dfe:	00 e0       	ldi	r16, 0x00	; 0
    1e00:	24 e0       	ldi	r18, 0x04	; 4
    1e02:	44 e0       	ldi	r20, 0x04	; 4
    1e04:	68 81       	ld	r22, Y
    1e06:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <ballX>
    1e0a:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_filled_rect>
	int ballLeft = ballX - 2;
	
	//Update the edges of left and right paddle
	
	clearBall(ballX, ballY);
	ballX += ballSpeedX;
    1e0e:	20 91 4e 22 	lds	r18, 0x224E	; 0x80224e <ballX>
    1e12:	30 91 4f 22 	lds	r19, 0x224F	; 0x80224f <ballX+0x1>
    1e16:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1e1a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1e1e:	82 0f       	add	r24, r18
    1e20:	93 1f       	adc	r25, r19
    1e22:	80 93 4e 22 	sts	0x224E, r24	; 0x80224e <ballX>
    1e26:	90 93 4f 22 	sts	0x224F, r25	; 0x80224f <ballX+0x1>
	//drawLeftPaddle(leftPaddleStartPos);
	//drawRightPaddle(rightPaddleStartPos);
}

static void drawBall(int x, int y){
	gfx_mono_generic_draw_filled_rect(x, y, 6, 4, GFX_PIXEL_SET);
    1e2a:	01 e0       	ldi	r16, 0x01	; 1
    1e2c:	24 e0       	ldi	r18, 0x04	; 4
    1e2e:	46 e0       	ldi	r20, 0x06	; 6
    1e30:	68 81       	ld	r22, Y
    1e32:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_filled_rect>
	ballX += ballSpeedX;
	drawBall(ballX,ballY);
	//ballY += ballSpeedY;
	//delay_ms(50);
	
}
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <main>:
{
	/**
	 * Starts off by initializing the system clock before configuring the
	 * board and the monochrome graphical system.
	 */
	board_init();
    1e3e:	0e 94 62 05 	call	0xac4	; 0xac4 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1e42:	87 e0       	ldi	r24, 0x07	; 7
    1e44:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init();
	sysclk_init();
    1e48:	0e 94 ef 02 	call	0x5de	; 0x5de <sysclk_init>
	gfx_mono_init();
    1e4c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <gfx_mono_st7565r_init>
	
	tc_enable(&TCC0);
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	98 e0       	ldi	r25, 0x08	; 8
    1e54:	e0 dc       	rcall	.-1600   	; 0x1816 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0, updateScreen);
    1e56:	6a ef       	ldi	r22, 0xFA	; 250
    1e58:	7e e0       	ldi	r23, 0x0E	; 14
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	98 e0       	ldi	r25, 0x08	; 8
    1e5e:	5a dd       	rcall	.-1356   	; 0x1914 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1e60:	e0 e0       	ldi	r30, 0x00	; 0
    1e62:	f8 e0       	ldi	r31, 0x08	; 8
    1e64:	81 81       	ldd	r24, Z+1	; 0x01
    1e66:	88 7f       	andi	r24, 0xF8	; 248
    1e68:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1e6a:	84 ef       	ldi	r24, 0xF4	; 244
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	86 a3       	std	Z+38, r24	; 0x26
    1e70:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    1e72:	86 81       	ldd	r24, Z+6	; 0x06
    1e74:	8c 7f       	andi	r24, 0xFC	; 252
    1e76:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    1e78:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    1e7a:	81 60       	ori	r24, 0x01	; 1
    1e7c:	86 83       	std	Z+6, r24	; 0x06
	tc_set_wgm(&TCC0, TC_WG_NORMAL);
	tc_write_period(&TCC0, 500);
	tc_set_overflow_interrupt_level(&TCC0, TC_INT_LVL_LO);
	
	cpu_irq_enable();
    1e7e:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1e80:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1e82:	80 7f       	andi	r24, 0xF0	; 240
    1e84:	87 60       	ori	r24, 0x07	; 7
    1e86:	80 83       	st	Z, r24
    1e88:	80 e1       	ldi	r24, 0x10	; 16
    1e8a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	//drawLeftPaddle(leftPaddleStartPos);
	//drawRightPaddle(rightPaddleStartPos);
}

static void drawBall(int x, int y){
	gfx_mono_generic_draw_filled_rect(x, y, 6, 4, GFX_PIXEL_SET);
    1e8e:	01 e0       	ldi	r16, 0x01	; 1
    1e90:	24 e0       	ldi	r18, 0x04	; 4
    1e92:	46 e0       	ldi	r20, 0x06	; 6
    1e94:	6f e0       	ldi	r22, 0x0F	; 15
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_filled_rect>
    1e9c:	ff cf       	rjmp	.-2      	; 0x1e9c <main+0x5e>

00001e9e <__udivmodsi4>:
    1e9e:	a1 e2       	ldi	r26, 0x21	; 33
    1ea0:	1a 2e       	mov	r1, r26
    1ea2:	aa 1b       	sub	r26, r26
    1ea4:	bb 1b       	sub	r27, r27
    1ea6:	fd 01       	movw	r30, r26
    1ea8:	0d c0       	rjmp	.+26     	; 0x1ec4 <__udivmodsi4_ep>

00001eaa <__udivmodsi4_loop>:
    1eaa:	aa 1f       	adc	r26, r26
    1eac:	bb 1f       	adc	r27, r27
    1eae:	ee 1f       	adc	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	a2 17       	cp	r26, r18
    1eb4:	b3 07       	cpc	r27, r19
    1eb6:	e4 07       	cpc	r30, r20
    1eb8:	f5 07       	cpc	r31, r21
    1eba:	20 f0       	brcs	.+8      	; 0x1ec4 <__udivmodsi4_ep>
    1ebc:	a2 1b       	sub	r26, r18
    1ebe:	b3 0b       	sbc	r27, r19
    1ec0:	e4 0b       	sbc	r30, r20
    1ec2:	f5 0b       	sbc	r31, r21

00001ec4 <__udivmodsi4_ep>:
    1ec4:	66 1f       	adc	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	1a 94       	dec	r1
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <__udivmodsi4_loop>
    1ed0:	60 95       	com	r22
    1ed2:	70 95       	com	r23
    1ed4:	80 95       	com	r24
    1ed6:	90 95       	com	r25
    1ed8:	9b 01       	movw	r18, r22
    1eda:	ac 01       	movw	r20, r24
    1edc:	bd 01       	movw	r22, r26
    1ede:	cf 01       	movw	r24, r30
    1ee0:	08 95       	ret

00001ee2 <_exit>:
    1ee2:	f8 94       	cli

00001ee4 <__stop_program>:
    1ee4:	ff cf       	rjmp	.-2      	; 0x1ee4 <__stop_program>
