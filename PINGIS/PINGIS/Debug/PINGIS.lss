
PINGIS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000207a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  0000207a  0000210e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000250  00802006  00802006  00002114  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00002188  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ef7f  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ae6  00000000  00000000  00011537  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007373  00000000  00000000  0001601d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000153c  00000000  00000000  0001d390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00031e45  00000000  00000000  0001e8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b88  00000000  00000000  00050711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00057299  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b9d3  00000000  00000000  000577b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	64 c6       	rjmp	.+3272   	; 0xd02 <__vector_14>
      3a:	00 00       	nop
      3c:	8f c6       	rjmp	.+3358   	; 0xd5c <__vector_15>
      3e:	00 00       	nop
      40:	ba c6       	rjmp	.+3444   	; 0xdb6 <__vector_16>
      42:	00 00       	nop
      44:	e5 c6       	rjmp	.+3530   	; 0xe10 <__vector_17>
      46:	00 00       	nop
      48:	10 c7       	rjmp	.+3616   	; 0xe6a <__vector_18>
      4a:	00 00       	nop
      4c:	3b c7       	rjmp	.+3702   	; 0xec4 <__vector_19>
      4e:	00 00       	nop
      50:	66 c7       	rjmp	.+3788   	; 0xf1e <__vector_20>
      52:	00 00       	nop
      54:	91 c7       	rjmp	.+3874   	; 0xf78 <__vector_21>
      56:	00 00       	nop
      58:	bc c7       	rjmp	.+3960   	; 0xfd2 <__vector_22>
      5a:	00 00       	nop
      5c:	e7 c7       	rjmp	.+4046   	; 0x102c <__vector_23>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c0       	rjmp	.+416    	; 0x23e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ce c0       	rjmp	.+412    	; 0x23e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cc c0       	rjmp	.+408    	; 0x23e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ca c0       	rjmp	.+404    	; 0x23e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_47>
      c0:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__vector_48>
      c4:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_49>
      c8:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__vector_50>
      cc:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__vector_51>
      d0:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_52>
      d4:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_53>
      d8:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__vector_54>
      dc:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__vector_55>
      e0:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_56>
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	90 c0       	rjmp	.+288    	; 0x23e <__bad_interrupt>
     11e:	00 00       	nop
     120:	8e c0       	rjmp	.+284    	; 0x23e <__bad_interrupt>
     122:	00 00       	nop
     124:	8c c0       	rjmp	.+280    	; 0x23e <__bad_interrupt>
     126:	00 00       	nop
     128:	8a c0       	rjmp	.+276    	; 0x23e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	a8 c7       	rjmp	.+3920   	; 0x1086 <__vector_77>
     136:	00 00       	nop
     138:	d3 c7       	rjmp	.+4006   	; 0x10e0 <__vector_78>
     13a:	00 00       	nop
     13c:	fe c7       	rjmp	.+4092   	; 0x113a <__vector_79>
     13e:	00 00       	nop
     140:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_80>
     144:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__vector_81>
     148:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__vector_82>
     14c:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_83>
     150:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_84>
     154:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_85>
     158:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_86>
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_108>
     1b4:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_109>
     1b8:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_110>
     1bc:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_111>
     1c0:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__vector_112>
     1c4:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__vector_113>
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ea e7       	ldi	r30, 0x7A	; 122
     214:	f0 e2       	ldi	r31, 0x20	; 32
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a6 30       	cpi	r26, 0x06	; 6
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	22 e2       	ldi	r18, 0x22	; 34
     228:	a6 e0       	ldi	r26, 0x06	; 6
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a6 35       	cpi	r26, 0x56	; 86
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <main>
     23a:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     240:	04 c0       	rjmp	.+8      	; 0x24a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     242:	61 50       	subi	r22, 0x01	; 1
     244:	71 09       	sbc	r23, r1
     246:	81 09       	sbc	r24, r1
     248:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     24a:	61 15       	cp	r22, r1
     24c:	71 05       	cpc	r23, r1
     24e:	81 05       	cpc	r24, r1
     250:	91 05       	cpc	r25, r1
     252:	b9 f7       	brne	.-18     	; 0x242 <__portable_avr_delay_cycles+0x2>
     254:	08 95       	ret

00000256 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     26e:	00 e0       	ldi	r16, 0x00	; 0
     270:	16 e0       	ldi	r17, 0x06	; 6
     272:	68 94       	set
     274:	ff 24       	eor	r15, r15
     276:	f3 f8       	bld	r15, 3
     278:	f8 01       	movw	r30, r16
     27a:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     27c:	6e e0       	ldi	r22, 0x0E	; 14
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	dd df       	rcall	.-70     	; 0x240 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     286:	f8 01       	movw	r30, r16
     288:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     28a:	6e e0       	ldi	r22, 0x0E	; 14
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	d6 df       	rcall	.-84     	; 0x240 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     294:	0f 2e       	mov	r0, r31
     296:	fb e2       	ldi	r31, 0x2B	; 43
     298:	bf 2e       	mov	r11, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     29e:	80 ea       	ldi	r24, 0xA0	; 160
     2a0:	99 e0       	ldi	r25, 0x09	; 9
     2a2:	65 d4       	rcall	.+2250   	; 0xb6e <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     2a4:	c1 2c       	mov	r12, r1
     2a6:	d1 2c       	mov	r13, r1
     2a8:	76 01       	movw	r14, r12
     2aa:	00 e4       	ldi	r16, 0x40	; 64
     2ac:	12 e4       	ldi	r17, 0x42	; 66
     2ae:	2f e0       	ldi	r18, 0x0F	; 15
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	43 e0       	ldi	r20, 0x03	; 3
     2b4:	be 01       	movw	r22, r28
     2b6:	6f 5f       	subi	r22, 0xFF	; 255
     2b8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ba:	80 ea       	ldi	r24, 0xA0	; 160
     2bc:	99 e0       	ldi	r25, 0x09	; 9
     2be:	86 d4       	rcall	.+2316   	; 0xbcc <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2c0:	00 e6       	ldi	r16, 0x60	; 96
     2c2:	16 e0       	ldi	r17, 0x06	; 6
     2c4:	ff 24       	eor	r15, r15
     2c6:	f3 94       	inc	r15
     2c8:	f8 01       	movw	r30, r16
     2ca:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     2cc:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     2ce:	be 01       	movw	r22, r28
     2d0:	6f 5f       	subi	r22, 0xFF	; 255
     2d2:	7f 4f       	sbci	r23, 0xFF	; 255
     2d4:	80 ea       	ldi	r24, 0xA0	; 160
     2d6:	99 e0       	ldi	r25, 0x09	; 9
     2d8:	93 d4       	rcall	.+2342   	; 0xc00 <usart_spi_select_device>
     2da:	f8 01       	movw	r30, r16
     2dc:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     2de:	e0 ea       	ldi	r30, 0xA0	; 160
     2e0:	f9 e0       	ldi	r31, 0x09	; 9
     2e2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     2e4:	85 ff       	sbrs	r24, 5
     2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     2e8:	80 ea       	ldi	r24, 0xA0	; 160
     2ea:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     2ee:	e0 ea       	ldi	r30, 0xA0	; 160
     2f0:	f9 e0       	ldi	r31, 0x09	; 9
     2f2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     2f4:	86 ff       	sbrs	r24, 6
     2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     2f8:	e0 ea       	ldi	r30, 0xA0	; 160
     2fa:	f9 e0       	ldi	r31, 0x09	; 9
     2fc:	80 e4       	ldi	r24, 0x40	; 64
     2fe:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     300:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     302:	be 01       	movw	r22, r28
     304:	6f 5f       	subi	r22, 0xFF	; 255
     306:	7f 4f       	sbci	r23, 0xFF	; 255
     308:	80 ea       	ldi	r24, 0xA0	; 160
     30a:	99 e0       	ldi	r25, 0x09	; 9
     30c:	8f d4       	rcall	.+2334   	; 0xc2c <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     30e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     310:	89 83       	std	Y+1, r24	; 0x01
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	80 ea       	ldi	r24, 0xA0	; 160
     31a:	99 e0       	ldi	r25, 0x09	; 9
     31c:	71 d4       	rcall	.+2274   	; 0xc00 <usart_spi_select_device>
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     324:	e0 ea       	ldi	r30, 0xA0	; 160
     326:	f9 e0       	ldi	r31, 0x09	; 9
     328:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     32a:	85 ff       	sbrs	r24, 5
     32c:	fd cf       	rjmp	.-6      	; 0x328 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     32e:	86 ea       	ldi	r24, 0xA6	; 166
     330:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     334:	e0 ea       	ldi	r30, 0xA0	; 160
     336:	f9 e0       	ldi	r31, 0x09	; 9
     338:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     33a:	86 ff       	sbrs	r24, 6
     33c:	fd cf       	rjmp	.-6      	; 0x338 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     33e:	e0 ea       	ldi	r30, 0xA0	; 160
     340:	f9 e0       	ldi	r31, 0x09	; 9
     342:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     344:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     346:	80 81       	ld	r24, Z
     348:	be 01       	movw	r22, r28
     34a:	6f 5f       	subi	r22, 0xFF	; 255
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	80 ea       	ldi	r24, 0xA0	; 160
     350:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     352:	6c d4       	rcall	.+2264   	; 0xc2c <usart_spi_deselect_device>
     354:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	be 01       	movw	r22, r28
     35a:	6f 5f       	subi	r22, 0xFF	; 255
     35c:	7f 4f       	sbci	r23, 0xFF	; 255
     35e:	80 ea       	ldi	r24, 0xA0	; 160
     360:	99 e0       	ldi	r25, 0x09	; 9
     362:	4e d4       	rcall	.+2204   	; 0xc00 <usart_spi_select_device>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     36a:	e0 ea       	ldi	r30, 0xA0	; 160
     36c:	f9 e0       	ldi	r31, 0x09	; 9
     36e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     370:	85 ff       	sbrs	r24, 5
     372:	fd cf       	rjmp	.-6      	; 0x36e <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     374:	88 ec       	ldi	r24, 0xC8	; 200
     376:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     37a:	e0 ea       	ldi	r30, 0xA0	; 160
     37c:	f9 e0       	ldi	r31, 0x09	; 9
     37e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     380:	86 ff       	sbrs	r24, 6
     382:	fd cf       	rjmp	.-6      	; 0x37e <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     384:	e0 ea       	ldi	r30, 0xA0	; 160
     386:	f9 e0       	ldi	r31, 0x09	; 9
     388:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     38a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     38c:	80 81       	ld	r24, Z
     38e:	be 01       	movw	r22, r28
     390:	6f 5f       	subi	r22, 0xFF	; 255
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	80 ea       	ldi	r24, 0xA0	; 160
     396:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     398:	49 d4       	rcall	.+2194   	; 0xc2c <usart_spi_deselect_device>
     39a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     39c:	89 83       	std	Y+1, r24	; 0x01
     39e:	be 01       	movw	r22, r28
     3a0:	6f 5f       	subi	r22, 0xFF	; 255
     3a2:	7f 4f       	sbci	r23, 0xFF	; 255
     3a4:	80 ea       	ldi	r24, 0xA0	; 160
     3a6:	99 e0       	ldi	r25, 0x09	; 9
     3a8:	2b d4       	rcall	.+2134   	; 0xc00 <usart_spi_select_device>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     3b0:	e0 ea       	ldi	r30, 0xA0	; 160
     3b2:	f9 e0       	ldi	r31, 0x09	; 9
     3b4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     3ba:	82 ea       	ldi	r24, 0xA2	; 162
     3bc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     3c0:	e0 ea       	ldi	r30, 0xA0	; 160
     3c2:	f9 e0       	ldi	r31, 0x09	; 9
     3c4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     3c6:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <st7565r_init+0x16e>
     3ca:	e0 ea       	ldi	r30, 0xA0	; 160
     3cc:	f9 e0       	ldi	r31, 0x09	; 9
     3ce:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     3d0:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     3d2:	80 81       	ld	r24, Z
     3d4:	be 01       	movw	r22, r28
     3d6:	6f 5f       	subi	r22, 0xFF	; 255
     3d8:	7f 4f       	sbci	r23, 0xFF	; 255
     3da:	80 ea       	ldi	r24, 0xA0	; 160
     3dc:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     3de:	26 d4       	rcall	.+2124   	; 0xc2c <usart_spi_deselect_device>
     3e0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     3e2:	89 83       	std	Y+1, r24	; 0x01
     3e4:	be 01       	movw	r22, r28
     3e6:	6f 5f       	subi	r22, 0xFF	; 255
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	80 ea       	ldi	r24, 0xA0	; 160
     3ec:	99 e0       	ldi	r25, 0x09	; 9
     3ee:	08 d4       	rcall	.+2064   	; 0xc00 <usart_spi_select_device>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     3f6:	e0 ea       	ldi	r30, 0xA0	; 160
     3f8:	f9 e0       	ldi	r31, 0x09	; 9
     3fa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     3fc:	85 ff       	sbrs	r24, 5
     3fe:	fd cf       	rjmp	.-6      	; 0x3fa <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     400:	8f e2       	ldi	r24, 0x2F	; 47
     402:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     406:	e0 ea       	ldi	r30, 0xA0	; 160
     408:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     40a:	81 81       	ldd	r24, Z+1	; 0x01
     40c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     40e:	fd cf       	rjmp	.-6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     410:	e0 ea       	ldi	r30, 0xA0	; 160
     412:	f9 e0       	ldi	r31, 0x09	; 9
     414:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     416:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     418:	80 81       	ld	r24, Z
     41a:	be 01       	movw	r22, r28
     41c:	6f 5f       	subi	r22, 0xFF	; 255
     41e:	7f 4f       	sbci	r23, 0xFF	; 255
     420:	80 ea       	ldi	r24, 0xA0	; 160
     422:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     424:	03 d4       	rcall	.+2054   	; 0xc2c <usart_spi_deselect_device>
     426:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     428:	89 83       	std	Y+1, r24	; 0x01
     42a:	be 01       	movw	r22, r28
     42c:	6f 5f       	subi	r22, 0xFF	; 255
     42e:	7f 4f       	sbci	r23, 0xFF	; 255
     430:	80 ea       	ldi	r24, 0xA0	; 160
     432:	99 e0       	ldi	r25, 0x09	; 9
     434:	e5 d3       	rcall	.+1994   	; 0xc00 <usart_spi_select_device>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     43c:	e0 ea       	ldi	r30, 0xA0	; 160
     43e:	f9 e0       	ldi	r31, 0x09	; 9
     440:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     442:	85 ff       	sbrs	r24, 5
     444:	fd cf       	rjmp	.-6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     446:	88 ef       	ldi	r24, 0xF8	; 248
     448:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     44c:	e0 ea       	ldi	r30, 0xA0	; 160
     44e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     450:	81 81       	ldd	r24, Z+1	; 0x01
     452:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     454:	fd cf       	rjmp	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     456:	e0 ea       	ldi	r30, 0xA0	; 160
     458:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     45a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     45c:	81 83       	std	Z+1, r24	; 0x01
     45e:	80 81       	ld	r24, Z
     460:	be 01       	movw	r22, r28
     462:	6f 5f       	subi	r22, 0xFF	; 255
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	80 ea       	ldi	r24, 0xA0	; 160
     468:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     46a:	e0 d3       	rcall	.+1984   	; 0xc2c <usart_spi_deselect_device>
     46c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	be 01       	movw	r22, r28
     472:	6f 5f       	subi	r22, 0xFF	; 255
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	80 ea       	ldi	r24, 0xA0	; 160
     478:	99 e0       	ldi	r25, 0x09	; 9
     47a:	c2 d3       	rcall	.+1924   	; 0xc00 <usart_spi_select_device>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     482:	e0 ea       	ldi	r30, 0xA0	; 160
     484:	f9 e0       	ldi	r31, 0x09	; 9
     486:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     488:	85 ff       	sbrs	r24, 5
     48a:	fd cf       	rjmp	.-6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     48c:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     490:	e0 ea       	ldi	r30, 0xA0	; 160
     492:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     494:	81 81       	ldd	r24, Z+1	; 0x01
     496:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     498:	fd cf       	rjmp	.-6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     49a:	e0 ea       	ldi	r30, 0xA0	; 160
     49c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     49e:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     4a0:	81 83       	std	Z+1, r24	; 0x01
     4a2:	80 81       	ld	r24, Z
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	80 ea       	ldi	r24, 0xA0	; 160
     4ac:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     4ae:	be d3       	rcall	.+1916   	; 0xc2c <usart_spi_deselect_device>
     4b0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	be 01       	movw	r22, r28
     4b6:	6f 5f       	subi	r22, 0xFF	; 255
     4b8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ba:	80 ea       	ldi	r24, 0xA0	; 160
     4bc:	99 e0       	ldi	r25, 0x09	; 9
     4be:	a0 d3       	rcall	.+1856   	; 0xc00 <usart_spi_select_device>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4c6:	e0 ea       	ldi	r30, 0xA0	; 160
     4c8:	f9 e0       	ldi	r31, 0x09	; 9
     4ca:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     4cc:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4d0:	81 e2       	ldi	r24, 0x21	; 33
     4d2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     4d6:	e0 ea       	ldi	r30, 0xA0	; 160
     4d8:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     4da:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     4dc:	86 ff       	sbrs	r24, 6
     4de:	fd cf       	rjmp	.-6      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4e0:	e0 ea       	ldi	r30, 0xA0	; 160
     4e2:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     4e4:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     4e6:	81 83       	std	Z+1, r24	; 0x01
     4e8:	80 81       	ld	r24, Z
     4ea:	be 01       	movw	r22, r28
     4ec:	6f 5f       	subi	r22, 0xFF	; 255
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	80 ea       	ldi	r24, 0xA0	; 160
     4f2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     4f4:	9b d3       	rcall	.+1846   	; 0xc2c <usart_spi_deselect_device>
     4f6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     4f8:	89 83       	std	Y+1, r24	; 0x01
     4fa:	be 01       	movw	r22, r28
     4fc:	6f 5f       	subi	r22, 0xFF	; 255
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	80 ea       	ldi	r24, 0xA0	; 160
     502:	99 e0       	ldi	r25, 0x09	; 9
     504:	7d d3       	rcall	.+1786   	; 0xc00 <usart_spi_select_device>
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     50c:	e0 ea       	ldi	r30, 0xA0	; 160
     50e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     510:	81 81       	ldd	r24, Z+1	; 0x01
     512:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     514:	fd cf       	rjmp	.-6      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     516:	81 e8       	ldi	r24, 0x81	; 129
     518:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     51c:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     51e:	f9 e0       	ldi	r31, 0x09	; 9
     520:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     522:	86 ff       	sbrs	r24, 6
     524:	fd cf       	rjmp	.-6      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     526:	e0 ea       	ldi	r30, 0xA0	; 160
     528:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     52a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     52c:	81 83       	std	Z+1, r24	; 0x01
     52e:	80 81       	ld	r24, Z
     530:	be 01       	movw	r22, r28
     532:	6f 5f       	subi	r22, 0xFF	; 255
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	80 ea       	ldi	r24, 0xA0	; 160
     538:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     53a:	78 d3       	rcall	.+1776   	; 0xc2c <usart_spi_deselect_device>
     53c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	be 01       	movw	r22, r28
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	80 ea       	ldi	r24, 0xA0	; 160
     548:	99 e0       	ldi	r25, 0x09	; 9
     54a:	5a d3       	rcall	.+1716   	; 0xc00 <usart_spi_select_device>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     552:	e0 ea       	ldi	r30, 0xA0	; 160
     554:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     556:	81 81       	ldd	r24, Z+1	; 0x01
     558:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     55a:	fd cf       	rjmp	.-6      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     55c:	81 e2       	ldi	r24, 0x21	; 33
     55e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     562:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     564:	f9 e0       	ldi	r31, 0x09	; 9
     566:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     568:	86 ff       	sbrs	r24, 6
     56a:	fd cf       	rjmp	.-6      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     56c:	e0 ea       	ldi	r30, 0xA0	; 160
     56e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     570:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     572:	81 83       	std	Z+1, r24	; 0x01
     574:	80 81       	ld	r24, Z
     576:	be 01       	movw	r22, r28
     578:	6f 5f       	subi	r22, 0xFF	; 255
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	80 ea       	ldi	r24, 0xA0	; 160
     57e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     580:	55 d3       	rcall	.+1706   	; 0xc2c <usart_spi_deselect_device>
     582:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	be 01       	movw	r22, r28
     588:	6f 5f       	subi	r22, 0xFF	; 255
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
     58c:	80 ea       	ldi	r24, 0xA0	; 160
     58e:	99 e0       	ldi	r25, 0x09	; 9
     590:	37 d3       	rcall	.+1646   	; 0xc00 <usart_spi_select_device>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     598:	e0 ea       	ldi	r30, 0xA0	; 160
     59a:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     59c:	81 81       	ldd	r24, Z+1	; 0x01
     59e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5a0:	fd cf       	rjmp	.-6      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     5a2:	8f ea       	ldi	r24, 0xAF	; 175
     5a4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5a8:	e0 ea       	ldi	r30, 0xA0	; 160
     5aa:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5ac:	81 81       	ldd	r24, Z+1	; 0x01
     5ae:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5b0:	fd cf       	rjmp	.-6      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5b2:	e0 ea       	ldi	r30, 0xA0	; 160
     5b4:	f9 e0       	ldi	r31, 0x09	; 9
     5b6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5b8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ba:	80 81       	ld	r24, Z
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	80 ea       	ldi	r24, 0xA0	; 160
     5c4:	99 e0       	ldi	r25, 0x09	; 9
     5c6:	32 d3       	rcall	.+1636   	; 0xc2c <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     5c8:	0f 90       	pop	r0
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	08 95       	ret

000005de <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1f 92       	push	r1
     5e4:	1f 92       	push	r1
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     5f0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     5f4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     5f8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     5fc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     600:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     604:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     608:	6c e0       	ldi	r22, 0x0C	; 12
     60a:	81 e4       	ldi	r24, 0x41	; 65
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	73 d3       	rcall	.+1766   	; 0xcf6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     610:	8f b7       	in	r24, 0x3f	; 63
     612:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     614:	f8 94       	cli
	return flags;
     616:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     618:	e0 e5       	ldi	r30, 0x50	; 80
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	82 60       	ori	r24, 0x02	; 2
     620:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     622:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     624:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     626:	81 ff       	sbrs	r24, 1
     628:	fd cf       	rjmp	.-6      	; 0x624 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	80 e4       	ldi	r24, 0x40	; 64
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	62 d3       	rcall	.+1732   	; 0xcf6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     632:	8f b7       	in	r24, 0x3f	; 63
     634:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     636:	f8 94       	cli
	return flags;
     638:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     63a:	e0 e5       	ldi	r30, 0x50	; 80
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	8e 7f       	andi	r24, 0xFE	; 254
     642:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     644:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	1f 92       	push	r1
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     65a:	9f b7       	in	r25, 0x3f	; 63
     65c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     65e:	f8 94       	cli
	return flags;
     660:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     662:	e8 2f       	mov	r30, r24
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	e0 59       	subi	r30, 0x90	; 144
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	60 95       	com	r22
     66c:	80 81       	ld	r24, Z
     66e:	68 23       	and	r22, r24
     670:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     672:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <gfx_mono_st7565r_put_byte>:
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	1f 92       	push	r1
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	08 2f       	mov	r16, r24
     68e:	f6 2e       	mov	r15, r22
     690:	14 2f       	mov	r17, r20
     692:	36 d1       	rcall	.+620    	; 0x900 <gfx_mono_framebuffer_put_byte>
     694:	0f 70       	andi	r16, 0x0F	; 15
     696:	00 6b       	ori	r16, 0xB0	; 176
     698:	8b e2       	ldi	r24, 0x2B	; 43
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	be 01       	movw	r22, r28
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	80 ea       	ldi	r24, 0xA0	; 160
     6a4:	99 e0       	ldi	r25, 0x09	; 9
     6a6:	ac d2       	rcall	.+1368   	; 0xc00 <usart_spi_select_device>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f9 e0       	ldi	r31, 0x09	; 9
     6b2:	91 81       	ldd	r25, Z+1	; 0x01
     6b4:	95 ff       	sbrs	r25, 5
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <gfx_mono_st7565r_put_byte+0x36>
     6b8:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     6bc:	e0 ea       	ldi	r30, 0xA0	; 160
     6be:	f9 e0       	ldi	r31, 0x09	; 9
     6c0:	81 81       	ldd	r24, Z+1	; 0x01
     6c2:	86 ff       	sbrs	r24, 6
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <gfx_mono_st7565r_put_byte+0x44>
     6c6:	e0 ea       	ldi	r30, 0xA0	; 160
     6c8:	f9 e0       	ldi	r31, 0x09	; 9
     6ca:	80 e4       	ldi	r24, 0x40	; 64
     6cc:	81 83       	std	Z+1, r24	; 0x01
     6ce:	80 81       	ld	r24, Z
     6d0:	be 01       	movw	r22, r28
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	80 ea       	ldi	r24, 0xA0	; 160
     6d8:	99 e0       	ldi	r25, 0x09	; 9
     6da:	a8 d2       	rcall	.+1360   	; 0xc2c <usart_spi_deselect_device>
     6dc:	0f 2d       	mov	r16, r15
     6de:	0f 77       	andi	r16, 0x7F	; 127
     6e0:	02 95       	swap	r16
     6e2:	0f 70       	andi	r16, 0x0F	; 15
     6e4:	00 61       	ori	r16, 0x10	; 16
     6e6:	8b e2       	ldi	r24, 0x2B	; 43
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	be 01       	movw	r22, r28
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	80 ea       	ldi	r24, 0xA0	; 160
     6f2:	99 e0       	ldi	r25, 0x09	; 9
     6f4:	85 d2       	rcall	.+1290   	; 0xc00 <usart_spi_select_device>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
     700:	81 81       	ldd	r24, Z+1	; 0x01
     702:	85 ff       	sbrs	r24, 5
     704:	fd cf       	rjmp	.-6      	; 0x700 <gfx_mono_st7565r_put_byte+0x84>
     706:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     70a:	e0 ea       	ldi	r30, 0xA0	; 160
     70c:	f9 e0       	ldi	r31, 0x09	; 9
     70e:	81 81       	ldd	r24, Z+1	; 0x01
     710:	86 ff       	sbrs	r24, 6
     712:	fd cf       	rjmp	.-6      	; 0x70e <gfx_mono_st7565r_put_byte+0x92>
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	81 83       	std	Z+1, r24	; 0x01
     71c:	80 81       	ld	r24, Z
     71e:	be 01       	movw	r22, r28
     720:	6f 5f       	subi	r22, 0xFF	; 255
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	80 ea       	ldi	r24, 0xA0	; 160
     726:	99 e0       	ldi	r25, 0x09	; 9
     728:	81 d2       	rcall	.+1282   	; 0xc2c <usart_spi_deselect_device>
     72a:	0f 2d       	mov	r16, r15
     72c:	0f 70       	andi	r16, 0x0F	; 15
     72e:	8b e2       	ldi	r24, 0x2B	; 43
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	be 01       	movw	r22, r28
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	80 ea       	ldi	r24, 0xA0	; 160
     73a:	99 e0       	ldi	r25, 0x09	; 9
     73c:	61 d2       	rcall	.+1218   	; 0xc00 <usart_spi_select_device>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     744:	e0 ea       	ldi	r30, 0xA0	; 160
     746:	f9 e0       	ldi	r31, 0x09	; 9
     748:	81 81       	ldd	r24, Z+1	; 0x01
     74a:	85 ff       	sbrs	r24, 5
     74c:	fd cf       	rjmp	.-6      	; 0x748 <gfx_mono_st7565r_put_byte+0xcc>
     74e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     752:	e0 ea       	ldi	r30, 0xA0	; 160
     754:	f9 e0       	ldi	r31, 0x09	; 9
     756:	81 81       	ldd	r24, Z+1	; 0x01
     758:	86 ff       	sbrs	r24, 6
     75a:	fd cf       	rjmp	.-6      	; 0x756 <gfx_mono_st7565r_put_byte+0xda>
     75c:	e0 ea       	ldi	r30, 0xA0	; 160
     75e:	f9 e0       	ldi	r31, 0x09	; 9
     760:	80 e4       	ldi	r24, 0x40	; 64
     762:	81 83       	std	Z+1, r24	; 0x01
     764:	80 81       	ld	r24, Z
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	80 ea       	ldi	r24, 0xA0	; 160
     76e:	99 e0       	ldi	r25, 0x09	; 9
     770:	5d d2       	rcall	.+1210   	; 0xc2c <usart_spi_deselect_device>
     772:	8b e2       	ldi	r24, 0x2B	; 43
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	be 01       	movw	r22, r28
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	80 ea       	ldi	r24, 0xA0	; 160
     77e:	99 e0       	ldi	r25, 0x09	; 9
     780:	3f d2       	rcall	.+1150   	; 0xc00 <usart_spi_select_device>
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     788:	e0 ea       	ldi	r30, 0xA0	; 160
     78a:	f9 e0       	ldi	r31, 0x09	; 9
     78c:	81 81       	ldd	r24, Z+1	; 0x01
     78e:	85 ff       	sbrs	r24, 5
     790:	fd cf       	rjmp	.-6      	; 0x78c <gfx_mono_st7565r_put_byte+0x110>
     792:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     796:	e0 ea       	ldi	r30, 0xA0	; 160
     798:	f9 e0       	ldi	r31, 0x09	; 9
     79a:	81 81       	ldd	r24, Z+1	; 0x01
     79c:	86 ff       	sbrs	r24, 6
     79e:	fd cf       	rjmp	.-6      	; 0x79a <gfx_mono_st7565r_put_byte+0x11e>
     7a0:	e0 ea       	ldi	r30, 0xA0	; 160
     7a2:	f9 e0       	ldi	r31, 0x09	; 9
     7a4:	80 e4       	ldi	r24, 0x40	; 64
     7a6:	81 83       	std	Z+1, r24	; 0x01
     7a8:	80 81       	ld	r24, Z
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     7b0:	be 01       	movw	r22, r28
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	99 e0       	ldi	r25, 0x09	; 9
     7ba:	38 d2       	rcall	.+1136   	; 0xc2c <usart_spi_deselect_device>
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	08 95       	ret

000007ca <gfx_mono_st7565r_init>:
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	86 e0       	ldi	r24, 0x06	; 6
     7da:	90 e2       	ldi	r25, 0x20	; 32
     7dc:	8c d0       	rcall	.+280    	; 0x8f6 <gfx_mono_set_framebuffer>
     7de:	3b dd       	rcall	.-1418   	; 0x256 <st7565r_init>
     7e0:	8b e2       	ldi	r24, 0x2B	; 43
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	be 01       	movw	r22, r28
     7e6:	6f 5f       	subi	r22, 0xFF	; 255
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	80 ea       	ldi	r24, 0xA0	; 160
     7ec:	99 e0       	ldi	r25, 0x09	; 9
     7ee:	08 d2       	rcall	.+1040   	; 0xc00 <usart_spi_select_device>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     7f6:	e0 ea       	ldi	r30, 0xA0	; 160
     7f8:	f9 e0       	ldi	r31, 0x09	; 9
     7fa:	81 81       	ldd	r24, Z+1	; 0x01
     7fc:	85 ff       	sbrs	r24, 5
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <gfx_mono_st7565r_init+0x30>
     800:	80 e4       	ldi	r24, 0x40	; 64
     802:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     806:	e0 ea       	ldi	r30, 0xA0	; 160
     808:	f9 e0       	ldi	r31, 0x09	; 9
     80a:	81 81       	ldd	r24, Z+1	; 0x01
     80c:	86 ff       	sbrs	r24, 6
     80e:	fd cf       	rjmp	.-6      	; 0x80a <gfx_mono_st7565r_init+0x40>
     810:	e0 ea       	ldi	r30, 0xA0	; 160
     812:	f9 e0       	ldi	r31, 0x09	; 9
     814:	80 e4       	ldi	r24, 0x40	; 64
     816:	81 83       	std	Z+1, r24	; 0x01
     818:	80 81       	ld	r24, Z
     81a:	be 01       	movw	r22, r28
     81c:	6f 5f       	subi	r22, 0xFF	; 255
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	80 ea       	ldi	r24, 0xA0	; 160
     822:	99 e0       	ldi	r25, 0x09	; 9
     824:	03 d2       	rcall	.+1030   	; 0xc2c <usart_spi_deselect_device>
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	0a c0       	rjmp	.+20     	; 0x83e <gfx_mono_st7565r_init+0x74>
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	61 2f       	mov	r22, r17
     82e:	80 2f       	mov	r24, r16
     830:	25 df       	rcall	.-438    	; 0x67c <gfx_mono_st7565r_put_byte>
     832:	1f 5f       	subi	r17, 0xFF	; 255
     834:	10 38       	cpi	r17, 0x80	; 128
     836:	c9 f7       	brne	.-14     	; 0x82a <gfx_mono_st7565r_init+0x60>
     838:	0f 5f       	subi	r16, 0xFF	; 255
     83a:	04 30       	cpi	r16, 0x04	; 4
     83c:	11 f0       	breq	.+4      	; 0x842 <gfx_mono_st7565r_init+0x78>
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	f4 cf       	rjmp	.-24     	; 0x82a <gfx_mono_st7565r_init+0x60>
     842:	0f 90       	pop	r0
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <gfx_mono_st7565r_draw_pixel>:
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	88 23       	and	r24, r24
     85a:	4c f1       	brlt	.+82     	; 0x8ae <gfx_mono_st7565r_draw_pixel+0x60>
     85c:	60 32       	cpi	r22, 0x20	; 32
     85e:	38 f5       	brcc	.+78     	; 0x8ae <gfx_mono_st7565r_draw_pixel+0x60>
     860:	d4 2f       	mov	r29, r20
     862:	c8 2f       	mov	r28, r24
     864:	f6 2e       	mov	r15, r22
     866:	f6 94       	lsr	r15
     868:	f6 94       	lsr	r15
     86a:	f6 94       	lsr	r15
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	f8 9e       	mul	r15, r24
     872:	60 19       	sub	r22, r0
     874:	71 09       	sbc	r23, r1
     876:	11 24       	eor	r1, r1
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	8c 01       	movw	r16, r24
     87e:	02 c0       	rjmp	.+4      	; 0x884 <gfx_mono_st7565r_draw_pixel+0x36>
     880:	00 0f       	add	r16, r16
     882:	11 1f       	adc	r17, r17
     884:	6a 95       	dec	r22
     886:	e2 f7       	brpl	.-8      	; 0x880 <gfx_mono_st7565r_draw_pixel+0x32>
     888:	6c 2f       	mov	r22, r28
     88a:	8f 2d       	mov	r24, r15
     88c:	47 d0       	rcall	.+142    	; 0x91c <gfx_mono_framebuffer_get_byte>
     88e:	d1 30       	cpi	r29, 0x01	; 1
     890:	21 f0       	breq	.+8      	; 0x89a <gfx_mono_st7565r_draw_pixel+0x4c>
     892:	28 f0       	brcs	.+10     	; 0x89e <gfx_mono_st7565r_draw_pixel+0x50>
     894:	d2 30       	cpi	r29, 0x02	; 2
     896:	31 f0       	breq	.+12     	; 0x8a4 <gfx_mono_st7565r_draw_pixel+0x56>
     898:	06 c0       	rjmp	.+12     	; 0x8a6 <gfx_mono_st7565r_draw_pixel+0x58>
     89a:	80 2b       	or	r24, r16
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <gfx_mono_st7565r_draw_pixel+0x58>
     89e:	00 95       	com	r16
     8a0:	80 23       	and	r24, r16
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <gfx_mono_st7565r_draw_pixel+0x58>
     8a4:	80 27       	eor	r24, r16
     8a6:	48 2f       	mov	r20, r24
     8a8:	6c 2f       	mov	r22, r28
     8aa:	8f 2d       	mov	r24, r15
     8ac:	e7 de       	rcall	.-562    	; 0x67c <gfx_mono_st7565r_put_byte>
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	08 95       	ret

000008ba <gfx_mono_st7565r_mask_byte>:
	gfx_mono_st7565r_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	d8 2f       	mov	r29, r24
     8c4:	16 2f       	mov	r17, r22
     8c6:	04 2f       	mov	r16, r20
     8c8:	c2 2f       	mov	r28, r18
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     8ca:	28 d0       	rcall	.+80     	; 0x91c <gfx_mono_framebuffer_get_byte>
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
     8cc:	c1 30       	cpi	r28, 0x01	; 1
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <gfx_mono_st7565r_mask_byte+0x1e>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <gfx_mono_st7565r_mask_byte+0x22>
     8d2:	c2 30       	cpi	r28, 0x02	; 2
     8d4:	31 f0       	breq	.+12     	; 0x8e2 <gfx_mono_st7565r_mask_byte+0x28>
     8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <gfx_mono_st7565r_mask_byte+0x2a>
	case GFX_PIXEL_SET:
		temp |= pixel_mask;
     8d8:	80 2b       	or	r24, r16
		break;
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_CLR:
		temp &= ~pixel_mask;
     8dc:	00 95       	com	r16
     8de:	80 23       	and	r24, r16
		break;
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
     8e2:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
     8e4:	48 2f       	mov	r20, r24
     8e6:	61 2f       	mov	r22, r17
     8e8:	8d 2f       	mov	r24, r29
     8ea:	c8 de       	rcall	.-624    	; 0x67c <gfx_mono_st7565r_put_byte>
}
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     8f6:	80 93 06 22 	sts	0x2206, r24	; 0x802206 <fbpointer>
     8fa:	90 93 07 22 	sts	0x2207, r25	; 0x802207 <fbpointer+0x1>
     8fe:	08 95       	ret

00000900 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     900:	20 91 06 22 	lds	r18, 0x2206	; 0x802206 <fbpointer>
     904:	30 91 07 22 	lds	r19, 0x2207	; 0x802207 <fbpointer+0x1>
     908:	90 e8       	ldi	r25, 0x80	; 128
     90a:	89 9f       	mul	r24, r25
     90c:	20 0d       	add	r18, r0
     90e:	31 1d       	adc	r19, r1
     910:	11 24       	eor	r1, r1
     912:	f9 01       	movw	r30, r18
     914:	e6 0f       	add	r30, r22
     916:	f1 1d       	adc	r31, r1
     918:	40 83       	st	Z, r20
     91a:	08 95       	ret

0000091c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     91c:	20 91 06 22 	lds	r18, 0x2206	; 0x802206 <fbpointer>
     920:	30 91 07 22 	lds	r19, 0x2207	; 0x802207 <fbpointer+0x1>
     924:	90 e8       	ldi	r25, 0x80	; 128
     926:	89 9f       	mul	r24, r25
     928:	20 0d       	add	r18, r0
     92a:	31 1d       	adc	r19, r1
     92c:	11 24       	eor	r1, r1
     92e:	f9 01       	movw	r30, r18
     930:	e6 0f       	add	r30, r22
     932:	f1 1d       	adc	r31, r1
}
     934:	80 81       	ld	r24, Z
     936:	08 95       	ret

00000938 <gfx_mono_generic_draw_vertical_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	44 23       	and	r20, r20
     946:	09 f4       	brne	.+2      	; 0x94a <gfx_mono_generic_draw_vertical_line+0x12>
     948:	46 c0       	rjmp	.+140    	; 0x9d6 <gfx_mono_generic_draw_vertical_line+0x9e>
     94a:	12 2f       	mov	r17, r18
     94c:	d8 2f       	mov	r29, r24
     94e:	9f ef       	ldi	r25, 0xFF	; 255
     950:	96 0f       	add	r25, r22
     952:	94 0f       	add	r25, r20
     954:	69 13       	cpse	r22, r25
     956:	03 c0       	rjmp	.+6      	; 0x95e <gfx_mono_generic_draw_vertical_line+0x26>
     958:	42 2f       	mov	r20, r18
     95a:	79 df       	rcall	.-270    	; 0x84e <gfx_mono_st7565r_draw_pixel>
     95c:	3c c0       	rjmp	.+120    	; 0x9d6 <gfx_mono_generic_draw_vertical_line+0x9e>
     95e:	9f 31       	cpi	r25, 0x1F	; 31
     960:	08 f0       	brcs	.+2      	; 0x964 <gfx_mono_generic_draw_vertical_line+0x2c>
     962:	9f e1       	ldi	r25, 0x1F	; 31
     964:	c6 2f       	mov	r28, r22
     966:	c6 95       	lsr	r28
     968:	c6 95       	lsr	r28
     96a:	c6 95       	lsr	r28
     96c:	09 2f       	mov	r16, r25
     96e:	06 95       	lsr	r16
     970:	06 95       	lsr	r16
     972:	06 95       	lsr	r16
     974:	67 70       	andi	r22, 0x07	; 7
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	a9 01       	movw	r20, r18
     97c:	02 c0       	rjmp	.+4      	; 0x982 <gfx_mono_generic_draw_vertical_line+0x4a>
     97e:	44 0f       	add	r20, r20
     980:	55 1f       	adc	r21, r21
     982:	6a 95       	dec	r22
     984:	e2 f7       	brpl	.-8      	; 0x97e <gfx_mono_generic_draw_vertical_line+0x46>
     986:	97 70       	andi	r25, 0x07	; 7
     988:	67 e0       	ldi	r22, 0x07	; 7
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	fb 01       	movw	r30, r22
     98e:	e9 1b       	sub	r30, r25
     990:	f1 09       	sbc	r31, r1
     992:	79 01       	movw	r14, r18
     994:	02 c0       	rjmp	.+4      	; 0x99a <gfx_mono_generic_draw_vertical_line+0x62>
     996:	f5 94       	asr	r15
     998:	e7 94       	ror	r14
     99a:	ea 95       	dec	r30
     99c:	e2 f7       	brpl	.-8      	; 0x996 <gfx_mono_generic_draw_vertical_line+0x5e>
     99e:	c0 13       	cpse	r28, r16
     9a0:	06 c0       	rjmp	.+12     	; 0x9ae <gfx_mono_generic_draw_vertical_line+0x76>
     9a2:	4e 21       	and	r20, r14
     9a4:	21 2f       	mov	r18, r17
     9a6:	6d 2f       	mov	r22, r29
     9a8:	8c 2f       	mov	r24, r28
     9aa:	87 df       	rcall	.-242    	; 0x8ba <gfx_mono_st7565r_mask_byte>
     9ac:	14 c0       	rjmp	.+40     	; 0x9d6 <gfx_mono_generic_draw_vertical_line+0x9e>
     9ae:	21 2f       	mov	r18, r17
     9b0:	6d 2f       	mov	r22, r29
     9b2:	8c 2f       	mov	r24, r28
     9b4:	82 df       	rcall	.-252    	; 0x8ba <gfx_mono_st7565r_mask_byte>
     9b6:	cf 5f       	subi	r28, 0xFF	; 255
     9b8:	c0 17       	cp	r28, r16
     9ba:	40 f4       	brcc	.+16     	; 0x9cc <gfx_mono_generic_draw_vertical_line+0x94>
     9bc:	21 2f       	mov	r18, r17
     9be:	4f ef       	ldi	r20, 0xFF	; 255
     9c0:	6d 2f       	mov	r22, r29
     9c2:	8c 2f       	mov	r24, r28
     9c4:	7a df       	rcall	.-268    	; 0x8ba <gfx_mono_st7565r_mask_byte>
     9c6:	cf 5f       	subi	r28, 0xFF	; 255
     9c8:	c0 17       	cp	r28, r16
     9ca:	c0 f3       	brcs	.-16     	; 0x9bc <gfx_mono_generic_draw_vertical_line+0x84>
     9cc:	21 2f       	mov	r18, r17
     9ce:	4e 2d       	mov	r20, r14
     9d0:	6d 2f       	mov	r22, r29
     9d2:	80 2f       	mov	r24, r16
     9d4:	72 df       	rcall	.-284    	; 0x8ba <gfx_mono_st7565r_mask_byte>
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	08 95       	ret

000009e4 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     9e4:	5f 92       	push	r5
     9e6:	6f 92       	push	r6
     9e8:	7f 92       	push	r7
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	98 2e       	mov	r9, r24
     a04:	a6 2e       	mov	r10, r22
     a06:	c4 2f       	mov	r28, r20
     a08:	b2 2e       	mov	r11, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     a0a:	41 11       	cpse	r20, r1
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <gfx_mono_generic_draw_filled_circle+0x30>
		gfx_mono_draw_pixel(x, y, color);
     a0e:	42 2f       	mov	r20, r18
     a10:	1e df       	rcall	.-452    	; 0x84e <gfx_mono_st7565r_draw_pixel>
		return;
     a12:	76 c0       	rjmp	.+236    	; 0xb00 <gfx_mono_generic_draw_filled_circle+0x11c>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     a14:	84 2f       	mov	r24, r20
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	23 e0       	ldi	r18, 0x03	; 3
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	79 01       	movw	r14, r18
     a22:	e8 1a       	sub	r14, r24
     a24:	f9 0a       	sbc	r15, r25
     a26:	c6 2e       	mov	r12, r22
     a28:	d9 2c       	mov	r13, r9
     a2a:	19 2d       	mov	r17, r9
     a2c:	d1 e0       	ldi	r29, 0x01	; 1

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     a2e:	80 2f       	mov	r24, r16
     a30:	83 70       	andi	r24, 0x03	; 3
     a32:	68 2e       	mov	r6, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     a34:	80 2f       	mov	r24, r16
     a36:	8c 70       	andi	r24, 0x0C	; 12
     a38:	78 2e       	mov	r7, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     a3a:	80 2f       	mov	r24, r16
     a3c:	80 73       	andi	r24, 0x30	; 48
     a3e:	88 2e       	mov	r8, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     a40:	00 7c       	andi	r16, 0xC0	; 192
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <gfx_mono_generic_draw_filled_circle+0x62>
     a44:	d8 2f       	mov	r29, r24
     a46:	55 24       	eor	r5, r5
     a48:	5a 94       	dec	r5
     a4a:	5d 0e       	add	r5, r29
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     a4c:	66 20       	and	r6, r6
     a4e:	69 f0       	breq	.+26     	; 0xa6a <gfx_mono_generic_draw_filled_circle+0x86>
			gfx_mono_draw_vertical_line(x + offset_y,
     a50:	2b 2d       	mov	r18, r11
     a52:	4d 2f       	mov	r20, r29
     a54:	6c 2d       	mov	r22, r12
     a56:	89 2d       	mov	r24, r9
     a58:	8c 0f       	add	r24, r28
     a5a:	6e df       	rcall	.-292    	; 0x938 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     a5c:	2b 2d       	mov	r18, r11
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	4c 0f       	add	r20, r28
     a62:	6a 2d       	mov	r22, r10
     a64:	6c 1b       	sub	r22, r28
     a66:	81 2f       	mov	r24, r17
     a68:	67 df       	rcall	.-306    	; 0x938 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     a6a:	77 20       	and	r7, r7
     a6c:	69 f0       	breq	.+26     	; 0xa88 <gfx_mono_generic_draw_filled_circle+0xa4>
			gfx_mono_draw_vertical_line(x - offset_y,
     a6e:	2b 2d       	mov	r18, r11
     a70:	4d 2f       	mov	r20, r29
     a72:	6c 2d       	mov	r22, r12
     a74:	89 2d       	mov	r24, r9
     a76:	8c 1b       	sub	r24, r28
     a78:	5f df       	rcall	.-322    	; 0x938 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     a7a:	2b 2d       	mov	r18, r11
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	4c 0f       	add	r20, r28
     a80:	6a 2d       	mov	r22, r10
     a82:	6c 1b       	sub	r22, r28
     a84:	8d 2d       	mov	r24, r13
     a86:	58 df       	rcall	.-336    	; 0x938 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     a88:	88 20       	and	r8, r8
     a8a:	61 f0       	breq	.+24     	; 0xaa4 <gfx_mono_generic_draw_filled_circle+0xc0>
			gfx_mono_draw_vertical_line(x - offset_y,
     a8c:	2b 2d       	mov	r18, r11
     a8e:	4d 2f       	mov	r20, r29
     a90:	6a 2d       	mov	r22, r10
     a92:	89 2d       	mov	r24, r9
     a94:	8c 1b       	sub	r24, r28
     a96:	50 df       	rcall	.-352    	; 0x938 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     a98:	2b 2d       	mov	r18, r11
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	4c 0f       	add	r20, r28
     a9e:	6a 2d       	mov	r22, r10
     aa0:	8d 2d       	mov	r24, r13
     aa2:	4a df       	rcall	.-364    	; 0x938 <gfx_mono_generic_draw_vertical_line>
     aa4:	00 23       	and	r16, r16
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     aa6:	61 f0       	breq	.+24     	; 0xac0 <gfx_mono_generic_draw_filled_circle+0xdc>
			gfx_mono_draw_vertical_line(x + offset_y,
     aa8:	2b 2d       	mov	r18, r11
     aaa:	4d 2f       	mov	r20, r29
     aac:	6a 2d       	mov	r22, r10
     aae:	89 2d       	mov	r24, r9
     ab0:	8c 0f       	add	r24, r28
     ab2:	42 df       	rcall	.-380    	; 0x938 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     ab4:	2b 2d       	mov	r18, r11
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	4c 0f       	add	r20, r28
     aba:	6a 2d       	mov	r22, r10
     abc:	81 2f       	mov	r24, r17
     abe:	3c df       	rcall	.-392    	; 0x938 <gfx_mono_generic_draw_vertical_line>
     ac0:	ff 20       	and	r15, r15
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     ac2:	54 f4       	brge	.+20     	; 0xad8 <gfx_mono_generic_draw_filled_circle+0xf4>
     ac4:	85 2d       	mov	r24, r5
			error += ((offset_x << 2) + 6);
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	06 96       	adiw	r24, 0x06	; 6
     ad2:	e8 0e       	add	r14, r24
     ad4:	f9 1e       	adc	r15, r25
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <gfx_mono_generic_draw_filled_circle+0x10c>
     ad8:	85 2d       	mov	r24, r5
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	8c 1b       	sub	r24, r28
     ade:	91 09       	sbc	r25, r1
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	0a 96       	adiw	r24, 0x0a	; 10
     aea:	e8 0e       	add	r14, r24
     aec:	f9 1e       	adc	r15, r25
     aee:	c1 50       	subi	r28, 0x01	; 1
			--offset_y;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8d 0f       	add	r24, r29
     af4:	1f 5f       	subi	r17, 0xFF	; 255
     af6:	da 94       	dec	r13
     af8:	ca 94       	dec	r12
     afa:	cd 17       	cp	r28, r29
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     afc:	08 f0       	brcs	.+2      	; 0xb00 <gfx_mono_generic_draw_filled_circle+0x11c>
     afe:	a2 cf       	rjmp	.-188    	; 0xa44 <gfx_mono_generic_draw_filled_circle+0x60>
     b00:	df 91       	pop	r29
		}

		/* Next X. */
		++offset_x;
	}
}
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	bf 90       	pop	r11
     b12:	af 90       	pop	r10
     b14:	9f 90       	pop	r9
     b16:	8f 90       	pop	r8
     b18:	7f 90       	pop	r7
     b1a:	6f 90       	pop	r6
     b1c:	5f 90       	pop	r5
     b1e:	08 95       	ret

00000b20 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     b2a:	c6 2f       	mov	r28, r22
     b2c:	d0 e0       	ldi	r29, 0x00	; 0
     b2e:	de 01       	movw	r26, r28
     b30:	02 2e       	mov	r0, r18
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <ioport_configure_port_pin+0x18>
     b34:	b5 95       	asr	r27
     b36:	a7 95       	ror	r26
     b38:	0a 94       	dec	r0
     b3a:	e2 f7       	brpl	.-8      	; 0xb34 <ioport_configure_port_pin+0x14>
     b3c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     b3e:	50 8b       	std	Z+16, r21	; 0x10
     b40:	2f 5f       	subi	r18, 0xFF	; 255
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     b46:	28 30       	cpi	r18, 0x08	; 8
     b48:	31 05       	cpc	r19, r1
     b4a:	89 f7       	brne	.-30     	; 0xb2e <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     b4c:	40 ff       	sbrs	r20, 0
     b4e:	0a c0       	rjmp	.+20     	; 0xb64 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     b50:	41 ff       	sbrs	r20, 1
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     b54:	fc 01       	movw	r30, r24
     b56:	65 83       	std	Z+5, r22	; 0x05
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     b5a:	fc 01       	movw	r30, r24
     b5c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     b5e:	fc 01       	movw	r30, r24
     b60:	61 83       	std	Z+1, r22	; 0x01
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     b64:	fc 01       	movw	r30, r24
     b66:	62 83       	std	Z+2, r22	; 0x02
	}
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     b6e:	80 3a       	cpi	r24, 0xA0	; 160
     b70:	28 e0       	ldi	r18, 0x08	; 8
     b72:	92 07       	cpc	r25, r18
     b74:	21 f4       	brne	.+8      	; 0xb7e <usart_spi_init+0x10>
     b76:	60 e1       	ldi	r22, 0x10	; 16
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	6a cd       	rjmp	.-1324   	; 0x650 <sysclk_enable_module>
     b7c:	08 95       	ret
     b7e:	80 3b       	cpi	r24, 0xB0	; 176
     b80:	28 e0       	ldi	r18, 0x08	; 8
     b82:	92 07       	cpc	r25, r18
     b84:	21 f4       	brne	.+8      	; 0xb8e <usart_spi_init+0x20>
     b86:	60 e2       	ldi	r22, 0x20	; 32
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	62 cd       	rjmp	.-1340   	; 0x650 <sysclk_enable_module>
     b8c:	08 95       	ret
     b8e:	80 3a       	cpi	r24, 0xA0	; 160
     b90:	29 e0       	ldi	r18, 0x09	; 9
     b92:	92 07       	cpc	r25, r18
     b94:	21 f4       	brne	.+8      	; 0xb9e <usart_spi_init+0x30>
     b96:	60 e1       	ldi	r22, 0x10	; 16
     b98:	84 e0       	ldi	r24, 0x04	; 4
     b9a:	5a cd       	rjmp	.-1356   	; 0x650 <sysclk_enable_module>
     b9c:	08 95       	ret
     b9e:	80 3b       	cpi	r24, 0xB0	; 176
     ba0:	29 e0       	ldi	r18, 0x09	; 9
     ba2:	92 07       	cpc	r25, r18
     ba4:	21 f4       	brne	.+8      	; 0xbae <usart_spi_init+0x40>
     ba6:	60 e2       	ldi	r22, 0x20	; 32
     ba8:	84 e0       	ldi	r24, 0x04	; 4
     baa:	52 cd       	rjmp	.-1372   	; 0x650 <sysclk_enable_module>
     bac:	08 95       	ret
     bae:	80 3a       	cpi	r24, 0xA0	; 160
     bb0:	2a e0       	ldi	r18, 0x0A	; 10
     bb2:	92 07       	cpc	r25, r18
     bb4:	21 f4       	brne	.+8      	; 0xbbe <usart_spi_init+0x50>
     bb6:	60 e1       	ldi	r22, 0x10	; 16
     bb8:	85 e0       	ldi	r24, 0x05	; 5
     bba:	4a cd       	rjmp	.-1388   	; 0x650 <sysclk_enable_module>
     bbc:	08 95       	ret
     bbe:	80 3a       	cpi	r24, 0xA0	; 160
     bc0:	9b 40       	sbci	r25, 0x0B	; 11
     bc2:	19 f4       	brne	.+6      	; 0xbca <usart_spi_init+0x5c>
     bc4:	60 e1       	ldi	r22, 0x10	; 16
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	43 cd       	rjmp	.-1402   	; 0x650 <sysclk_enable_module>
     bca:	08 95       	ret

00000bcc <usart_spi_setup_device>:
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <usart_spi_setup_device+0xa>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <usart_spi_setup_device+0xc>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	09 83       	std	Y+1, r16	; 0x01
     bde:	1a 83       	std	Y+2, r17	; 0x02
     be0:	2b 83       	std	Y+3, r18	; 0x03
     be2:	3c 83       	std	Y+4, r19	; 0x04
     be4:	4d 83       	std	Y+5, r20	; 0x05
     be6:	1e 82       	std	Y+6, r1	; 0x06
     be8:	be 01       	movw	r22, r28
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	cb d7       	rcall	.+3990   	; 0x1b86 <usart_init_spi>
     bf0:	26 96       	adiw	r28, 0x06	; 6
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     c00:	fb 01       	movw	r30, r22
     c02:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     c04:	e8 2f       	mov	r30, r24
     c06:	e6 95       	lsr	r30
     c08:	e6 95       	lsr	r30
     c0a:	e6 95       	lsr	r30
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	e4 9f       	mul	r30, r20
     c10:	f0 01       	movw	r30, r0
     c12:	11 24       	eor	r1, r1
     c14:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     c16:	87 70       	andi	r24, 0x07	; 7
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	a9 01       	movw	r20, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <usart_spi_select_device+0x24>
     c20:	44 0f       	add	r20, r20
     c22:	55 1f       	adc	r21, r21
     c24:	8a 95       	dec	r24
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     c28:	46 83       	std	Z+6, r20	; 0x06
     c2a:	08 95       	ret

00000c2c <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     c2c:	fb 01       	movw	r30, r22
     c2e:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     c30:	e8 2f       	mov	r30, r24
     c32:	e6 95       	lsr	r30
     c34:	e6 95       	lsr	r30
     c36:	e6 95       	lsr	r30
     c38:	40 e2       	ldi	r20, 0x20	; 32
     c3a:	e4 9f       	mul	r30, r20
     c3c:	f0 01       	movw	r30, r0
     c3e:	11 24       	eor	r1, r1
     c40:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     c42:	87 70       	andi	r24, 0x07	; 7
     c44:	21 e0       	ldi	r18, 0x01	; 1
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	a9 01       	movw	r20, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <usart_spi_deselect_device+0x24>
     c4c:	44 0f       	add	r20, r20
     c4e:	55 1f       	adc	r21, r21
     c50:	8a 95       	dec	r24
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     c54:	45 83       	std	Z+5, r20	; 0x05
     c56:	08 95       	ret

00000c58 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     c58:	43 e0       	ldi	r20, 0x03	; 3
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	80 ee       	ldi	r24, 0xE0	; 224
     c60:	97 e0       	ldi	r25, 0x07	; 7
     c62:	5e df       	rcall	.-324    	; 0xb20 <ioport_configure_port_pin>
     c64:	43 e0       	ldi	r20, 0x03	; 3
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	80 ee       	ldi	r24, 0xE0	; 224
     c6c:	97 e0       	ldi	r25, 0x07	; 7
     c6e:	58 df       	rcall	.-336    	; 0xb20 <ioport_configure_port_pin>
     c70:	43 e0       	ldi	r20, 0x03	; 3
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	60 e1       	ldi	r22, 0x10	; 16
     c76:	80 e6       	ldi	r24, 0x60	; 96
     c78:	96 e0       	ldi	r25, 0x06	; 6
     c7a:	52 df       	rcall	.-348    	; 0xb20 <ioport_configure_port_pin>
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	50 e4       	ldi	r21, 0x40	; 64
     c80:	60 e2       	ldi	r22, 0x20	; 32
     c82:	80 e6       	ldi	r24, 0x60	; 96
     c84:	96 e0       	ldi	r25, 0x06	; 6
     c86:	4c df       	rcall	.-360    	; 0xb20 <ioport_configure_port_pin>
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	5b e1       	ldi	r21, 0x1B	; 27
     c8c:	60 e2       	ldi	r22, 0x20	; 32
     c8e:	80 e8       	ldi	r24, 0x80	; 128
     c90:	96 e0       	ldi	r25, 0x06	; 6
     c92:	46 df       	rcall	.-372    	; 0xb20 <ioport_configure_port_pin>
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	5b e1       	ldi	r21, 0x1B	; 27
     c98:	62 e0       	ldi	r22, 0x02	; 2
     c9a:	80 ea       	ldi	r24, 0xA0	; 160
     c9c:	96 e0       	ldi	r25, 0x06	; 6
     c9e:	40 df       	rcall	.-384    	; 0xb20 <ioport_configure_port_pin>
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	5b e1       	ldi	r21, 0x1B	; 27
     ca4:	64 e0       	ldi	r22, 0x04	; 4
     ca6:	80 ea       	ldi	r24, 0xA0	; 160
     ca8:	96 e0       	ldi	r25, 0x06	; 6
     caa:	3a df       	rcall	.-396    	; 0xb20 <ioport_configure_port_pin>
     cac:	43 e0       	ldi	r20, 0x03	; 3
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	62 e0       	ldi	r22, 0x02	; 2
     cb2:	80 e6       	ldi	r24, 0x60	; 96
     cb4:	96 e0       	ldi	r25, 0x06	; 6
     cb6:	34 df       	rcall	.-408    	; 0xb20 <ioport_configure_port_pin>
     cb8:	43 e0       	ldi	r20, 0x03	; 3
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	68 e0       	ldi	r22, 0x08	; 8
     cbe:	80 e6       	ldi	r24, 0x60	; 96
     cc0:	96 e0       	ldi	r25, 0x06	; 6
     cc2:	2e df       	rcall	.-420    	; 0xb20 <ioport_configure_port_pin>
     cc4:	43 e0       	ldi	r20, 0x03	; 3
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	68 e0       	ldi	r22, 0x08	; 8
     cca:	80 ea       	ldi	r24, 0xA0	; 160
     ccc:	96 e0       	ldi	r25, 0x06	; 6
     cce:	28 df       	rcall	.-432    	; 0xb20 <ioport_configure_port_pin>
     cd0:	43 e0       	ldi	r20, 0x03	; 3
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	80 e6       	ldi	r24, 0x60	; 96
     cd8:	96 e0       	ldi	r25, 0x06	; 6
     cda:	22 df       	rcall	.-444    	; 0xb20 <ioport_configure_port_pin>
     cdc:	43 e0       	ldi	r20, 0x03	; 3
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	68 e0       	ldi	r22, 0x08	; 8
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	96 e0       	ldi	r25, 0x06	; 6
     ce6:	1c df       	rcall	.-456    	; 0xb20 <ioport_configure_port_pin>
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	60 e1       	ldi	r22, 0x10	; 16
     cee:	80 e8       	ldi	r24, 0x80	; 128
     cf0:	96 e0       	ldi	r25, 0x06	; 6
     cf2:	16 cf       	rjmp	.-468    	; 0xb20 <ioport_configure_port_pin>
     cf4:	08 95       	ret

00000cf6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     cf6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     cf8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     cfa:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     cfc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     cfe:	60 83       	st	Z, r22
	ret                             // Return to caller
     d00:	08 95       	ret

00000d02 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	0b b6       	in	r0, 0x3b	; 59
     d0e:	0f 92       	push	r0
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
     d28:	e0 91 4e 22 	lds	r30, 0x224E	; 0x80224e <tc_tcc0_ovf_callback>
     d2c:	f0 91 4f 22 	lds	r31, 0x224F	; 0x80224f <tc_tcc0_ovf_callback+0x1>
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	09 f0       	breq	.+2      	; 0xd36 <__vector_14+0x34>
     d34:	19 95       	eicall
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0b be       	out	0x3b, r0	; 59
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <__vector_15>:
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	0b b6       	in	r0, 0x3b	; 59
     d68:	0f 92       	push	r0
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	e0 91 4c 22 	lds	r30, 0x224C	; 0x80224c <tc_tcc0_err_callback>
     d86:	f0 91 4d 22 	lds	r31, 0x224D	; 0x80224d <tc_tcc0_err_callback+0x1>
     d8a:	30 97       	sbiw	r30, 0x00	; 0
     d8c:	09 f0       	breq	.+2      	; 0xd90 <__vector_15+0x34>
     d8e:	19 95       	eicall
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0b be       	out	0x3b, r0	; 59
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <__vector_16>:
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	0b b6       	in	r0, 0x3b	; 59
     dc2:	0f 92       	push	r0
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
     ddc:	e0 91 4a 22 	lds	r30, 0x224A	; 0x80224a <tc_tcc0_cca_callback>
     de0:	f0 91 4b 22 	lds	r31, 0x224B	; 0x80224b <tc_tcc0_cca_callback+0x1>
     de4:	30 97       	sbiw	r30, 0x00	; 0
     de6:	09 f0       	breq	.+2      	; 0xdea <__vector_16+0x34>
     de8:	19 95       	eicall
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0b be       	out	0x3b, r0	; 59
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <__vector_17>:
     e10:	1f 92       	push	r1
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	0f 92       	push	r0
     e18:	11 24       	eor	r1, r1
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
     e36:	e0 91 48 22 	lds	r30, 0x2248	; 0x802248 <tc_tcc0_ccb_callback>
     e3a:	f0 91 49 22 	lds	r31, 0x2249	; 0x802249 <tc_tcc0_ccb_callback+0x1>
     e3e:	30 97       	sbiw	r30, 0x00	; 0
     e40:	09 f0       	breq	.+2      	; 0xe44 <__vector_17+0x34>
     e42:	19 95       	eicall
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	7f 91       	pop	r23
     e52:	6f 91       	pop	r22
     e54:	5f 91       	pop	r21
     e56:	4f 91       	pop	r20
     e58:	3f 91       	pop	r19
     e5a:	2f 91       	pop	r18
     e5c:	0f 90       	pop	r0
     e5e:	0b be       	out	0x3b, r0	; 59
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <__vector_18>:
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	11 24       	eor	r1, r1
     e74:	0b b6       	in	r0, 0x3b	; 59
     e76:	0f 92       	push	r0
     e78:	2f 93       	push	r18
     e7a:	3f 93       	push	r19
     e7c:	4f 93       	push	r20
     e7e:	5f 93       	push	r21
     e80:	6f 93       	push	r22
     e82:	7f 93       	push	r23
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
     e88:	af 93       	push	r26
     e8a:	bf 93       	push	r27
     e8c:	ef 93       	push	r30
     e8e:	ff 93       	push	r31
     e90:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <tc_tcc0_ccc_callback>
     e94:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <tc_tcc0_ccc_callback+0x1>
     e98:	30 97       	sbiw	r30, 0x00	; 0
     e9a:	09 f0       	breq	.+2      	; 0xe9e <__vector_18+0x34>
     e9c:	19 95       	eicall
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0b be       	out	0x3b, r0	; 59
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <__vector_19>:
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	0b b6       	in	r0, 0x3b	; 59
     ed0:	0f 92       	push	r0
     ed2:	2f 93       	push	r18
     ed4:	3f 93       	push	r19
     ed6:	4f 93       	push	r20
     ed8:	5f 93       	push	r21
     eda:	6f 93       	push	r22
     edc:	7f 93       	push	r23
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	af 93       	push	r26
     ee4:	bf 93       	push	r27
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
     eea:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <tc_tcc0_ccd_callback>
     eee:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <tc_tcc0_ccd_callback+0x1>
     ef2:	30 97       	sbiw	r30, 0x00	; 0
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__vector_19+0x34>
     ef6:	19 95       	eicall
     ef8:	ff 91       	pop	r31
     efa:	ef 91       	pop	r30
     efc:	bf 91       	pop	r27
     efe:	af 91       	pop	r26
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	7f 91       	pop	r23
     f06:	6f 91       	pop	r22
     f08:	5f 91       	pop	r21
     f0a:	4f 91       	pop	r20
     f0c:	3f 91       	pop	r19
     f0e:	2f 91       	pop	r18
     f10:	0f 90       	pop	r0
     f12:	0b be       	out	0x3b, r0	; 59
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_20>:
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	0b b6       	in	r0, 0x3b	; 59
     f2a:	0f 92       	push	r0
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
     f44:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <tc_tcc1_ovf_callback>
     f48:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <tc_tcc1_ovf_callback+0x1>
     f4c:	30 97       	sbiw	r30, 0x00	; 0
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__vector_20+0x34>
     f50:	19 95       	eicall
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0b be       	out	0x3b, r0	; 59
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <__vector_21>:
     f78:	1f 92       	push	r1
     f7a:	0f 92       	push	r0
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	0f 92       	push	r0
     f80:	11 24       	eor	r1, r1
     f82:	0b b6       	in	r0, 0x3b	; 59
     f84:	0f 92       	push	r0
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	e0 91 40 22 	lds	r30, 0x2240	; 0x802240 <tc_tcc1_err_callback>
     fa2:	f0 91 41 22 	lds	r31, 0x2241	; 0x802241 <tc_tcc1_err_callback+0x1>
     fa6:	30 97       	sbiw	r30, 0x00	; 0
     fa8:	09 f0       	breq	.+2      	; 0xfac <__vector_21+0x34>
     faa:	19 95       	eicall
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	bf 91       	pop	r27
     fb2:	af 91       	pop	r26
     fb4:	9f 91       	pop	r25
     fb6:	8f 91       	pop	r24
     fb8:	7f 91       	pop	r23
     fba:	6f 91       	pop	r22
     fbc:	5f 91       	pop	r21
     fbe:	4f 91       	pop	r20
     fc0:	3f 91       	pop	r19
     fc2:	2f 91       	pop	r18
     fc4:	0f 90       	pop	r0
     fc6:	0b be       	out	0x3b, r0	; 59
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <__vector_22>:
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	0b b6       	in	r0, 0x3b	; 59
     fde:	0f 92       	push	r0
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	e0 91 3e 22 	lds	r30, 0x223E	; 0x80223e <tc_tcc1_cca_callback>
     ffc:	f0 91 3f 22 	lds	r31, 0x223F	; 0x80223f <tc_tcc1_cca_callback+0x1>
    1000:	30 97       	sbiw	r30, 0x00	; 0
    1002:	09 f0       	breq	.+2      	; 0x1006 <__vector_22+0x34>
    1004:	19 95       	eicall
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0b be       	out	0x3b, r0	; 59
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <__vector_23>:
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	0b b6       	in	r0, 0x3b	; 59
    1038:	0f 92       	push	r0
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31
    1052:	e0 91 3c 22 	lds	r30, 0x223C	; 0x80223c <tc_tcc1_ccb_callback>
    1056:	f0 91 3d 22 	lds	r31, 0x223D	; 0x80223d <tc_tcc1_ccb_callback+0x1>
    105a:	30 97       	sbiw	r30, 0x00	; 0
    105c:	09 f0       	breq	.+2      	; 0x1060 <__vector_23+0x34>
    105e:	19 95       	eicall
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0b be       	out	0x3b, r0	; 59
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <__vector_77>:
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	0b b6       	in	r0, 0x3b	; 59
    1092:	0f 92       	push	r0
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
    10ac:	e0 91 3a 22 	lds	r30, 0x223A	; 0x80223a <tc_tcd0_ovf_callback>
    10b0:	f0 91 3b 22 	lds	r31, 0x223B	; 0x80223b <tc_tcd0_ovf_callback+0x1>
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__vector_77+0x34>
    10b8:	19 95       	eicall
    10ba:	ff 91       	pop	r31
    10bc:	ef 91       	pop	r30
    10be:	bf 91       	pop	r27
    10c0:	af 91       	pop	r26
    10c2:	9f 91       	pop	r25
    10c4:	8f 91       	pop	r24
    10c6:	7f 91       	pop	r23
    10c8:	6f 91       	pop	r22
    10ca:	5f 91       	pop	r21
    10cc:	4f 91       	pop	r20
    10ce:	3f 91       	pop	r19
    10d0:	2f 91       	pop	r18
    10d2:	0f 90       	pop	r0
    10d4:	0b be       	out	0x3b, r0	; 59
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <__vector_78>:
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	0b b6       	in	r0, 0x3b	; 59
    10ec:	0f 92       	push	r0
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
    1106:	e0 91 38 22 	lds	r30, 0x2238	; 0x802238 <tc_tcd0_err_callback>
    110a:	f0 91 39 22 	lds	r31, 0x2239	; 0x802239 <tc_tcd0_err_callback+0x1>
    110e:	30 97       	sbiw	r30, 0x00	; 0
    1110:	09 f0       	breq	.+2      	; 0x1114 <__vector_78+0x34>
    1112:	19 95       	eicall
    1114:	ff 91       	pop	r31
    1116:	ef 91       	pop	r30
    1118:	bf 91       	pop	r27
    111a:	af 91       	pop	r26
    111c:	9f 91       	pop	r25
    111e:	8f 91       	pop	r24
    1120:	7f 91       	pop	r23
    1122:	6f 91       	pop	r22
    1124:	5f 91       	pop	r21
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0b be       	out	0x3b, r0	; 59
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <__vector_79>:
    113a:	1f 92       	push	r1
    113c:	0f 92       	push	r0
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	0f 92       	push	r0
    1142:	11 24       	eor	r1, r1
    1144:	0b b6       	in	r0, 0x3b	; 59
    1146:	0f 92       	push	r0
    1148:	2f 93       	push	r18
    114a:	3f 93       	push	r19
    114c:	4f 93       	push	r20
    114e:	5f 93       	push	r21
    1150:	6f 93       	push	r22
    1152:	7f 93       	push	r23
    1154:	8f 93       	push	r24
    1156:	9f 93       	push	r25
    1158:	af 93       	push	r26
    115a:	bf 93       	push	r27
    115c:	ef 93       	push	r30
    115e:	ff 93       	push	r31
    1160:	e0 91 36 22 	lds	r30, 0x2236	; 0x802236 <tc_tcd0_cca_callback>
    1164:	f0 91 37 22 	lds	r31, 0x2237	; 0x802237 <tc_tcd0_cca_callback+0x1>
    1168:	30 97       	sbiw	r30, 0x00	; 0
    116a:	09 f0       	breq	.+2      	; 0x116e <__vector_79+0x34>
    116c:	19 95       	eicall
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	bf 91       	pop	r27
    1174:	af 91       	pop	r26
    1176:	9f 91       	pop	r25
    1178:	8f 91       	pop	r24
    117a:	7f 91       	pop	r23
    117c:	6f 91       	pop	r22
    117e:	5f 91       	pop	r21
    1180:	4f 91       	pop	r20
    1182:	3f 91       	pop	r19
    1184:	2f 91       	pop	r18
    1186:	0f 90       	pop	r0
    1188:	0b be       	out	0x3b, r0	; 59
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_80>:
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	0b b6       	in	r0, 0x3b	; 59
    11a0:	0f 92       	push	r0
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <tc_tcd0_ccb_callback>
    11be:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <tc_tcd0_ccb_callback+0x1>
    11c2:	30 97       	sbiw	r30, 0x00	; 0
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <__vector_80+0x34>
    11c6:	19 95       	eicall
    11c8:	ff 91       	pop	r31
    11ca:	ef 91       	pop	r30
    11cc:	bf 91       	pop	r27
    11ce:	af 91       	pop	r26
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	7f 91       	pop	r23
    11d6:	6f 91       	pop	r22
    11d8:	5f 91       	pop	r21
    11da:	4f 91       	pop	r20
    11dc:	3f 91       	pop	r19
    11de:	2f 91       	pop	r18
    11e0:	0f 90       	pop	r0
    11e2:	0b be       	out	0x3b, r0	; 59
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <__vector_81>:
    11ee:	1f 92       	push	r1
    11f0:	0f 92       	push	r0
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	0f 92       	push	r0
    11f6:	11 24       	eor	r1, r1
    11f8:	0b b6       	in	r0, 0x3b	; 59
    11fa:	0f 92       	push	r0
    11fc:	2f 93       	push	r18
    11fe:	3f 93       	push	r19
    1200:	4f 93       	push	r20
    1202:	5f 93       	push	r21
    1204:	6f 93       	push	r22
    1206:	7f 93       	push	r23
    1208:	8f 93       	push	r24
    120a:	9f 93       	push	r25
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
    1214:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <tc_tcd0_ccc_callback>
    1218:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <tc_tcd0_ccc_callback+0x1>
    121c:	30 97       	sbiw	r30, 0x00	; 0
    121e:	09 f0       	breq	.+2      	; 0x1222 <__vector_81+0x34>
    1220:	19 95       	eicall
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0b be       	out	0x3b, r0	; 59
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <__vector_82>:
    1248:	1f 92       	push	r1
    124a:	0f 92       	push	r0
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	0f 92       	push	r0
    1250:	11 24       	eor	r1, r1
    1252:	0b b6       	in	r0, 0x3b	; 59
    1254:	0f 92       	push	r0
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
    126e:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <tc_tcd0_ccd_callback>
    1272:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <tc_tcd0_ccd_callback+0x1>
    1276:	30 97       	sbiw	r30, 0x00	; 0
    1278:	09 f0       	breq	.+2      	; 0x127c <__vector_82+0x34>
    127a:	19 95       	eicall
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0b be       	out	0x3b, r0	; 59
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <__vector_83>:
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	0b b6       	in	r0, 0x3b	; 59
    12ae:	0f 92       	push	r0
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
    12c8:	e0 91 2e 22 	lds	r30, 0x222E	; 0x80222e <tc_tcd1_ovf_callback>
    12cc:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <tc_tcd1_ovf_callback+0x1>
    12d0:	30 97       	sbiw	r30, 0x00	; 0
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <__vector_83+0x34>
    12d4:	19 95       	eicall
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	bf 91       	pop	r27
    12dc:	af 91       	pop	r26
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	7f 91       	pop	r23
    12e4:	6f 91       	pop	r22
    12e6:	5f 91       	pop	r21
    12e8:	4f 91       	pop	r20
    12ea:	3f 91       	pop	r19
    12ec:	2f 91       	pop	r18
    12ee:	0f 90       	pop	r0
    12f0:	0b be       	out	0x3b, r0	; 59
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_84>:
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	0b b6       	in	r0, 0x3b	; 59
    1308:	0f 92       	push	r0
    130a:	2f 93       	push	r18
    130c:	3f 93       	push	r19
    130e:	4f 93       	push	r20
    1310:	5f 93       	push	r21
    1312:	6f 93       	push	r22
    1314:	7f 93       	push	r23
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	af 93       	push	r26
    131c:	bf 93       	push	r27
    131e:	ef 93       	push	r30
    1320:	ff 93       	push	r31
    1322:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <tc_tcd1_err_callback>
    1326:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <tc_tcd1_err_callback+0x1>
    132a:	30 97       	sbiw	r30, 0x00	; 0
    132c:	09 f0       	breq	.+2      	; 0x1330 <__vector_84+0x34>
    132e:	19 95       	eicall
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0b be       	out	0x3b, r0	; 59
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <__vector_85>:
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	0b b6       	in	r0, 0x3b	; 59
    1362:	0f 92       	push	r0
    1364:	2f 93       	push	r18
    1366:	3f 93       	push	r19
    1368:	4f 93       	push	r20
    136a:	5f 93       	push	r21
    136c:	6f 93       	push	r22
    136e:	7f 93       	push	r23
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	af 93       	push	r26
    1376:	bf 93       	push	r27
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	e0 91 2a 22 	lds	r30, 0x222A	; 0x80222a <tc_tcd1_cca_callback>
    1380:	f0 91 2b 22 	lds	r31, 0x222B	; 0x80222b <tc_tcd1_cca_callback+0x1>
    1384:	30 97       	sbiw	r30, 0x00	; 0
    1386:	09 f0       	breq	.+2      	; 0x138a <__vector_85+0x34>
    1388:	19 95       	eicall
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	0b be       	out	0x3b, r0	; 59
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <__vector_86>:
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	0b b6       	in	r0, 0x3b	; 59
    13bc:	0f 92       	push	r0
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	e0 91 28 22 	lds	r30, 0x2228	; 0x802228 <tc_tcd1_ccb_callback>
    13da:	f0 91 29 22 	lds	r31, 0x2229	; 0x802229 <tc_tcd1_ccb_callback+0x1>
    13de:	30 97       	sbiw	r30, 0x00	; 0
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <__vector_86+0x34>
    13e2:	19 95       	eicall
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	0b be       	out	0x3b, r0	; 59
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_47>:
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	0b b6       	in	r0, 0x3b	; 59
    1416:	0f 92       	push	r0
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	e0 91 26 22 	lds	r30, 0x2226	; 0x802226 <tc_tce0_ovf_callback>
    1434:	f0 91 27 22 	lds	r31, 0x2227	; 0x802227 <tc_tce0_ovf_callback+0x1>
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	09 f0       	breq	.+2      	; 0x143e <__vector_47+0x34>
    143c:	19 95       	eicall
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	7f 91       	pop	r23
    144c:	6f 91       	pop	r22
    144e:	5f 91       	pop	r21
    1450:	4f 91       	pop	r20
    1452:	3f 91       	pop	r19
    1454:	2f 91       	pop	r18
    1456:	0f 90       	pop	r0
    1458:	0b be       	out	0x3b, r0	; 59
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	0f 90       	pop	r0
    1460:	1f 90       	pop	r1
    1462:	18 95       	reti

00001464 <__vector_48>:
    1464:	1f 92       	push	r1
    1466:	0f 92       	push	r0
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	0f 92       	push	r0
    146c:	11 24       	eor	r1, r1
    146e:	0b b6       	in	r0, 0x3b	; 59
    1470:	0f 92       	push	r0
    1472:	2f 93       	push	r18
    1474:	3f 93       	push	r19
    1476:	4f 93       	push	r20
    1478:	5f 93       	push	r21
    147a:	6f 93       	push	r22
    147c:	7f 93       	push	r23
    147e:	8f 93       	push	r24
    1480:	9f 93       	push	r25
    1482:	af 93       	push	r26
    1484:	bf 93       	push	r27
    1486:	ef 93       	push	r30
    1488:	ff 93       	push	r31
    148a:	e0 91 24 22 	lds	r30, 0x2224	; 0x802224 <tc_tce0_err_callback>
    148e:	f0 91 25 22 	lds	r31, 0x2225	; 0x802225 <tc_tce0_err_callback+0x1>
    1492:	30 97       	sbiw	r30, 0x00	; 0
    1494:	09 f0       	breq	.+2      	; 0x1498 <__vector_48+0x34>
    1496:	19 95       	eicall
    1498:	ff 91       	pop	r31
    149a:	ef 91       	pop	r30
    149c:	bf 91       	pop	r27
    149e:	af 91       	pop	r26
    14a0:	9f 91       	pop	r25
    14a2:	8f 91       	pop	r24
    14a4:	7f 91       	pop	r23
    14a6:	6f 91       	pop	r22
    14a8:	5f 91       	pop	r21
    14aa:	4f 91       	pop	r20
    14ac:	3f 91       	pop	r19
    14ae:	2f 91       	pop	r18
    14b0:	0f 90       	pop	r0
    14b2:	0b be       	out	0x3b, r0	; 59
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti

000014be <__vector_49>:
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	0b b6       	in	r0, 0x3b	; 59
    14ca:	0f 92       	push	r0
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    14e4:	e0 91 22 22 	lds	r30, 0x2222	; 0x802222 <tc_tce0_cca_callback>
    14e8:	f0 91 23 22 	lds	r31, 0x2223	; 0x802223 <tc_tce0_cca_callback+0x1>
    14ec:	30 97       	sbiw	r30, 0x00	; 0
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <__vector_49+0x34>
    14f0:	19 95       	eicall
    14f2:	ff 91       	pop	r31
    14f4:	ef 91       	pop	r30
    14f6:	bf 91       	pop	r27
    14f8:	af 91       	pop	r26
    14fa:	9f 91       	pop	r25
    14fc:	8f 91       	pop	r24
    14fe:	7f 91       	pop	r23
    1500:	6f 91       	pop	r22
    1502:	5f 91       	pop	r21
    1504:	4f 91       	pop	r20
    1506:	3f 91       	pop	r19
    1508:	2f 91       	pop	r18
    150a:	0f 90       	pop	r0
    150c:	0b be       	out	0x3b, r0	; 59
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <__vector_50>:
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	0b b6       	in	r0, 0x3b	; 59
    1524:	0f 92       	push	r0
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <tc_tce0_ccb_callback>
    1542:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <tc_tce0_ccb_callback+0x1>
    1546:	30 97       	sbiw	r30, 0x00	; 0
    1548:	09 f0       	breq	.+2      	; 0x154c <__vector_50+0x34>
    154a:	19 95       	eicall
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0b be       	out	0x3b, r0	; 59
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <__vector_51>:
    1572:	1f 92       	push	r1
    1574:	0f 92       	push	r0
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	0f 92       	push	r0
    157a:	11 24       	eor	r1, r1
    157c:	0b b6       	in	r0, 0x3b	; 59
    157e:	0f 92       	push	r0
    1580:	2f 93       	push	r18
    1582:	3f 93       	push	r19
    1584:	4f 93       	push	r20
    1586:	5f 93       	push	r21
    1588:	6f 93       	push	r22
    158a:	7f 93       	push	r23
    158c:	8f 93       	push	r24
    158e:	9f 93       	push	r25
    1590:	af 93       	push	r26
    1592:	bf 93       	push	r27
    1594:	ef 93       	push	r30
    1596:	ff 93       	push	r31
    1598:	e0 91 1e 22 	lds	r30, 0x221E	; 0x80221e <tc_tce0_ccc_callback>
    159c:	f0 91 1f 22 	lds	r31, 0x221F	; 0x80221f <tc_tce0_ccc_callback+0x1>
    15a0:	30 97       	sbiw	r30, 0x00	; 0
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <__vector_51+0x34>
    15a4:	19 95       	eicall
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	bf 91       	pop	r27
    15ac:	af 91       	pop	r26
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	7f 91       	pop	r23
    15b4:	6f 91       	pop	r22
    15b6:	5f 91       	pop	r21
    15b8:	4f 91       	pop	r20
    15ba:	3f 91       	pop	r19
    15bc:	2f 91       	pop	r18
    15be:	0f 90       	pop	r0
    15c0:	0b be       	out	0x3b, r0	; 59
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <__vector_52>:
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	0b b6       	in	r0, 0x3b	; 59
    15d8:	0f 92       	push	r0
    15da:	2f 93       	push	r18
    15dc:	3f 93       	push	r19
    15de:	4f 93       	push	r20
    15e0:	5f 93       	push	r21
    15e2:	6f 93       	push	r22
    15e4:	7f 93       	push	r23
    15e6:	8f 93       	push	r24
    15e8:	9f 93       	push	r25
    15ea:	af 93       	push	r26
    15ec:	bf 93       	push	r27
    15ee:	ef 93       	push	r30
    15f0:	ff 93       	push	r31
    15f2:	e0 91 1c 22 	lds	r30, 0x221C	; 0x80221c <tc_tce0_ccd_callback>
    15f6:	f0 91 1d 22 	lds	r31, 0x221D	; 0x80221d <tc_tce0_ccd_callback+0x1>
    15fa:	30 97       	sbiw	r30, 0x00	; 0
    15fc:	09 f0       	breq	.+2      	; 0x1600 <__vector_52+0x34>
    15fe:	19 95       	eicall
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0b be       	out	0x3b, r0	; 59
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	0f 90       	pop	r0
    1622:	1f 90       	pop	r1
    1624:	18 95       	reti

00001626 <__vector_53>:
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	0b b6       	in	r0, 0x3b	; 59
    1632:	0f 92       	push	r0
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	4f 93       	push	r20
    163a:	5f 93       	push	r21
    163c:	6f 93       	push	r22
    163e:	7f 93       	push	r23
    1640:	8f 93       	push	r24
    1642:	9f 93       	push	r25
    1644:	af 93       	push	r26
    1646:	bf 93       	push	r27
    1648:	ef 93       	push	r30
    164a:	ff 93       	push	r31
    164c:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <tc_tce1_ovf_callback>
    1650:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <tc_tce1_ovf_callback+0x1>
    1654:	30 97       	sbiw	r30, 0x00	; 0
    1656:	09 f0       	breq	.+2      	; 0x165a <__vector_53+0x34>
    1658:	19 95       	eicall
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	bf 91       	pop	r27
    1660:	af 91       	pop	r26
    1662:	9f 91       	pop	r25
    1664:	8f 91       	pop	r24
    1666:	7f 91       	pop	r23
    1668:	6f 91       	pop	r22
    166a:	5f 91       	pop	r21
    166c:	4f 91       	pop	r20
    166e:	3f 91       	pop	r19
    1670:	2f 91       	pop	r18
    1672:	0f 90       	pop	r0
    1674:	0b be       	out	0x3b, r0	; 59
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	0f 90       	pop	r0
    167c:	1f 90       	pop	r1
    167e:	18 95       	reti

00001680 <__vector_54>:
    1680:	1f 92       	push	r1
    1682:	0f 92       	push	r0
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	0f 92       	push	r0
    1688:	11 24       	eor	r1, r1
    168a:	0b b6       	in	r0, 0x3b	; 59
    168c:	0f 92       	push	r0
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	e0 91 18 22 	lds	r30, 0x2218	; 0x802218 <tc_tce1_err_callback>
    16aa:	f0 91 19 22 	lds	r31, 0x2219	; 0x802219 <tc_tce1_err_callback+0x1>
    16ae:	30 97       	sbiw	r30, 0x00	; 0
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <__vector_54+0x34>
    16b2:	19 95       	eicall
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0b be       	out	0x3b, r0	; 59
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

000016da <__vector_55>:
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	0b b6       	in	r0, 0x3b	; 59
    16e6:	0f 92       	push	r0
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	e0 91 16 22 	lds	r30, 0x2216	; 0x802216 <tc_tce1_cca_callback>
    1704:	f0 91 17 22 	lds	r31, 0x2217	; 0x802217 <tc_tce1_cca_callback+0x1>
    1708:	30 97       	sbiw	r30, 0x00	; 0
    170a:	09 f0       	breq	.+2      	; 0x170e <__vector_55+0x34>
    170c:	19 95       	eicall
    170e:	ff 91       	pop	r31
    1710:	ef 91       	pop	r30
    1712:	bf 91       	pop	r27
    1714:	af 91       	pop	r26
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	7f 91       	pop	r23
    171c:	6f 91       	pop	r22
    171e:	5f 91       	pop	r21
    1720:	4f 91       	pop	r20
    1722:	3f 91       	pop	r19
    1724:	2f 91       	pop	r18
    1726:	0f 90       	pop	r0
    1728:	0b be       	out	0x3b, r0	; 59
    172a:	0f 90       	pop	r0
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	0f 90       	pop	r0
    1730:	1f 90       	pop	r1
    1732:	18 95       	reti

00001734 <__vector_56>:
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	0f 92       	push	r0
    173c:	11 24       	eor	r1, r1
    173e:	0b b6       	in	r0, 0x3b	; 59
    1740:	0f 92       	push	r0
    1742:	2f 93       	push	r18
    1744:	3f 93       	push	r19
    1746:	4f 93       	push	r20
    1748:	5f 93       	push	r21
    174a:	6f 93       	push	r22
    174c:	7f 93       	push	r23
    174e:	8f 93       	push	r24
    1750:	9f 93       	push	r25
    1752:	af 93       	push	r26
    1754:	bf 93       	push	r27
    1756:	ef 93       	push	r30
    1758:	ff 93       	push	r31
    175a:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <tc_tce1_ccb_callback>
    175e:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <tc_tce1_ccb_callback+0x1>
    1762:	30 97       	sbiw	r30, 0x00	; 0
    1764:	09 f0       	breq	.+2      	; 0x1768 <__vector_56+0x34>
    1766:	19 95       	eicall
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	0b be       	out	0x3b, r0	; 59
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <__vector_108>:
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	0b b6       	in	r0, 0x3b	; 59
    179a:	0f 92       	push	r0
    179c:	2f 93       	push	r18
    179e:	3f 93       	push	r19
    17a0:	4f 93       	push	r20
    17a2:	5f 93       	push	r21
    17a4:	6f 93       	push	r22
    17a6:	7f 93       	push	r23
    17a8:	8f 93       	push	r24
    17aa:	9f 93       	push	r25
    17ac:	af 93       	push	r26
    17ae:	bf 93       	push	r27
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
    17b4:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <tc_tcf0_ovf_callback>
    17b8:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <tc_tcf0_ovf_callback+0x1>
    17bc:	30 97       	sbiw	r30, 0x00	; 0
    17be:	09 f0       	breq	.+2      	; 0x17c2 <__vector_108+0x34>
    17c0:	19 95       	eicall
    17c2:	ff 91       	pop	r31
    17c4:	ef 91       	pop	r30
    17c6:	bf 91       	pop	r27
    17c8:	af 91       	pop	r26
    17ca:	9f 91       	pop	r25
    17cc:	8f 91       	pop	r24
    17ce:	7f 91       	pop	r23
    17d0:	6f 91       	pop	r22
    17d2:	5f 91       	pop	r21
    17d4:	4f 91       	pop	r20
    17d6:	3f 91       	pop	r19
    17d8:	2f 91       	pop	r18
    17da:	0f 90       	pop	r0
    17dc:	0b be       	out	0x3b, r0	; 59
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <__vector_109>:
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	0b b6       	in	r0, 0x3b	; 59
    17f4:	0f 92       	push	r0
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	e0 91 10 22 	lds	r30, 0x2210	; 0x802210 <tc_tcf0_err_callback>
    1812:	f0 91 11 22 	lds	r31, 0x2211	; 0x802211 <tc_tcf0_err_callback+0x1>
    1816:	30 97       	sbiw	r30, 0x00	; 0
    1818:	09 f0       	breq	.+2      	; 0x181c <__vector_109+0x34>
    181a:	19 95       	eicall
    181c:	ff 91       	pop	r31
    181e:	ef 91       	pop	r30
    1820:	bf 91       	pop	r27
    1822:	af 91       	pop	r26
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	7f 91       	pop	r23
    182a:	6f 91       	pop	r22
    182c:	5f 91       	pop	r21
    182e:	4f 91       	pop	r20
    1830:	3f 91       	pop	r19
    1832:	2f 91       	pop	r18
    1834:	0f 90       	pop	r0
    1836:	0b be       	out	0x3b, r0	; 59
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_110>:
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	0b b6       	in	r0, 0x3b	; 59
    184e:	0f 92       	push	r0
    1850:	2f 93       	push	r18
    1852:	3f 93       	push	r19
    1854:	4f 93       	push	r20
    1856:	5f 93       	push	r21
    1858:	6f 93       	push	r22
    185a:	7f 93       	push	r23
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
    1868:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <tc_tcf0_cca_callback>
    186c:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <tc_tcf0_cca_callback+0x1>
    1870:	30 97       	sbiw	r30, 0x00	; 0
    1872:	09 f0       	breq	.+2      	; 0x1876 <__vector_110+0x34>
    1874:	19 95       	eicall
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0b be       	out	0x3b, r0	; 59
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <__vector_111>:
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	0b b6       	in	r0, 0x3b	; 59
    18a8:	0f 92       	push	r0
    18aa:	2f 93       	push	r18
    18ac:	3f 93       	push	r19
    18ae:	4f 93       	push	r20
    18b0:	5f 93       	push	r21
    18b2:	6f 93       	push	r22
    18b4:	7f 93       	push	r23
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	af 93       	push	r26
    18bc:	bf 93       	push	r27
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
    18c2:	e0 91 0c 22 	lds	r30, 0x220C	; 0x80220c <tc_tcf0_ccb_callback>
    18c6:	f0 91 0d 22 	lds	r31, 0x220D	; 0x80220d <tc_tcf0_ccb_callback+0x1>
    18ca:	30 97       	sbiw	r30, 0x00	; 0
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <__vector_111+0x34>
    18ce:	19 95       	eicall
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	7f 91       	pop	r23
    18de:	6f 91       	pop	r22
    18e0:	5f 91       	pop	r21
    18e2:	4f 91       	pop	r20
    18e4:	3f 91       	pop	r19
    18e6:	2f 91       	pop	r18
    18e8:	0f 90       	pop	r0
    18ea:	0b be       	out	0x3b, r0	; 59
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	0f 90       	pop	r0
    18f2:	1f 90       	pop	r1
    18f4:	18 95       	reti

000018f6 <__vector_112>:
    18f6:	1f 92       	push	r1
    18f8:	0f 92       	push	r0
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	0f 92       	push	r0
    18fe:	11 24       	eor	r1, r1
    1900:	0b b6       	in	r0, 0x3b	; 59
    1902:	0f 92       	push	r0
    1904:	2f 93       	push	r18
    1906:	3f 93       	push	r19
    1908:	4f 93       	push	r20
    190a:	5f 93       	push	r21
    190c:	6f 93       	push	r22
    190e:	7f 93       	push	r23
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	af 93       	push	r26
    1916:	bf 93       	push	r27
    1918:	ef 93       	push	r30
    191a:	ff 93       	push	r31
    191c:	e0 91 0a 22 	lds	r30, 0x220A	; 0x80220a <tc_tcf0_ccc_callback>
    1920:	f0 91 0b 22 	lds	r31, 0x220B	; 0x80220b <tc_tcf0_ccc_callback+0x1>
    1924:	30 97       	sbiw	r30, 0x00	; 0
    1926:	09 f0       	breq	.+2      	; 0x192a <__vector_112+0x34>
    1928:	19 95       	eicall
    192a:	ff 91       	pop	r31
    192c:	ef 91       	pop	r30
    192e:	bf 91       	pop	r27
    1930:	af 91       	pop	r26
    1932:	9f 91       	pop	r25
    1934:	8f 91       	pop	r24
    1936:	7f 91       	pop	r23
    1938:	6f 91       	pop	r22
    193a:	5f 91       	pop	r21
    193c:	4f 91       	pop	r20
    193e:	3f 91       	pop	r19
    1940:	2f 91       	pop	r18
    1942:	0f 90       	pop	r0
    1944:	0b be       	out	0x3b, r0	; 59
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <__vector_113>:
    1950:	1f 92       	push	r1
    1952:	0f 92       	push	r0
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	0f 92       	push	r0
    1958:	11 24       	eor	r1, r1
    195a:	0b b6       	in	r0, 0x3b	; 59
    195c:	0f 92       	push	r0
    195e:	2f 93       	push	r18
    1960:	3f 93       	push	r19
    1962:	4f 93       	push	r20
    1964:	5f 93       	push	r21
    1966:	6f 93       	push	r22
    1968:	7f 93       	push	r23
    196a:	8f 93       	push	r24
    196c:	9f 93       	push	r25
    196e:	af 93       	push	r26
    1970:	bf 93       	push	r27
    1972:	ef 93       	push	r30
    1974:	ff 93       	push	r31
    1976:	e0 91 08 22 	lds	r30, 0x2208	; 0x802208 <tc_tcf0_ccd_callback>
    197a:	f0 91 09 22 	lds	r31, 0x2209	; 0x802209 <tc_tcf0_ccd_callback+0x1>
    197e:	30 97       	sbiw	r30, 0x00	; 0
    1980:	09 f0       	breq	.+2      	; 0x1984 <__vector_113+0x34>
    1982:	19 95       	eicall
    1984:	ff 91       	pop	r31
    1986:	ef 91       	pop	r30
    1988:	bf 91       	pop	r27
    198a:	af 91       	pop	r26
    198c:	9f 91       	pop	r25
    198e:	8f 91       	pop	r24
    1990:	7f 91       	pop	r23
    1992:	6f 91       	pop	r22
    1994:	5f 91       	pop	r21
    1996:	4f 91       	pop	r20
    1998:	3f 91       	pop	r19
    199a:	2f 91       	pop	r18
    199c:	0f 90       	pop	r0
    199e:	0b be       	out	0x3b, r0	; 59
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	0f 90       	pop	r0
    19a6:	1f 90       	pop	r1
    19a8:	18 95       	reti

000019aa <tc_enable>:
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	1f 92       	push	r1
    19b2:	1f 92       	push	r1
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	2f b7       	in	r18, 0x3f	; 63
    19ba:	2a 83       	std	Y+2, r18	; 0x02
    19bc:	f8 94       	cli
    19be:	1a 81       	ldd	r17, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	39 2f       	mov	r19, r25
    19c4:	21 15       	cp	r18, r1
    19c6:	88 e0       	ldi	r24, 0x08	; 8
    19c8:	38 07       	cpc	r19, r24
    19ca:	49 f4       	brne	.+18     	; 0x19de <tc_enable+0x34>
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    19d4:	64 e0       	ldi	r22, 0x04	; 4
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    19dc:	4f c0       	rjmp	.+158    	; 0x1a7c <tc_enable+0xd2>
    19de:	20 34       	cpi	r18, 0x40	; 64
    19e0:	88 e0       	ldi	r24, 0x08	; 8
    19e2:	38 07       	cpc	r19, r24
    19e4:	49 f4       	brne	.+18     	; 0x19f8 <tc_enable+0x4e>
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    19ee:	64 e0       	ldi	r22, 0x04	; 4
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    19f6:	42 c0       	rjmp	.+132    	; 0x1a7c <tc_enable+0xd2>
    19f8:	21 15       	cp	r18, r1
    19fa:	89 e0       	ldi	r24, 0x09	; 9
    19fc:	38 07       	cpc	r19, r24
    19fe:	49 f4       	brne	.+18     	; 0x1a12 <tc_enable+0x68>
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	84 e0       	ldi	r24, 0x04	; 4
    1a04:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a08:	64 e0       	ldi	r22, 0x04	; 4
    1a0a:	84 e0       	ldi	r24, 0x04	; 4
    1a0c:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a10:	35 c0       	rjmp	.+106    	; 0x1a7c <tc_enable+0xd2>
    1a12:	20 34       	cpi	r18, 0x40	; 64
    1a14:	89 e0       	ldi	r24, 0x09	; 9
    1a16:	38 07       	cpc	r19, r24
    1a18:	49 f4       	brne	.+18     	; 0x1a2c <tc_enable+0x82>
    1a1a:	62 e0       	ldi	r22, 0x02	; 2
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a22:	64 e0       	ldi	r22, 0x04	; 4
    1a24:	84 e0       	ldi	r24, 0x04	; 4
    1a26:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a2a:	28 c0       	rjmp	.+80     	; 0x1a7c <tc_enable+0xd2>
    1a2c:	21 15       	cp	r18, r1
    1a2e:	8a e0       	ldi	r24, 0x0A	; 10
    1a30:	38 07       	cpc	r19, r24
    1a32:	49 f4       	brne	.+18     	; 0x1a46 <tc_enable+0x9c>
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	85 e0       	ldi	r24, 0x05	; 5
    1a38:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a3c:	64 e0       	ldi	r22, 0x04	; 4
    1a3e:	85 e0       	ldi	r24, 0x05	; 5
    1a40:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a44:	1b c0       	rjmp	.+54     	; 0x1a7c <tc_enable+0xd2>
    1a46:	20 34       	cpi	r18, 0x40	; 64
    1a48:	8a e0       	ldi	r24, 0x0A	; 10
    1a4a:	38 07       	cpc	r19, r24
    1a4c:	49 f4       	brne	.+18     	; 0x1a60 <tc_enable+0xb6>
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	85 e0       	ldi	r24, 0x05	; 5
    1a52:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a56:	64 e0       	ldi	r22, 0x04	; 4
    1a58:	85 e0       	ldi	r24, 0x05	; 5
    1a5a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a5e:	0e c0       	rjmp	.+28     	; 0x1a7c <tc_enable+0xd2>
    1a60:	21 15       	cp	r18, r1
    1a62:	3b 40       	sbci	r19, 0x0B	; 11
    1a64:	49 f4       	brne	.+18     	; 0x1a78 <tc_enable+0xce>
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	86 e0       	ldi	r24, 0x06	; 6
    1a6a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a6e:	64 e0       	ldi	r22, 0x04	; 4
    1a70:	86 e0       	ldi	r24, 0x06	; 6
    1a72:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <tc_enable+0xd2>
    1a78:	1f bf       	out	0x3f, r17	; 63
    1a7a:	10 c0       	rjmp	.+32     	; 0x1a9c <tc_enable+0xf2>
    1a7c:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <sleepmgr_locks+0x1>
    1a80:	8f 3f       	cpi	r24, 0xFF	; 255
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <tc_enable+0xdc>
    1a84:	ff cf       	rjmp	.-2      	; 0x1a84 <tc_enable+0xda>
    1a86:	8f b7       	in	r24, 0x3f	; 63
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	f8 94       	cli
    1a8c:	99 81       	ldd	r25, Y+1	; 0x01
    1a8e:	e0 e5       	ldi	r30, 0x50	; 80
    1a90:	f2 e2       	ldi	r31, 0x22	; 34
    1a92:	81 81       	ldd	r24, Z+1	; 0x01
    1a94:	8f 5f       	subi	r24, 0xFF	; 255
    1a96:	81 83       	std	Z+1, r24	; 0x01
    1a98:	9f bf       	out	0x3f, r25	; 63
    1a9a:	1f bf       	out	0x3f, r17	; 63
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	08 95       	ret

00001aa8 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1aa8:	81 15       	cp	r24, r1
    1aaa:	28 e0       	ldi	r18, 0x08	; 8
    1aac:	92 07       	cpc	r25, r18
    1aae:	29 f4       	brne	.+10     	; 0x1aba <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    1ab0:	60 93 4e 22 	sts	0x224E, r22	; 0x80224e <tc_tcc0_ovf_callback>
    1ab4:	70 93 4f 22 	sts	0x224F, r23	; 0x80224f <tc_tcc0_ovf_callback+0x1>
    1ab8:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1aba:	80 34       	cpi	r24, 0x40	; 64
    1abc:	28 e0       	ldi	r18, 0x08	; 8
    1abe:	92 07       	cpc	r25, r18
    1ac0:	29 f4       	brne	.+10     	; 0x1acc <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    1ac2:	60 93 42 22 	sts	0x2242, r22	; 0x802242 <tc_tcc1_ovf_callback>
    1ac6:	70 93 43 22 	sts	0x2243, r23	; 0x802243 <tc_tcc1_ovf_callback+0x1>
    1aca:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1acc:	81 15       	cp	r24, r1
    1ace:	29 e0       	ldi	r18, 0x09	; 9
    1ad0:	92 07       	cpc	r25, r18
    1ad2:	29 f4       	brne	.+10     	; 0x1ade <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    1ad4:	60 93 3a 22 	sts	0x223A, r22	; 0x80223a <tc_tcd0_ovf_callback>
    1ad8:	70 93 3b 22 	sts	0x223B, r23	; 0x80223b <tc_tcd0_ovf_callback+0x1>
    1adc:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1ade:	80 34       	cpi	r24, 0x40	; 64
    1ae0:	29 e0       	ldi	r18, 0x09	; 9
    1ae2:	92 07       	cpc	r25, r18
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1ae6:	60 93 2e 22 	sts	0x222E, r22	; 0x80222e <tc_tcd1_ovf_callback>
    1aea:	70 93 2f 22 	sts	0x222F, r23	; 0x80222f <tc_tcd1_ovf_callback+0x1>
    1aee:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1af0:	81 15       	cp	r24, r1
    1af2:	2a e0       	ldi	r18, 0x0A	; 10
    1af4:	92 07       	cpc	r25, r18
    1af6:	29 f4       	brne	.+10     	; 0x1b02 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    1af8:	60 93 26 22 	sts	0x2226, r22	; 0x802226 <tc_tce0_ovf_callback>
    1afc:	70 93 27 22 	sts	0x2227, r23	; 0x802227 <tc_tce0_ovf_callback+0x1>
    1b00:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1b02:	80 34       	cpi	r24, 0x40	; 64
    1b04:	2a e0       	ldi	r18, 0x0A	; 10
    1b06:	92 07       	cpc	r25, r18
    1b08:	29 f4       	brne	.+10     	; 0x1b14 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    1b0a:	60 93 1a 22 	sts	0x221A, r22	; 0x80221a <tc_tce1_ovf_callback>
    1b0e:	70 93 1b 22 	sts	0x221B, r23	; 0x80221b <tc_tce1_ovf_callback+0x1>
    1b12:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1b14:	81 15       	cp	r24, r1
    1b16:	9b 40       	sbci	r25, 0x0B	; 11
    1b18:	21 f4       	brne	.+8      	; 0x1b22 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    1b1a:	60 93 12 22 	sts	0x2212, r22	; 0x802212 <tc_tcf0_ovf_callback>
    1b1e:	70 93 13 22 	sts	0x2213, r23	; 0x802213 <tc_tcf0_ovf_callback+0x1>
    1b22:	08 95       	ret

00001b24 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1b24:	cf 92       	push	r12
    1b26:	df 92       	push	r13
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1b36:	d9 01       	movw	r26, r18
    1b38:	c8 01       	movw	r24, r16
    1b3a:	b6 95       	lsr	r27
    1b3c:	a7 95       	ror	r26
    1b3e:	97 95       	ror	r25
    1b40:	87 95       	ror	r24
    1b42:	48 17       	cp	r20, r24
    1b44:	59 07       	cpc	r21, r25
    1b46:	6a 07       	cpc	r22, r26
    1b48:	7b 07       	cpc	r23, r27
    1b4a:	70 f4       	brcc	.+28     	; 0x1b68 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1b4c:	6a 01       	movw	r12, r20
    1b4e:	7b 01       	movw	r14, r22
    1b50:	cc 0c       	add	r12, r12
    1b52:	dd 1c       	adc	r13, r13
    1b54:	ee 1c       	adc	r14, r14
    1b56:	ff 1c       	adc	r15, r15
    1b58:	c9 01       	movw	r24, r18
    1b5a:	b8 01       	movw	r22, r16
    1b5c:	a7 01       	movw	r20, r14
    1b5e:	96 01       	movw	r18, r12
    1b60:	68 d2       	rcall	.+1232   	; 0x2032 <__udivmodsi4>
    1b62:	21 50       	subi	r18, 0x01	; 1
    1b64:	31 09       	sbc	r19, r1
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1b6c:	83 2f       	mov	r24, r19
    1b6e:	8f 70       	andi	r24, 0x0F	; 15
    1b70:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1b72:	2e 83       	std	Y+6, r18	; 0x06
}
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	08 95       	ret

00001b86 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	1f 92       	push	r1
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	7c 01       	movw	r14, r24
    1b9c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <usart_init_spi+0x1e>
    1ba2:	cf c1       	rjmp	.+926    	; 0x1f42 <usart_init_spi+0x3bc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1ba4:	80 3c       	cpi	r24, 0xC0	; 192
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <usart_init_spi+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1baa:	60 e1       	ldi	r22, 0x10	; 16
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1bb2:	c7 c1       	rjmp	.+910    	; 0x1f42 <usart_init_spi+0x3bc>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1bb4:	80 e8       	ldi	r24, 0x80	; 128
    1bb6:	e8 16       	cp	r14, r24
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	f8 06       	cpc	r15, r24
    1bbc:	29 f4       	brne	.+10     	; 0x1bc8 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1bbe:	62 e0       	ldi	r22, 0x02	; 2
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1bc6:	bd c1       	rjmp	.+890    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1bc8:	e1 14       	cp	r14, r1
    1bca:	e1 e0       	ldi	r30, 0x01	; 1
    1bcc:	fe 06       	cpc	r15, r30
    1bce:	29 f4       	brne	.+10     	; 0x1bda <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1bd8:	b4 c1       	rjmp	.+872    	; 0x1f42 <usart_init_spi+0x3bc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1bda:	f0 e8       	ldi	r31, 0x80	; 128
    1bdc:	ef 16       	cp	r14, r31
    1bde:	f3 e0       	ldi	r31, 0x03	; 3
    1be0:	ff 06       	cpc	r15, r31
    1be2:	29 f4       	brne	.+10     	; 0x1bee <usart_init_spi+0x68>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1bec:	aa c1       	rjmp	.+852    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1bee:	30 e9       	ldi	r19, 0x90	; 144
    1bf0:	e3 16       	cp	r14, r19
    1bf2:	33 e0       	ldi	r19, 0x03	; 3
    1bf4:	f3 06       	cpc	r15, r19
    1bf6:	29 f4       	brne	.+10     	; 0x1c02 <usart_init_spi+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c00:	a0 c1       	rjmp	.+832    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1c02:	e1 14       	cp	r14, r1
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	f8 06       	cpc	r15, r24
    1c08:	29 f4       	brne	.+10     	; 0x1c14 <usart_init_spi+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1c0a:	62 e0       	ldi	r22, 0x02	; 2
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c12:	97 c1       	rjmp	.+814    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1c14:	e0 e4       	ldi	r30, 0x40	; 64
    1c16:	ee 16       	cp	r14, r30
    1c18:	e2 e0       	ldi	r30, 0x02	; 2
    1c1a:	fe 06       	cpc	r15, r30
    1c1c:	29 f4       	brne	.+10     	; 0x1c28 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c26:	8d c1       	rjmp	.+794    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1c28:	f0 e2       	ldi	r31, 0x20	; 32
    1c2a:	ef 16       	cp	r14, r31
    1c2c:	f3 e0       	ldi	r31, 0x03	; 3
    1c2e:	ff 06       	cpc	r15, r31
    1c30:	29 f4       	brne	.+10     	; 0x1c3c <usart_init_spi+0xb6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1c32:	64 e0       	ldi	r22, 0x04	; 4
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c3a:	83 c1       	rjmp	.+774    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1c3c:	e1 14       	cp	r14, r1
    1c3e:	38 e0       	ldi	r19, 0x08	; 8
    1c40:	f3 06       	cpc	r15, r19
    1c42:	29 f4       	brne	.+10     	; 0x1c4e <usart_init_spi+0xc8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c4c:	7a c1       	rjmp	.+756    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1c4e:	e1 14       	cp	r14, r1
    1c50:	89 e0       	ldi	r24, 0x09	; 9
    1c52:	f8 06       	cpc	r15, r24
    1c54:	29 f4       	brne	.+10     	; 0x1c60 <usart_init_spi+0xda>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1c56:	61 e0       	ldi	r22, 0x01	; 1
    1c58:	84 e0       	ldi	r24, 0x04	; 4
    1c5a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c5e:	71 c1       	rjmp	.+738    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1c60:	e1 14       	cp	r14, r1
    1c62:	ea e0       	ldi	r30, 0x0A	; 10
    1c64:	fe 06       	cpc	r15, r30
    1c66:	29 f4       	brne	.+10     	; 0x1c72 <usart_init_spi+0xec>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	85 e0       	ldi	r24, 0x05	; 5
    1c6c:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c70:	68 c1       	rjmp	.+720    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1c72:	e1 14       	cp	r14, r1
    1c74:	fb e0       	ldi	r31, 0x0B	; 11
    1c76:	ff 06       	cpc	r15, r31
    1c78:	29 f4       	brne	.+10     	; 0x1c84 <usart_init_spi+0xfe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	86 e0       	ldi	r24, 0x06	; 6
    1c7e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c82:	5f c1       	rjmp	.+702    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1c84:	30 e4       	ldi	r19, 0x40	; 64
    1c86:	e3 16       	cp	r14, r19
    1c88:	38 e0       	ldi	r19, 0x08	; 8
    1c8a:	f3 06       	cpc	r15, r19
    1c8c:	29 f4       	brne	.+10     	; 0x1c98 <usart_init_spi+0x112>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1c8e:	62 e0       	ldi	r22, 0x02	; 2
    1c90:	83 e0       	ldi	r24, 0x03	; 3
    1c92:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1c96:	55 c1       	rjmp	.+682    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1c98:	80 e4       	ldi	r24, 0x40	; 64
    1c9a:	e8 16       	cp	r14, r24
    1c9c:	89 e0       	ldi	r24, 0x09	; 9
    1c9e:	f8 06       	cpc	r15, r24
    1ca0:	29 f4       	brne	.+10     	; 0x1cac <usart_init_spi+0x126>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1caa:	4b c1       	rjmp	.+662    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1cac:	e0 e4       	ldi	r30, 0x40	; 64
    1cae:	ee 16       	cp	r14, r30
    1cb0:	ea e0       	ldi	r30, 0x0A	; 10
    1cb2:	fe 06       	cpc	r15, r30
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <usart_init_spi+0x13a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1cb6:	62 e0       	ldi	r22, 0x02	; 2
    1cb8:	85 e0       	ldi	r24, 0x05	; 5
    1cba:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1cbe:	41 c1       	rjmp	.+642    	; 0x1f42 <usart_init_spi+0x3bc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1cc0:	f0 e9       	ldi	r31, 0x90	; 144
    1cc2:	ef 16       	cp	r14, r31
    1cc4:	f8 e0       	ldi	r31, 0x08	; 8
    1cc6:	ff 06       	cpc	r15, r31
    1cc8:	29 f4       	brne	.+10     	; 0x1cd4 <usart_init_spi+0x14e>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1cca:	64 e0       	ldi	r22, 0x04	; 4
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1cd2:	37 c1       	rjmp	.+622    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1cd4:	30 e9       	ldi	r19, 0x90	; 144
    1cd6:	e3 16       	cp	r14, r19
    1cd8:	39 e0       	ldi	r19, 0x09	; 9
    1cda:	f3 06       	cpc	r15, r19
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1cde:	64 e0       	ldi	r22, 0x04	; 4
    1ce0:	84 e0       	ldi	r24, 0x04	; 4
    1ce2:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1ce6:	2d c1       	rjmp	.+602    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1ce8:	80 e9       	ldi	r24, 0x90	; 144
    1cea:	e8 16       	cp	r14, r24
    1cec:	8a e0       	ldi	r24, 0x0A	; 10
    1cee:	f8 06       	cpc	r15, r24
    1cf0:	29 f4       	brne	.+10     	; 0x1cfc <usart_init_spi+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	85 e0       	ldi	r24, 0x05	; 5
    1cf6:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1cfa:	23 c1       	rjmp	.+582    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1cfc:	e0 e9       	ldi	r30, 0x90	; 144
    1cfe:	ee 16       	cp	r14, r30
    1d00:	eb e0       	ldi	r30, 0x0B	; 11
    1d02:	fe 06       	cpc	r15, r30
    1d04:	29 f4       	brne	.+10     	; 0x1d10 <usart_init_spi+0x18a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1d06:	64 e0       	ldi	r22, 0x04	; 4
    1d08:	86 e0       	ldi	r24, 0x06	; 6
    1d0a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1d0e:	19 c1       	rjmp	.+562    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1d10:	f0 ec       	ldi	r31, 0xC0	; 192
    1d12:	ef 16       	cp	r14, r31
    1d14:	f8 e0       	ldi	r31, 0x08	; 8
    1d16:	ff 06       	cpc	r15, r31
    1d18:	29 f4       	brne	.+10     	; 0x1d24 <usart_init_spi+0x19e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1d1a:	68 e0       	ldi	r22, 0x08	; 8
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1d22:	0f c1       	rjmp	.+542    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1d24:	30 ec       	ldi	r19, 0xC0	; 192
    1d26:	e3 16       	cp	r14, r19
    1d28:	39 e0       	ldi	r19, 0x09	; 9
    1d2a:	f3 06       	cpc	r15, r19
    1d2c:	29 f4       	brne	.+10     	; 0x1d38 <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1d2e:	68 e0       	ldi	r22, 0x08	; 8
    1d30:	84 e0       	ldi	r24, 0x04	; 4
    1d32:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1d36:	05 c1       	rjmp	.+522    	; 0x1f42 <usart_init_spi+0x3bc>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1d38:	80 ea       	ldi	r24, 0xA0	; 160
    1d3a:	e8 16       	cp	r14, r24
    1d3c:	88 e0       	ldi	r24, 0x08	; 8
    1d3e:	f8 06       	cpc	r15, r24
    1d40:	69 f4       	brne	.+26     	; 0x1d5c <usart_init_spi+0x1d6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1d42:	60 e1       	ldi	r22, 0x10	; 16
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1d4a:	e0 ea       	ldi	r30, 0xA0	; 160
    1d4c:	f8 e0       	ldi	r31, 0x08	; 8
    1d4e:	84 81       	ldd	r24, Z+4	; 0x04
    1d50:	8f 7e       	andi	r24, 0xEF	; 239
    1d52:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1d54:	f8 01       	movw	r30, r16
    1d56:	24 81       	ldd	r18, Z+4	; 0x04
    1d58:	22 50       	subi	r18, 0x02	; 2
    1d5a:	53 c0       	rjmp	.+166    	; 0x1e02 <usart_init_spi+0x27c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1d5c:	f0 ea       	ldi	r31, 0xA0	; 160
    1d5e:	ef 16       	cp	r14, r31
    1d60:	f9 e0       	ldi	r31, 0x09	; 9
    1d62:	ff 06       	cpc	r15, r31
    1d64:	29 f4       	brne	.+10     	; 0x1d70 <usart_init_spi+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1d66:	60 e1       	ldi	r22, 0x10	; 16
    1d68:	84 e0       	ldi	r24, 0x04	; 4
    1d6a:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1d6e:	e9 c0       	rjmp	.+466    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1d70:	30 ea       	ldi	r19, 0xA0	; 160
    1d72:	e3 16       	cp	r14, r19
    1d74:	3a e0       	ldi	r19, 0x0A	; 10
    1d76:	f3 06       	cpc	r15, r19
    1d78:	29 f4       	brne	.+10     	; 0x1d84 <usart_init_spi+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1d7a:	60 e1       	ldi	r22, 0x10	; 16
    1d7c:	85 e0       	ldi	r24, 0x05	; 5
    1d7e:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1d82:	df c0       	rjmp	.+446    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1d84:	80 ea       	ldi	r24, 0xA0	; 160
    1d86:	e8 16       	cp	r14, r24
    1d88:	8b e0       	ldi	r24, 0x0B	; 11
    1d8a:	f8 06       	cpc	r15, r24
    1d8c:	29 f4       	brne	.+10     	; 0x1d98 <usart_init_spi+0x212>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1d8e:	60 e1       	ldi	r22, 0x10	; 16
    1d90:	86 e0       	ldi	r24, 0x06	; 6
    1d92:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1d96:	d5 c0       	rjmp	.+426    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1d98:	e0 eb       	ldi	r30, 0xB0	; 176
    1d9a:	ee 16       	cp	r14, r30
    1d9c:	e8 e0       	ldi	r30, 0x08	; 8
    1d9e:	fe 06       	cpc	r15, r30
    1da0:	29 f4       	brne	.+10     	; 0x1dac <usart_init_spi+0x226>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1da2:	60 e2       	ldi	r22, 0x20	; 32
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1daa:	cb c0       	rjmp	.+406    	; 0x1f42 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1dac:	f0 eb       	ldi	r31, 0xB0	; 176
    1dae:	ef 16       	cp	r14, r31
    1db0:	f9 e0       	ldi	r31, 0x09	; 9
    1db2:	ff 06       	cpc	r15, r31
    1db4:	29 f4       	brne	.+10     	; 0x1dc0 <usart_init_spi+0x23a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1db6:	60 e2       	ldi	r22, 0x20	; 32
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1dbe:	c1 c0       	rjmp	.+386    	; 0x1f42 <usart_init_spi+0x3bc>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1dc0:	30 e8       	ldi	r19, 0x80	; 128
    1dc2:	e3 16       	cp	r14, r19
    1dc4:	34 e0       	ldi	r19, 0x04	; 4
    1dc6:	f3 06       	cpc	r15, r19
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <usart_init_spi+0x24e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1dca:	60 e4       	ldi	r22, 0x40	; 64
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1dd2:	b7 c0       	rjmp	.+366    	; 0x1f42 <usart_init_spi+0x3bc>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1dd4:	80 ea       	ldi	r24, 0xA0	; 160
    1dd6:	e8 16       	cp	r14, r24
    1dd8:	84 e0       	ldi	r24, 0x04	; 4
    1dda:	f8 06       	cpc	r15, r24
    1ddc:	29 f4       	brne	.+10     	; 0x1de8 <usart_init_spi+0x262>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1dde:	60 e4       	ldi	r22, 0x40	; 64
    1de0:	85 e0       	ldi	r24, 0x05	; 5
    1de2:	0e 94 28 03 	call	0x650	; 0x650 <sysclk_enable_module>
    1de6:	ad c0       	rjmp	.+346    	; 0x1f42 <usart_init_spi+0x3bc>
    1de8:	f7 01       	movw	r30, r14
    1dea:	84 81       	ldd	r24, Z+4	; 0x04
    1dec:	8f 7e       	andi	r24, 0xEF	; 239
    1dee:	84 83       	std	Z+4, r24	; 0x04
    1df0:	fb 01       	movw	r30, r22
    1df2:	24 81       	ldd	r18, Z+4	; 0x04
    1df4:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1df6:	c7 01       	movw	r24, r14
    1df8:	f0 ea       	ldi	r31, 0xA0	; 160
    1dfa:	ef 16       	cp	r14, r31
    1dfc:	f8 e0       	ldi	r31, 0x08	; 8
    1dfe:	ff 06       	cpc	r15, r31
    1e00:	49 f4       	brne	.+18     	; 0x1e14 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1e02:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1e06:	84 fd       	sbrc	r24, 4
    1e08:	a5 c0       	rjmp	.+330    	; 0x1f54 <usart_init_spi+0x3ce>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1e0a:	0f 2e       	mov	r0, r31
    1e0c:	f1 e1       	ldi	r31, 0x11	; 17
    1e0e:	df 2e       	mov	r13, r31
    1e10:	f0 2d       	mov	r31, r0
    1e12:	a4 c0       	rjmp	.+328    	; 0x1f5c <usart_init_spi+0x3d6>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1e14:	80 3b       	cpi	r24, 0xB0	; 176
    1e16:	38 e0       	ldi	r19, 0x08	; 8
    1e18:	93 07       	cpc	r25, r19
    1e1a:	91 f0       	breq	.+36     	; 0x1e40 <usart_init_spi+0x2ba>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1e1c:	80 3a       	cpi	r24, 0xA0	; 160
    1e1e:	e9 e0       	ldi	r30, 0x09	; 9
    1e20:	9e 07       	cpc	r25, r30
    1e22:	49 f4       	brne	.+18     	; 0x1e36 <usart_init_spi+0x2b0>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1e24:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1e28:	34 fd       	sbrc	r19, 4
    1e2a:	9b c0       	rjmp	.+310    	; 0x1f62 <usart_init_spi+0x3dc>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1e2c:	0f 2e       	mov	r0, r31
    1e2e:	f9 e1       	ldi	r31, 0x19	; 25
    1e30:	df 2e       	mov	r13, r31
    1e32:	f0 2d       	mov	r31, r0
    1e34:	16 c0       	rjmp	.+44     	; 0x1e62 <usart_init_spi+0x2dc>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1e36:	80 3b       	cpi	r24, 0xB0	; 176
    1e38:	f9 e0       	ldi	r31, 0x09	; 9
    1e3a:	9f 07       	cpc	r25, r31
    1e3c:	f1 f0       	breq	.+60     	; 0x1e7a <usart_init_spi+0x2f4>
    1e3e:	04 c0       	rjmp	.+8      	; 0x1e48 <usart_init_spi+0x2c2>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1e40:	0f 2e       	mov	r0, r31
    1e42:	f5 e1       	ldi	r31, 0x15	; 21
    1e44:	df 2e       	mov	r13, r31
    1e46:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1e48:	80 3a       	cpi	r24, 0xA0	; 160
    1e4a:	3a e0       	ldi	r19, 0x0A	; 10
    1e4c:	93 07       	cpc	r25, r19
    1e4e:	49 f4       	brne	.+18     	; 0x1e62 <usart_init_spi+0x2dc>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1e50:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1e54:	84 fd       	sbrc	r24, 4
    1e56:	8a c0       	rjmp	.+276    	; 0x1f6c <usart_init_spi+0x3e6>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1e58:	0f 2e       	mov	r0, r31
    1e5a:	f1 e2       	ldi	r31, 0x21	; 33
    1e5c:	df 2e       	mov	r13, r31
    1e5e:	f0 2d       	mov	r31, r0
    1e60:	15 c0       	rjmp	.+42     	; 0x1e8c <usart_init_spi+0x306>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1e62:	80 3a       	cpi	r24, 0xA0	; 160
    1e64:	9b 40       	sbci	r25, 0x0B	; 11
    1e66:	91 f4       	brne	.+36     	; 0x1e8c <usart_init_spi+0x306>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1e68:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1e6c:	84 fd       	sbrc	r24, 4
    1e6e:	0a c0       	rjmp	.+20     	; 0x1e84 <usart_init_spi+0x2fe>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1e70:	0f 2e       	mov	r0, r31
    1e72:	f9 e2       	ldi	r31, 0x29	; 41
    1e74:	df 2e       	mov	r13, r31
    1e76:	f0 2d       	mov	r31, r0
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <usart_init_spi+0x306>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1e7a:	0f 2e       	mov	r0, r31
    1e7c:	fd e1       	ldi	r31, 0x1D	; 29
    1e7e:	df 2e       	mov	r13, r31
    1e80:	f0 2d       	mov	r31, r0
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <usart_init_spi+0x306>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1e84:	0f 2e       	mov	r0, r31
    1e86:	fd e2       	ldi	r31, 0x2D	; 45
    1e88:	df 2e       	mov	r13, r31
    1e8a:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1e8c:	ed 2d       	mov	r30, r13
    1e8e:	e6 95       	lsr	r30
    1e90:	e6 95       	lsr	r30
    1e92:	e6 95       	lsr	r30
    1e94:	30 e2       	ldi	r19, 0x20	; 32
    1e96:	e3 9f       	mul	r30, r19
    1e98:	f0 01       	movw	r30, r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	fa 5f       	subi	r31, 0xFA	; 250
    1e9e:	3d 2d       	mov	r19, r13
    1ea0:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	03 2e       	mov	r0, r19
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <usart_init_spi+0x328>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	0a 94       	dec	r0
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <usart_init_spi+0x324>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1eb2:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1eb4:	22 30       	cpi	r18, 0x02	; 2
    1eb6:	10 f0       	brcs	.+4      	; 0x1ebc <usart_init_spi+0x336>
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <usart_init_spi+0x338>
    1ebc:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1ebe:	df 01       	movw	r26, r30
    1ec0:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1ec2:	a3 0f       	add	r26, r19
    1ec4:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ec6:	9f b7       	in	r25, 0x3f	; 63
    1ec8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1eca:	f8 94       	cli
	return flags;
    1ecc:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1ece:	2c 91       	ld	r18, X
    1ed0:	27 70       	andi	r18, 0x07	; 7
    1ed2:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1ed4:	9c 91       	ld	r25, X
    1ed6:	94 2b       	or	r25, r20
    1ed8:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1eda:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1edc:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1ede:	f7 01       	movw	r30, r14
    1ee0:	85 81       	ldd	r24, Z+5	; 0x05
    1ee2:	80 6c       	ori	r24, 0xC0	; 192
    1ee4:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	84 81       	ldd	r24, Z+4	; 0x04
    1eea:	8d 7f       	andi	r24, 0xFD	; 253
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	29 f4       	brne	.+10     	; 0x1efa <usart_init_spi+0x374>
		usart->CTRLC |= USART_UCPHA_bm;
    1ef0:	f7 01       	movw	r30, r14
    1ef2:	85 81       	ldd	r24, Z+5	; 0x05
    1ef4:	82 60       	ori	r24, 0x02	; 2
    1ef6:	85 83       	std	Z+5, r24	; 0x05
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <usart_init_spi+0x37c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1efa:	f7 01       	movw	r30, r14
    1efc:	85 81       	ldd	r24, Z+5	; 0x05
    1efe:	8d 7f       	andi	r24, 0xFD	; 253
    1f00:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    1f02:	f8 01       	movw	r30, r16
    1f04:	85 81       	ldd	r24, Z+5	; 0x05
    1f06:	88 23       	and	r24, r24
    1f08:	29 f0       	breq	.+10     	; 0x1f14 <usart_init_spi+0x38e>
		(usart)->CTRLC |= USART_DORD_bm;
    1f0a:	f7 01       	movw	r30, r14
    1f0c:	85 81       	ldd	r24, Z+5	; 0x05
    1f0e:	84 60       	ori	r24, 0x04	; 4
    1f10:	85 83       	std	Z+5, r24	; 0x05
    1f12:	04 c0       	rjmp	.+8      	; 0x1f1c <usart_init_spi+0x396>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1f14:	f7 01       	movw	r30, r14
    1f16:	85 81       	ldd	r24, Z+5	; 0x05
    1f18:	8b 7f       	andi	r24, 0xFB	; 251
    1f1a:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	40 81       	ld	r20, Z
    1f20:	51 81       	ldd	r21, Z+1	; 0x01
    1f22:	62 81       	ldd	r22, Z+2	; 0x02
    1f24:	73 81       	ldd	r23, Z+3	; 0x03
    1f26:	00 e0       	ldi	r16, 0x00	; 0
    1f28:	12 e1       	ldi	r17, 0x12	; 18
    1f2a:	2a e7       	ldi	r18, 0x7A	; 122
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	c7 01       	movw	r24, r14
    1f30:	f9 dd       	rcall	.-1038   	; 0x1b24 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1f32:	f7 01       	movw	r30, r14
    1f34:	84 81       	ldd	r24, Z+4	; 0x04
    1f36:	88 60       	ori	r24, 0x08	; 8
    1f38:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1f3a:	84 81       	ldd	r24, Z+4	; 0x04
    1f3c:	80 61       	ori	r24, 0x10	; 16
    1f3e:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1f40:	1a c0       	rjmp	.+52     	; 0x1f76 <usart_init_spi+0x3f0>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1f42:	f7 01       	movw	r30, r14
    1f44:	84 81       	ldd	r24, Z+4	; 0x04
    1f46:	8f 7e       	andi	r24, 0xEF	; 239
    1f48:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	24 81       	ldd	r18, Z+4	; 0x04
    1f4e:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1f50:	c7 01       	movw	r24, r14
    1f52:	60 cf       	rjmp	.-320    	; 0x1e14 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1f54:	0f 2e       	mov	r0, r31
    1f56:	f5 e1       	ldi	r31, 0x15	; 21
    1f58:	df 2e       	mov	r13, r31
    1f5a:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1f5c:	80 ea       	ldi	r24, 0xA0	; 160
    1f5e:	98 e0       	ldi	r25, 0x08	; 8
    1f60:	6a cf       	rjmp	.-300    	; 0x1e36 <usart_init_spi+0x2b0>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1f62:	0f 2e       	mov	r0, r31
    1f64:	fd e1       	ldi	r31, 0x1D	; 29
    1f66:	df 2e       	mov	r13, r31
    1f68:	f0 2d       	mov	r31, r0
    1f6a:	7b cf       	rjmp	.-266    	; 0x1e62 <usart_init_spi+0x2dc>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1f6c:	0f 2e       	mov	r0, r31
    1f6e:	f5 e2       	ldi	r31, 0x25	; 37
    1f70:	df 2e       	mov	r13, r31
    1f72:	f0 2d       	mov	r31, r0
    1f74:	8b cf       	rjmp	.-234    	; 0x1e8c <usart_init_spi+0x306>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1f76:	0f 90       	pop	r0
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	df 90       	pop	r13
    1f86:	08 95       	ret

00001f88 <myCallback>:
	while (true) {
		/* Intentionally left empty. */
	}
}

static void myCallback(void){
    1f88:	0f 93       	push	r16
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
	gfx_mono_generic_draw_vertical_line(126, y, 15, GFX_PIXEL_SET);
	gfx_mono_generic_draw_vertical_line(127, y, 15, GFX_PIXEL_SET);
}

static void clearBall(int x, int y){
	gfx_mono_generic_draw_filled_circle(x, y, 2, GFX_PIXEL_CLR, 0x18);
    1f8e:	c2 e0       	ldi	r28, 0x02	; 2
    1f90:	d0 e2       	ldi	r29, 0x20	; 32
    1f92:	08 e1       	ldi	r16, 0x18	; 24
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	42 e0       	ldi	r20, 0x02	; 2
    1f98:	68 81       	ld	r22, Y
    1f9a:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <ballX>
    1f9e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <gfx_mono_generic_draw_filled_circle>
	}
}

static void myCallback(void){
	clearBall(ballX,ballY);
	ballX += ballSpeedX;
    1fa2:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <ballX>
    1fa6:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <ballX+0x1>
    1faa:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1fae:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1fb2:	82 0f       	add	r24, r18
    1fb4:	93 1f       	adc	r25, r19
    1fb6:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <ballX>
    1fba:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <ballX+0x1>
	//drawLeftPaddle(leftPaddleStartPos);
	//drawRightPaddle(rightPaddleStartPos);
}

static void drawBall(int x, int y){
	gfx_mono_generic_draw_filled_circle(x, y, 2, GFX_PIXEL_SET, 0xFF);
    1fbe:	0f ef       	ldi	r16, 0xFF	; 255
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	42 e0       	ldi	r20, 0x02	; 2
    1fc4:	68 81       	ld	r22, Y
    1fc6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <gfx_mono_generic_draw_filled_circle>
static void myCallback(void){
	clearBall(ballX,ballY);
	ballX += ballSpeedX;
	//ballY += ballSpeedY;
	drawBall(ballX,ballY);
}
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	0f 91       	pop	r16
    1fd0:	08 95       	ret

00001fd2 <main>:
{
	/**
	 * Starts off by initializing the system clock before configuring the
	 * board and the monochrome graphical system.
	 */
	board_init();
    1fd2:	0e 94 2c 06 	call	0xc58	; 0xc58 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1fd6:	87 e0       	ldi	r24, 0x07	; 7
    1fd8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init();
	sysclk_init();
    1fdc:	0e 94 ef 02 	call	0x5de	; 0x5de <sysclk_init>
	gfx_mono_init();
    1fe0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <gfx_mono_st7565r_init>
	
	tc_enable(&TCC0);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	98 e0       	ldi	r25, 0x08	; 8
    1fe8:	e0 dc       	rcall	.-1600   	; 0x19aa <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0, myCallback);
    1fea:	64 ec       	ldi	r22, 0xC4	; 196
    1fec:	7f e0       	ldi	r23, 0x0F	; 15
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	98 e0       	ldi	r25, 0x08	; 8
    1ff2:	5a dd       	rcall	.-1356   	; 0x1aa8 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1ff4:	e0 e0       	ldi	r30, 0x00	; 0
    1ff6:	f8 e0       	ldi	r31, 0x08	; 8
    1ff8:	81 81       	ldd	r24, Z+1	; 0x01
    1ffa:	88 7f       	andi	r24, 0xF8	; 248
    1ffc:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1ffe:	8c e2       	ldi	r24, 0x2C	; 44
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	86 a3       	std	Z+38, r24	; 0x26
    2004:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    2006:	86 81       	ldd	r24, Z+6	; 0x06
    2008:	8c 7f       	andi	r24, 0xFC	; 252
    200a:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    200c:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    200e:	81 60       	ori	r24, 0x01	; 1
    2010:	86 83       	std	Z+6, r24	; 0x06
	tc_set_wgm(&TCC0, TC_WG_NORMAL);
	tc_write_period(&TCC0, 300);
	tc_set_overflow_interrupt_level(&TCC0, TC_INT_LVL_LO);
	
	cpu_irq_enable();
    2012:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2014:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2016:	80 7f       	andi	r24, 0xF0	; 240
    2018:	87 60       	ori	r24, 0x07	; 7
    201a:	80 83       	st	Z, r24
    201c:	80 e1       	ldi	r24, 0x10	; 16
    201e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	//drawLeftPaddle(leftPaddleStartPos);
	//drawRightPaddle(rightPaddleStartPos);
}

static void drawBall(int x, int y){
	gfx_mono_generic_draw_filled_circle(x, y, 2, GFX_PIXEL_SET, 0xFF);
    2022:	0f ef       	ldi	r16, 0xFF	; 255
    2024:	21 e0       	ldi	r18, 0x01	; 1
    2026:	42 e0       	ldi	r20, 0x02	; 2
    2028:	6f e0       	ldi	r22, 0x0F	; 15
    202a:	8c e3       	ldi	r24, 0x3C	; 60
    202c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <gfx_mono_generic_draw_filled_circle>
    2030:	ff cf       	rjmp	.-2      	; 0x2030 <main+0x5e>

00002032 <__udivmodsi4>:
    2032:	a1 e2       	ldi	r26, 0x21	; 33
    2034:	1a 2e       	mov	r1, r26
    2036:	aa 1b       	sub	r26, r26
    2038:	bb 1b       	sub	r27, r27
    203a:	fd 01       	movw	r30, r26
    203c:	0d c0       	rjmp	.+26     	; 0x2058 <__udivmodsi4_ep>

0000203e <__udivmodsi4_loop>:
    203e:	aa 1f       	adc	r26, r26
    2040:	bb 1f       	adc	r27, r27
    2042:	ee 1f       	adc	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	a2 17       	cp	r26, r18
    2048:	b3 07       	cpc	r27, r19
    204a:	e4 07       	cpc	r30, r20
    204c:	f5 07       	cpc	r31, r21
    204e:	20 f0       	brcs	.+8      	; 0x2058 <__udivmodsi4_ep>
    2050:	a2 1b       	sub	r26, r18
    2052:	b3 0b       	sbc	r27, r19
    2054:	e4 0b       	sbc	r30, r20
    2056:	f5 0b       	sbc	r31, r21

00002058 <__udivmodsi4_ep>:
    2058:	66 1f       	adc	r22, r22
    205a:	77 1f       	adc	r23, r23
    205c:	88 1f       	adc	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	1a 94       	dec	r1
    2062:	69 f7       	brne	.-38     	; 0x203e <__udivmodsi4_loop>
    2064:	60 95       	com	r22
    2066:	70 95       	com	r23
    2068:	80 95       	com	r24
    206a:	90 95       	com	r25
    206c:	9b 01       	movw	r18, r22
    206e:	ac 01       	movw	r20, r24
    2070:	bd 01       	movw	r22, r26
    2072:	cf 01       	movw	r24, r30
    2074:	08 95       	ret

00002076 <_exit>:
    2076:	f8 94       	cli

00002078 <__stop_program>:
    2078:	ff cf       	rjmp	.-2      	; 0x2078 <__stop_program>
