
EXAMPLE_SYSFONT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00802000  00001468  000014fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000202  00802078  00802078  00001574  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  000015e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d5b4  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a8c  00000000  00000000  0000ee94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007117  00000000  00000000  00013920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  0001aa38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000312b4  00000000  00000000  0001b340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005673  00000000  00000000  0004c5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  00051c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bbcc  00000000  00000000  0005208f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	63 c2       	rjmp	.+1222   	; 0x4cc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c2       	rjmp	.+1218   	; 0x4cc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c2       	rjmp	.+1214   	; 0x4cc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c2       	rjmp	.+1210   	; 0x4cc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c2       	rjmp	.+1206   	; 0x4cc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c2       	rjmp	.+1202   	; 0x4cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c2       	rjmp	.+1198   	; 0x4cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	55 c2       	rjmp	.+1194   	; 0x4cc <__bad_interrupt>
      22:	00 00       	nop
      24:	53 c2       	rjmp	.+1190   	; 0x4cc <__bad_interrupt>
      26:	00 00       	nop
      28:	51 c2       	rjmp	.+1186   	; 0x4cc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4f c2       	rjmp	.+1182   	; 0x4cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c2       	rjmp	.+1178   	; 0x4cc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c2       	rjmp	.+1174   	; 0x4cc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c2       	rjmp	.+1170   	; 0x4cc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c2       	rjmp	.+1166   	; 0x4cc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c2       	rjmp	.+1162   	; 0x4cc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c2       	rjmp	.+1158   	; 0x4cc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c2       	rjmp	.+1154   	; 0x4cc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c2       	rjmp	.+1150   	; 0x4cc <__bad_interrupt>
      4e:	00 00       	nop
      50:	3d c2       	rjmp	.+1146   	; 0x4cc <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c2       	rjmp	.+1142   	; 0x4cc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c2       	rjmp	.+1138   	; 0x4cc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c2       	rjmp	.+1134   	; 0x4cc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c2       	rjmp	.+1130   	; 0x4cc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c2       	rjmp	.+1126   	; 0x4cc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c2       	rjmp	.+1122   	; 0x4cc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c2       	rjmp	.+1118   	; 0x4cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c2       	rjmp	.+1114   	; 0x4cc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c2       	rjmp	.+1110   	; 0x4cc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c2       	rjmp	.+1106   	; 0x4cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	27 c2       	rjmp	.+1102   	; 0x4cc <__bad_interrupt>
      7e:	00 00       	nop
      80:	25 c2       	rjmp	.+1098   	; 0x4cc <__bad_interrupt>
      82:	00 00       	nop
      84:	23 c2       	rjmp	.+1094   	; 0x4cc <__bad_interrupt>
      86:	00 00       	nop
      88:	21 c2       	rjmp	.+1090   	; 0x4cc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1f c2       	rjmp	.+1086   	; 0x4cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	1d c2       	rjmp	.+1082   	; 0x4cc <__bad_interrupt>
      92:	00 00       	nop
      94:	1b c2       	rjmp	.+1078   	; 0x4cc <__bad_interrupt>
      96:	00 00       	nop
      98:	19 c2       	rjmp	.+1074   	; 0x4cc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	17 c2       	rjmp	.+1070   	; 0x4cc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	15 c2       	rjmp	.+1066   	; 0x4cc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	13 c2       	rjmp	.+1062   	; 0x4cc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	11 c2       	rjmp	.+1058   	; 0x4cc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0f c2       	rjmp	.+1054   	; 0x4cc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0d c2       	rjmp	.+1050   	; 0x4cc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0b c2       	rjmp	.+1046   	; 0x4cc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	09 c2       	rjmp	.+1042   	; 0x4cc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	07 c2       	rjmp	.+1038   	; 0x4cc <__bad_interrupt>
      be:	00 00       	nop
      c0:	05 c2       	rjmp	.+1034   	; 0x4cc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	03 c2       	rjmp	.+1030   	; 0x4cc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	01 c2       	rjmp	.+1026   	; 0x4cc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ff c1       	rjmp	.+1022   	; 0x4cc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fd c1       	rjmp	.+1018   	; 0x4cc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fb c1       	rjmp	.+1014   	; 0x4cc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f9 c1       	rjmp	.+1010   	; 0x4cc <__bad_interrupt>
      da:	00 00       	nop
      dc:	f7 c1       	rjmp	.+1006   	; 0x4cc <__bad_interrupt>
      de:	00 00       	nop
      e0:	f5 c1       	rjmp	.+1002   	; 0x4cc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f3 c1       	rjmp	.+998    	; 0x4cc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f1 c1       	rjmp	.+994    	; 0x4cc <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ef c1       	rjmp	.+990    	; 0x4cc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ed c1       	rjmp	.+986    	; 0x4cc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	eb c1       	rjmp	.+982    	; 0x4cc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e9 c1       	rjmp	.+978    	; 0x4cc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e7 c1       	rjmp	.+974    	; 0x4cc <__bad_interrupt>
      fe:	00 00       	nop
     100:	e5 c1       	rjmp	.+970    	; 0x4cc <__bad_interrupt>
     102:	00 00       	nop
     104:	e3 c1       	rjmp	.+966    	; 0x4cc <__bad_interrupt>
     106:	00 00       	nop
     108:	e1 c1       	rjmp	.+962    	; 0x4cc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	df c1       	rjmp	.+958    	; 0x4cc <__bad_interrupt>
     10e:	00 00       	nop
     110:	dd c1       	rjmp	.+954    	; 0x4cc <__bad_interrupt>
     112:	00 00       	nop
     114:	db c1       	rjmp	.+950    	; 0x4cc <__bad_interrupt>
     116:	00 00       	nop
     118:	d9 c1       	rjmp	.+946    	; 0x4cc <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d7 c1       	rjmp	.+942    	; 0x4cc <__bad_interrupt>
     11e:	00 00       	nop
     120:	d5 c1       	rjmp	.+938    	; 0x4cc <__bad_interrupt>
     122:	00 00       	nop
     124:	d3 c1       	rjmp	.+934    	; 0x4cc <__bad_interrupt>
     126:	00 00       	nop
     128:	d1 c1       	rjmp	.+930    	; 0x4cc <__bad_interrupt>
     12a:	00 00       	nop
     12c:	cf c1       	rjmp	.+926    	; 0x4cc <__bad_interrupt>
     12e:	00 00       	nop
     130:	cd c1       	rjmp	.+922    	; 0x4cc <__bad_interrupt>
     132:	00 00       	nop
     134:	cb c1       	rjmp	.+918    	; 0x4cc <__bad_interrupt>
     136:	00 00       	nop
     138:	c9 c1       	rjmp	.+914    	; 0x4cc <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c7 c1       	rjmp	.+910    	; 0x4cc <__bad_interrupt>
     13e:	00 00       	nop
     140:	c5 c1       	rjmp	.+906    	; 0x4cc <__bad_interrupt>
     142:	00 00       	nop
     144:	c3 c1       	rjmp	.+902    	; 0x4cc <__bad_interrupt>
     146:	00 00       	nop
     148:	c1 c1       	rjmp	.+898    	; 0x4cc <__bad_interrupt>
     14a:	00 00       	nop
     14c:	bf c1       	rjmp	.+894    	; 0x4cc <__bad_interrupt>
     14e:	00 00       	nop
     150:	bd c1       	rjmp	.+890    	; 0x4cc <__bad_interrupt>
     152:	00 00       	nop
     154:	bb c1       	rjmp	.+886    	; 0x4cc <__bad_interrupt>
     156:	00 00       	nop
     158:	b9 c1       	rjmp	.+882    	; 0x4cc <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b7 c1       	rjmp	.+878    	; 0x4cc <__bad_interrupt>
     15e:	00 00       	nop
     160:	b5 c1       	rjmp	.+874    	; 0x4cc <__bad_interrupt>
     162:	00 00       	nop
     164:	b3 c1       	rjmp	.+870    	; 0x4cc <__bad_interrupt>
     166:	00 00       	nop
     168:	b1 c1       	rjmp	.+866    	; 0x4cc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	af c1       	rjmp	.+862    	; 0x4cc <__bad_interrupt>
     16e:	00 00       	nop
     170:	ad c1       	rjmp	.+858    	; 0x4cc <__bad_interrupt>
     172:	00 00       	nop
     174:	ab c1       	rjmp	.+854    	; 0x4cc <__bad_interrupt>
     176:	00 00       	nop
     178:	a9 c1       	rjmp	.+850    	; 0x4cc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a7 c1       	rjmp	.+846    	; 0x4cc <__bad_interrupt>
     17e:	00 00       	nop
     180:	a5 c1       	rjmp	.+842    	; 0x4cc <__bad_interrupt>
     182:	00 00       	nop
     184:	a3 c1       	rjmp	.+838    	; 0x4cc <__bad_interrupt>
     186:	00 00       	nop
     188:	a1 c1       	rjmp	.+834    	; 0x4cc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9f c1       	rjmp	.+830    	; 0x4cc <__bad_interrupt>
     18e:	00 00       	nop
     190:	9d c1       	rjmp	.+826    	; 0x4cc <__bad_interrupt>
     192:	00 00       	nop
     194:	9b c1       	rjmp	.+822    	; 0x4cc <__bad_interrupt>
     196:	00 00       	nop
     198:	99 c1       	rjmp	.+818    	; 0x4cc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	97 c1       	rjmp	.+814    	; 0x4cc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	95 c1       	rjmp	.+810    	; 0x4cc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	93 c1       	rjmp	.+806    	; 0x4cc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	91 c1       	rjmp	.+802    	; 0x4cc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8f c1       	rjmp	.+798    	; 0x4cc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8d c1       	rjmp	.+794    	; 0x4cc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8b c1       	rjmp	.+790    	; 0x4cc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	89 c1       	rjmp	.+786    	; 0x4cc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	87 c1       	rjmp	.+782    	; 0x4cc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	85 c1       	rjmp	.+778    	; 0x4cc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	83 c1       	rjmp	.+774    	; 0x4cc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	81 c1       	rjmp	.+770    	; 0x4cc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7f c1       	rjmp	.+766    	; 0x4cc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7d c1       	rjmp	.+762    	; 0x4cc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7b c1       	rjmp	.+758    	; 0x4cc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	79 c1       	rjmp	.+754    	; 0x4cc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	77 c1       	rjmp	.+750    	; 0x4cc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	75 c1       	rjmp	.+746    	; 0x4cc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	73 c1       	rjmp	.+742    	; 0x4cc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	71 c1       	rjmp	.+738    	; 0x4cc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6f c1       	rjmp	.+734    	; 0x4cc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6d c1       	rjmp	.+730    	; 0x4cc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6b c1       	rjmp	.+726    	; 0x4cc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	69 c1       	rjmp	.+722    	; 0x4cc <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1e26>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x660e>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x65e6>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x560e>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1de6>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e8 e6       	ldi	r30, 0x68	; 104
     4a6:	f4 e1       	ldi	r31, 0x14	; 20
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a8 37       	cpi	r26, 0x78	; 120
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a8 e7       	ldi	r26, 0x78	; 120
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	aa 37       	cpi	r26, 0x7A	; 122
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	79 d7       	rcall	.+3826   	; 0x13bc <main>
     4ca:	cc c7       	rjmp	.+3992   	; 0x1464 <_exit>

000004cc <__bad_interrupt>:
     4cc:	99 cd       	rjmp	.-1230   	; 0x0 <__vectors>

000004ce <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d0:	61 50       	subi	r22, 0x01	; 1
     4d2:	71 09       	sbc	r23, r1
     4d4:	81 09       	sbc	r24, r1
     4d6:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4d8:	61 15       	cp	r22, r1
     4da:	71 05       	cpc	r23, r1
     4dc:	81 05       	cpc	r24, r1
     4de:	91 05       	cpc	r25, r1
     4e0:	b9 f7       	brne	.-18     	; 0x4d0 <__portable_avr_delay_cycles+0x2>
     4e2:	08 95       	ret

000004e4 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	1f 92       	push	r1
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	16 e0       	ldi	r17, 0x06	; 6
     500:	68 94       	set
     502:	ff 24       	eor	r15, r15
     504:	f3 f8       	bld	r15, 3
     506:	f8 01       	movw	r30, r16
     508:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50a:	6e e0       	ldi	r22, 0x0E	; 14
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	dd df       	rcall	.-70     	; 0x4ce <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     514:	f8 01       	movw	r30, r16
     516:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     518:	6e e0       	ldi	r22, 0x0E	; 14
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	d6 df       	rcall	.-84     	; 0x4ce <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     522:	0f 2e       	mov	r0, r31
     524:	fb e2       	ldi	r31, 0x2B	; 43
     526:	bf 2e       	mov	r11, r31
     528:	f0 2d       	mov	r31, r0
     52a:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     52c:	80 ea       	ldi	r24, 0xA0	; 160
     52e:	99 e0       	ldi	r25, 0x09	; 9
     530:	57 d4       	rcall	.+2222   	; 0xde0 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     532:	c1 2c       	mov	r12, r1
     534:	d1 2c       	mov	r13, r1
     536:	76 01       	movw	r14, r12
     538:	00 e4       	ldi	r16, 0x40	; 64
     53a:	12 e4       	ldi	r17, 0x42	; 66
     53c:	2f e0       	ldi	r18, 0x0F	; 15
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	43 e0       	ldi	r20, 0x03	; 3
     542:	be 01       	movw	r22, r28
     544:	6f 5f       	subi	r22, 0xFF	; 255
     546:	7f 4f       	sbci	r23, 0xFF	; 255
     548:	80 ea       	ldi	r24, 0xA0	; 160
     54a:	99 e0       	ldi	r25, 0x09	; 9
     54c:	78 d4       	rcall	.+2288   	; 0xe3e <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     54e:	00 e6       	ldi	r16, 0x60	; 96
     550:	16 e0       	ldi	r17, 0x06	; 6
     552:	ff 24       	eor	r15, r15
     554:	f3 94       	inc	r15
     556:	f8 01       	movw	r30, r16
     558:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55a:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     55c:	be 01       	movw	r22, r28
     55e:	6f 5f       	subi	r22, 0xFF	; 255
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	80 ea       	ldi	r24, 0xA0	; 160
     564:	99 e0       	ldi	r25, 0x09	; 9
     566:	85 d4       	rcall	.+2314   	; 0xe72 <usart_spi_select_device>
     568:	f8 01       	movw	r30, r16
     56a:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     56c:	e0 ea       	ldi	r30, 0xA0	; 160
     56e:	f9 e0       	ldi	r31, 0x09	; 9
     570:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     572:	85 ff       	sbrs	r24, 5
     574:	fd cf       	rjmp	.-6      	; 0x570 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     576:	80 ea       	ldi	r24, 0xA0	; 160
     578:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     57c:	e0 ea       	ldi	r30, 0xA0	; 160
     57e:	f9 e0       	ldi	r31, 0x09	; 9
     580:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     582:	86 ff       	sbrs	r24, 6
     584:	fd cf       	rjmp	.-6      	; 0x580 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	80 e4       	ldi	r24, 0x40	; 64
     58c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     58e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     590:	be 01       	movw	r22, r28
     592:	6f 5f       	subi	r22, 0xFF	; 255
     594:	7f 4f       	sbci	r23, 0xFF	; 255
     596:	80 ea       	ldi	r24, 0xA0	; 160
     598:	99 e0       	ldi	r25, 0x09	; 9
     59a:	81 d4       	rcall	.+2306   	; 0xe9e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     59c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     59e:	89 83       	std	Y+1, r24	; 0x01
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	80 ea       	ldi	r24, 0xA0	; 160
     5a8:	99 e0       	ldi	r25, 0x09	; 9
     5aa:	63 d4       	rcall	.+2246   	; 0xe72 <usart_spi_select_device>
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b2:	e0 ea       	ldi	r30, 0xA0	; 160
     5b4:	f9 e0       	ldi	r31, 0x09	; 9
     5b6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5b8:	85 ff       	sbrs	r24, 5
     5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5bc:	86 ea       	ldi	r24, 0xA6	; 166
     5be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c2:	e0 ea       	ldi	r30, 0xA0	; 160
     5c4:	f9 e0       	ldi	r31, 0x09	; 9
     5c6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5c8:	86 ff       	sbrs	r24, 6
     5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5cc:	e0 ea       	ldi	r30, 0xA0	; 160
     5ce:	f9 e0       	ldi	r31, 0x09	; 9
     5d0:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d2:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d4:	80 81       	ld	r24, Z
     5d6:	be 01       	movw	r22, r28
     5d8:	6f 5f       	subi	r22, 0xFF	; 255
     5da:	7f 4f       	sbci	r23, 0xFF	; 255
     5dc:	80 ea       	ldi	r24, 0xA0	; 160
     5de:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e0:	5e d4       	rcall	.+2236   	; 0xe9e <usart_spi_deselect_device>
     5e2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	be 01       	movw	r22, r28
     5e8:	6f 5f       	subi	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	80 ea       	ldi	r24, 0xA0	; 160
     5ee:	99 e0       	ldi	r25, 0x09	; 9
     5f0:	40 d4       	rcall	.+2176   	; 0xe72 <usart_spi_select_device>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5f8:	e0 ea       	ldi	r30, 0xA0	; 160
     5fa:	f9 e0       	ldi	r31, 0x09	; 9
     5fc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5fe:	85 ff       	sbrs	r24, 5
     600:	fd cf       	rjmp	.-6      	; 0x5fc <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     602:	88 ec       	ldi	r24, 0xC8	; 200
     604:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     608:	e0 ea       	ldi	r30, 0xA0	; 160
     60a:	f9 e0       	ldi	r31, 0x09	; 9
     60c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     60e:	86 ff       	sbrs	r24, 6
     610:	fd cf       	rjmp	.-6      	; 0x60c <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     612:	e0 ea       	ldi	r30, 0xA0	; 160
     614:	f9 e0       	ldi	r31, 0x09	; 9
     616:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     618:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61a:	80 81       	ld	r24, Z
     61c:	be 01       	movw	r22, r28
     61e:	6f 5f       	subi	r22, 0xFF	; 255
     620:	7f 4f       	sbci	r23, 0xFF	; 255
     622:	80 ea       	ldi	r24, 0xA0	; 160
     624:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     626:	3b d4       	rcall	.+2166   	; 0xe9e <usart_spi_deselect_device>
     628:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	be 01       	movw	r22, r28
     62e:	6f 5f       	subi	r22, 0xFF	; 255
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	80 ea       	ldi	r24, 0xA0	; 160
     634:	99 e0       	ldi	r25, 0x09	; 9
     636:	1d d4       	rcall	.+2106   	; 0xe72 <usart_spi_select_device>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     63e:	e0 ea       	ldi	r30, 0xA0	; 160
     640:	f9 e0       	ldi	r31, 0x09	; 9
     642:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     644:	85 ff       	sbrs	r24, 5
     646:	fd cf       	rjmp	.-6      	; 0x642 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     648:	82 ea       	ldi	r24, 0xA2	; 162
     64a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     64e:	e0 ea       	ldi	r30, 0xA0	; 160
     650:	f9 e0       	ldi	r31, 0x09	; 9
     652:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     654:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     656:	fd cf       	rjmp	.-6      	; 0x652 <st7565r_init+0x16e>
     658:	e0 ea       	ldi	r30, 0xA0	; 160
     65a:	f9 e0       	ldi	r31, 0x09	; 9
     65c:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     65e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     660:	80 81       	ld	r24, Z
     662:	be 01       	movw	r22, r28
     664:	6f 5f       	subi	r22, 0xFF	; 255
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	80 ea       	ldi	r24, 0xA0	; 160
     66a:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     66c:	18 d4       	rcall	.+2096   	; 0xe9e <usart_spi_deselect_device>
     66e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	be 01       	movw	r22, r28
     674:	6f 5f       	subi	r22, 0xFF	; 255
     676:	7f 4f       	sbci	r23, 0xFF	; 255
     678:	80 ea       	ldi	r24, 0xA0	; 160
     67a:	99 e0       	ldi	r25, 0x09	; 9
     67c:	fa d3       	rcall	.+2036   	; 0xe72 <usart_spi_select_device>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     684:	e0 ea       	ldi	r30, 0xA0	; 160
     686:	f9 e0       	ldi	r31, 0x09	; 9
     688:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68a:	85 ff       	sbrs	r24, 5
     68c:	fd cf       	rjmp	.-6      	; 0x688 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     68e:	8f e2       	ldi	r24, 0x2F	; 47
     690:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     694:	e0 ea       	ldi	r30, 0xA0	; 160
     696:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     698:	81 81       	ldd	r24, Z+1	; 0x01
     69a:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     69c:	fd cf       	rjmp	.-6      	; 0x698 <st7565r_init+0x1b4>
     69e:	e0 ea       	ldi	r30, 0xA0	; 160
     6a0:	f9 e0       	ldi	r31, 0x09	; 9
     6a2:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a4:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6a6:	80 81       	ld	r24, Z
     6a8:	be 01       	movw	r22, r28
     6aa:	6f 5f       	subi	r22, 0xFF	; 255
     6ac:	7f 4f       	sbci	r23, 0xFF	; 255
     6ae:	80 ea       	ldi	r24, 0xA0	; 160
     6b0:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b2:	f5 d3       	rcall	.+2026   	; 0xe9e <usart_spi_deselect_device>
     6b4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6b6:	89 83       	std	Y+1, r24	; 0x01
     6b8:	be 01       	movw	r22, r28
     6ba:	6f 5f       	subi	r22, 0xFF	; 255
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	80 ea       	ldi	r24, 0xA0	; 160
     6c0:	99 e0       	ldi	r25, 0x09	; 9
     6c2:	d7 d3       	rcall	.+1966   	; 0xe72 <usart_spi_select_device>
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ca:	e0 ea       	ldi	r30, 0xA0	; 160
     6cc:	f9 e0       	ldi	r31, 0x09	; 9
     6ce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d0:	85 ff       	sbrs	r24, 5
     6d2:	fd cf       	rjmp	.-6      	; 0x6ce <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d4:	88 ef       	ldi	r24, 0xF8	; 248
     6d6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6da:	e0 ea       	ldi	r30, 0xA0	; 160
     6dc:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6de:	81 81       	ldd	r24, Z+1	; 0x01
     6e0:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <st7565r_init+0x1fa>
     6e4:	e0 ea       	ldi	r30, 0xA0	; 160
     6e6:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6e8:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ea:	81 83       	std	Z+1, r24	; 0x01
     6ec:	80 81       	ld	r24, Z
     6ee:	be 01       	movw	r22, r28
     6f0:	6f 5f       	subi	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	80 ea       	ldi	r24, 0xA0	; 160
     6f6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6f8:	d2 d3       	rcall	.+1956   	; 0xe9e <usart_spi_deselect_device>
     6fa:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	be 01       	movw	r22, r28
     700:	6f 5f       	subi	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	80 ea       	ldi	r24, 0xA0	; 160
     706:	99 e0       	ldi	r25, 0x09	; 9
     708:	b4 d3       	rcall	.+1896   	; 0xe72 <usart_spi_select_device>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     710:	e0 ea       	ldi	r30, 0xA0	; 160
     712:	f9 e0       	ldi	r31, 0x09	; 9
     714:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     716:	85 ff       	sbrs	r24, 5
     718:	fd cf       	rjmp	.-6      	; 0x714 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71a:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     71e:	e0 ea       	ldi	r30, 0xA0	; 160
     720:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     722:	81 81       	ldd	r24, Z+1	; 0x01
     724:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     726:	fd cf       	rjmp	.-6      	; 0x722 <st7565r_init+0x23e>
     728:	e0 ea       	ldi	r30, 0xA0	; 160
     72a:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     72c:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     72e:	81 83       	std	Z+1, r24	; 0x01
     730:	80 81       	ld	r24, Z
     732:	be 01       	movw	r22, r28
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	80 ea       	ldi	r24, 0xA0	; 160
     73a:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     73c:	b0 d3       	rcall	.+1888   	; 0xe9e <usart_spi_deselect_device>
     73e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     740:	89 83       	std	Y+1, r24	; 0x01
     742:	be 01       	movw	r22, r28
     744:	6f 5f       	subi	r22, 0xFF	; 255
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	80 ea       	ldi	r24, 0xA0	; 160
     74a:	99 e0       	ldi	r25, 0x09	; 9
     74c:	92 d3       	rcall	.+1828   	; 0xe72 <usart_spi_select_device>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     754:	e0 ea       	ldi	r30, 0xA0	; 160
     756:	f9 e0       	ldi	r31, 0x09	; 9
     758:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75a:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     75c:	fd cf       	rjmp	.-6      	; 0x758 <st7565r_init+0x274>
     75e:	81 e2       	ldi	r24, 0x21	; 33
     760:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     764:	e0 ea       	ldi	r30, 0xA0	; 160
     766:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     768:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76a:	86 ff       	sbrs	r24, 6
     76c:	fd cf       	rjmp	.-6      	; 0x768 <st7565r_init+0x284>
     76e:	e0 ea       	ldi	r30, 0xA0	; 160
     770:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     772:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     774:	81 83       	std	Z+1, r24	; 0x01
     776:	80 81       	ld	r24, Z
     778:	be 01       	movw	r22, r28
     77a:	6f 5f       	subi	r22, 0xFF	; 255
     77c:	7f 4f       	sbci	r23, 0xFF	; 255
     77e:	80 ea       	ldi	r24, 0xA0	; 160
     780:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     782:	8d d3       	rcall	.+1818   	; 0xe9e <usart_spi_deselect_device>
     784:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	be 01       	movw	r22, r28
     78a:	6f 5f       	subi	r22, 0xFF	; 255
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	80 ea       	ldi	r24, 0xA0	; 160
     790:	99 e0       	ldi	r25, 0x09	; 9
     792:	6f d3       	rcall	.+1758   	; 0xe72 <usart_spi_select_device>
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79a:	e0 ea       	ldi	r30, 0xA0	; 160
     79c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     79e:	81 81       	ldd	r24, Z+1	; 0x01
     7a0:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a2:	fd cf       	rjmp	.-6      	; 0x79e <st7565r_init+0x2ba>
     7a4:	81 e8       	ldi	r24, 0x81	; 129
     7a6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7aa:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ac:	f9 e0       	ldi	r31, 0x09	; 9
     7ae:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b0:	86 ff       	sbrs	r24, 6
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <st7565r_init+0x2ca>
     7b4:	e0 ea       	ldi	r30, 0xA0	; 160
     7b6:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7b8:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7ba:	81 83       	std	Z+1, r24	; 0x01
     7bc:	80 81       	ld	r24, Z
     7be:	be 01       	movw	r22, r28
     7c0:	6f 5f       	subi	r22, 0xFF	; 255
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	80 ea       	ldi	r24, 0xA0	; 160
     7c6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7c8:	6a d3       	rcall	.+1748   	; 0xe9e <usart_spi_deselect_device>
     7ca:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	be 01       	movw	r22, r28
     7d0:	6f 5f       	subi	r22, 0xFF	; 255
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	80 ea       	ldi	r24, 0xA0	; 160
     7d6:	99 e0       	ldi	r25, 0x09	; 9
     7d8:	4c d3       	rcall	.+1688   	; 0xe72 <usart_spi_select_device>
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e0:	e0 ea       	ldi	r30, 0xA0	; 160
     7e2:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e4:	81 81       	ldd	r24, Z+1	; 0x01
     7e6:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <st7565r_init+0x300>
     7ea:	81 e2       	ldi	r24, 0x21	; 33
     7ec:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f0:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f2:	f9 e0       	ldi	r31, 0x09	; 9
     7f4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f6:	86 ff       	sbrs	r24, 6
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <st7565r_init+0x310>
     7fa:	e0 ea       	ldi	r30, 0xA0	; 160
     7fc:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7fe:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     800:	81 83       	std	Z+1, r24	; 0x01
     802:	80 81       	ld	r24, Z
     804:	be 01       	movw	r22, r28
     806:	6f 5f       	subi	r22, 0xFF	; 255
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	80 ea       	ldi	r24, 0xA0	; 160
     80c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     80e:	47 d3       	rcall	.+1678   	; 0xe9e <usart_spi_deselect_device>
     810:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     812:	89 83       	std	Y+1, r24	; 0x01
     814:	be 01       	movw	r22, r28
     816:	6f 5f       	subi	r22, 0xFF	; 255
     818:	7f 4f       	sbci	r23, 0xFF	; 255
     81a:	80 ea       	ldi	r24, 0xA0	; 160
     81c:	99 e0       	ldi	r25, 0x09	; 9
     81e:	29 d3       	rcall	.+1618   	; 0xe72 <usart_spi_select_device>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     826:	e0 ea       	ldi	r30, 0xA0	; 160
     828:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82a:	81 81       	ldd	r24, Z+1	; 0x01
     82c:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     82e:	fd cf       	rjmp	.-6      	; 0x82a <st7565r_init+0x346>
     830:	8f ea       	ldi	r24, 0xAF	; 175
     832:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     836:	e0 ea       	ldi	r30, 0xA0	; 160
     838:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83a:	81 81       	ldd	r24, Z+1	; 0x01
     83c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     83e:	fd cf       	rjmp	.-6      	; 0x83a <st7565r_init+0x356>
     840:	e0 ea       	ldi	r30, 0xA0	; 160
     842:	f9 e0       	ldi	r31, 0x09	; 9
     844:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     846:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     848:	80 81       	ld	r24, Z
     84a:	be 01       	movw	r22, r28
     84c:	6f 5f       	subi	r22, 0xFF	; 255
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
     850:	80 ea       	ldi	r24, 0xA0	; 160
     852:	99 e0       	ldi	r25, 0x09	; 9
     854:	24 d3       	rcall	.+1608   	; 0xe9e <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	08 95       	ret

0000086c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	1f 92       	push	r1
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     87e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     882:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     886:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     88a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     88e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     892:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     896:	6c e0       	ldi	r22, 0x0C	; 12
     898:	81 e4       	ldi	r24, 0x41	; 65
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	65 d3       	rcall	.+1738   	; 0xf68 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     89e:	8f b7       	in	r24, 0x3f	; 63
     8a0:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     8a2:	f8 94       	cli
	return flags;
     8a4:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     8a6:	e0 e5       	ldi	r30, 0x50	; 80
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	82 60       	ori	r24, 0x02	; 2
     8ae:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8b0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     8b4:	81 ff       	sbrs	r24, 1
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	80 e4       	ldi	r24, 0x40	; 64
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	54 d3       	rcall	.+1704   	; 0xf68 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8c0:	8f b7       	in	r24, 0x3f	; 63
     8c2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     8c4:	f8 94       	cli
	return flags;
     8c6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     8c8:	e0 e5       	ldi	r30, 0x50	; 80
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	8e 7f       	andi	r24, 0xFE	; 254
     8d0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8d2:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	1f 92       	push	r1
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8e8:	9f b7       	in	r25, 0x3f	; 63
     8ea:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8ec:	f8 94       	cli
	return flags;
     8ee:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8f0:	e8 2f       	mov	r30, r24
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	e0 59       	subi	r30, 0x90	; 144
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	60 95       	com	r22
     8fa:	80 81       	ld	r24, Z
     8fc:	68 23       	and	r22, r24
     8fe:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     900:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	1f 92       	push	r1
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	08 2f       	mov	r16, r24
     91c:	f6 2e       	mov	r15, r22
     91e:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     920:	1a d1       	rcall	.+564    	; 0xb56 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     922:	0f 70       	andi	r16, 0x0F	; 15
     924:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     926:	8b e2       	ldi	r24, 0x2B	; 43
     928:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     92a:	be 01       	movw	r22, r28
     92c:	6f 5f       	subi	r22, 0xFF	; 255
     92e:	7f 4f       	sbci	r23, 0xFF	; 255
     930:	80 ea       	ldi	r24, 0xA0	; 160
     932:	99 e0       	ldi	r25, 0x09	; 9
     934:	9e d2       	rcall	.+1340   	; 0xe72 <usart_spi_select_device>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     93c:	e0 ea       	ldi	r30, 0xA0	; 160
     93e:	f9 e0       	ldi	r31, 0x09	; 9
     940:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     942:	95 ff       	sbrs	r25, 5
     944:	fd cf       	rjmp	.-6      	; 0x940 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     946:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     94a:	e0 ea       	ldi	r30, 0xA0	; 160
     94c:	f9 e0       	ldi	r31, 0x09	; 9
     94e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     950:	86 ff       	sbrs	r24, 6
     952:	fd cf       	rjmp	.-6      	; 0x94e <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     954:	e0 ea       	ldi	r30, 0xA0	; 160
     956:	f9 e0       	ldi	r31, 0x09	; 9
     958:	80 e4       	ldi	r24, 0x40	; 64
     95a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     95c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	80 ea       	ldi	r24, 0xA0	; 160
     966:	99 e0       	ldi	r25, 0x09	; 9
     968:	9a d2       	rcall	.+1332   	; 0xe9e <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     96a:	0f 2d       	mov	r16, r15
     96c:	0f 77       	andi	r16, 0x7F	; 127
     96e:	02 95       	swap	r16
     970:	0f 70       	andi	r16, 0x0F	; 15
     972:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     974:	8b e2       	ldi	r24, 0x2B	; 43
     976:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     978:	be 01       	movw	r22, r28
     97a:	6f 5f       	subi	r22, 0xFF	; 255
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	80 ea       	ldi	r24, 0xA0	; 160
     980:	99 e0       	ldi	r25, 0x09	; 9
     982:	77 d2       	rcall	.+1262   	; 0xe72 <usart_spi_select_device>
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     98a:	e0 ea       	ldi	r30, 0xA0	; 160
     98c:	f9 e0       	ldi	r31, 0x09	; 9
     98e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     990:	85 ff       	sbrs	r24, 5
     992:	fd cf       	rjmp	.-6      	; 0x98e <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     994:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     998:	e0 ea       	ldi	r30, 0xA0	; 160
     99a:	f9 e0       	ldi	r31, 0x09	; 9
     99c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     99e:	86 ff       	sbrs	r24, 6
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9a2:	e0 ea       	ldi	r30, 0xA0	; 160
     9a4:	f9 e0       	ldi	r31, 0x09	; 9
     9a6:	80 e4       	ldi	r24, 0x40	; 64
     9a8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9aa:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9ac:	be 01       	movw	r22, r28
     9ae:	6f 5f       	subi	r22, 0xFF	; 255
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	80 ea       	ldi	r24, 0xA0	; 160
     9b4:	99 e0       	ldi	r25, 0x09	; 9
     9b6:	73 d2       	rcall	.+1254   	; 0xe9e <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     9b8:	0f 2d       	mov	r16, r15
     9ba:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9bc:	8b e2       	ldi	r24, 0x2B	; 43
     9be:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9c0:	be 01       	movw	r22, r28
     9c2:	6f 5f       	subi	r22, 0xFF	; 255
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	80 ea       	ldi	r24, 0xA0	; 160
     9c8:	99 e0       	ldi	r25, 0x09	; 9
     9ca:	53 d2       	rcall	.+1190   	; 0xe72 <usart_spi_select_device>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9d2:	e0 ea       	ldi	r30, 0xA0	; 160
     9d4:	f9 e0       	ldi	r31, 0x09	; 9
     9d6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9d8:	85 ff       	sbrs	r24, 5
     9da:	fd cf       	rjmp	.-6      	; 0x9d6 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9dc:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9e0:	e0 ea       	ldi	r30, 0xA0	; 160
     9e2:	f9 e0       	ldi	r31, 0x09	; 9
     9e4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9e6:	86 ff       	sbrs	r24, 6
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9ea:	e0 ea       	ldi	r30, 0xA0	; 160
     9ec:	f9 e0       	ldi	r31, 0x09	; 9
     9ee:	80 e4       	ldi	r24, 0x40	; 64
     9f0:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9f2:	80 81       	ld	r24, Z
     9f4:	be 01       	movw	r22, r28
     9f6:	6f 5f       	subi	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	80 ea       	ldi	r24, 0xA0	; 160
     9fc:	99 e0       	ldi	r25, 0x09	; 9
     9fe:	4f d2       	rcall	.+1182   	; 0xe9e <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a00:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	be 01       	movw	r22, r28
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	80 ea       	ldi	r24, 0xA0	; 160
     a0c:	99 e0       	ldi	r25, 0x09	; 9
     a0e:	31 d2       	rcall	.+1122   	; 0xe72 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a16:	e0 ea       	ldi	r30, 0xA0	; 160
     a18:	f9 e0       	ldi	r31, 0x09	; 9
     a1a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a1c:	85 ff       	sbrs	r24, 5
     a1e:	fd cf       	rjmp	.-6      	; 0xa1a <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a20:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a24:	e0 ea       	ldi	r30, 0xA0	; 160
     a26:	f9 e0       	ldi	r31, 0x09	; 9
     a28:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a2a:	86 ff       	sbrs	r24, 6
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a2e:	e0 ea       	ldi	r30, 0xA0	; 160
     a30:	f9 e0       	ldi	r31, 0x09	; 9
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a36:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a3e:	be 01       	movw	r22, r28
     a40:	6f 5f       	subi	r22, 0xFF	; 255
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	80 ea       	ldi	r24, 0xA0	; 160
     a46:	99 e0       	ldi	r25, 0x09	; 9
     a48:	2a d2       	rcall	.+1108   	; 0xe9e <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     a4a:	0f 90       	pop	r0
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	08 95       	ret

00000a58 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	1f 92       	push	r1
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a66:	88 e7       	ldi	r24, 0x78	; 120
     a68:	90 e2       	ldi	r25, 0x20	; 32
     a6a:	70 d0       	rcall	.+224    	; 0xb4c <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a6c:	3b dd       	rcall	.-1418   	; 0x4e4 <st7565r_init>
     a6e:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	80 ea       	ldi	r24, 0xA0	; 160
     a7a:	99 e0       	ldi	r25, 0x09	; 9
     a7c:	fa d1       	rcall	.+1012   	; 0xe72 <usart_spi_select_device>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a84:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a86:	f9 e0       	ldi	r31, 0x09	; 9
     a88:	81 81       	ldd	r24, Z+1	; 0x01
     a8a:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a8c:	fd cf       	rjmp	.-6      	; 0xa88 <gfx_mono_st7565r_init+0x30>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a90:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a94:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a96:	f9 e0       	ldi	r31, 0x09	; 9
     a98:	81 81       	ldd	r24, Z+1	; 0x01
     a9a:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <gfx_mono_st7565r_init+0x40>
     a9e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     aa0:	f9 e0       	ldi	r31, 0x09	; 9
     aa2:	80 e4       	ldi	r24, 0x40	; 64
     aa4:	81 83       	std	Z+1, r24	; 0x01
     aa6:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     aa8:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	80 ea       	ldi	r24, 0xA0	; 160
     ab0:	99 e0       	ldi	r25, 0x09	; 9
     ab2:	f5 d1       	rcall	.+1002   	; 0xe9e <usart_spi_deselect_device>
     ab4:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     ab6:	0a c0       	rjmp	.+20     	; 0xacc <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	61 2f       	mov	r22, r17
     abc:	80 2f       	mov	r24, r16
     abe:	25 df       	rcall	.-438    	; 0x90a <gfx_mono_st7565r_put_byte>
     ac0:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     ac2:	10 38       	cpi	r17, 0x80	; 128
     ac4:	c9 f7       	brne	.-14     	; 0xab8 <gfx_mono_st7565r_init+0x60>
     ac6:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     ac8:	04 30       	cpi	r16, 0x04	; 4
     aca:	11 f0       	breq	.+4      	; 0xad0 <gfx_mono_st7565r_init+0x78>
     acc:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     ace:	f4 cf       	rjmp	.-24     	; 0xab8 <gfx_mono_st7565r_init+0x60>
     ad0:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	08 95       	ret

00000adc <gfx_mono_st7565r_draw_pixel>:
     adc:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     ae6:	88 23       	and	r24, r24
     ae8:	4c f1       	brlt	.+82     	; 0xb3c <gfx_mono_st7565r_draw_pixel+0x60>
     aea:	60 32       	cpi	r22, 0x20	; 32
     aec:	38 f5       	brcc	.+78     	; 0xb3c <gfx_mono_st7565r_draw_pixel+0x60>
     aee:	d4 2f       	mov	r29, r20
     af0:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     af2:	f6 2e       	mov	r15, r22
     af4:	f6 94       	lsr	r15
     af6:	f6 94       	lsr	r15
     af8:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	88 e0       	ldi	r24, 0x08	; 8
     afe:	f8 9e       	mul	r15, r24
     b00:	60 19       	sub	r22, r0
     b02:	71 09       	sbc	r23, r1
     b04:	11 24       	eor	r1, r1
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	8c 01       	movw	r16, r24
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <gfx_mono_st7565r_draw_pixel+0x36>
     b0e:	00 0f       	add	r16, r16
     b10:	11 1f       	adc	r17, r17
     b12:	6a 95       	dec	r22
     b14:	e2 f7       	brpl	.-8      	; 0xb0e <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b16:	6c 2f       	mov	r22, r28
     b18:	8f 2d       	mov	r24, r15
     b1a:	2b d0       	rcall	.+86     	; 0xb72 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     b1c:	d1 30       	cpi	r29, 0x01	; 1
     b1e:	21 f0       	breq	.+8      	; 0xb28 <gfx_mono_st7565r_draw_pixel+0x4c>
     b20:	28 f0       	brcs	.+10     	; 0xb2c <gfx_mono_st7565r_draw_pixel+0x50>
     b22:	d2 30       	cpi	r29, 0x02	; 2
     b24:	31 f0       	breq	.+12     	; 0xb32 <gfx_mono_st7565r_draw_pixel+0x56>
     b26:	06 c0       	rjmp	.+12     	; 0xb34 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     b28:	80 2b       	or	r24, r16
		break;
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     b2c:	00 95       	com	r16
     b2e:	80 23       	and	r24, r16
		break;
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     b32:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     b34:	48 2f       	mov	r20, r24
     b36:	6c 2f       	mov	r22, r28
     b38:	8f 2d       	mov	r24, r15
     b3a:	e7 de       	rcall	.-562    	; 0x90a <gfx_mono_st7565r_put_byte>
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	08 95       	ret

00000b48 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b48:	14 c0       	rjmp	.+40     	; 0xb72 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     b4a:	08 95       	ret

00000b4c <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     b4c:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <fbpointer>
     b50:	90 93 79 22 	sts	0x2279, r25	; 0x802279 <fbpointer+0x1>
     b54:	08 95       	ret

00000b56 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b56:	20 91 78 22 	lds	r18, 0x2278	; 0x802278 <fbpointer>
     b5a:	30 91 79 22 	lds	r19, 0x2279	; 0x802279 <fbpointer+0x1>
     b5e:	90 e8       	ldi	r25, 0x80	; 128
     b60:	89 9f       	mul	r24, r25
     b62:	20 0d       	add	r18, r0
     b64:	31 1d       	adc	r19, r1
     b66:	11 24       	eor	r1, r1
     b68:	f9 01       	movw	r30, r18
     b6a:	e6 0f       	add	r30, r22
     b6c:	f1 1d       	adc	r31, r1
     b6e:	40 83       	st	Z, r20
     b70:	08 95       	ret

00000b72 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b72:	20 91 78 22 	lds	r18, 0x2278	; 0x802278 <fbpointer>
     b76:	30 91 79 22 	lds	r19, 0x2279	; 0x802279 <fbpointer+0x1>
     b7a:	90 e8       	ldi	r25, 0x80	; 128
     b7c:	89 9f       	mul	r24, r25
     b7e:	20 0d       	add	r18, r0
     b80:	31 1d       	adc	r19, r1
     b82:	11 24       	eor	r1, r1
     b84:	f9 01       	movw	r30, r18
     b86:	e6 0f       	add	r30, r22
     b88:	f1 1d       	adc	r31, r1
}
     b8a:	80 81       	ld	r24, Z
     b8c:	08 95       	ret

00000b8e <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	e4 2f       	mov	r30, r20
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	e8 0f       	add	r30, r24
     b9e:	f1 1d       	adc	r31, r1
     ba0:	e1 38       	cpi	r30, 0x81	; 129
     ba2:	f1 05       	cpc	r31, r1
     ba4:	1c f0       	brlt	.+6      	; 0xbac <gfx_mono_generic_draw_horizontal_line+0x1e>
     ba6:	c0 e8       	ldi	r28, 0x80	; 128
     ba8:	4c 2f       	mov	r20, r28
     baa:	48 1b       	sub	r20, r24
     bac:	44 23       	and	r20, r20
     bae:	09 f4       	brne	.+2      	; 0xbb2 <gfx_mono_generic_draw_horizontal_line+0x24>
     bb0:	4a c0       	rjmp	.+148    	; 0xc46 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bb2:	d6 2f       	mov	r29, r22
     bb4:	d6 95       	lsr	r29
     bb6:	d6 95       	lsr	r29
     bb8:	d6 95       	lsr	r29
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	98 e0       	ldi	r25, 0x08	; 8
     bbe:	d9 9f       	mul	r29, r25
     bc0:	60 19       	sub	r22, r0
     bc2:	71 09       	sbc	r23, r1
     bc4:	11 24       	eor	r1, r1
     bc6:	e1 e0       	ldi	r30, 0x01	; 1
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	df 01       	movw	r26, r30
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <gfx_mono_generic_draw_horizontal_line+0x44>
     bce:	aa 0f       	add	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	6a 95       	dec	r22
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <gfx_mono_generic_draw_horizontal_line+0x40>
     bd6:	fa 2e       	mov	r15, r26
     bd8:	21 30       	cpi	r18, 0x01	; 1
     bda:	21 f0       	breq	.+8      	; 0xbe4 <gfx_mono_generic_draw_horizontal_line+0x56>
     bdc:	98 f0       	brcs	.+38     	; 0xc04 <gfx_mono_generic_draw_horizontal_line+0x76>
     bde:	22 30       	cpi	r18, 0x02	; 2
     be0:	19 f1       	breq	.+70     	; 0xc28 <gfx_mono_generic_draw_horizontal_line+0x9a>
     be2:	31 c0       	rjmp	.+98     	; 0xc46 <gfx_mono_generic_draw_horizontal_line+0xb8>
     be4:	c4 2f       	mov	r28, r20
     be6:	1f ef       	ldi	r17, 0xFF	; 255
     be8:	18 0f       	add	r17, r24
     bea:	01 2f       	mov	r16, r17
     bec:	0c 0f       	add	r16, r28
     bee:	60 2f       	mov	r22, r16
     bf0:	8d 2f       	mov	r24, r29
     bf2:	aa df       	rcall	.-172    	; 0xb48 <gfx_mono_st7565r_get_byte>
     bf4:	4f 2d       	mov	r20, r15
     bf6:	48 2b       	or	r20, r24
     bf8:	60 2f       	mov	r22, r16
     bfa:	8d 2f       	mov	r24, r29
     bfc:	86 de       	rcall	.-756    	; 0x90a <gfx_mono_st7565r_put_byte>
     bfe:	c1 50       	subi	r28, 0x01	; 1
     c00:	a1 f7       	brne	.-24     	; 0xbea <gfx_mono_generic_draw_horizontal_line+0x5c>
     c02:	21 c0       	rjmp	.+66     	; 0xc46 <gfx_mono_generic_draw_horizontal_line+0xb8>
     c04:	c4 2f       	mov	r28, r20
     c06:	1f ef       	ldi	r17, 0xFF	; 255
     c08:	18 0f       	add	r17, r24
     c0a:	fa 2e       	mov	r15, r26
     c0c:	f0 94       	com	r15
     c0e:	01 2f       	mov	r16, r17
     c10:	0c 0f       	add	r16, r28
     c12:	60 2f       	mov	r22, r16
     c14:	8d 2f       	mov	r24, r29
     c16:	98 df       	rcall	.-208    	; 0xb48 <gfx_mono_st7565r_get_byte>
     c18:	4f 2d       	mov	r20, r15
     c1a:	48 23       	and	r20, r24
     c1c:	60 2f       	mov	r22, r16
     c1e:	8d 2f       	mov	r24, r29
     c20:	74 de       	rcall	.-792    	; 0x90a <gfx_mono_st7565r_put_byte>
     c22:	c1 50       	subi	r28, 0x01	; 1
     c24:	a1 f7       	brne	.-24     	; 0xc0e <gfx_mono_generic_draw_horizontal_line+0x80>
     c26:	0f c0       	rjmp	.+30     	; 0xc46 <gfx_mono_generic_draw_horizontal_line+0xb8>
     c28:	c4 2f       	mov	r28, r20
     c2a:	1f ef       	ldi	r17, 0xFF	; 255
     c2c:	18 0f       	add	r17, r24
     c2e:	01 2f       	mov	r16, r17
     c30:	0c 0f       	add	r16, r28
     c32:	60 2f       	mov	r22, r16
     c34:	8d 2f       	mov	r24, r29
     c36:	88 df       	rcall	.-240    	; 0xb48 <gfx_mono_st7565r_get_byte>
     c38:	4f 2d       	mov	r20, r15
     c3a:	48 27       	eor	r20, r24
     c3c:	60 2f       	mov	r22, r16
     c3e:	8d 2f       	mov	r24, r29
     c40:	64 de       	rcall	.-824    	; 0x90a <gfx_mono_st7565r_put_byte>
     c42:	c1 50       	subi	r28, 0x01	; 1
     c44:	a1 f7       	brne	.-24     	; 0xc2e <gfx_mono_generic_draw_horizontal_line+0xa0>
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	08 95       	ret

00000c52 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
	if (height == 0) {
     c5c:	22 23       	and	r18, r18
     c5e:	69 f0       	breq	.+26     	; 0xc7a <gfx_mono_generic_draw_filled_rect+0x28>
     c60:	f4 2e       	mov	r15, r20
     c62:	18 2f       	mov	r17, r24
     c64:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     c66:	df ef       	ldi	r29, 0xFF	; 255
     c68:	d6 0f       	add	r29, r22
     c6a:	6d 2f       	mov	r22, r29
     c6c:	6c 0f       	add	r22, r28
     c6e:	20 2f       	mov	r18, r16
     c70:	4f 2d       	mov	r20, r15
     c72:	81 2f       	mov	r24, r17
     c74:	8c df       	rcall	.-232    	; 0xb8e <gfx_mono_generic_draw_horizontal_line>
     c76:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c78:	c1 f7       	brne	.-16     	; 0xc6a <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	08 95       	ret

00000c86 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	c8 2f       	mov	r28, r24
     c9c:	e6 2e       	mov	r14, r22
     c9e:	b4 2e       	mov	r11, r20
     ca0:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	24 81       	ldd	r18, Z+4	; 0x04
     ca8:	43 81       	ldd	r20, Z+3	; 0x03
     caa:	6b 2d       	mov	r22, r11
     cac:	8e 2d       	mov	r24, r14
     cae:	d1 df       	rcall	.-94     	; 0xc52 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     cb0:	f6 01       	movw	r30, r12
     cb2:	80 81       	ld	r24, Z
     cb4:	81 11       	cpse	r24, r1
     cb6:	39 c0       	rjmp	.+114    	; 0xd2a <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     cb8:	83 81       	ldd	r24, Z+3	; 0x03
     cba:	28 2f       	mov	r18, r24
     cbc:	26 95       	lsr	r18
     cbe:	26 95       	lsr	r18
     cc0:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     cc2:	87 70       	andi	r24, 0x07	; 7
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <gfx_mono_draw_char+0x42>
		char_row_size++;
     cc6:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     cc8:	f6 01       	movw	r30, r12
     cca:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     ccc:	8c 2f       	mov	r24, r28
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	35 81       	ldd	r19, Z+5	; 0x05
     cd2:	83 1b       	sub	r24, r19
     cd4:	91 09       	sbc	r25, r1
     cd6:	2a 9d       	mul	r18, r10
     cd8:	90 01       	movw	r18, r0
     cda:	11 24       	eor	r1, r1
     cdc:	82 9f       	mul	r24, r18
     cde:	a0 01       	movw	r20, r0
     ce0:	83 9f       	mul	r24, r19
     ce2:	50 0d       	add	r21, r0
     ce4:	92 9f       	mul	r25, r18
     ce6:	50 0d       	add	r21, r0
     ce8:	11 24       	eor	r1, r1
     cea:	01 81       	ldd	r16, Z+1	; 0x01
     cec:	12 81       	ldd	r17, Z+2	; 0x02
     cee:	04 0f       	add	r16, r20
     cf0:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     cf2:	f6 01       	movw	r30, r12
     cf4:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     cf6:	ff 20       	and	r15, r15
     cf8:	a1 f0       	breq	.+40     	; 0xd22 <gfx_mono_draw_char+0x9c>
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
     cfc:	c0 e0       	ldi	r28, 0x00	; 0
     cfe:	8e 2d       	mov	r24, r14
     d00:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     d02:	9c 2f       	mov	r25, r28
     d04:	97 70       	andi	r25, 0x07	; 7
     d06:	21 f4       	brne	.+8      	; 0xd10 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     d08:	f8 01       	movw	r30, r16
     d0a:	d4 91       	lpm	r29, Z
				glyph_data++;
     d0c:	0f 5f       	subi	r16, 0xFF	; 255
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     d10:	dd 23       	and	r29, r29
     d12:	1c f4       	brge	.+6      	; 0xd1a <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	6b 2d       	mov	r22, r11
     d18:	e1 de       	rcall	.-574    	; 0xadc <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     d1a:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     d1c:	cf 5f       	subi	r28, 0xFF	; 255
     d1e:	fc 12       	cpse	r15, r28
     d20:	ee cf       	rjmp	.-36     	; 0xcfe <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     d22:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     d24:	aa 94       	dec	r10
	} while (rows_left > 0);
     d26:	a1 10       	cpse	r10, r1
     d28:	e4 cf       	rjmp	.-56     	; 0xcf2 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	bf 90       	pop	r11
     d3c:	af 90       	pop	r10
     d3e:	08 95       	ret

00000d40 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	d6 2e       	mov	r13, r22
     d50:	04 2f       	mov	r16, r20
     d52:	79 01       	movw	r14, r18
     d54:	ec 01       	movw	r28, r24
     d56:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d58:	89 91       	ld	r24, Y+
     d5a:	8a 30       	cpi	r24, 0x0A	; 10
     d5c:	31 f4       	brne	.+12     	; 0xd6a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     d5e:	f7 01       	movw	r30, r14
     d60:	84 81       	ldd	r24, Z+4	; 0x04
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     d66:	1d 2d       	mov	r17, r13
     d68:	09 c0       	rjmp	.+18     	; 0xd7c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     d6a:	8d 30       	cpi	r24, 0x0D	; 13
     d6c:	39 f0       	breq	.+14     	; 0xd7c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d6e:	97 01       	movw	r18, r14
     d70:	40 2f       	mov	r20, r16
     d72:	61 2f       	mov	r22, r17
     d74:	88 df       	rcall	.-240    	; 0xc86 <gfx_mono_draw_char>
			x += font->width;
     d76:	f7 01       	movw	r30, r14
     d78:	83 81       	ldd	r24, Z+3	; 0x03
     d7a:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d7c:	88 81       	ld	r24, Y
     d7e:	81 11       	cpse	r24, r1
     d80:	eb cf       	rjmp	.-42     	; 0xd58 <gfx_mono_draw_string+0x18>
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	08 95       	ret

00000d92 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d9c:	c6 2f       	mov	r28, r22
     d9e:	d0 e0       	ldi	r29, 0x00	; 0
     da0:	de 01       	movw	r26, r28
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <ioport_configure_port_pin+0x18>
     da6:	b5 95       	asr	r27
     da8:	a7 95       	ror	r26
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <ioport_configure_port_pin+0x14>
     dae:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     db0:	50 8b       	std	Z+16, r21	; 0x10
     db2:	2f 5f       	subi	r18, 0xFF	; 255
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     db8:	28 30       	cpi	r18, 0x08	; 8
     dba:	31 05       	cpc	r19, r1
     dbc:	89 f7       	brne	.-30     	; 0xda0 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     dbe:	40 ff       	sbrs	r20, 0
     dc0:	0a c0       	rjmp	.+20     	; 0xdd6 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     dc2:	41 ff       	sbrs	r20, 1
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     dc6:	fc 01       	movw	r30, r24
     dc8:	65 83       	std	Z+5, r22	; 0x05
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     dcc:	fc 01       	movw	r30, r24
     dce:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     dd0:	fc 01       	movw	r30, r24
     dd2:	61 83       	std	Z+1, r22	; 0x01
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     dd6:	fc 01       	movw	r30, r24
     dd8:	62 83       	std	Z+2, r22	; 0x02
	}
}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     de0:	80 3a       	cpi	r24, 0xA0	; 160
     de2:	28 e0       	ldi	r18, 0x08	; 8
     de4:	92 07       	cpc	r25, r18
     de6:	21 f4       	brne	.+8      	; 0xdf0 <usart_spi_init+0x10>
     de8:	60 e1       	ldi	r22, 0x10	; 16
     dea:	83 e0       	ldi	r24, 0x03	; 3
     dec:	78 cd       	rjmp	.-1296   	; 0x8de <sysclk_enable_module>
     dee:	08 95       	ret
     df0:	80 3b       	cpi	r24, 0xB0	; 176
     df2:	28 e0       	ldi	r18, 0x08	; 8
     df4:	92 07       	cpc	r25, r18
     df6:	21 f4       	brne	.+8      	; 0xe00 <usart_spi_init+0x20>
     df8:	60 e2       	ldi	r22, 0x20	; 32
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	70 cd       	rjmp	.-1312   	; 0x8de <sysclk_enable_module>
     dfe:	08 95       	ret
     e00:	80 3a       	cpi	r24, 0xA0	; 160
     e02:	29 e0       	ldi	r18, 0x09	; 9
     e04:	92 07       	cpc	r25, r18
     e06:	21 f4       	brne	.+8      	; 0xe10 <usart_spi_init+0x30>
     e08:	60 e1       	ldi	r22, 0x10	; 16
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	68 cd       	rjmp	.-1328   	; 0x8de <sysclk_enable_module>
     e0e:	08 95       	ret
     e10:	80 3b       	cpi	r24, 0xB0	; 176
     e12:	29 e0       	ldi	r18, 0x09	; 9
     e14:	92 07       	cpc	r25, r18
     e16:	21 f4       	brne	.+8      	; 0xe20 <usart_spi_init+0x40>
     e18:	60 e2       	ldi	r22, 0x20	; 32
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	60 cd       	rjmp	.-1344   	; 0x8de <sysclk_enable_module>
     e1e:	08 95       	ret
     e20:	80 3a       	cpi	r24, 0xA0	; 160
     e22:	2a e0       	ldi	r18, 0x0A	; 10
     e24:	92 07       	cpc	r25, r18
     e26:	21 f4       	brne	.+8      	; 0xe30 <usart_spi_init+0x50>
     e28:	60 e1       	ldi	r22, 0x10	; 16
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	58 cd       	rjmp	.-1360   	; 0x8de <sysclk_enable_module>
     e2e:	08 95       	ret
     e30:	80 3a       	cpi	r24, 0xA0	; 160
     e32:	9b 40       	sbci	r25, 0x0B	; 11
     e34:	19 f4       	brne	.+6      	; 0xe3c <usart_spi_init+0x5c>
     e36:	60 e1       	ldi	r22, 0x10	; 16
     e38:	86 e0       	ldi	r24, 0x06	; 6
     e3a:	51 cd       	rjmp	.-1374   	; 0x8de <sysclk_enable_module>
     e3c:	08 95       	ret

00000e3e <usart_spi_setup_device>:
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	00 d0       	rcall	.+0      	; 0xe48 <usart_spi_setup_device+0xa>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <usart_spi_setup_device+0xc>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	09 83       	std	Y+1, r16	; 0x01
     e50:	1a 83       	std	Y+2, r17	; 0x02
     e52:	2b 83       	std	Y+3, r18	; 0x03
     e54:	3c 83       	std	Y+4, r19	; 0x04
     e56:	4d 83       	std	Y+5, r20	; 0x05
     e58:	1e 82       	std	Y+6, r1	; 0x06
     e5a:	be 01       	movw	r22, r28
     e5c:	6f 5f       	subi	r22, 0xFF	; 255
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	ba d0       	rcall	.+372    	; 0xfd6 <usart_init_spi>
     e62:	26 96       	adiw	r28, 0x06	; 6
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e72:	fb 01       	movw	r30, r22
     e74:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e76:	e8 2f       	mov	r30, r24
     e78:	e6 95       	lsr	r30
     e7a:	e6 95       	lsr	r30
     e7c:	e6 95       	lsr	r30
     e7e:	40 e2       	ldi	r20, 0x20	; 32
     e80:	e4 9f       	mul	r30, r20
     e82:	f0 01       	movw	r30, r0
     e84:	11 24       	eor	r1, r1
     e86:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e88:	87 70       	andi	r24, 0x07	; 7
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <usart_spi_select_device+0x24>
     e92:	44 0f       	add	r20, r20
     e94:	55 1f       	adc	r21, r21
     e96:	8a 95       	dec	r24
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e9a:	46 83       	std	Z+6, r20	; 0x06
     e9c:	08 95       	ret

00000e9e <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e9e:	fb 01       	movw	r30, r22
     ea0:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     ea2:	e8 2f       	mov	r30, r24
     ea4:	e6 95       	lsr	r30
     ea6:	e6 95       	lsr	r30
     ea8:	e6 95       	lsr	r30
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	e4 9f       	mul	r30, r20
     eae:	f0 01       	movw	r30, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     eb4:	87 70       	andi	r24, 0x07	; 7
     eb6:	21 e0       	ldi	r18, 0x01	; 1
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	a9 01       	movw	r20, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <usart_spi_deselect_device+0x24>
     ebe:	44 0f       	add	r20, r20
     ec0:	55 1f       	adc	r21, r21
     ec2:	8a 95       	dec	r24
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     ec6:	45 83       	std	Z+5, r20	; 0x05
     ec8:	08 95       	ret

00000eca <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     eca:	43 e0       	ldi	r20, 0x03	; 3
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	80 ee       	ldi	r24, 0xE0	; 224
     ed2:	97 e0       	ldi	r25, 0x07	; 7
     ed4:	5e df       	rcall	.-324    	; 0xd92 <ioport_configure_port_pin>
     ed6:	43 e0       	ldi	r20, 0x03	; 3
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	80 ee       	ldi	r24, 0xE0	; 224
     ede:	97 e0       	ldi	r25, 0x07	; 7
     ee0:	58 df       	rcall	.-336    	; 0xd92 <ioport_configure_port_pin>
     ee2:	43 e0       	ldi	r20, 0x03	; 3
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	60 e1       	ldi	r22, 0x10	; 16
     ee8:	80 e6       	ldi	r24, 0x60	; 96
     eea:	96 e0       	ldi	r25, 0x06	; 6
     eec:	52 df       	rcall	.-348    	; 0xd92 <ioport_configure_port_pin>
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	50 e4       	ldi	r21, 0x40	; 64
     ef2:	60 e2       	ldi	r22, 0x20	; 32
     ef4:	80 e6       	ldi	r24, 0x60	; 96
     ef6:	96 e0       	ldi	r25, 0x06	; 6
     ef8:	4c df       	rcall	.-360    	; 0xd92 <ioport_configure_port_pin>
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	5b e1       	ldi	r21, 0x1B	; 27
     efe:	60 e2       	ldi	r22, 0x20	; 32
     f00:	80 e8       	ldi	r24, 0x80	; 128
     f02:	96 e0       	ldi	r25, 0x06	; 6
     f04:	46 df       	rcall	.-372    	; 0xd92 <ioport_configure_port_pin>
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	5b e1       	ldi	r21, 0x1B	; 27
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	80 ea       	ldi	r24, 0xA0	; 160
     f0e:	96 e0       	ldi	r25, 0x06	; 6
     f10:	40 df       	rcall	.-384    	; 0xd92 <ioport_configure_port_pin>
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	5b e1       	ldi	r21, 0x1B	; 27
     f16:	64 e0       	ldi	r22, 0x04	; 4
     f18:	80 ea       	ldi	r24, 0xA0	; 160
     f1a:	96 e0       	ldi	r25, 0x06	; 6
     f1c:	3a df       	rcall	.-396    	; 0xd92 <ioport_configure_port_pin>
     f1e:	43 e0       	ldi	r20, 0x03	; 3
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	80 e6       	ldi	r24, 0x60	; 96
     f26:	96 e0       	ldi	r25, 0x06	; 6
     f28:	34 df       	rcall	.-408    	; 0xd92 <ioport_configure_port_pin>
     f2a:	43 e0       	ldi	r20, 0x03	; 3
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	68 e0       	ldi	r22, 0x08	; 8
     f30:	80 e6       	ldi	r24, 0x60	; 96
     f32:	96 e0       	ldi	r25, 0x06	; 6
     f34:	2e df       	rcall	.-420    	; 0xd92 <ioport_configure_port_pin>
     f36:	43 e0       	ldi	r20, 0x03	; 3
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	68 e0       	ldi	r22, 0x08	; 8
     f3c:	80 ea       	ldi	r24, 0xA0	; 160
     f3e:	96 e0       	ldi	r25, 0x06	; 6
     f40:	28 df       	rcall	.-432    	; 0xd92 <ioport_configure_port_pin>
     f42:	43 e0       	ldi	r20, 0x03	; 3
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	80 e6       	ldi	r24, 0x60	; 96
     f4a:	96 e0       	ldi	r25, 0x06	; 6
     f4c:	22 df       	rcall	.-444    	; 0xd92 <ioport_configure_port_pin>
     f4e:	43 e0       	ldi	r20, 0x03	; 3
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	68 e0       	ldi	r22, 0x08	; 8
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	96 e0       	ldi	r25, 0x06	; 6
     f58:	1c df       	rcall	.-456    	; 0xd92 <ioport_configure_port_pin>
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	60 e1       	ldi	r22, 0x10	; 16
     f60:	80 e8       	ldi	r24, 0x80	; 128
     f62:	96 e0       	ldi	r25, 0x06	; 6
     f64:	16 cf       	rjmp	.-468    	; 0xd92 <ioport_configure_port_pin>
     f66:	08 95       	ret

00000f68 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     f68:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     f6a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     f6c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     f6e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     f70:	60 83       	st	Z, r22
	ret                             // Return to caller
     f72:	08 95       	ret

00000f74 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     f86:	d9 01       	movw	r26, r18
     f88:	c8 01       	movw	r24, r16
     f8a:	b6 95       	lsr	r27
     f8c:	a7 95       	ror	r26
     f8e:	97 95       	ror	r25
     f90:	87 95       	ror	r24
     f92:	48 17       	cp	r20, r24
     f94:	59 07       	cpc	r21, r25
     f96:	6a 07       	cpc	r22, r26
     f98:	7b 07       	cpc	r23, r27
     f9a:	70 f4       	brcc	.+28     	; 0xfb8 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     f9c:	6a 01       	movw	r12, r20
     f9e:	7b 01       	movw	r14, r22
     fa0:	cc 0c       	add	r12, r12
     fa2:	dd 1c       	adc	r13, r13
     fa4:	ee 1c       	adc	r14, r14
     fa6:	ff 1c       	adc	r15, r15
     fa8:	c9 01       	movw	r24, r18
     faa:	b8 01       	movw	r22, r16
     fac:	a7 01       	movw	r20, r14
     fae:	96 01       	movw	r18, r12
     fb0:	37 d2       	rcall	.+1134   	; 0x1420 <__udivmodsi4>
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	31 09       	sbc	r19, r1
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     fbc:	83 2f       	mov	r24, r19
     fbe:	8f 70       	andi	r24, 0x0F	; 15
     fc0:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     fc2:	2e 83       	std	Y+6, r18	; 0x06
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	08 95       	ret

00000fd6 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	1f 92       	push	r1
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	7c 01       	movw	r14, r24
     fec:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	09 f4       	brne	.+2      	; 0xff4 <usart_init_spi+0x1e>
     ff2:	b2 c1       	rjmp	.+868    	; 0x1358 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     ff4:	80 3c       	cpi	r24, 0xC0	; 192
     ff6:	91 05       	cpc	r25, r1
     ff8:	21 f4       	brne	.+8      	; 0x1002 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     ffa:	60 e1       	ldi	r22, 0x10	; 16
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	6f dc       	rcall	.-1826   	; 0x8de <sysclk_enable_module>
    1000:	ab c1       	rjmp	.+854    	; 0x1358 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1002:	80 e8       	ldi	r24, 0x80	; 128
    1004:	e8 16       	cp	r14, r24
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	f8 06       	cpc	r15, r24
    100a:	21 f4       	brne	.+8      	; 0x1014 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    100c:	62 e0       	ldi	r22, 0x02	; 2
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	66 dc       	rcall	.-1844   	; 0x8de <sysclk_enable_module>
    1012:	a2 c1       	rjmp	.+836    	; 0x1358 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1014:	e1 14       	cp	r14, r1
    1016:	e1 e0       	ldi	r30, 0x01	; 1
    1018:	fe 06       	cpc	r15, r30
    101a:	21 f4       	brne	.+8      	; 0x1024 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	5e dc       	rcall	.-1860   	; 0x8de <sysclk_enable_module>
    1022:	9a c1       	rjmp	.+820    	; 0x1358 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1024:	f0 e8       	ldi	r31, 0x80	; 128
    1026:	ef 16       	cp	r14, r31
    1028:	f3 e0       	ldi	r31, 0x03	; 3
    102a:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    102c:	21 f4       	brne	.+8      	; 0x1036 <usart_init_spi+0x60>
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	55 dc       	rcall	.-1878   	; 0x8de <sysclk_enable_module>
    1034:	91 c1       	rjmp	.+802    	; 0x1358 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1036:	30 e9       	ldi	r19, 0x90	; 144
    1038:	e3 16       	cp	r14, r19
    103a:	33 e0       	ldi	r19, 0x03	; 3
    103c:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    103e:	21 f4       	brne	.+8      	; 0x1048 <usart_init_spi+0x72>
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	4c dc       	rcall	.-1896   	; 0x8de <sysclk_enable_module>
    1046:	88 c1       	rjmp	.+784    	; 0x1358 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1048:	e1 14       	cp	r14, r1
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    104e:	21 f4       	brne	.+8      	; 0x1058 <usart_init_spi+0x82>
    1050:	62 e0       	ldi	r22, 0x02	; 2
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	44 dc       	rcall	.-1912   	; 0x8de <sysclk_enable_module>
    1056:	80 c1       	rjmp	.+768    	; 0x1358 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1058:	e0 e4       	ldi	r30, 0x40	; 64
    105a:	ee 16       	cp	r14, r30
    105c:	e2 e0       	ldi	r30, 0x02	; 2
    105e:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1060:	21 f4       	brne	.+8      	; 0x106a <usart_init_spi+0x94>
    1062:	62 e0       	ldi	r22, 0x02	; 2
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	3b dc       	rcall	.-1930   	; 0x8de <sysclk_enable_module>
    1068:	77 c1       	rjmp	.+750    	; 0x1358 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    106a:	f0 e2       	ldi	r31, 0x20	; 32
    106c:	ef 16       	cp	r14, r31
    106e:	f3 e0       	ldi	r31, 0x03	; 3
    1070:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1072:	21 f4       	brne	.+8      	; 0x107c <usart_init_spi+0xa6>
    1074:	64 e0       	ldi	r22, 0x04	; 4
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	32 dc       	rcall	.-1948   	; 0x8de <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    107a:	6e c1       	rjmp	.+732    	; 0x1358 <usart_init_spi+0x382>
    107c:	e1 14       	cp	r14, r1
    107e:	38 e0       	ldi	r19, 0x08	; 8
    1080:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1082:	21 f4       	brne	.+8      	; 0x108c <usart_init_spi+0xb6>
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	83 e0       	ldi	r24, 0x03	; 3
    1088:	2a dc       	rcall	.-1964   	; 0x8de <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    108a:	66 c1       	rjmp	.+716    	; 0x1358 <usart_init_spi+0x382>
    108c:	e1 14       	cp	r14, r1
    108e:	89 e0       	ldi	r24, 0x09	; 9
    1090:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1092:	21 f4       	brne	.+8      	; 0x109c <usart_init_spi+0xc6>
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	22 dc       	rcall	.-1980   	; 0x8de <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    109a:	5e c1       	rjmp	.+700    	; 0x1358 <usart_init_spi+0x382>
    109c:	e1 14       	cp	r14, r1
    109e:	ea e0       	ldi	r30, 0x0A	; 10
    10a0:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    10a2:	21 f4       	brne	.+8      	; 0x10ac <usart_init_spi+0xd6>
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	85 e0       	ldi	r24, 0x05	; 5
    10a8:	1a dc       	rcall	.-1996   	; 0x8de <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    10aa:	56 c1       	rjmp	.+684    	; 0x1358 <usart_init_spi+0x382>
    10ac:	e1 14       	cp	r14, r1
    10ae:	fb e0       	ldi	r31, 0x0B	; 11
    10b0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    10b2:	21 f4       	brne	.+8      	; 0x10bc <usart_init_spi+0xe6>
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	12 dc       	rcall	.-2012   	; 0x8de <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    10ba:	4e c1       	rjmp	.+668    	; 0x1358 <usart_init_spi+0x382>
    10bc:	30 e4       	ldi	r19, 0x40	; 64
    10be:	e3 16       	cp	r14, r19
    10c0:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    10c2:	f3 06       	cpc	r15, r19
    10c4:	21 f4       	brne	.+8      	; 0x10ce <usart_init_spi+0xf8>
    10c6:	62 e0       	ldi	r22, 0x02	; 2
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	09 dc       	rcall	.-2030   	; 0x8de <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    10cc:	45 c1       	rjmp	.+650    	; 0x1358 <usart_init_spi+0x382>
    10ce:	80 e4       	ldi	r24, 0x40	; 64
    10d0:	e8 16       	cp	r14, r24
    10d2:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    10d4:	f8 06       	cpc	r15, r24
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <usart_init_spi+0x10a>
    10d8:	62 e0       	ldi	r22, 0x02	; 2
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	00 dc       	rcall	.-2048   	; 0x8de <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    10de:	3c c1       	rjmp	.+632    	; 0x1358 <usart_init_spi+0x382>
    10e0:	e0 e4       	ldi	r30, 0x40	; 64
    10e2:	ee 16       	cp	r14, r30
    10e4:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    10e6:	fe 06       	cpc	r15, r30
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <usart_init_spi+0x11c>
    10ea:	62 e0       	ldi	r22, 0x02	; 2
    10ec:	85 e0       	ldi	r24, 0x05	; 5
    10ee:	f7 db       	rcall	.-2066   	; 0x8de <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    10f0:	33 c1       	rjmp	.+614    	; 0x1358 <usart_init_spi+0x382>
    10f2:	f0 e9       	ldi	r31, 0x90	; 144
    10f4:	ef 16       	cp	r14, r31
    10f6:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    10f8:	ff 06       	cpc	r15, r31
    10fa:	21 f4       	brne	.+8      	; 0x1104 <usart_init_spi+0x12e>
    10fc:	64 e0       	ldi	r22, 0x04	; 4
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	ee db       	rcall	.-2084   	; 0x8de <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1102:	2a c1       	rjmp	.+596    	; 0x1358 <usart_init_spi+0x382>
    1104:	30 e9       	ldi	r19, 0x90	; 144
    1106:	e3 16       	cp	r14, r19
    1108:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    110a:	f3 06       	cpc	r15, r19
    110c:	21 f4       	brne	.+8      	; 0x1116 <usart_init_spi+0x140>
    110e:	64 e0       	ldi	r22, 0x04	; 4
    1110:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1112:	e5 db       	rcall	.-2102   	; 0x8de <sysclk_enable_module>
    1114:	21 c1       	rjmp	.+578    	; 0x1358 <usart_init_spi+0x382>
    1116:	80 e9       	ldi	r24, 0x90	; 144
    1118:	e8 16       	cp	r14, r24
    111a:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    111c:	f8 06       	cpc	r15, r24
    111e:	21 f4       	brne	.+8      	; 0x1128 <usart_init_spi+0x152>
    1120:	64 e0       	ldi	r22, 0x04	; 4
    1122:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1124:	dc db       	rcall	.-2120   	; 0x8de <sysclk_enable_module>
    1126:	18 c1       	rjmp	.+560    	; 0x1358 <usart_init_spi+0x382>
    1128:	e0 e9       	ldi	r30, 0x90	; 144
    112a:	ee 16       	cp	r14, r30
    112c:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    112e:	fe 06       	cpc	r15, r30
    1130:	21 f4       	brne	.+8      	; 0x113a <usart_init_spi+0x164>
    1132:	64 e0       	ldi	r22, 0x04	; 4
    1134:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1136:	d3 db       	rcall	.-2138   	; 0x8de <sysclk_enable_module>
    1138:	0f c1       	rjmp	.+542    	; 0x1358 <usart_init_spi+0x382>
    113a:	f0 ec       	ldi	r31, 0xC0	; 192
    113c:	ef 16       	cp	r14, r31
    113e:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1140:	ff 06       	cpc	r15, r31
    1142:	21 f4       	brne	.+8      	; 0x114c <usart_init_spi+0x176>
    1144:	68 e0       	ldi	r22, 0x08	; 8
    1146:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1148:	ca db       	rcall	.-2156   	; 0x8de <sysclk_enable_module>
    114a:	06 c1       	rjmp	.+524    	; 0x1358 <usart_init_spi+0x382>
    114c:	30 ec       	ldi	r19, 0xC0	; 192
    114e:	e3 16       	cp	r14, r19
    1150:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1152:	f3 06       	cpc	r15, r19
    1154:	21 f4       	brne	.+8      	; 0x115e <usart_init_spi+0x188>
    1156:	68 e0       	ldi	r22, 0x08	; 8
    1158:	84 e0       	ldi	r24, 0x04	; 4
    115a:	c1 db       	rcall	.-2174   	; 0x8de <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    115c:	fd c0       	rjmp	.+506    	; 0x1358 <usart_init_spi+0x382>
    115e:	80 ea       	ldi	r24, 0xA0	; 160
    1160:	e8 16       	cp	r14, r24
    1162:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1164:	f8 06       	cpc	r15, r24
    1166:	61 f4       	brne	.+24     	; 0x1180 <usart_init_spi+0x1aa>
    1168:	60 e1       	ldi	r22, 0x10	; 16
    116a:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    116c:	b8 db       	rcall	.-2192   	; 0x8de <sysclk_enable_module>
    116e:	e0 ea       	ldi	r30, 0xA0	; 160
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1174:	8f 7e       	andi	r24, 0xEF	; 239
    1176:	84 83       	std	Z+4, r24	; 0x04
    1178:	f8 01       	movw	r30, r16
    117a:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    117c:	22 50       	subi	r18, 0x02	; 2
    117e:	4c c0       	rjmp	.+152    	; 0x1218 <usart_init_spi+0x242>
    1180:	f0 ea       	ldi	r31, 0xA0	; 160
    1182:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1184:	f9 e0       	ldi	r31, 0x09	; 9
    1186:	ff 06       	cpc	r15, r31
    1188:	21 f4       	brne	.+8      	; 0x1192 <usart_init_spi+0x1bc>
    118a:	60 e1       	ldi	r22, 0x10	; 16
    118c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    118e:	a7 db       	rcall	.-2226   	; 0x8de <sysclk_enable_module>
    1190:	e3 c0       	rjmp	.+454    	; 0x1358 <usart_init_spi+0x382>
    1192:	30 ea       	ldi	r19, 0xA0	; 160
    1194:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1196:	3a e0       	ldi	r19, 0x0A	; 10
    1198:	f3 06       	cpc	r15, r19
    119a:	21 f4       	brne	.+8      	; 0x11a4 <usart_init_spi+0x1ce>
    119c:	60 e1       	ldi	r22, 0x10	; 16
    119e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    11a0:	9e db       	rcall	.-2244   	; 0x8de <sysclk_enable_module>
    11a2:	da c0       	rjmp	.+436    	; 0x1358 <usart_init_spi+0x382>
    11a4:	80 ea       	ldi	r24, 0xA0	; 160
    11a6:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    11a8:	8b e0       	ldi	r24, 0x0B	; 11
    11aa:	f8 06       	cpc	r15, r24
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <usart_init_spi+0x1e0>
    11ae:	60 e1       	ldi	r22, 0x10	; 16
    11b0:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    11b2:	95 db       	rcall	.-2262   	; 0x8de <sysclk_enable_module>
    11b4:	d1 c0       	rjmp	.+418    	; 0x1358 <usart_init_spi+0x382>
    11b6:	e0 eb       	ldi	r30, 0xB0	; 176
    11b8:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    11ba:	e8 e0       	ldi	r30, 0x08	; 8
    11bc:	fe 06       	cpc	r15, r30
    11be:	21 f4       	brne	.+8      	; 0x11c8 <usart_init_spi+0x1f2>
    11c0:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	8c db       	rcall	.-2280   	; 0x8de <sysclk_enable_module>
    11c6:	c8 c0       	rjmp	.+400    	; 0x1358 <usart_init_spi+0x382>
    11c8:	f0 eb       	ldi	r31, 0xB0	; 176
    11ca:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    11cc:	f9 e0       	ldi	r31, 0x09	; 9
    11ce:	ff 06       	cpc	r15, r31
    11d0:	21 f4       	brne	.+8      	; 0x11da <usart_init_spi+0x204>
    11d2:	60 e2       	ldi	r22, 0x20	; 32
    11d4:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    11d6:	83 db       	rcall	.-2298   	; 0x8de <sysclk_enable_module>
    11d8:	bf c0       	rjmp	.+382    	; 0x1358 <usart_init_spi+0x382>
    11da:	30 e8       	ldi	r19, 0x80	; 128
    11dc:	e3 16       	cp	r14, r19
    11de:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    11e0:	f3 06       	cpc	r15, r19
    11e2:	21 f4       	brne	.+8      	; 0x11ec <usart_init_spi+0x216>
    11e4:	60 e4       	ldi	r22, 0x40	; 64
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	7a db       	rcall	.-2316   	; 0x8de <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    11ea:	b6 c0       	rjmp	.+364    	; 0x1358 <usart_init_spi+0x382>
    11ec:	80 ea       	ldi	r24, 0xA0	; 160
    11ee:	e8 16       	cp	r14, r24
    11f0:	84 e0       	ldi	r24, 0x04	; 4
    11f2:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    11f4:	21 f4       	brne	.+8      	; 0x11fe <usart_init_spi+0x228>
    11f6:	60 e4       	ldi	r22, 0x40	; 64
    11f8:	85 e0       	ldi	r24, 0x05	; 5
    11fa:	71 db       	rcall	.-2334   	; 0x8de <sysclk_enable_module>
    11fc:	ad c0       	rjmp	.+346    	; 0x1358 <usart_init_spi+0x382>
    11fe:	f7 01       	movw	r30, r14
    1200:	84 81       	ldd	r24, Z+4	; 0x04
    1202:	8f 7e       	andi	r24, 0xEF	; 239
    1204:	84 83       	std	Z+4, r24	; 0x04
    1206:	fb 01       	movw	r30, r22
    1208:	24 81       	ldd	r18, Z+4	; 0x04
    120a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    120c:	c7 01       	movw	r24, r14
    120e:	f0 ea       	ldi	r31, 0xA0	; 160
    1210:	ef 16       	cp	r14, r31
    1212:	f8 e0       	ldi	r31, 0x08	; 8
    1214:	ff 06       	cpc	r15, r31
    1216:	49 f4       	brne	.+18     	; 0x122a <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1218:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    121c:	84 fd       	sbrc	r24, 4
    121e:	a5 c0       	rjmp	.+330    	; 0x136a <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1220:	0f 2e       	mov	r0, r31
    1222:	f1 e1       	ldi	r31, 0x11	; 17
    1224:	df 2e       	mov	r13, r31
    1226:	f0 2d       	mov	r31, r0
    1228:	a4 c0       	rjmp	.+328    	; 0x1372 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    122a:	80 3b       	cpi	r24, 0xB0	; 176
    122c:	38 e0       	ldi	r19, 0x08	; 8
    122e:	93 07       	cpc	r25, r19
    1230:	91 f0       	breq	.+36     	; 0x1256 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1232:	80 3a       	cpi	r24, 0xA0	; 160
    1234:	e9 e0       	ldi	r30, 0x09	; 9
    1236:	9e 07       	cpc	r25, r30
    1238:	49 f4       	brne	.+18     	; 0x124c <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    123a:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    123e:	34 fd       	sbrc	r19, 4
    1240:	9b c0       	rjmp	.+310    	; 0x1378 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1242:	0f 2e       	mov	r0, r31
    1244:	f9 e1       	ldi	r31, 0x19	; 25
    1246:	df 2e       	mov	r13, r31
    1248:	f0 2d       	mov	r31, r0
    124a:	16 c0       	rjmp	.+44     	; 0x1278 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    124c:	80 3b       	cpi	r24, 0xB0	; 176
    124e:	f9 e0       	ldi	r31, 0x09	; 9
    1250:	9f 07       	cpc	r25, r31
    1252:	f1 f0       	breq	.+60     	; 0x1290 <usart_init_spi+0x2ba>
    1254:	04 c0       	rjmp	.+8      	; 0x125e <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1256:	0f 2e       	mov	r0, r31
    1258:	f5 e1       	ldi	r31, 0x15	; 21
    125a:	df 2e       	mov	r13, r31
    125c:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    125e:	80 3a       	cpi	r24, 0xA0	; 160
    1260:	3a e0       	ldi	r19, 0x0A	; 10
    1262:	93 07       	cpc	r25, r19
    1264:	49 f4       	brne	.+18     	; 0x1278 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1266:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    126a:	84 fd       	sbrc	r24, 4
    126c:	8a c0       	rjmp	.+276    	; 0x1382 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    126e:	0f 2e       	mov	r0, r31
    1270:	f1 e2       	ldi	r31, 0x21	; 33
    1272:	df 2e       	mov	r13, r31
    1274:	f0 2d       	mov	r31, r0
    1276:	15 c0       	rjmp	.+42     	; 0x12a2 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1278:	80 3a       	cpi	r24, 0xA0	; 160
    127a:	9b 40       	sbci	r25, 0x0B	; 11
    127c:	91 f4       	brne	.+36     	; 0x12a2 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    127e:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1282:	84 fd       	sbrc	r24, 4
    1284:	0a c0       	rjmp	.+20     	; 0x129a <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1286:	0f 2e       	mov	r0, r31
    1288:	f9 e2       	ldi	r31, 0x29	; 41
    128a:	df 2e       	mov	r13, r31
    128c:	f0 2d       	mov	r31, r0
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1290:	0f 2e       	mov	r0, r31
    1292:	fd e1       	ldi	r31, 0x1D	; 29
    1294:	df 2e       	mov	r13, r31
    1296:	f0 2d       	mov	r31, r0
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    129a:	0f 2e       	mov	r0, r31
    129c:	fd e2       	ldi	r31, 0x2D	; 45
    129e:	df 2e       	mov	r13, r31
    12a0:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12a2:	ed 2d       	mov	r30, r13
    12a4:	e6 95       	lsr	r30
    12a6:	e6 95       	lsr	r30
    12a8:	e6 95       	lsr	r30
    12aa:	30 e2       	ldi	r19, 0x20	; 32
    12ac:	e3 9f       	mul	r30, r19
    12ae:	f0 01       	movw	r30, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	fa 5f       	subi	r31, 0xFA	; 250
    12b4:	3d 2d       	mov	r19, r13
    12b6:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	03 2e       	mov	r0, r19
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <usart_init_spi+0x2ee>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    12c8:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	10 f0       	brcs	.+4      	; 0x12d2 <usart_init_spi+0x2fc>
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <usart_init_spi+0x2fe>
    12d2:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    12d4:	df 01       	movw	r26, r30
    12d6:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    12d8:	a3 0f       	add	r26, r19
    12da:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12dc:	9f b7       	in	r25, 0x3f	; 63
    12de:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    12e0:	f8 94       	cli
	return flags;
    12e2:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    12e4:	2c 91       	ld	r18, X
    12e6:	27 70       	andi	r18, 0x07	; 7
    12e8:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    12ea:	9c 91       	ld	r25, X
    12ec:	94 2b       	or	r25, r20
    12ee:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12f0:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12f2:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    12f4:	f7 01       	movw	r30, r14
    12f6:	85 81       	ldd	r24, Z+5	; 0x05
    12f8:	80 6c       	ori	r24, 0xC0	; 192
    12fa:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    12fc:	f8 01       	movw	r30, r16
    12fe:	84 81       	ldd	r24, Z+4	; 0x04
    1300:	8d 7f       	andi	r24, 0xFD	; 253
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	29 f4       	brne	.+10     	; 0x1310 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    1306:	f7 01       	movw	r30, r14
    1308:	85 81       	ldd	r24, Z+5	; 0x05
    130a:	82 60       	ori	r24, 0x02	; 2
    130c:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <usart_init_spi+0x342>
    1310:	f7 01       	movw	r30, r14
    1312:	85 81       	ldd	r24, Z+5	; 0x05
    1314:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    1316:	85 83       	std	Z+5, r24	; 0x05
    1318:	f8 01       	movw	r30, r16
    131a:	85 81       	ldd	r24, Z+5	; 0x05
    131c:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    131e:	29 f0       	breq	.+10     	; 0x132a <usart_init_spi+0x354>
    1320:	f7 01       	movw	r30, r14
    1322:	85 81       	ldd	r24, Z+5	; 0x05
    1324:	84 60       	ori	r24, 0x04	; 4
    1326:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <usart_init_spi+0x35c>
    132a:	f7 01       	movw	r30, r14
    132c:	85 81       	ldd	r24, Z+5	; 0x05
    132e:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1330:	85 83       	std	Z+5, r24	; 0x05
    1332:	f8 01       	movw	r30, r16
    1334:	40 81       	ld	r20, Z
    1336:	51 81       	ldd	r21, Z+1	; 0x01
    1338:	62 81       	ldd	r22, Z+2	; 0x02
    133a:	73 81       	ldd	r23, Z+3	; 0x03
    133c:	00 e0       	ldi	r16, 0x00	; 0
    133e:	12 e1       	ldi	r17, 0x12	; 18
    1340:	2a e7       	ldi	r18, 0x7A	; 122
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	c7 01       	movw	r24, r14
    1346:	16 de       	rcall	.-980    	; 0xf74 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1348:	f7 01       	movw	r30, r14
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	88 60       	ori	r24, 0x08	; 8
    134e:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1350:	84 81       	ldd	r24, Z+4	; 0x04
    1352:	80 61       	ori	r24, 0x10	; 16
    1354:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1356:	1a c0       	rjmp	.+52     	; 0x138c <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1358:	f7 01       	movw	r30, r14
    135a:	84 81       	ldd	r24, Z+4	; 0x04
    135c:	8f 7e       	andi	r24, 0xEF	; 239
    135e:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1360:	f8 01       	movw	r30, r16
    1362:	24 81       	ldd	r18, Z+4	; 0x04
    1364:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1366:	c7 01       	movw	r24, r14
    1368:	60 cf       	rjmp	.-320    	; 0x122a <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    136a:	0f 2e       	mov	r0, r31
    136c:	f5 e1       	ldi	r31, 0x15	; 21
    136e:	df 2e       	mov	r13, r31
    1370:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1372:	80 ea       	ldi	r24, 0xA0	; 160
    1374:	98 e0       	ldi	r25, 0x08	; 8
    1376:	6a cf       	rjmp	.-300    	; 0x124c <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1378:	0f 2e       	mov	r0, r31
    137a:	fd e1       	ldi	r31, 0x1D	; 29
    137c:	df 2e       	mov	r13, r31
    137e:	f0 2d       	mov	r31, r0
    1380:	7b cf       	rjmp	.-266    	; 0x1278 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1382:	0f 2e       	mov	r0, r31
    1384:	f5 e2       	ldi	r31, 0x25	; 37
    1386:	df 2e       	mov	r13, r31
    1388:	f0 2d       	mov	r31, r0
    138a:	8b cf       	rjmp	.-234    	; 0x12a2 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    138c:	0f 90       	pop	r0
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	08 95       	ret

0000139e <initialState>:
static void toggleBacklight(void){
	gpio_toggle_pin(NHD_C12832A1Z_BACKLIGHT);
}

static void clearScreen(void){
	gfx_mono_draw_string("                     \n                     \n                     ",
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e2       	ldi	r19, 0x20	; 32
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	87 e0       	ldi	r24, 0x07	; 7
    13a8:	90 e2       	ldi	r25, 0x20	; 32
    13aa:	ca dc       	rcall	.-1644   	; 0xd40 <gfx_mono_draw_string>
	}
}

static void initialState(void){
	clearScreen();
	gfx_mono_draw_string("Trykk paa knappen   ^",
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e2       	ldi	r19, 0x20	; 32
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	89 e4       	ldi	r24, 0x49	; 73
    13b6:	90 e2       	ldi	r25, 0x20	; 32
    13b8:	c3 cc       	rjmp	.-1658   	; 0xd40 <gfx_mono_draw_string>
    13ba:	08 95       	ret

000013bc <main>:
{
	/**
	 * Starts off by initializing the system clock before configuring the
	 * board and the monochrome graphical system.
	 */
	board_init();
    13bc:	86 dd       	rcall	.-1268   	; 0xeca <board_init>
	sysclk_init();
    13be:	56 da       	rcall	.-2900   	; 0x86c <sysclk_init>
	gfx_mono_init();
    13c0:	4b db       	rcall	.-2410   	; 0xa58 <gfx_mono_st7565r_init>
    13c2:	ed df       	rcall	.-38     	; 0x139e <initialState>

	
	initialState();
    13c4:	c0 e8       	ldi	r28, 0x80	; 128
    13c6:	d6 e0       	ldi	r29, 0x06	; 6

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    13c8:	68 94       	set
    13ca:	ff 24       	eor	r15, r15

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    13cc:	f4 f8       	bld	r15, 4
    13ce:	00 ea       	ldi	r16, 0xA0	; 160
    13d0:	16 e0       	ldi	r17, 0x06	; 6

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    13d2:	88 85       	ldd	r24, Y+8	; 0x08
    13d4:	85 fd       	sbrc	r24, 5
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <main+0x24>


	while (true) {
		
		//Push button 0 for turning backlight on/off.
		if(gpio_pin_is_low(GPIO_PUSH_BUTTON_0)){
    13d8:	ff 82       	std	Y+7, r15	; 0x07
    13da:	88 85       	ldd	r24, Y+8	; 0x08

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    13dc:	85 ff       	sbrs	r24, 5

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    13de:	fd cf       	rjmp	.-6      	; 0x13da <main+0x1e>
			toggleBacklight();
			while(gpio_pin_is_low(GPIO_PUSH_BUTTON_0)){
    13e0:	f8 01       	movw	r30, r16
    13e2:	80 85       	ldd	r24, Z+8	; 0x08
    13e4:	81 fd       	sbrc	r24, 1
    13e6:	12 c0       	rjmp	.+36     	; 0x140c <main+0x50>
				//Do nothing while the button is low.
			}
		}
		
		//Push button 1 for secret message ;)
		if(gpio_pin_is_low(GPIO_PUSH_BUTTON_1)){
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e2       	ldi	r19, 0x20	; 32
static void toggleBacklight(void){
	gpio_toggle_pin(NHD_C12832A1Z_BACKLIGHT);
}

static void clearScreen(void){
	gfx_mono_draw_string("                     \n                     \n                     ",
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	87 e0       	ldi	r24, 0x07	; 7
    13f2:	90 e2       	ldi	r25, 0x20	; 32
    13f4:	a5 dc       	rcall	.-1718   	; 0xd40 <gfx_mono_draw_string>
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e2       	ldi	r19, 0x20	; 32
	0, 0, &sysfont);	
}

static void secretMessageState(void){
	clearScreen();
	gfx_mono_draw_string("Hei Caroline.\nDu er sot!",
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	8f e5       	ldi	r24, 0x5F	; 95
    1400:	90 e2       	ldi	r25, 0x20	; 32
    1402:	9e dc       	rcall	.-1732   	; 0xd40 <gfx_mono_draw_string>
    1404:	f8 01       	movw	r30, r16
    1406:	80 85       	ldd	r24, Z+8	; 0x08
    1408:	81 ff       	sbrs	r24, 1
    140a:	fc cf       	rjmp	.-8      	; 0x1404 <main+0x48>
		}
		
		//Push button 1 for secret message ;)
		if(gpio_pin_is_low(GPIO_PUSH_BUTTON_1)){
			secretMessageState();
			while(gpio_pin_is_low(GPIO_PUSH_BUTTON_1)){
    140c:	f8 01       	movw	r30, r16
    140e:	80 85       	ldd	r24, Z+8	; 0x08
    1410:	82 fd       	sbrc	r24, 2
				//Do nothing while the button is low.
			}
		}
		
		//Push button 2 for reset;)
		if(gpio_pin_is_low(GPIO_PUSH_BUTTON_2)){
    1412:	df cf       	rjmp	.-66     	; 0x13d2 <main+0x16>
    1414:	c4 df       	rcall	.-120    	; 0x139e <initialState>
			initialState();
    1416:	f8 01       	movw	r30, r16
    1418:	80 85       	ldd	r24, Z+8	; 0x08
    141a:	82 ff       	sbrs	r24, 2
    141c:	fc cf       	rjmp	.-8      	; 0x1416 <main+0x5a>
			while(gpio_pin_is_low(GPIO_PUSH_BUTTON_2)){
    141e:	d9 cf       	rjmp	.-78     	; 0x13d2 <main+0x16>

00001420 <__udivmodsi4>:
    1420:	a1 e2       	ldi	r26, 0x21	; 33
    1422:	1a 2e       	mov	r1, r26
    1424:	aa 1b       	sub	r26, r26
    1426:	bb 1b       	sub	r27, r27
    1428:	fd 01       	movw	r30, r26
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <__udivmodsi4_ep>

0000142c <__udivmodsi4_loop>:
    142c:	aa 1f       	adc	r26, r26
    142e:	bb 1f       	adc	r27, r27
    1430:	ee 1f       	adc	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	a2 17       	cp	r26, r18
    1436:	b3 07       	cpc	r27, r19
    1438:	e4 07       	cpc	r30, r20
    143a:	f5 07       	cpc	r31, r21
    143c:	20 f0       	brcs	.+8      	; 0x1446 <__udivmodsi4_ep>
    143e:	a2 1b       	sub	r26, r18
    1440:	b3 0b       	sbc	r27, r19
    1442:	e4 0b       	sbc	r30, r20
    1444:	f5 0b       	sbc	r31, r21

00001446 <__udivmodsi4_ep>:
    1446:	66 1f       	adc	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	1a 94       	dec	r1
    1450:	69 f7       	brne	.-38     	; 0x142c <__udivmodsi4_loop>
    1452:	60 95       	com	r22
    1454:	70 95       	com	r23
    1456:	80 95       	com	r24
    1458:	90 95       	com	r25
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	bd 01       	movw	r22, r26
    1460:	cf 01       	movw	r24, r30
    1462:	08 95       	ret

00001464 <_exit>:
    1464:	f8 94       	cli

00001466 <__stop_program>:
    1466:	ff cf       	rjmp	.-2      	; 0x1466 <__stop_program>
