
XMEGA_A3BU_XPLAINED_DEMO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008aae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000026a  00802000  00008aae  00008b42  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000934  0080226a  0080226a  00008dae  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008dac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00008e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c60  00000000  00000000  00008e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000204f4  00000000  00000000  00009ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008573  00000000  00000000  00029fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000162da  00000000  00000000  00032517  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003118  00000000  00000000  000487f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003f1e7  00000000  00000000  0004b90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ec7a  00000000  00000000  0008aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d20  00000000  00000000  00099770  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00011337  00000000  00000000  0009a490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ec c3       	rjmp	.+2008   	; 0x7da <__ctors_end>
       2:	00 00       	nop
       4:	0b c4       	rjmp	.+2070   	; 0x81c <__bad_interrupt>
       6:	00 00       	nop
       8:	09 c4       	rjmp	.+2066   	; 0x81c <__bad_interrupt>
       a:	00 00       	nop
       c:	07 c4       	rjmp	.+2062   	; 0x81c <__bad_interrupt>
       e:	00 00       	nop
      10:	05 c4       	rjmp	.+2058   	; 0x81c <__bad_interrupt>
      12:	00 00       	nop
      14:	03 c4       	rjmp	.+2054   	; 0x81c <__bad_interrupt>
      16:	00 00       	nop
      18:	01 c4       	rjmp	.+2050   	; 0x81c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ff c3       	rjmp	.+2046   	; 0x81c <__bad_interrupt>
      1e:	00 00       	nop
      20:	fd c3       	rjmp	.+2042   	; 0x81c <__bad_interrupt>
      22:	00 00       	nop
      24:	fb c3       	rjmp	.+2038   	; 0x81c <__bad_interrupt>
      26:	00 00       	nop
      28:	f9 c3       	rjmp	.+2034   	; 0x81c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <__vector_11>
      30:	f5 c3       	rjmp	.+2026   	; 0x81c <__bad_interrupt>
      32:	00 00       	nop
      34:	f3 c3       	rjmp	.+2022   	; 0x81c <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 86 26 	jmp	0x4d0c	; 0x4d0c <__vector_14>
      3c:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__vector_15>
      40:	0c 94 e0 26 	jmp	0x4dc0	; 0x4dc0 <__vector_16>
      44:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__vector_17>
      48:	0c 94 3a 27 	jmp	0x4e74	; 0x4e74 <__vector_18>
      4c:	0c 94 67 27 	jmp	0x4ece	; 0x4ece <__vector_19>
      50:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__vector_20>
      54:	0c 94 c1 27 	jmp	0x4f82	; 0x4f82 <__vector_21>
      58:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <__vector_22>
      5c:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__vector_23>
      60:	dd c3       	rjmp	.+1978   	; 0x81c <__bad_interrupt>
      62:	00 00       	nop
      64:	db c3       	rjmp	.+1974   	; 0x81c <__bad_interrupt>
      66:	00 00       	nop
      68:	d9 c3       	rjmp	.+1970   	; 0x81c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d7 c3       	rjmp	.+1966   	; 0x81c <__bad_interrupt>
      6e:	00 00       	nop
      70:	d5 c3       	rjmp	.+1962   	; 0x81c <__bad_interrupt>
      72:	00 00       	nop
      74:	d3 c3       	rjmp	.+1958   	; 0x81c <__bad_interrupt>
      76:	00 00       	nop
      78:	d1 c3       	rjmp	.+1954   	; 0x81c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cf c3       	rjmp	.+1950   	; 0x81c <__bad_interrupt>
      7e:	00 00       	nop
      80:	cd c3       	rjmp	.+1946   	; 0x81c <__bad_interrupt>
      82:	00 00       	nop
      84:	cb c3       	rjmp	.+1942   	; 0x81c <__bad_interrupt>
      86:	00 00       	nop
      88:	c9 c3       	rjmp	.+1938   	; 0x81c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c7 c3       	rjmp	.+1934   	; 0x81c <__bad_interrupt>
      8e:	00 00       	nop
      90:	c5 c3       	rjmp	.+1930   	; 0x81c <__bad_interrupt>
      92:	00 00       	nop
      94:	c3 c3       	rjmp	.+1926   	; 0x81c <__bad_interrupt>
      96:	00 00       	nop
      98:	c1 c3       	rjmp	.+1922   	; 0x81c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 5a 23 	jmp	0x46b4	; 0x46b4 <__vector_39>
      a0:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__vector_40>
      a4:	0c 94 be 23 	jmp	0x477c	; 0x477c <__vector_41>
      a8:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <__vector_42>
      ac:	b7 c3       	rjmp	.+1902   	; 0x81c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b5 c3       	rjmp	.+1898   	; 0x81c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b3 c3       	rjmp	.+1894   	; 0x81c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b1 c3       	rjmp	.+1890   	; 0x81c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 0a 2a 	jmp	0x5414	; 0x5414 <__vector_47>
      c0:	0c 94 37 2a 	jmp	0x546e	; 0x546e <__vector_48>
      c4:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__vector_49>
      c8:	0c 94 91 2a 	jmp	0x5522	; 0x5522 <__vector_50>
      cc:	0c 94 be 2a 	jmp	0x557c	; 0x557c <__vector_51>
      d0:	0c 94 eb 2a 	jmp	0x55d6	; 0x55d6 <__vector_52>
      d4:	0c 94 18 2b 	jmp	0x5630	; 0x5630 <__vector_53>
      d8:	0c 94 45 2b 	jmp	0x568a	; 0x568a <__vector_54>
      dc:	0c 94 72 2b 	jmp	0x56e4	; 0x56e4 <__vector_55>
      e0:	0c 94 9f 2b 	jmp	0x573e	; 0x573e <__vector_56>
      e4:	9b c3       	rjmp	.+1846   	; 0x81c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	99 c3       	rjmp	.+1842   	; 0x81c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	97 c3       	rjmp	.+1838   	; 0x81c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	95 c3       	rjmp	.+1834   	; 0x81c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	93 c3       	rjmp	.+1830   	; 0x81c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	91 c3       	rjmp	.+1826   	; 0x81c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	8f c3       	rjmp	.+1822   	; 0x81c <__bad_interrupt>
      fe:	00 00       	nop
     100:	8d c3       	rjmp	.+1818   	; 0x81c <__bad_interrupt>
     102:	00 00       	nop
     104:	8b c3       	rjmp	.+1814   	; 0x81c <__bad_interrupt>
     106:	00 00       	nop
     108:	89 c3       	rjmp	.+1810   	; 0x81c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	87 c3       	rjmp	.+1806   	; 0x81c <__bad_interrupt>
     10e:	00 00       	nop
     110:	85 c3       	rjmp	.+1802   	; 0x81c <__bad_interrupt>
     112:	00 00       	nop
     114:	83 c3       	rjmp	.+1798   	; 0x81c <__bad_interrupt>
     116:	00 00       	nop
     118:	81 c3       	rjmp	.+1794   	; 0x81c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__vector_71>
     120:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__vector_72>
     124:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <__vector_73>
     128:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__vector_74>
     12c:	77 c3       	rjmp	.+1774   	; 0x81c <__bad_interrupt>
     12e:	00 00       	nop
     130:	75 c3       	rjmp	.+1770   	; 0x81c <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 48 28 	jmp	0x5090	; 0x5090 <__vector_77>
     138:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <__vector_78>
     13c:	0c 94 a2 28 	jmp	0x5144	; 0x5144 <__vector_79>
     140:	0c 94 cf 28 	jmp	0x519e	; 0x519e <__vector_80>
     144:	0c 94 fc 28 	jmp	0x51f8	; 0x51f8 <__vector_81>
     148:	0c 94 29 29 	jmp	0x5252	; 0x5252 <__vector_82>
     14c:	0c 94 56 29 	jmp	0x52ac	; 0x52ac <__vector_83>
     150:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__vector_84>
     154:	0c 94 b0 29 	jmp	0x5360	; 0x5360 <__vector_85>
     158:	0c 94 dd 29 	jmp	0x53ba	; 0x53ba <__vector_86>
     15c:	5f c3       	rjmp	.+1726   	; 0x81c <__bad_interrupt>
     15e:	00 00       	nop
     160:	5d c3       	rjmp	.+1722   	; 0x81c <__bad_interrupt>
     162:	00 00       	nop
     164:	5b c3       	rjmp	.+1718   	; 0x81c <__bad_interrupt>
     166:	00 00       	nop
     168:	59 c3       	rjmp	.+1714   	; 0x81c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	57 c3       	rjmp	.+1710   	; 0x81c <__bad_interrupt>
     16e:	00 00       	nop
     170:	55 c3       	rjmp	.+1706   	; 0x81c <__bad_interrupt>
     172:	00 00       	nop
     174:	53 c3       	rjmp	.+1702   	; 0x81c <__bad_interrupt>
     176:	00 00       	nop
     178:	51 c3       	rjmp	.+1698   	; 0x81c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	4f c3       	rjmp	.+1694   	; 0x81c <__bad_interrupt>
     17e:	00 00       	nop
     180:	4d c3       	rjmp	.+1690   	; 0x81c <__bad_interrupt>
     182:	00 00       	nop
     184:	4b c3       	rjmp	.+1686   	; 0x81c <__bad_interrupt>
     186:	00 00       	nop
     188:	49 c3       	rjmp	.+1682   	; 0x81c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	47 c3       	rjmp	.+1678   	; 0x81c <__bad_interrupt>
     18e:	00 00       	nop
     190:	45 c3       	rjmp	.+1674   	; 0x81c <__bad_interrupt>
     192:	00 00       	nop
     194:	43 c3       	rjmp	.+1670   	; 0x81c <__bad_interrupt>
     196:	00 00       	nop
     198:	41 c3       	rjmp	.+1666   	; 0x81c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	3f c3       	rjmp	.+1662   	; 0x81c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	3d c3       	rjmp	.+1658   	; 0x81c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	3b c3       	rjmp	.+1654   	; 0x81c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	39 c3       	rjmp	.+1650   	; 0x81c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	37 c3       	rjmp	.+1646   	; 0x81c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__vector_108>
     1b4:	0c 94 f9 2b 	jmp	0x57f2	; 0x57f2 <__vector_109>
     1b8:	0c 94 26 2c 	jmp	0x584c	; 0x584c <__vector_110>
     1bc:	0c 94 53 2c 	jmp	0x58a6	; 0x58a6 <__vector_111>
     1c0:	0c 94 80 2c 	jmp	0x5900	; 0x5900 <__vector_112>
     1c4:	0c 94 ad 2c 	jmp	0x595a	; 0x595a <__vector_113>
     1c8:	29 c3       	rjmp	.+1618   	; 0x81c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	27 c3       	rjmp	.+1614   	; 0x81c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	25 c3       	rjmp	.+1610   	; 0x81c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	23 c3       	rjmp	.+1606   	; 0x81c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	21 c3       	rjmp	.+1602   	; 0x81c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	1f c3       	rjmp	.+1598   	; 0x81c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	1d c3       	rjmp	.+1594   	; 0x81c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	1b c3       	rjmp	.+1590   	; 0x81c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	19 c3       	rjmp	.+1586   	; 0x81c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	17 c3       	rjmp	.+1582   	; 0x81c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	15 c3       	rjmp	.+1578   	; 0x81c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 e7 35 	jmp	0x6bce	; 0x6bce <__vector_125>
     1f8:	0c 94 9f 36 	jmp	0x6d3e	; 0x6d3e <__vector_126>
     1fc:	c8 30       	cpi	r28, 0x08	; 8
     1fe:	cb 30       	cpi	r28, 0x0B	; 11
     200:	ce 30       	cpi	r28, 0x0E	; 14
     202:	d1 30       	cpi	r29, 0x01	; 1
     204:	d4 30       	cpi	r29, 0x04	; 4
     206:	d7 30       	cpi	r29, 0x07	; 7
     208:	da 30       	cpi	r29, 0x0A	; 10

0000020a <__trampolines_end>:
     20a:	ff 7e       	andi	r31, 0xEF	; 239
     20c:	3c 18       	sub	r3, r12

0000020e <indicator_data>:
     20e:	ff 7e 3c 18                                         .~<.

00000212 <spin_indicator_data>:
     212:	18 3c 7e ff                                         .<~.

00000216 <sysfont_glyphs>:
     216:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     226:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     236:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     246:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     256:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     266:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     276:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     286:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     296:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     2a6:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     2b6:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     2c6:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     2d6:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     2e6:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     2f6:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     306:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     316:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     326:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     336:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     346:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     356:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     366:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     376:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     386:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     396:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     3a6:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     3b6:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     3c6:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     3d6:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     3e6:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     3f6:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     406:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     416:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     426:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     436:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     446:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     456:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     466:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     476:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     486:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     496:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     4a6:	20 40                                                @

000004a8 <sun_data>:
     4a8:	08 89 42 18 3d bc 18 42 91 10                       ..B.=..B..

000004b2 <moon_data>:
     4b2:	3c 7e ff 81 80                                      <~...

000004b7 <indoor_data>:
     4b7:	10 0a 02 1a 02 1a 02 0a 10                          .........

000004c0 <cloud_data>:
     4c0:	60 50 a0 98 84 82 8c 84 4c 30                       `P......L0

000004ca <cdc_help>:
     4ca:	0d 0a 57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 65     ..Welcome to the
     4da:	20 58 4d 45 47 41 2d 41 33 42 55 20 58 70 6c 61      XMEGA-A3BU Xpla
     4ea:	69 6e 65 64 20 44 65 6d 6f 20 43 44 43 20 69 6e     ined Demo CDC in
     4fa:	74 65 72 66 61 63 65 21 0d 0a 0d 0a 4b 65 79 20     terface!....Key 
     50a:	62 69 6e 64 69 6e 67 73 20 66 6f 72 20 4c 43 44     bindings for LCD
     51a:	20 6d 65 6e 75 20 63 6f 6e 74 72 6f 6c 3a 0d 0a      menu control:..
     52a:	20 20 45 6e 74 65 72 20 20 20 20 20 20 3a 20 45       Enter      : E
     53a:	6e 74 65 72 0d 0a 20 20 42 61 63 6b 73 70 61 63     nter..  Backspac
     54a:	65 20 20 3a 20 42 61 63 6b 0d 0a 20 20 41 72 72     e  : Back..  Arr
     55a:	6f 77 20 55 70 20 20 20 3a 20 55 70 0d 0a 20 20     ow Up   : Up..  
     56a:	41 72 72 6f 77 20 44 6f 77 6e 20 3a 20 44 6f 77     Arrow Down : Dow
     57a:	6e 0d 0a 00                                         n...

0000057e <datetime_invalid_date_string>:
     57e:	44 61 74 65 20 69 6e 76 61 6c 69 64 00              Date invalid.

0000058b <datetime_date_spinner_string_minute>:
     58b:	4d 69 6e 75 74 65 00                                Minute.

00000592 <datetime_date_spinner_string_hour>:
     592:	48 6f 75 72 00                                      Hour.

00000597 <datetime_date_spinner_string_day>:
     597:	44 61 79 00                                         Day.

0000059b <datetime_date_spinner_string_month>:
     59b:	4d 6f 6e 74 68 00                                   Month.

000005a1 <datetime_date_spinner_string_year>:
     5a1:	59 65 61 72 00                                      Year.

000005a6 <datetime_menu_4>:
     5a6:	53 65 74 20 54 69 6d 65 7a 6f 6e 65 00              Set Timezone.

000005b3 <datetime_menu_3>:
     5b3:	53 65 74 20 54 69 6d 65 00                          Set Time.

000005bc <datetime_menu_2>:
     5bc:	53 65 74 20 44 61 74 65 00                          Set Date.

000005c5 <datetime_menu_1>:
     5c5:	53 68 6f 77 20 44 61 74 65 26 54 69 6d 65 00        Show Date&Time.

000005d4 <datetime_menu_title>:
     5d4:	44 61 74 65 26 54 69 6d 65 00                       Date&Time.

000005de <main_menu_5>:
     5de:	54 6f 67 67 6c 65 20 42 61 63 6b 6c 69 67 68 74     Toggle Backlight
	...

000005ef <main_menu_4>:
     5ef:	44 61 74 65 20 26 20 54 69 6d 65 00                 Date & Time.

000005fb <main_menu_3>:
     5fb:	50 72 6f 64 75 63 74 69 6f 6e 20 44 61 74 65 00     Production Date.

0000060b <main_menu_2>:
     60b:	4c 69 67 68 74 73 65 6e 73 6f 72 00                 Lightsensor.

00000617 <main_menu_1>:
     617:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

00000623 <main_menu_title>:
     623:	4d 61 69 6e 20 4d 65 6e 75 00                       Main Menu.

0000062d <header>:
     62d:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

00000639 <tz_min_45>:
     639:	2b 34 35 20 6d 69 6e 00                             +45 min.

00000641 <tz_min_30>:
     641:	2b 33 30 20 6d 69 6e 00                             +30 min.

00000649 <tz_min_15>:
     649:	2b 31 35 20 6d 69 6e 00                             +15 min.

00000651 <tz_min_00>:
     651:	20 30 20 6d 69 6e 00                                 0 min.

00000658 <tz_minutes_title>:
     658:	54 69 6d 65 7a 6f 6e 65 20 6d 69 6e 75 74 65 73     Timezone minutes
     668:	3a 00                                               :.

0000066a <tz_12>:
     66a:	2b 31 32 3a 20 46 69 6a 69 00                       +12: Fiji.

00000674 <tz_11>:
     674:	2b 31 31 3a 20 53 6f 6c 6f 6d 6f 6e 20 49 73 6c     +11: Solomon Isl
     684:	61 6e 64 00                                         and.

00000688 <tz_10>:
     688:	2b 31 30 3a 20 41 45 53 54 00                       +10: AEST.

00000692 <tz_09>:
     692:	20 2b 39 3a 20 54 6f 6b 79 6f 00                     +9: Tokyo.

0000069d <tz_08>:
     69d:	20 2b 38 3a 20 48 6f 6e 67 20 4b 6f 6e 67 00         +8: Hong Kong.

000006ac <tz_07>:
     6ac:	20 2b 37 3a 20 54 68 61 69 6c 61 6e 64 00            +7: Thailand.

000006ba <tz_06>:
     6ba:	20 2b 36 3a 20 42 61 6e 67 6c 61 64 65 73 68 00      +6: Bangladesh.

000006ca <tz_05>:
     6ca:	20 2b 35 3a 20 50 61 6b 69 73 74 61 6e 00            +5: Pakistan.

000006d8 <tz_04>:
     6d8:	20 2b 34 3a 20 4d 6f 73 63 6f 77 00                  +4: Moscow.

000006e4 <tz_03>:
     6e4:	20 2b 33 3a 20 4e 61 69 72 6f 62 69 00               +3: Nairobi.

000006f1 <tz_02>:
     6f1:	20 2b 32 3a 20 49 73 74 61 6e 62 75 6c 00            +2: Istanbul.

000006ff <tz_01>:
     6ff:	20 2b 31 3a 20 4f 73 6c 6f 2c 20 42 65 72 6c 69      +1: Oslo, Berli
     70f:	6e 00                                               n.

00000711 <tz_00>:
     711:	55 54 43 3a 20 55 4b 20 28 47 4d 54 29 00           UTC: UK (GMT).

0000071f <tz_n01>:
     71f:	20 2d 31 3a 20 50 72 61 69 61 00                     -1: Praia.

0000072a <tz_n02>:
     72a:	20 2d 32 3a 20 53 6f 75 74 68 20 47 65 6f 72 67      -2: South Georg
     73a:	69 61 00                                            ia.

0000073d <tz_n03>:
     73d:	20 2d 33 3a 20 47 72 65 65 6e 6c 61 6e 64 00         -3: Greenland.

0000074c <tz_n04>:
     74c:	20 2d 34 3a 20 45 43 54 00                           -4: ECT.

00000755 <tz_n05>:
     755:	20 2d 35 3a 20 45 61 73 74 65 72 6e 00               -5: Eastern.

00000762 <tz_n06>:
     762:	20 2d 36 3a 20 43 65 6e 74 72 61 6c 00               -6: Central.

0000076f <tz_n07>:
     76f:	20 2d 37 3a 20 4d 6f 75 6e 74 61 69 6e 00            -7: Mountain.

0000077d <tz_n08>:
     77d:	20 2d 38 3a 20 50 61 63 69 66 69 63 00               -8: Pacific.

0000078a <tz_n09>:
     78a:	20 2d 39 3a 20 41 6c 61 73 6b 61 00                  -9: Alaska.

00000796 <tz_n10>:
     796:	2d 31 30 3a 20 48 61 77 61 69 69 00                 -10: Hawaii.

000007a2 <tz_n11>:
     7a2:	2d 31 31 3a 20 4b 69 6e 67 6d 61 6e 20 52 65 65     -11: Kingman Ree
     7b2:	66 00                                               f.

000007b4 <tz_n12>:
     7b4:	2d 31 32 3a 20 42 61 6b 65 72 20 49 73 6c 61 6e     -12: Baker Islan
     7c4:	64 00                                               d.

000007c6 <tz_hours_title>:
     7c6:	54 69 6d 65 7a 6f 6e 65 20 68 6f 75 72 73 20 55     Timezone hours U
     7d6:	54 43 00 00                                         TC..

000007da <__ctors_end>:
     7da:	11 24       	eor	r1, r1
     7dc:	1f be       	out	0x3f, r1	; 63
     7de:	cf ef       	ldi	r28, 0xFF	; 255
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df e5       	ldi	r29, 0x5F	; 95
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	00 e0       	ldi	r16, 0x00	; 0
     7e8:	0c bf       	out	0x3c, r16	; 60

000007ea <__do_copy_data>:
     7ea:	12 e2       	ldi	r17, 0x22	; 34
     7ec:	a0 e0       	ldi	r26, 0x00	; 0
     7ee:	b0 e2       	ldi	r27, 0x20	; 32
     7f0:	ee ea       	ldi	r30, 0xAE	; 174
     7f2:	fa e8       	ldi	r31, 0x8A	; 138
     7f4:	00 e0       	ldi	r16, 0x00	; 0
     7f6:	0b bf       	out	0x3b, r16	; 59
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <__do_copy_data+0x14>
     7fa:	07 90       	elpm	r0, Z+
     7fc:	0d 92       	st	X+, r0
     7fe:	aa 36       	cpi	r26, 0x6A	; 106
     800:	b1 07       	cpc	r27, r17
     802:	d9 f7       	brne	.-10     	; 0x7fa <__do_copy_data+0x10>

00000804 <__do_clear_bss>:
     804:	2b e2       	ldi	r18, 0x2B	; 43
     806:	aa e6       	ldi	r26, 0x6A	; 106
     808:	b2 e2       	ldi	r27, 0x22	; 34
     80a:	01 c0       	rjmp	.+2      	; 0x80e <.do_clear_bss_start>

0000080c <.do_clear_bss_loop>:
     80c:	1d 92       	st	X+, r1

0000080e <.do_clear_bss_start>:
     80e:	ae 39       	cpi	r26, 0x9E	; 158
     810:	b2 07       	cpc	r27, r18
     812:	e1 f7       	brne	.-8      	; 0x80c <.do_clear_bss_loop>
     814:	0e 94 c2 3c 	call	0x7984	; 0x7984 <main>
     818:	0c 94 55 45 	jmp	0x8aaa	; 0x8aaa <_exit>

0000081c <__bad_interrupt>:
     81c:	f1 cb       	rjmp	.-2078   	; 0x0 <__vectors>

0000081e <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     81e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    sts	CONCAT( PORT, SNSK1, _DIRCLR ), p_2
     822:	60 93 a2 06 	sts	0x06A2, r22	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    sts	CONCAT( PORT, SNS1, _OUTSET), p_1
     826:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    sts	CONCAT( PORT, SNSK1, _OUTCLR), p_2
     82a:	60 93 a6 06 	sts	0x06A6, r22	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    sts	CONCAT( PORT, SNSK1, _DIRSET), p_2
     82e:	60 93 a1 06 	sts	0x06A1, r22	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    ret
     832:	08 95       	ret

00000834 <_1101010111_>:


GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
     834:	3f 93       	push	r19
    sts	CONCAT( PORT, SNSK1, _DIRCLR), p_2
     836:	60 93 a2 06 	sts	0x06A2, r22	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     83a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     83e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    sts	CONCAT( PORT, SNSK1, _DIRSET ), p_2
     842:	60 93 a1 06 	sts	0x06A1, r22	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    pop  r19
     846:	3f 91       	pop	r19
    lds	r_v, CONCAT(PORT, SNS1, _IN )
     848:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
    and	r_v, p_3
     84c:	84 23       	and	r24, r20
    ret
     84e:	08 95       	ret

00000850 <_1101010110_>:


GLOBAL_FUNCTION _1101010110_
_1101010110_:
    sts	CONCAT( PORT, SNS1, _OUTCLR), p_1
     850:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     854:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    ret
     858:	08 95       	ret

0000085a <burst_1_1_10_0>:
     85a:	a1 e0       	ldi	r26, 0x01	; 1
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 44 42 	jmp	0x8488	; 0x8488 <__prologue_saves__+0xc>
     866:	e8 2f       	mov	r30, r24
     868:	0f b7       	in	r16, 0x3f	; 63
     86a:	00 78       	andi	r16, 0x80	; 128
     86c:	19 82       	std	Y+1, r1	; 0x01
     86e:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <__data_end>
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	19 f0       	breq	.+6      	; 0x87c <burst_1_1_10_0+0x22>
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <__data_end>
     87c:	ce 2e       	mov	r12, r30
     87e:	dd 24       	eor	r13, r13
     880:	f6 01       	movw	r30, r12
     882:	e4 55       	subi	r30, 0x54	; 84
     884:	fd 4d       	sbci	r31, 0xDD	; 221
     886:	b0 80       	ld	r11, Z
     888:	f6 01       	movw	r30, r12
     88a:	e0 55       	subi	r30, 0x50	; 80
     88c:	fd 4d       	sbci	r31, 0xDD	; 221
     88e:	a0 80       	ld	r10, Z
     890:	f8 94       	cli
     892:	bb 20       	and	r11, r11
     894:	09 f4       	brne	.+2      	; 0x898 <burst_1_1_10_0+0x3e>
     896:	aa c0       	rjmp	.+340    	; 0x9ec <burst_1_1_10_0+0x192>
     898:	8b 2d       	mov	r24, r11
     89a:	da df       	rcall	.-76     	; 0x850 <_1101010110_>
     89c:	8b 2d       	mov	r24, r11
     89e:	6a 2d       	mov	r22, r10
     8a0:	be df       	rcall	.-132    	; 0x81e <_1101010101_>
     8a2:	1b 2d       	mov	r17, r11
     8a4:	ee 24       	eor	r14, r14
     8a6:	ff 24       	eor	r15, r15
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	81 2c       	mov	r8, r1
     8ac:	30 e2       	ldi	r19, 0x20	; 32
     8ae:	93 2e       	mov	r9, r19
     8b0:	f5 fe       	sbrs	r15, 5
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <burst_1_1_10_0+0x68>
     8b4:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <SNS_array+0x1>
     8b8:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <SNS_array>
     8bc:	98 2b       	or	r25, r24
     8be:	19 f5       	brne	.+70     	; 0x906 <burst_1_1_10_0+0xac>
     8c0:	35 c0       	rjmp	.+106    	; 0x92c <burst_1_1_10_0+0xd2>
     8c2:	8f b7       	in	r24, 0x3f	; 63
     8c4:	80 2b       	or	r24, r16
     8c6:	8f bf       	out	0x3f, r24	; 63
     8c8:	00 00       	nop
     8ca:	f8 94       	cli
     8cc:	8b 2d       	mov	r24, r11
     8ce:	6a 2d       	mov	r22, r10
     8d0:	41 2f       	mov	r20, r17
     8d2:	b0 df       	rcall	.-160    	; 0x834 <_1101010111_>
     8d4:	68 2f       	mov	r22, r24
     8d6:	08 94       	sec
     8d8:	e1 1c       	adc	r14, r1
     8da:	f1 1c       	adc	r15, r1
     8dc:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	30 f0       	brcs	.+12     	; 0x8f6 <burst_1_1_10_0+0x9c>
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	21 f0       	breq	.+8      	; 0x8f6 <burst_1_1_10_0+0x9c>
     8ee:	83 30       	cpi	r24, 0x03	; 3
     8f0:	11 f0       	breq	.+4      	; 0x8f6 <burst_1_1_10_0+0x9c>
     8f2:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
     8f6:	66 23       	and	r22, r22
     8f8:	d9 f2       	breq	.-74     	; 0x8b0 <burst_1_1_10_0+0x56>
     8fa:	20 91 ad 22 	lds	r18, 0x22AD	; 0x8022ad <SNS_array+0x1>
     8fe:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <SNS_array>
     902:	28 2b       	or	r18, r24
     904:	15 c0       	rjmp	.+42     	; 0x930 <burst_1_1_10_0+0xd6>
     906:	41 2f       	mov	r20, r17
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	40 ff       	sbrs	r20, 0
     90c:	09 c0       	rjmp	.+18     	; 0x920 <burst_1_1_10_0+0xc6>
     90e:	e8 2f       	mov	r30, r24
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	eb 58       	subi	r30, 0x8B	; 139
     918:	fd 4d       	sbci	r31, 0xDD	; 221
     91a:	80 82       	st	Z, r8
     91c:	91 82       	std	Z+1, r9	; 0x01
     91e:	01 c0       	rjmp	.+2      	; 0x922 <burst_1_1_10_0+0xc8>
     920:	90 fd       	sbrc	r25, 0
     922:	8f 5f       	subi	r24, 0xFF	; 255
     924:	96 95       	lsr	r25
     926:	46 95       	lsr	r20
     928:	99 23       	and	r25, r25
     92a:	79 f7       	brne	.-34     	; 0x90a <burst_1_1_10_0+0xb0>
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	8f b7       	in	r24, 0x3f	; 63
     932:	80 2b       	or	r24, r16
     934:	8f bf       	out	0x3f, r24	; 63
     936:	10 92 6b 22 	sts	0x226B, r1	; 0x80226b <m.3354>
     93a:	22 23       	and	r18, r18
     93c:	09 f4       	brne	.+2      	; 0x940 <burst_1_1_10_0+0xe6>
     93e:	3f c0       	rjmp	.+126    	; 0x9be <burst_1_1_10_0+0x164>
     940:	11 23       	and	r17, r17
     942:	09 f4       	brne	.+2      	; 0x946 <burst_1_1_10_0+0xec>
     944:	3c c0       	rjmp	.+120    	; 0x9be <burst_1_1_10_0+0x164>
     946:	30 91 b1 22 	lds	r19, 0x22B1	; 0x8022b1 <SNSK_array+0x1>
     94a:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <SNSK_array>
     94e:	38 2b       	or	r19, r24
     950:	56 2f       	mov	r21, r22
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	23 c0       	rjmp	.+70     	; 0x9a2 <burst_1_1_10_0+0x148>
     95c:	50 fd       	sbrc	r21, 0
     95e:	17 c0       	rjmp	.+46     	; 0x98e <burst_1_1_10_0+0x134>
     960:	19 c0       	rjmp	.+50     	; 0x994 <burst_1_1_10_0+0x13a>
     962:	30 ff       	sbrs	r19, 0
     964:	13 c0       	rjmp	.+38     	; 0x98c <burst_1_1_10_0+0x132>
     966:	98 17       	cp	r25, r24
     968:	81 f4       	brne	.+32     	; 0x98a <burst_1_1_10_0+0x130>
     96a:	e4 2f       	mov	r30, r20
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	eb 58       	subi	r30, 0x8B	; 139
     974:	fd 4d       	sbci	r31, 0xDD	; 221
     976:	e0 82       	st	Z, r14
     978:	f1 82       	std	Z+1, r15	; 0x01
     97a:	85 2f       	mov	r24, r21
     97c:	8e 7f       	andi	r24, 0xFE	; 254
     97e:	19 f4       	brne	.+6      	; 0x986 <burst_1_1_10_0+0x12c>
     980:	89 2f       	mov	r24, r25
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	08 c0       	rjmp	.+16     	; 0x996 <burst_1_1_10_0+0x13c>
     986:	89 2f       	mov	r24, r25
     988:	06 c0       	rjmp	.+12     	; 0x996 <burst_1_1_10_0+0x13c>
     98a:	8f 5f       	subi	r24, 0xFF	; 255
     98c:	36 95       	lsr	r19
     98e:	33 23       	and	r19, r19
     990:	41 f7       	brne	.-48     	; 0x962 <burst_1_1_10_0+0x108>
     992:	01 c0       	rjmp	.+2      	; 0x996 <burst_1_1_10_0+0x13c>
     994:	20 fd       	sbrc	r18, 0
     996:	9f 5f       	subi	r25, 0xFF	; 255
     998:	20 fd       	sbrc	r18, 0
     99a:	4f 5f       	subi	r20, 0xFF	; 255
     99c:	56 95       	lsr	r21
     99e:	26 95       	lsr	r18
     9a0:	11 f0       	breq	.+4      	; 0x9a6 <burst_1_1_10_0+0x14c>
     9a2:	55 23       	and	r21, r21
     9a4:	d9 f6       	brne	.-74     	; 0x95c <burst_1_1_10_0+0x102>
     9a6:	40 93 6b 22 	sts	0x226B, r20	; 0x80226b <m.3354>
     9aa:	60 95       	com	r22
     9ac:	16 23       	and	r17, r22
     9ae:	71 30       	cpi	r23, 0x01	; 1
     9b0:	21 f4       	brne	.+8      	; 0x9ba <burst_1_1_10_0+0x160>
     9b2:	11 23       	and	r17, r17
     9b4:	11 f4       	brne	.+4      	; 0x9ba <burst_1_1_10_0+0x160>
     9b6:	ee 24       	eor	r14, r14
     9b8:	ff 24       	eor	r15, r15
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	13 c0       	rjmp	.+38     	; 0x9e4 <burst_1_1_10_0+0x18a>
     9be:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <SNS_array+0x1>
     9c2:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <SNS_array>
     9c6:	89 2b       	or	r24, r25
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	06 c0       	rjmp	.+12     	; 0x9da <burst_1_1_10_0+0x180>
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	80 fd       	sbrc	r24, 0
     9d2:	9f 5f       	subi	r25, 0xFF	; 255
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	86 95       	lsr	r24
     9d8:	89 83       	std	Y+1, r24	; 0x01
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	88 23       	and	r24, r24
     9de:	b9 f7       	brne	.-18     	; 0x9ce <burst_1_1_10_0+0x174>
     9e0:	90 93 6b 22 	sts	0x226B, r25	; 0x80226b <m.3354>
     9e4:	f8 94       	cli
     9e6:	11 23       	and	r17, r17
     9e8:	09 f0       	breq	.+2      	; 0x9ec <burst_1_1_10_0+0x192>
     9ea:	62 cf       	rjmp	.-316    	; 0x8b0 <burst_1_1_10_0+0x56>
     9ec:	8c ea       	ldi	r24, 0xAC	; 172
     9ee:	92 e2       	ldi	r25, 0x22	; 34
     9f0:	c8 0e       	add	r12, r24
     9f2:	d9 1e       	adc	r13, r25
     9f4:	f6 01       	movw	r30, r12
     9f6:	80 81       	ld	r24, Z
     9f8:	2b df       	rcall	.-426    	; 0x850 <_1101010110_>
     9fa:	8f b7       	in	r24, 0x3f	; 63
     9fc:	08 2b       	or	r16, r24
     9fe:	0f bf       	out	0x3f, r16	; 63
     a00:	21 96       	adiw	r28, 0x01	; 1
     a02:	ec e0       	ldi	r30, 0x0C	; 12
     a04:	0c 94 5d 42 	jmp	0x84ba	; 0x84ba <__epilogue_restores__+0xc>

00000a08 <qt_get_library_sig>:
     a08:	fc 01       	movw	r30, r24
     a0a:	80 e2       	ldi	r24, 0x20	; 32
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	80 83       	st	Z, r24
     a10:	91 83       	std	Z+1, r25	; 0x01
     a12:	12 82       	std	Z+2, r1	; 0x02
     a14:	13 82       	std	Z+3, r1	; 0x03
     a16:	80 e3       	ldi	r24, 0x30	; 48
     a18:	94 e0       	ldi	r25, 0x04	; 4
     a1a:	84 83       	std	Z+4, r24	; 0x04
     a1c:	95 83       	std	Z+5, r25	; 0x05
     a1e:	08 95       	ret

00000a20 <qt_enable_key>:
     a20:	90 91 a6 22 	lds	r25, 0x22A6	; 0x8022a6 <num_sensors>
     a24:	a9 2f       	mov	r26, r25
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	fd 01       	movw	r30, r26
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	ea 0f       	add	r30, r26
     a30:	fb 1f       	adc	r31, r27
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	e2 57       	subi	r30, 0x72	; 114
     a38:	fd 4d       	sbci	r31, 0xDD	; 221
     a3a:	43 83       	std	Z+3, r20	; 0x03
     a3c:	67 70       	andi	r22, 0x07	; 7
     a3e:	85 83       	std	Z+5, r24	; 0x05
     a40:	23 70       	andi	r18, 0x03	; 3
     a42:	66 0f       	add	r22, r22
     a44:	66 0f       	add	r22, r22
     a46:	66 0f       	add	r22, r22
     a48:	26 2b       	or	r18, r22
     a4a:	24 83       	std	Z+4, r18	; 0x04
     a4c:	9f 5f       	subi	r25, 0xFF	; 255
     a4e:	90 93 a6 22 	sts	0x22A6, r25	; 0x8022a6 <num_sensors>
     a52:	08 95       	ret

00000a54 <qt_get_sensor_delta>:
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	28 2f       	mov	r18, r24
     a5c:	c8 2f       	mov	r28, r24
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
     a60:	fe 01       	movw	r30, r28
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	ec 0f       	add	r30, r28
     a68:	fd 1f       	adc	r31, r29
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	e2 57       	subi	r30, 0x72	; 114
     a70:	fd 4d       	sbci	r31, 0xDD	; 221
     a72:	35 81       	ldd	r19, Z+5	; 0x05
     a74:	83 81       	ldd	r24, Z+3	; 0x03
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	00 90 6e 22 	lds	r0, 0x226E	; 0x80226e <qt_config_data>
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <qt_get_sensor_delta+0x2e>
     a7e:	95 95       	asr	r25
     a80:	87 95       	ror	r24
     a82:	0a 94       	dec	r0
     a84:	e2 f7       	brpl	.-8      	; 0xa7e <qt_get_sensor_delta+0x2a>
     a86:	18 2f       	mov	r17, r24
     a88:	84 30       	cpi	r24, 0x04	; 4
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <qt_get_sensor_delta+0x3a>
     a8c:	14 e0       	ldi	r17, 0x04	; 4
     a8e:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <num_sensors>
     a92:	28 17       	cp	r18, r24
     a94:	18 f0       	brcs	.+6      	; 0xa9c <qt_get_sensor_delta+0x48>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	2d c0       	rjmp	.+90     	; 0xaf6 <qt_get_sensor_delta+0xa2>
     a9c:	83 2f       	mov	r24, r19
     a9e:	1d d1       	rcall	.+570    	; 0xcda <get_channel_delta>
     aa0:	9c 01       	movw	r18, r24
     aa2:	41 2f       	mov	r20, r17
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	16 95       	lsr	r17
     aa8:	16 95       	lsr	r17
     aaa:	81 2f       	mov	r24, r17
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	84 1b       	sub	r24, r20
     ab0:	95 0b       	sbc	r25, r21
     ab2:	82 17       	cp	r24, r18
     ab4:	93 07       	cpc	r25, r19
     ab6:	64 f4       	brge	.+24     	; 0xad0 <qt_get_sensor_delta+0x7c>
     ab8:	fe 01       	movw	r30, r28
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	ec 0f       	add	r30, r28
     ac0:	fd 1f       	adc	r31, r29
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	e2 57       	subi	r30, 0x72	; 114
     ac8:	fd 4d       	sbci	r31, 0xDD	; 221
     aca:	84 81       	ldd	r24, Z+4	; 0x04
     acc:	8b 7f       	andi	r24, 0xFB	; 251
     ace:	84 83       	std	Z+4, r24	; 0x04
     ad0:	88 27       	eor	r24, r24
     ad2:	99 27       	eor	r25, r25
     ad4:	84 1b       	sub	r24, r20
     ad6:	95 0b       	sbc	r25, r21
     ad8:	82 17       	cp	r24, r18
     ada:	93 07       	cpc	r25, r19
     adc:	64 f0       	brlt	.+24     	; 0xaf6 <qt_get_sensor_delta+0xa2>
     ade:	fe 01       	movw	r30, r28
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ec 0f       	add	r30, r28
     ae6:	fd 1f       	adc	r31, r29
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	e2 57       	subi	r30, 0x72	; 114
     aee:	fd 4d       	sbci	r31, 0xDD	; 221
     af0:	84 81       	ldd	r24, Z+4	; 0x04
     af2:	84 60       	ori	r24, 0x04	; 4
     af4:	84 83       	std	Z+4, r24	; 0x04
     af6:	c9 01       	movw	r24, r18
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	08 95       	ret

00000b00 <qt_measure_sensors>:
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	10 92 86 22 	sts	0x2286, r1	; 0x802286 <lib_status_flags>
     b0e:	10 92 87 22 	sts	0x2287, r1	; 0x802287 <lib_status_flags+0x1>
     b12:	20 91 8a 22 	lds	r18, 0x228A	; 0x80228a <time_of_last_call_ms>
     b16:	30 91 8b 22 	lds	r19, 0x228B	; 0x80228b <time_of_last_call_ms+0x1>
     b1a:	80 93 8a 22 	sts	0x228A, r24	; 0x80228a <time_of_last_call_ms>
     b1e:	90 93 8b 22 	sts	0x228B, r25	; 0x80228b <time_of_last_call_ms+0x1>
     b22:	40 91 8c 22 	lds	r20, 0x228C	; 0x80228c <timer_prescale>
     b26:	50 91 8d 22 	lds	r21, 0x228D	; 0x80228d <timer_prescale+0x1>
     b2a:	42 1b       	sub	r20, r18
     b2c:	53 0b       	sbc	r21, r19
     b2e:	48 0f       	add	r20, r24
     b30:	59 1f       	adc	r21, r25
     b32:	ff 24       	eor	r15, r15
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <qt_measure_sensors+0x3c>
     b36:	f3 94       	inc	r15
     b38:	48 5c       	subi	r20, 0xC8	; 200
     b3a:	50 40       	sbci	r21, 0x00	; 0
     b3c:	48 3c       	cpi	r20, 0xC8	; 200
     b3e:	51 05       	cpc	r21, r1
     b40:	d0 f7       	brcc	.-12     	; 0xb36 <qt_measure_sensors+0x36>
     b42:	40 93 8c 22 	sts	0x228C, r20	; 0x80228c <timer_prescale>
     b46:	50 93 8d 22 	sts	0x228D, r21	; 0x80228d <timer_prescale+0x1>
     b4a:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <dht_counter>
     b4e:	88 23       	and	r24, r24
     b50:	41 f0       	breq	.+16     	; 0xb62 <qt_measure_sensors+0x62>
     b52:	8f 15       	cp	r24, r15
     b54:	18 f4       	brcc	.+6      	; 0xb5c <qt_measure_sensors+0x5c>
     b56:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <dht_counter>
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <qt_measure_sensors+0x62>
     b5c:	8f 19       	sub	r24, r15
     b5e:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <dht_counter>
     b62:	aa d3       	rcall	.+1876   	; 0x12b8 <burst>
     b64:	e0 91 88 22 	lds	r30, 0x2288	; 0x802288 <qt_filter_callback>
     b68:	f0 91 89 22 	lds	r31, 0x2289	; 0x802289 <qt_filter_callback+0x1>
     b6c:	30 97       	sbiw	r30, 0x00	; 0
     b6e:	09 f0       	breq	.+2      	; 0xb72 <qt_measure_sensors+0x72>
     b70:	19 95       	eicall
     b72:	10 e0       	ldi	r17, 0x00	; 0
     b74:	00 e0       	ldi	r16, 0x00	; 0
     b76:	05 c0       	rjmp	.+10     	; 0xb82 <qt_measure_sensors+0x82>
     b78:	81 2f       	mov	r24, r17
     b7a:	6f 2d       	mov	r22, r15
     b7c:	c3 d0       	rcall	.+390    	; 0xd04 <process_sensor>
     b7e:	08 2b       	or	r16, r24
     b80:	1f 5f       	subi	r17, 0xFF	; 255
     b82:	60 91 a6 22 	lds	r22, 0x22A6	; 0x8022a6 <num_sensors>
     b86:	16 17       	cp	r17, r22
     b88:	b8 f3       	brcs	.-18     	; 0xb78 <qt_measure_sensors+0x78>
     b8a:	00 23       	and	r16, r16
     b8c:	49 f0       	breq	.+18     	; 0xba0 <qt_measure_sensors+0xa0>
     b8e:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
     b92:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
     b96:	91 60       	ori	r25, 0x01	; 1
     b98:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
     b9c:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
     ba0:	10 92 85 22 	sts	0x2285, r1	; 0x802285 <qt_measure_data+0x10>
     ba4:	ae e8       	ldi	r26, 0x8E	; 142
     ba6:	b2 e2       	ldi	r27, 0x22	; 34
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	17 c0       	rjmp	.+46     	; 0xbde <qt_measure_sensors+0xde>
     bb0:	8c 91       	ld	r24, X
     bb2:	88 71       	andi	r24, 0x18	; 24
     bb4:	91 f0       	breq	.+36     	; 0xbda <qt_measure_sensors+0xda>
     bb6:	e3 2f       	mov	r30, r19
     bb8:	e6 95       	lsr	r30
     bba:	e6 95       	lsr	r30
     bbc:	e6 95       	lsr	r30
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	eb 58       	subi	r30, 0x8B	; 139
     bc2:	fd 4d       	sbci	r31, 0xDD	; 221
     bc4:	83 2f       	mov	r24, r19
     bc6:	87 70       	andi	r24, 0x07	; 7
     bc8:	ea 01       	movw	r28, r20
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <qt_measure_sensors+0xd0>
     bcc:	cc 0f       	add	r28, r28
     bce:	dd 1f       	adc	r29, r29
     bd0:	8a 95       	dec	r24
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <qt_measure_sensors+0xcc>
     bd4:	20 89       	ldd	r18, Z+16	; 0x10
     bd6:	2c 2b       	or	r18, r28
     bd8:	20 8b       	std	Z+16, r18	; 0x10
     bda:	3f 5f       	subi	r19, 0xFF	; 255
     bdc:	16 96       	adiw	r26, 0x06	; 6
     bde:	36 17       	cp	r19, r22
     be0:	38 f3       	brcs	.-50     	; 0xbb0 <qt_measure_sensors+0xb0>
     be2:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
     be6:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	e5 e0       	ldi	r30, 0x05	; 5
     bf0:	0c 94 64 42 	jmp	0x84c8	; 0x84c8 <__epilogue_restores__+0x1a>

00000bf4 <qt_reset_sensing>:
     bf4:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <num_sensors>
     bf8:	84 e0       	ldi	r24, 0x04	; 4
     bfa:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <qt_config_data+0x1>
     bfe:	94 e1       	ldi	r25, 0x14	; 20
     c00:	90 93 72 22 	sts	0x2272, r25	; 0x802272 <qt_config_data+0x4>
     c04:	85 e0       	ldi	r24, 0x05	; 5
     c06:	80 93 73 22 	sts	0x2273, r24	; 0x802273 <qt_config_data+0x5>
     c0a:	10 92 71 22 	sts	0x2271, r1	; 0x802271 <qt_config_data+0x3>
     c0e:	90 93 70 22 	sts	0x2270, r25	; 0x802270 <qt_config_data+0x2>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 6e 22 	sts	0x226E, r24	; 0x80226e <qt_config_data>
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	80 93 74 22 	sts	0x2274, r24	; 0x802274 <qt_config_data+0x6>
     c1e:	3b d3       	rcall	.+1654   	; 0x1296 <burst_reset>
     c20:	10 92 88 22 	sts	0x2288, r1	; 0x802288 <qt_filter_callback>
     c24:	10 92 89 22 	sts	0x2289, r1	; 0x802289 <qt_filter_callback+0x1>
     c28:	08 95       	ret

00000c2a <qt_calibrate_sensing>:
     c2a:	1f 93       	push	r17
     c2c:	10 e0       	ldi	r17, 0x00	; 0
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <qt_calibrate_sensing+0xc>
     c30:	81 2f       	mov	r24, r17
     c32:	27 d0       	rcall	.+78     	; 0xc82 <start_cal_sensor>
     c34:	1f 5f       	subi	r17, 0xFF	; 255
     c36:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <num_sensors>
     c3a:	18 17       	cp	r17, r24
     c3c:	c8 f3       	brcs	.-14     	; 0xc30 <qt_calibrate_sensing+0x6>
     c3e:	1f 91       	pop	r17
     c40:	08 95       	ret

00000c42 <qt_init_sensing_with_burst>:
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	ec 01       	movw	r28, r24
     c4e:	7b 01       	movw	r14, r22
     c50:	10 e0       	ldi	r17, 0x00	; 0
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <qt_init_sensing_with_burst+0x18>
     c54:	81 2f       	mov	r24, r17
     c56:	15 d0       	rcall	.+42     	; 0xc82 <start_cal_sensor>
     c58:	1f 5f       	subi	r17, 0xFF	; 255
     c5a:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <num_sensors>
     c5e:	18 17       	cp	r17, r24
     c60:	c8 f3       	brcs	.-14     	; 0xc54 <qt_init_sensing_with_burst+0x12>
     c62:	10 92 8a 22 	sts	0x228A, r1	; 0x80228a <time_of_last_call_ms>
     c66:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <time_of_last_call_ms+0x1>
     c6a:	c0 93 6c 22 	sts	0x226C, r28	; 0x80226c <burst_proc>
     c6e:	d0 93 6d 22 	sts	0x226D, r29	; 0x80226d <burst_proc+0x1>
     c72:	c7 01       	movw	r24, r14
     c74:	0b d3       	rcall	.+1558   	; 0x128c <burst_init>
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <start_cal_sensor>:
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	ee e8       	ldi	r30, 0x8E	; 142
     c86:	f2 e2       	ldi	r31, 0x22	; 34
     c88:	9c 01       	movw	r18, r24
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	28 0f       	add	r18, r24
     c90:	39 1f       	adc	r19, r25
     c92:	d9 01       	movw	r26, r18
     c94:	aa 0f       	add	r26, r26
     c96:	bb 1f       	adc	r27, r27
     c98:	ae 0f       	add	r26, r30
     c9a:	bf 1f       	adc	r27, r31
     c9c:	15 96       	adiw	r26, 0x05	; 5
     c9e:	4c 91       	ld	r20, X
     ca0:	15 97       	sbiw	r26, 0x05	; 5
     ca2:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
     ca6:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
     caa:	82 60       	ori	r24, 0x02	; 2
     cac:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
     cb0:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	10 82       	st	Z, r1
     cc2:	e8 ea       	ldi	r30, 0xA8	; 168
     cc4:	f2 e2       	ldi	r31, 0x22	; 34
     cc6:	e4 0f       	add	r30, r20
     cc8:	f1 1d       	adc	r31, r1
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	80 83       	st	Z, r24
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	8c 93       	st	X, r24
     cd2:	8f e0       	ldi	r24, 0x0F	; 15
     cd4:	11 96       	adiw	r26, 0x01	; 1
     cd6:	8c 93       	st	X, r24
     cd8:	08 95       	ret

00000cda <get_channel_delta>:
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	fc 01       	movw	r30, r24
     cde:	34 96       	adiw	r30, 0x04	; 4
     ce0:	a5 e7       	ldi	r26, 0x75	; 117
     ce2:	b2 e2       	ldi	r27, 0x22	; 34
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ea 0f       	add	r30, r26
     cea:	fb 1f       	adc	r31, r27
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	a8 0f       	add	r26, r24
     cf2:	b9 1f       	adc	r27, r25
     cf4:	20 81       	ld	r18, Z
     cf6:	31 81       	ldd	r19, Z+1	; 0x01
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	28 1b       	sub	r18, r24
     cfe:	39 0b       	sbc	r19, r25
     d00:	c9 01       	movw	r24, r18
     d02:	08 95       	ret

00000d04 <process_sensor>:
     d04:	a0 e0       	ldi	r26, 0x00	; 0
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e8 e8       	ldi	r30, 0x88	; 136
     d0a:	f6 e0       	ldi	r31, 0x06	; 6
     d0c:	0c 94 42 42 	jmp	0x8484	; 0x8484 <__prologue_saves__+0x8>
     d10:	78 2e       	mov	r7, r24
     d12:	f6 2e       	mov	r15, r22
     d14:	9f de       	rcall	.-706    	; 0xa54 <qt_get_sensor_delta>
     d16:	5c 01       	movw	r10, r24
     d18:	07 2d       	mov	r16, r7
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	f8 01       	movw	r30, r16
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	e0 0f       	add	r30, r16
     d24:	f1 1f       	adc	r31, r17
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	e2 57       	subi	r30, 0x72	; 114
     d2c:	fd 4d       	sbci	r31, 0xDD	; 221
     d2e:	54 81       	ldd	r21, Z+4	; 0x04
     d30:	43 81       	ldd	r20, Z+3	; 0x03
     d32:	24 2f       	mov	r18, r20
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	85 2f       	mov	r24, r21
     d38:	83 70       	andi	r24, 0x03	; 3
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <process_sensor+0x40>
     d40:	35 95       	asr	r19
     d42:	27 95       	ror	r18
     d44:	8a 95       	dec	r24
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <process_sensor+0x3c>
     d48:	82 2f       	mov	r24, r18
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	08 f4       	brcc	.+2      	; 0xd50 <process_sensor+0x4c>
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	24 2f       	mov	r18, r20
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	68 1b       	sub	r22, r24
     d58:	71 09       	sbc	r23, r1
     d5a:	f8 01       	movw	r30, r16
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	e0 0f       	add	r30, r16
     d62:	f1 1f       	adc	r31, r17
     d64:	ef 01       	movw	r28, r30
     d66:	cc 0f       	add	r28, r28
     d68:	dd 1f       	adc	r29, r29
     d6a:	c2 57       	subi	r28, 0x72	; 114
     d6c:	dd 4d       	sbci	r29, 0xDD	; 221
     d6e:	88 81       	ld	r24, Y
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	09 f4       	brne	.+2      	; 0xd76 <process_sensor+0x72>
     d74:	f7 c0       	rjmp	.+494    	; 0xf64 <process_sensor+0x260>
     d76:	85 30       	cpi	r24, 0x05	; 5
     d78:	30 f4       	brcc	.+12     	; 0xd86 <process_sensor+0x82>
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	71 f0       	breq	.+28     	; 0xd9a <process_sensor+0x96>
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	09 f0       	breq	.+2      	; 0xd84 <process_sensor+0x80>
     d82:	7d c2       	rjmp	.+1274   	; 0x127e <process_sensor+0x57a>
     d84:	6e c0       	rjmp	.+220    	; 0xe62 <process_sensor+0x15e>
     d86:	80 31       	cpi	r24, 0x10	; 16
     d88:	09 f4       	brne	.+2      	; 0xd8c <process_sensor+0x88>
     d8a:	a1 c1       	rjmp	.+834    	; 0x10ce <process_sensor+0x3ca>
     d8c:	80 32       	cpi	r24, 0x20	; 32
     d8e:	09 f4       	brne	.+2      	; 0xd92 <process_sensor+0x8e>
     d90:	42 c2       	rjmp	.+1156   	; 0x1216 <process_sensor+0x512>
     d92:	88 30       	cpi	r24, 0x08	; 8
     d94:	09 f0       	breq	.+2      	; 0xd98 <process_sensor+0x94>
     d96:	73 c2       	rjmp	.+1254   	; 0x127e <process_sensor+0x57a>
     d98:	ee c1       	rjmp	.+988    	; 0x1176 <process_sensor+0x472>
     d9a:	40 91 86 22 	lds	r20, 0x2286	; 0x802286 <lib_status_flags>
     d9e:	50 91 87 22 	lds	r21, 0x2287	; 0x802287 <lib_status_flags+0x1>
     da2:	ca 01       	movw	r24, r20
     da4:	92 60       	ori	r25, 0x02	; 2
     da6:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
     daa:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	69 81       	ldd	r22, Y+1	; 0x01
     db2:	a8 2f       	mov	r26, r24
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	6a 30       	cpi	r22, 0x0A	; 10
     db8:	60 f0       	brcs	.+24     	; 0xdd2 <process_sensor+0xce>
     dba:	aa 0f       	add	r26, r26
     dbc:	bb 1f       	adc	r27, r27
     dbe:	fd 01       	movw	r30, r26
     dc0:	eb 58       	subi	r30, 0x8B	; 139
     dc2:	fd 4d       	sbci	r31, 0xDD	; 221
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	a3 58       	subi	r26, 0x83	; 131
     dca:	bd 4d       	sbci	r27, 0xDD	; 221
     dcc:	8d 93       	st	X+, r24
     dce:	9c 93       	st	X, r25
     dd0:	18 c0       	rjmp	.+48     	; 0xe02 <process_sensor+0xfe>
     dd2:	aa 0f       	add	r26, r26
     dd4:	bb 1f       	adc	r27, r27
     dd6:	fd 01       	movw	r30, r26
     dd8:	e3 58       	subi	r30, 0x83	; 131
     dda:	fd 4d       	sbci	r31, 0xDD	; 221
     ddc:	20 81       	ld	r18, Z
     dde:	31 81       	ldd	r19, Z+1	; 0x01
     de0:	ab 58       	subi	r26, 0x8B	; 139
     de2:	bd 4d       	sbci	r27, 0xDD	; 221
     de4:	8d 91       	ld	r24, X+
     de6:	9c 91       	ld	r25, X
     de8:	82 17       	cp	r24, r18
     dea:	93 07       	cpc	r25, r19
     dec:	18 f4       	brcc	.+6      	; 0xdf4 <process_sensor+0xf0>
     dee:	21 50       	subi	r18, 0x01	; 1
     df0:	30 40       	sbci	r19, 0x00	; 0
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <process_sensor+0xfa>
     df4:	28 17       	cp	r18, r24
     df6:	39 07       	cpc	r19, r25
     df8:	50 f4       	brcc	.+20     	; 0xe0e <process_sensor+0x10a>
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	20 83       	st	Z, r18
     e00:	31 83       	std	Z+1, r19	; 0x01
     e02:	48 60       	ori	r20, 0x08	; 8
     e04:	52 60       	ori	r21, 0x02	; 2
     e06:	40 93 86 22 	sts	0x2286, r20	; 0x802286 <lib_status_flags>
     e0a:	50 93 87 22 	sts	0x2287, r21	; 0x802287 <lib_status_flags+0x1>
     e0e:	86 2f       	mov	r24, r22
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	f8 01       	movw	r30, r16
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	e0 0f       	add	r30, r16
     e1a:	f1 1f       	adc	r31, r17
     e1c:	ef 01       	movw	r28, r30
     e1e:	cc 0f       	add	r28, r28
     e20:	dd 1f       	adc	r29, r29
     e22:	c2 57       	subi	r28, 0x72	; 114
     e24:	dd 4d       	sbci	r29, 0xDD	; 221
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	88 23       	and	r24, r24
     e2a:	b1 f4       	brne	.+44     	; 0xe58 <process_sensor+0x154>
     e2c:	ad 81       	ldd	r26, Y+5	; 0x05
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	88 83       	st	Y, r24
     e32:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
     e36:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
     e40:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	e0 57       	subi	r30, 0x70	; 112
     e4a:	fd 4d       	sbci	r31, 0xDD	; 221
     e4c:	10 82       	st	Z, r1
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	a8 55       	subi	r26, 0x58	; 88
     e52:	bd 4d       	sbci	r27, 0xDD	; 221
     e54:	80 e8       	ldi	r24, 0x80	; 128
     e56:	8c 93       	st	X, r24
     e58:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <qt_config_data+0x2>
     e5c:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <dht_counter>
     e60:	0c c2       	rjmp	.+1048   	; 0x127a <process_sensor+0x576>
     e62:	52 ff       	sbrs	r21, 2
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <process_sensor+0x16a>
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	88 83       	st	Y, r24
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	f7 c1       	rjmp	.+1006   	; 0x125c <process_sensor+0x558>
     e6e:	c5 01       	movw	r24, r10
     e70:	b7 fe       	sbrs	r11, 7
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <process_sensor+0x174>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	82 17       	cp	r24, r18
     e7a:	93 07       	cpc	r25, r19
     e7c:	80 f0       	brcs	.+32     	; 0xe9e <process_sensor+0x19a>
     e7e:	f8 01       	movw	r30, r16
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	e0 0f       	add	r30, r16
     e86:	f1 1f       	adc	r31, r17
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	df 01       	movw	r26, r30
     e8e:	a2 57       	subi	r26, 0x72	; 114
     e90:	bd 4d       	sbci	r27, 0xDD	; 221
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	8c 93       	st	X, r24
     e96:	e0 57       	subi	r30, 0x70	; 112
     e98:	fd 4d       	sbci	r31, 0xDD	; 221
     e9a:	10 82       	st	Z, r1
     e9c:	e5 c1       	rjmp	.+970    	; 0x1268 <process_sensor+0x564>
     e9e:	ff 20       	and	r15, r15
     ea0:	09 f4       	brne	.+2      	; 0xea4 <process_sensor+0x1a0>
     ea2:	ed c1       	rjmp	.+986    	; 0x127e <process_sensor+0x57a>
     ea4:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <dht_counter>
     ea8:	88 23       	and	r24, r24
     eaa:	09 f0       	breq	.+2      	; 0xeae <process_sensor+0x1aa>
     eac:	e8 c1       	rjmp	.+976    	; 0x127e <process_sensor+0x57a>
     eae:	f8 01       	movw	r30, r16
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	e0 0f       	add	r30, r16
     eb6:	f1 1f       	adc	r31, r17
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	e2 57       	subi	r30, 0x72	; 114
     ebe:	fd 4d       	sbci	r31, 0xDD	; 221
     ec0:	85 81       	ldd	r24, Z+5	; 0x05
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	ec 01       	movw	r28, r24
     ec6:	cc 0f       	add	r28, r28
     ec8:	dd 1f       	adc	r29, r29
     eca:	c3 58       	subi	r28, 0x83	; 131
     ecc:	dd 4d       	sbci	r29, 0xDD	; 221
     ece:	28 81       	ld	r18, Y
     ed0:	39 81       	ldd	r19, Y+1	; 0x01
     ed2:	fc 01       	movw	r30, r24
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	eb 58       	subi	r30, 0x8B	; 139
     eda:	fd 4d       	sbci	r31, 0xDD	; 221
     edc:	01 90       	ld	r0, Z+
     ede:	f0 81       	ld	r31, Z
     ee0:	e0 2d       	mov	r30, r0
     ee2:	2e 17       	cp	r18, r30
     ee4:	3f 07       	cpc	r19, r31
     ee6:	88 f4       	brcc	.+34     	; 0xf0a <process_sensor+0x206>
     ee8:	fc 01       	movw	r30, r24
     eea:	e8 55       	subi	r30, 0x58	; 88
     eec:	fd 4d       	sbci	r31, 0xDD	; 221
     eee:	90 81       	ld	r25, Z
     ef0:	9f 0d       	add	r25, r15
     ef2:	90 83       	st	Z, r25
     ef4:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <qt_config_data+0x5>
     ef8:	80 58       	subi	r24, 0x80	; 128
     efa:	98 17       	cp	r25, r24
     efc:	08 f4       	brcc	.+2      	; 0xf00 <process_sensor+0x1fc>
     efe:	bf c1       	rjmp	.+894    	; 0x127e <process_sensor+0x57a>
     f00:	80 e8       	ldi	r24, 0x80	; 128
     f02:	80 83       	st	Z, r24
     f04:	2f 5f       	subi	r18, 0xFF	; 255
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <process_sensor+0x22e>
     f0a:	dc 01       	movw	r26, r24
     f0c:	a8 55       	subi	r26, 0x58	; 88
     f0e:	bd 4d       	sbci	r27, 0xDD	; 221
     f10:	e2 17       	cp	r30, r18
     f12:	f3 07       	cpc	r31, r19
     f14:	d0 f4       	brcc	.+52     	; 0xf4a <process_sensor+0x246>
     f16:	8c 91       	ld	r24, X
     f18:	8f 19       	sub	r24, r15
     f1a:	8c 93       	st	X, r24
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	90 91 72 22 	lds	r25, 0x2272	; 0x802272 <qt_config_data+0x4>
     f22:	54 2f       	mov	r21, r20
     f24:	59 1b       	sub	r21, r25
     f26:	58 17       	cp	r21, r24
     f28:	08 f4       	brcc	.+2      	; 0xf2c <process_sensor+0x228>
     f2a:	a9 c1       	rjmp	.+850    	; 0x127e <process_sensor+0x57a>
     f2c:	4c 93       	st	X, r20
     f2e:	21 50       	subi	r18, 0x01	; 1
     f30:	30 40       	sbci	r19, 0x00	; 0
     f32:	28 83       	st	Y, r18
     f34:	39 83       	std	Y+1, r19	; 0x01
     f36:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
     f3a:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
     f3e:	88 60       	ori	r24, 0x08	; 8
     f40:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
     f44:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
     f48:	9a c1       	rjmp	.+820    	; 0x127e <process_sensor+0x57a>
     f4a:	2c 91       	ld	r18, X
     f4c:	21 38       	cpi	r18, 0x81	; 129
     f4e:	10 f0       	brcs	.+4      	; 0xf54 <process_sensor+0x250>
     f50:	21 50       	subi	r18, 0x01	; 1
     f52:	2c 93       	st	X, r18
     f54:	fc 01       	movw	r30, r24
     f56:	e8 55       	subi	r30, 0x58	; 88
     f58:	fd 4d       	sbci	r31, 0xDD	; 221
     f5a:	80 81       	ld	r24, Z
     f5c:	87 fd       	sbrc	r24, 7
     f5e:	8f c1       	rjmp	.+798    	; 0x127e <process_sensor+0x57a>
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	57 c1       	rjmp	.+686    	; 0x1212 <process_sensor+0x50e>
     f64:	c5 01       	movw	r24, r10
     f66:	b7 fe       	sbrs	r11, 7
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <process_sensor+0x26a>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	f8 01       	movw	r30, r16
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	82 17       	cp	r24, r18
     f76:	93 07       	cpc	r25, r19
     f78:	08 f4       	brcc	.+2      	; 0xf7c <process_sensor+0x278>
     f7a:	8f c0       	rjmp	.+286    	; 0x109a <process_sensor+0x396>
     f7c:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <qt_config_data+0x2>
     f80:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <dht_counter>
     f84:	9f 01       	movw	r18, r30
     f86:	20 0f       	add	r18, r16
     f88:	31 1f       	adc	r19, r17
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	d9 01       	movw	r26, r18
     f90:	a0 57       	subi	r26, 0x70	; 112
     f92:	bd 4d       	sbci	r27, 0xDD	; 221
     f94:	8c 91       	ld	r24, X
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	8c 93       	st	X, r24
     f9a:	f9 01       	movw	r30, r18
     f9c:	e2 57       	subi	r30, 0x72	; 114
     f9e:	fd 4d       	sbci	r31, 0xDD	; 221
     fa0:	84 81       	ldd	r24, Z+4	; 0x04
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	88 73       	andi	r24, 0x38	; 56
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	23 e0       	ldi	r18, 0x03	; 3
     faa:	96 95       	lsr	r25
     fac:	87 95       	ror	r24
     fae:	2a 95       	dec	r18
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <process_sensor+0x2a6>
     fb2:	68 2e       	mov	r6, r24
     fb4:	88 23       	and	r24, r24
     fb6:	09 f4       	brne	.+2      	; 0xfba <process_sensor+0x2b6>
     fb8:	3e c0       	rjmp	.+124    	; 0x1036 <process_sensor+0x332>
     fba:	dd 24       	eor	r13, r13
     fbc:	cc 24       	eor	r12, r12
     fbe:	7f 01       	movw	r14, r30
     fc0:	83 e0       	ldi	r24, 0x03	; 3
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	e8 0e       	add	r14, r24
     fc6:	f9 1e       	adc	r15, r25
     fc8:	4d 01       	movw	r8, r26
     fca:	2f c0       	rjmp	.+94     	; 0x102a <process_sensor+0x326>
     fcc:	d7 14       	cp	r13, r7
     fce:	61 f1       	breq	.+88     	; 0x1028 <process_sensor+0x324>
     fd0:	8d 2d       	mov	r24, r13
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	ec 01       	movw	r28, r24
     fd6:	cc 0f       	add	r28, r28
     fd8:	dd 1f       	adc	r29, r29
     fda:	c8 0f       	add	r28, r24
     fdc:	d9 1f       	adc	r29, r25
     fde:	cc 0f       	add	r28, r28
     fe0:	dd 1f       	adc	r29, r29
     fe2:	c2 57       	subi	r28, 0x72	; 114
     fe4:	dd 4d       	sbci	r29, 0xDD	; 221
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	88 73       	andi	r24, 0x38	; 56
     fec:	90 70       	andi	r25, 0x00	; 0
     fee:	73 e0       	ldi	r23, 0x03	; 3
     ff0:	96 95       	lsr	r25
     ff2:	87 95       	ror	r24
     ff4:	7a 95       	dec	r23
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <process_sensor+0x2ec>
     ff8:	68 16       	cp	r6, r24
     ffa:	b1 f4       	brne	.+44     	; 0x1028 <process_sensor+0x324>
     ffc:	8d 2d       	mov	r24, r13
     ffe:	2a dd       	rcall	.-1452   	; 0xa54 <qt_get_sensor_delta>
    1000:	2b 81       	ldd	r18, Y+3	; 0x03
    1002:	82 1b       	sub	r24, r18
    1004:	91 09       	sbc	r25, r1
    1006:	f7 01       	movw	r30, r14
    1008:	20 81       	ld	r18, Z
    100a:	a5 01       	movw	r20, r10
    100c:	42 1b       	sub	r20, r18
    100e:	51 09       	sbc	r21, r1
    1010:	48 17       	cp	r20, r24
    1012:	59 07       	cpc	r21, r25
    1014:	2c f0       	brlt	.+10     	; 0x1020 <process_sensor+0x31c>
    1016:	88 81       	ld	r24, Y
    1018:	80 31       	cpi	r24, 0x10	; 16
    101a:	11 f0       	breq	.+4      	; 0x1020 <process_sensor+0x31c>
    101c:	88 30       	cpi	r24, 0x08	; 8
    101e:	21 f4       	brne	.+8      	; 0x1028 <process_sensor+0x324>
    1020:	f4 01       	movw	r30, r8
    1022:	10 82       	st	Z, r1
    1024:	cc 24       	eor	r12, r12
    1026:	c3 94       	inc	r12
    1028:	d3 94       	inc	r13
    102a:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <num_sensors>
    102e:	d8 16       	cp	r13, r24
    1030:	68 f2       	brcs	.-102    	; 0xfcc <process_sensor+0x2c8>
    1032:	cc 20       	and	r12, r12
    1034:	79 f4       	brne	.+30     	; 0x1054 <process_sensor+0x350>
    1036:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <qt_config_data+0x1>
    103a:	88 23       	and	r24, r24
    103c:	59 f0       	breq	.+22     	; 0x1054 <process_sensor+0x350>
    103e:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
    1042:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
    1046:	98 60       	ori	r25, 0x08	; 8
    1048:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
    104c:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
    1050:	41 e0       	ldi	r20, 0x01	; 1
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <process_sensor+0x352>
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	98 01       	movw	r18, r16
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	20 0f       	add	r18, r16
    105e:	31 1f       	adc	r19, r17
    1060:	f9 01       	movw	r30, r18
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	e0 57       	subi	r30, 0x70	; 112
    1068:	fd 4d       	sbci	r31, 0xDD	; 221
    106a:	90 81       	ld	r25, Z
    106c:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <qt_config_data+0x1>
    1070:	98 17       	cp	r25, r24
    1072:	08 f4       	brcc	.+2      	; 0x1076 <process_sensor+0x372>
    1074:	05 c1       	rjmp	.+522    	; 0x1280 <process_sensor+0x57c>
    1076:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
    107a:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
    107e:	83 60       	ori	r24, 0x03	; 3
    1080:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
    1084:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
    1088:	f9 01       	movw	r30, r18
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	e2 57       	subi	r30, 0x72	; 114
    1090:	fd 4d       	sbci	r31, 0xDD	; 221
    1092:	80 e1       	ldi	r24, 0x10	; 16
    1094:	80 83       	st	Z, r24
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	f3 c0       	rjmp	.+486    	; 0x1280 <process_sensor+0x57c>
    109a:	e0 0f       	add	r30, r16
    109c:	f1 1f       	adc	r31, r17
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	df 01       	movw	r26, r30
    10a4:	a2 57       	subi	r26, 0x72	; 114
    10a6:	bd 4d       	sbci	r27, 0xDD	; 221
    10a8:	15 96       	adiw	r26, 0x05	; 5
    10aa:	2c 91       	ld	r18, X
    10ac:	15 97       	sbiw	r26, 0x05	; 5
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	8c 93       	st	X, r24
    10b2:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
    10b6:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
    10ba:	82 60       	ori	r24, 0x02	; 2
    10bc:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
    10c0:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
    10c4:	e0 57       	subi	r30, 0x70	; 112
    10c6:	fd 4d       	sbci	r31, 0xDD	; 221
    10c8:	10 82       	st	Z, r1
    10ca:	e2 2f       	mov	r30, r18
    10cc:	9e c0       	rjmp	.+316    	; 0x120a <process_sensor+0x506>
    10ce:	c5 01       	movw	r24, r10
    10d0:	b7 fe       	sbrs	r11, 7
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <process_sensor+0x3d4>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	f8 01       	movw	r30, r16
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	40 91 86 22 	lds	r20, 0x2286	; 0x802286 <lib_status_flags>
    10e2:	50 91 87 22 	lds	r21, 0x2287	; 0x802287 <lib_status_flags+0x1>
    10e6:	86 17       	cp	r24, r22
    10e8:	97 07       	cpc	r25, r23
    10ea:	70 f4       	brcc	.+28     	; 0x1108 <process_sensor+0x404>
    10ec:	e0 0f       	add	r30, r16
    10ee:	f1 1f       	adc	r31, r17
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	e2 57       	subi	r30, 0x72	; 114
    10f6:	fd 4d       	sbci	r31, 0xDD	; 221
    10f8:	88 e0       	ldi	r24, 0x08	; 8
    10fa:	80 83       	st	Z, r24
    10fc:	54 60       	ori	r21, 0x04	; 4
    10fe:	40 93 86 22 	sts	0x2286, r20	; 0x802286 <lib_status_flags>
    1102:	50 93 87 22 	sts	0x2287, r21	; 0x802287 <lib_status_flags+0x1>
    1106:	31 c0       	rjmp	.+98     	; 0x116a <process_sensor+0x466>
    1108:	41 60       	ori	r20, 0x01	; 1
    110a:	40 93 86 22 	sts	0x2286, r20	; 0x802286 <lib_status_flags>
    110e:	50 93 87 22 	sts	0x2287, r21	; 0x802287 <lib_status_flags+0x1>
    1112:	e0 0f       	add	r30, r16
    1114:	f1 1f       	adc	r31, r17
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	e0 57       	subi	r30, 0x70	; 112
    111c:	fd 4d       	sbci	r31, 0xDD	; 221
    111e:	90 81       	ld	r25, Z
    1120:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <qt_config_data+0x1>
    1124:	98 17       	cp	r25, r24
    1126:	10 f4       	brcc	.+4      	; 0x112c <process_sensor+0x428>
    1128:	9f 5f       	subi	r25, 0xFF	; 255
    112a:	90 83       	st	Z, r25
    112c:	90 91 71 22 	lds	r25, 0x2271	; 0x802271 <qt_config_data+0x3>
    1130:	99 23       	and	r25, r25
    1132:	71 f0       	breq	.+28     	; 0x1150 <process_sensor+0x44c>
    1134:	f8 01       	movw	r30, r16
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	e0 0f       	add	r30, r16
    113c:	f1 1f       	adc	r31, r17
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	e2 57       	subi	r30, 0x72	; 114
    1144:	fd 4d       	sbci	r31, 0xDD	; 221
    1146:	81 81       	ldd	r24, Z+1	; 0x01
    1148:	89 17       	cp	r24, r25
    114a:	20 f4       	brcc	.+8      	; 0x1154 <process_sensor+0x450>
    114c:	8f 0d       	add	r24, r15
    114e:	81 83       	std	Z+1, r24	; 0x01
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	0c c0       	rjmp	.+24     	; 0x116c <process_sensor+0x468>
    1154:	87 2d       	mov	r24, r7
    1156:	95 dd       	rcall	.-1238   	; 0xc82 <start_cal_sensor>
    1158:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
    115c:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
    1160:	92 60       	ori	r25, 0x02	; 2
    1162:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
    1166:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
    116a:	41 e0       	ldi	r20, 0x01	; 1
    116c:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <qt_config_data+0x2>
    1170:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <dht_counter>
    1174:	85 c0       	rjmp	.+266    	; 0x1280 <process_sensor+0x57c>
    1176:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <qt_config_data+0x2>
    117a:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <dht_counter>
    117e:	df 01       	movw	r26, r30
    1180:	aa 0f       	add	r26, r26
    1182:	bb 1f       	adc	r27, r27
    1184:	a0 57       	subi	r26, 0x70	; 112
    1186:	bd 4d       	sbci	r27, 0xDD	; 221
    1188:	8c 91       	ld	r24, X
    118a:	88 23       	and	r24, r24
    118c:	89 f1       	breq	.+98     	; 0x11f0 <process_sensor+0x4ec>
    118e:	c5 01       	movw	r24, r10
    1190:	b7 fe       	sbrs	r11, 7
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <process_sensor+0x494>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	40 91 86 22 	lds	r20, 0x2286	; 0x802286 <lib_status_flags>
    119c:	50 91 87 22 	lds	r21, 0x2287	; 0x802287 <lib_status_flags+0x1>
    11a0:	68 17       	cp	r22, r24
    11a2:	79 07       	cpc	r23, r25
    11a4:	90 f4       	brcc	.+36     	; 0x11ca <process_sensor+0x4c6>
    11a6:	f8 01       	movw	r30, r16
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	e0 0f       	add	r30, r16
    11ae:	f1 1f       	adc	r31, r17
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	e2 57       	subi	r30, 0x72	; 114
    11b6:	fd 4d       	sbci	r31, 0xDD	; 221
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	80 83       	st	Z, r24
    11bc:	41 60       	ori	r20, 0x01	; 1
    11be:	40 93 86 22 	sts	0x2286, r20	; 0x802286 <lib_status_flags>
    11c2:	50 93 87 22 	sts	0x2287, r21	; 0x802287 <lib_status_flags+0x1>
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <process_sensor+0x4d2>
    11ca:	54 60       	ori	r21, 0x04	; 4
    11cc:	40 93 86 22 	sts	0x2286, r20	; 0x802286 <lib_status_flags>
    11d0:	50 93 87 22 	sts	0x2287, r21	; 0x802287 <lib_status_flags+0x1>
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	f8 01       	movw	r30, r16
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	e0 0f       	add	r30, r16
    11de:	f1 1f       	adc	r31, r17
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	e0 57       	subi	r30, 0x70	; 112
    11e6:	fd 4d       	sbci	r31, 0xDD	; 221
    11e8:	80 81       	ld	r24, Z
    11ea:	81 50       	subi	r24, 0x01	; 1
    11ec:	80 83       	st	Z, r24
    11ee:	48 c0       	rjmp	.+144    	; 0x1280 <process_sensor+0x57c>
    11f0:	ed 81       	ldd	r30, Y+5	; 0x05
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	88 83       	st	Y, r24
    11f6:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
    11fa:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
    1204:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
    1208:	1c 92       	st	X, r1
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	e8 55       	subi	r30, 0x58	; 88
    120e:	fd 4d       	sbci	r31, 0xDD	; 221
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	80 83       	st	Z, r24
    1214:	34 c0       	rjmp	.+104    	; 0x127e <process_sensor+0x57a>
    1216:	99 81       	ldd	r25, Y+1	; 0x01
    1218:	9f 5f       	subi	r25, 0xFF	; 255
    121a:	99 83       	std	Y+1, r25	; 0x01
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	82 fd       	sbrc	r24, 2
    1220:	17 c0       	rjmp	.+46     	; 0x1250 <process_sensor+0x54c>
    1222:	ad 81       	ldd	r26, Y+5	; 0x05
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	88 83       	st	Y, r24
    1228:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
    122c:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
    1230:	82 60       	ori	r24, 0x02	; 2
    1232:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
    1236:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	e0 57       	subi	r30, 0x70	; 112
    1240:	fd 4d       	sbci	r31, 0xDD	; 221
    1242:	10 82       	st	Z, r1
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	a8 55       	subi	r26, 0x58	; 88
    1248:	bd 4d       	sbci	r27, 0xDD	; 221
    124a:	80 e8       	ldi	r24, 0x80	; 128
    124c:	8c 93       	st	X, r24
    124e:	17 c0       	rjmp	.+46     	; 0x127e <process_sensor+0x57a>
    1250:	80 91 74 22 	lds	r24, 0x2274	; 0x802274 <qt_config_data+0x6>
    1254:	98 17       	cp	r25, r24
    1256:	40 f0       	brcs	.+16     	; 0x1268 <process_sensor+0x564>
    1258:	87 2d       	mov	r24, r7
    125a:	13 dd       	rcall	.-1498   	; 0xc82 <start_cal_sensor>
    125c:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
    1260:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
    1264:	90 61       	ori	r25, 0x10	; 16
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <process_sensor+0x56e>
    1268:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <lib_status_flags>
    126c:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <lib_status_flags+0x1>
    1270:	94 60       	ori	r25, 0x04	; 4
    1272:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <lib_status_flags>
    1276:	90 93 87 22 	sts	0x2287, r25	; 0x802287 <lib_status_flags+0x1>
    127a:	41 e0       	ldi	r20, 0x01	; 1
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <process_sensor+0x57c>
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	84 2f       	mov	r24, r20
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	ee e0       	ldi	r30, 0x0E	; 14
    1288:	0c 94 5b 42 	jmp	0x84b6	; 0x84b6 <__epilogue_restores__+0x8>

0000128c <burst_init>:
    128c:	fc 01       	movw	r30, r24
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	09 f0       	breq	.+2      	; 0x1294 <burst_init+0x8>
    1292:	19 95       	eicall
    1294:	08 95       	ret

00001296 <burst_reset>:
    1296:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <SNS_array>
    129a:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <SNS_array+0x1>
    129e:	10 92 b0 22 	sts	0x22B0, r1	; 0x8022b0 <SNSK_array>
    12a2:	10 92 b1 22 	sts	0x22B1, r1	; 0x8022b1 <SNSK_array+0x1>
    12a6:	10 92 ae 22 	sts	0x22AE, r1	; 0x8022ae <SNS_array+0x2>
    12aa:	10 92 af 22 	sts	0x22AF, r1	; 0x8022af <SNS_array+0x3>
    12ae:	10 92 b2 22 	sts	0x22B2, r1	; 0x8022b2 <SNSK_array+0x2>
    12b2:	10 92 b3 22 	sts	0x22B3, r1	; 0x8022b3 <SNSK_array+0x3>
    12b6:	08 95       	ret

000012b8 <burst>:
    12b8:	80 91 ae 22 	lds	r24, 0x22AE	; 0x8022ae <SNS_array+0x2>
    12bc:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <SNS_array>
    12c0:	89 2b       	or	r24, r25
    12c2:	41 f0       	breq	.+16     	; 0x12d4 <burst+0x1c>
    12c4:	e0 91 6c 22 	lds	r30, 0x226C	; 0x80226c <burst_proc>
    12c8:	f0 91 6d 22 	lds	r31, 0x226D	; 0x80226d <burst_proc+0x1>
    12cc:	30 97       	sbiw	r30, 0x00	; 0
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <burst+0x1c>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	19 95       	eicall
    12d4:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <SNS_array+0x3>
    12d8:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <SNS_array+0x1>
    12dc:	89 2b       	or	r24, r25
    12de:	41 f0       	breq	.+16     	; 0x12f0 <burst+0x38>
    12e0:	e0 91 6c 22 	lds	r30, 0x226C	; 0x80226c <burst_proc>
    12e4:	f0 91 6d 22 	lds	r31, 0x226D	; 0x80226d <burst_proc+0x1>
    12e8:	30 97       	sbiw	r30, 0x00	; 0
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <burst+0x38>
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	19 95       	eicall
    12f0:	08 95       	ret

000012f2 <adc_handler>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t ntc_get_raw_value(void)
{
	return ntc_sensor_sample;
}
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	1f 92       	push	r1
    12f8:	1f 92       	push	r1
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	61 30       	cpi	r22, 0x01	; 1
    1300:	69 f5       	brne	.+90     	; 0x135c <adc_handler+0x6a>
    1302:	80 91 b5 22 	lds	r24, 0x22B5	; 0x8022b5 <light_sensor_samples.5066>
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	80 93 b5 22 	sts	0x22B5, r24	; 0x8022b5 <light_sensor_samples.5066>
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	39 f4       	brne	.+14     	; 0x131e <adc_handler+0x2c>
    1310:	40 93 b6 22 	sts	0x22B6, r20	; 0x8022b6 <light_sensor_sample>
    1314:	50 93 b7 22 	sts	0x22B7, r21	; 0x8022b7 <light_sensor_sample+0x1>
    1318:	10 92 ba 22 	sts	0x22BA, r1	; 0x8022ba <light_sensor_data_ready>
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <adc_handler+0x54>
    131e:	20 91 b6 22 	lds	r18, 0x22B6	; 0x8022b6 <light_sensor_sample>
    1322:	30 91 b7 22 	lds	r19, 0x22B7	; 0x8022b7 <light_sensor_sample+0x1>
    1326:	42 0f       	add	r20, r18
    1328:	53 1f       	adc	r21, r19
    132a:	56 95       	lsr	r21
    132c:	47 95       	ror	r20
    132e:	40 93 b6 22 	sts	0x22B6, r20	; 0x8022b6 <light_sensor_sample>
    1332:	50 93 b7 22 	sts	0x22B7, r21	; 0x8022b7 <light_sensor_sample+0x1>
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	31 f4       	brne	.+12     	; 0x1346 <adc_handler+0x54>
    133a:	10 92 b5 22 	sts	0x22B5, r1	; 0x8022b5 <light_sensor_samples.5066>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <light_sensor_data_ready>
    1344:	39 c0       	rjmp	.+114    	; 0x13b8 <adc_handler+0xc6>
    1346:	8f b7       	in	r24, 0x3f	; 63
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	f8 94       	cli
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	e0 e0       	ldi	r30, 0x00	; 0
    1350:	f2 e0       	ldi	r31, 0x02	; 2
    1352:	80 81       	ld	r24, Z
    1354:	84 60       	ori	r24, 0x04	; 4
    1356:	80 83       	st	Z, r24
    1358:	9f bf       	out	0x3f, r25	; 63
    135a:	2e c0       	rjmp	.+92     	; 0x13b8 <adc_handler+0xc6>
    135c:	62 30       	cpi	r22, 0x02	; 2
    135e:	61 f5       	brne	.+88     	; 0x13b8 <adc_handler+0xc6>
    1360:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <ntc_sensor_samples.5067>
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	80 93 b4 22 	sts	0x22B4, r24	; 0x8022b4 <ntc_sensor_samples.5067>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	39 f4       	brne	.+14     	; 0x137c <adc_handler+0x8a>
    136e:	40 93 b8 22 	sts	0x22B8, r20	; 0x8022b8 <ntc_sensor_sample>
    1372:	50 93 b9 22 	sts	0x22B9, r21	; 0x8022b9 <ntc_sensor_sample+0x1>
    1376:	10 92 bb 22 	sts	0x22BB, r1	; 0x8022bb <ntc_sensor_data_ready>
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <adc_handler+0xb2>
    137c:	20 91 b8 22 	lds	r18, 0x22B8	; 0x8022b8 <ntc_sensor_sample>
    1380:	30 91 b9 22 	lds	r19, 0x22B9	; 0x8022b9 <ntc_sensor_sample+0x1>
    1384:	42 0f       	add	r20, r18
    1386:	53 1f       	adc	r21, r19
    1388:	56 95       	lsr	r21
    138a:	47 95       	ror	r20
    138c:	40 93 b8 22 	sts	0x22B8, r20	; 0x8022b8 <ntc_sensor_sample>
    1390:	50 93 b9 22 	sts	0x22B9, r21	; 0x8022b9 <ntc_sensor_sample+0x1>
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	31 f4       	brne	.+12     	; 0x13a4 <adc_handler+0xb2>
    1398:	10 92 b4 22 	sts	0x22B4, r1	; 0x8022b4 <ntc_sensor_samples.5067>
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 bb 22 	sts	0x22BB, r24	; 0x8022bb <ntc_sensor_data_ready>
    13a2:	0a c0       	rjmp	.+20     	; 0x13b8 <adc_handler+0xc6>
    13a4:	8f b7       	in	r24, 0x3f	; 63
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	f8 94       	cli
    13aa:	99 81       	ldd	r25, Y+1	; 0x01
    13ac:	e0 e0       	ldi	r30, 0x00	; 0
    13ae:	f2 e0       	ldi	r31, 0x02	; 2
    13b0:	80 81       	ld	r24, Z
    13b2:	88 60       	ori	r24, 0x08	; 8
    13b4:	80 83       	st	Z, r24
    13b6:	9f bf       	out	0x3f, r25	; 63
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <ntc_data_is_ready>:
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	1f 92       	push	r1
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	8f b7       	in	r24, 0x3f	; 63
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	f8 94       	cli
    13d2:	99 81       	ldd	r25, Y+1	; 0x01
    13d4:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <ntc_sensor_data_ready>
    13d8:	88 23       	and	r24, r24
    13da:	21 f0       	breq	.+8      	; 0x13e4 <ntc_data_is_ready+0x22>
    13dc:	10 92 bb 22 	sts	0x22BB, r1	; 0x8022bb <ntc_sensor_data_ready>
    13e0:	9f bf       	out	0x3f, r25	; 63
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <ntc_data_is_ready+0x24>
    13e4:	9f bf       	out	0x3f, r25	; 63
    13e6:	0f 90       	pop	r0
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <lightsensor_data_is_ready>:
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	1f 92       	push	r1
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	8f b7       	in	r24, 0x3f	; 63
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	f8 94       	cli
    13fe:	99 81       	ldd	r25, Y+1	; 0x01
    1400:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <light_sensor_data_ready>
    1404:	88 23       	and	r24, r24
    1406:	21 f0       	breq	.+8      	; 0x1410 <lightsensor_data_is_ready+0x22>
    1408:	10 92 ba 22 	sts	0x22BA, r1	; 0x8022ba <light_sensor_data_ready>
    140c:	9f bf       	out	0x3f, r25	; 63
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <lightsensor_data_is_ready+0x24>
    1410:	9f bf       	out	0x3f, r25	; 63
    1412:	0f 90       	pop	r0
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <adc_sensors_init>:
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	2b 97       	sbiw	r28, 0x0b	; 11
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	be 01       	movw	r22, r28
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	0e 94 88 24 	call	0x4910	; 0x4910 <adc_read_configuration>
    1438:	ae 01       	movw	r20, r28
    143a:	48 5f       	subi	r20, 0xF8	; 248
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <adcch_read_configuration>
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	9b 81       	ldd	r25, Y+3	; 0x03
    144c:	9f 78       	andi	r25, 0x8F	; 143
    144e:	90 61       	ori	r25, 0x10	; 16
    1450:	9b 83       	std	Y+3, r25	; 0x03
    1452:	96 e0       	ldi	r25, 0x06	; 6
    1454:	9d 83       	std	Y+5, r25	; 0x05
    1456:	81 7e       	andi	r24, 0xE1	; 225
    1458:	80 61       	ori	r24, 0x10	; 16
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	1c 82       	std	Y+4, r1	; 0x04
    145e:	be 01       	movw	r22, r28
    1460:	6f 5f       	subi	r22, 0xFF	; 255
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	0e 94 22 24 	call	0x4844	; 0x4844 <adc_write_configuration>
    146c:	69 e7       	ldi	r22, 0x79	; 121
    146e:	79 e0       	ldi	r23, 0x09	; 9
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	0e 94 06 22 	call	0x440c	; 0x440c <adc_set_callback>
    1478:	11 e0       	ldi	r17, 0x01	; 1
    147a:	18 87       	std	Y+8, r17	; 0x08
    147c:	19 86       	std	Y+9, r1	; 0x09
    147e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1480:	80 7f       	andi	r24, 0xF0	; 240
    1482:	81 60       	ori	r24, 0x01	; 1
    1484:	8a 87       	std	Y+10, r24	; 0x0a
    1486:	ae 01       	movw	r20, r28
    1488:	48 5f       	subi	r20, 0xF8	; 248
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	92 e0       	ldi	r25, 0x02	; 2
    1492:	0e 94 c1 24 	call	0x4982	; 0x4982 <adcch_write_configuration>
    1496:	18 87       	std	Y+8, r17	; 0x08
    1498:	88 e0       	ldi	r24, 0x08	; 8
    149a:	89 87       	std	Y+9, r24	; 0x09
    149c:	ae 01       	movw	r20, r28
    149e:	48 5f       	subi	r20, 0xF8	; 248
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	62 e0       	ldi	r22, 0x02	; 2
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	92 e0       	ldi	r25, 0x02	; 2
    14a8:	0e 94 c1 24 	call	0x4982	; 0x4982 <adcch_write_configuration>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	0e 94 66 22 	call	0x44cc	; 0x44cc <adc_enable>
    14b4:	2b 96       	adiw	r28, 0x0b	; 11
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	08 95       	ret

000014c2 <ntc_get_temperature>:
 * \note The result is inaccurate for temperatures outside 5-45 degrees.
 *
 * \retval the temperature in Celsius
 */
int8_t ntc_get_temperature(void)
{
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
	int8_t retval = 0;
	float ntc_sample = ntc_sensor_sample;
    14c6:	c0 91 b8 22 	lds	r28, 0x22B8	; 0x8022b8 <ntc_sensor_sample>
    14ca:	d0 91 b9 22 	lds	r29, 0x22B9	; 0x8022b9 <ntc_sensor_sample+0x1>
    14ce:	be 01       	movw	r22, r28
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 f0 40 	call	0x81e0	; 0x81e0 <__floatunsisf>
	if (ntc_sensor_sample > 697) {
		retval = (int8_t)((-0.0295 * ntc_sample) + 40.5);
	} if (ntc_sensor_sample > 420) {
    14d8:	c5 3a       	cpi	r28, 0xA5	; 165
    14da:	d1 40       	sbci	r29, 0x01	; 1
    14dc:	80 f0       	brcs	.+32     	; 0x14fe <ntc_get_temperature+0x3c>
		retval = (int8_t)((-0.0474 * ntc_sample) + 53.3);
    14de:	21 e8       	ldi	r18, 0x81	; 129
    14e0:	36 e2       	ldi	r19, 0x26	; 38
    14e2:	42 e4       	ldi	r20, 0x42	; 66
    14e4:	5d eb       	ldi	r21, 0xBD	; 189
    14e6:	0e 94 7e 41 	call	0x82fc	; 0x82fc <__mulsf3>
    14ea:	23 e3       	ldi	r18, 0x33	; 51
    14ec:	33 e3       	ldi	r19, 0x33	; 51
    14ee:	45 e5       	ldi	r20, 0x55	; 85
    14f0:	52 e4       	ldi	r21, 0x42	; 66
    14f2:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__addsf3>
    14f6:	0e 94 bf 40 	call	0x817e	; 0x817e <__fixsfsi>
    14fa:	86 2f       	mov	r24, r22
    14fc:	0f c0       	rjmp	.+30     	; 0x151c <ntc_get_temperature+0x5a>
	} else {
		retval = (int8_t)((-0.0777 * ntc_sample) + 65.1);
    14fe:	2d e2       	ldi	r18, 0x2D	; 45
    1500:	31 e2       	ldi	r19, 0x21	; 33
    1502:	4f e9       	ldi	r20, 0x9F	; 159
    1504:	5d eb       	ldi	r21, 0xBD	; 189
    1506:	0e 94 7e 41 	call	0x82fc	; 0x82fc <__mulsf3>
    150a:	23 e3       	ldi	r18, 0x33	; 51
    150c:	33 e3       	ldi	r19, 0x33	; 51
    150e:	42 e8       	ldi	r20, 0x82	; 130
    1510:	52 e4       	ldi	r21, 0x42	; 66
    1512:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__addsf3>
    1516:	0e 94 bf 40 	call	0x817e	; 0x817e <__fixsfsi>
    151a:	86 2f       	mov	r24, r22
	}
	return retval;
}
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	08 95       	ret

00001522 <lightsensor_get_raw_value>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t lightsensor_get_raw_value(void)
{
	return light_sensor_sample;
}
    1522:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <light_sensor_sample>
    1526:	90 91 b7 22 	lds	r25, 0x22B7	; 0x8022b7 <light_sensor_sample+0x1>
    152a:	08 95       	ret

0000152c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    152e:	61 50       	subi	r22, 0x01	; 1
    1530:	71 09       	sbc	r23, r1
    1532:	81 09       	sbc	r24, r1
    1534:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1536:	61 15       	cp	r22, r1
    1538:	71 05       	cpc	r23, r1
    153a:	81 05       	cpc	r24, r1
    153c:	91 05       	cpc	r25, r1
    153e:	b9 f7       	brne	.-18     	; 0x152e <__portable_avr_delay_cycles+0x2>
    1540:	08 95       	ret

00001542 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
    1542:	bf 92       	push	r11
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	1f 92       	push	r1
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    155a:	00 e0       	ldi	r16, 0x00	; 0
    155c:	16 e0       	ldi	r17, 0x06	; 6
    155e:	68 94       	set
    1560:	ff 24       	eor	r15, r15
    1562:	f3 f8       	bld	r15, 3
    1564:	f8 01       	movw	r30, r16
    1566:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
    1568:	69 e2       	ldi	r22, 0x29	; 41
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	dd df       	rcall	.-70     	; 0x152c <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1572:	f8 01       	movw	r30, r16
    1574:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
    1576:	69 e2       	ldi	r22, 0x29	; 41
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	d6 df       	rcall	.-84     	; 0x152c <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
    1580:	0f 2e       	mov	r0, r31
    1582:	fb e2       	ldi	r31, 0x2B	; 43
    1584:	bf 2e       	mov	r11, r31
    1586:	f0 2d       	mov	r31, r0
    1588:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
    158a:	80 ea       	ldi	r24, 0xA0	; 160
    158c:	99 e0       	ldi	r25, 0x09	; 9
    158e:	0e 94 2d 1a 	call	0x345a	; 0x345a <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
    1592:	c1 2c       	mov	r12, r1
    1594:	d1 2c       	mov	r13, r1
    1596:	76 01       	movw	r14, r12
    1598:	00 e0       	ldi	r16, 0x00	; 0
    159a:	12 e1       	ldi	r17, 0x12	; 18
    159c:	2a e7       	ldi	r18, 0x7A	; 122
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	43 e0       	ldi	r20, 0x03	; 3
    15a2:	be 01       	movw	r22, r28
    15a4:	6f 5f       	subi	r22, 0xFF	; 255
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	80 ea       	ldi	r24, 0xA0	; 160
    15aa:	99 e0       	ldi	r25, 0x09	; 9
    15ac:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    15b0:	00 e6       	ldi	r16, 0x60	; 96
    15b2:	16 e0       	ldi	r17, 0x06	; 6
    15b4:	ff 24       	eor	r15, r15
    15b6:	f3 94       	inc	r15
    15b8:	f8 01       	movw	r30, r16
    15ba:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    15bc:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    15be:	be 01       	movw	r22, r28
    15c0:	6f 5f       	subi	r22, 0xFF	; 255
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	80 ea       	ldi	r24, 0xA0	; 160
    15c6:	99 e0       	ldi	r25, 0x09	; 9
    15c8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    15cc:	f8 01       	movw	r30, r16
    15ce:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    15d0:	e0 ea       	ldi	r30, 0xA0	; 160
    15d2:	f9 e0       	ldi	r31, 0x09	; 9
    15d4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    15d6:	85 ff       	sbrs	r24, 5
    15d8:	fd cf       	rjmp	.-6      	; 0x15d4 <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    15da:	80 ea       	ldi	r24, 0xA0	; 160
    15dc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    15e0:	e0 ea       	ldi	r30, 0xA0	; 160
    15e2:	f9 e0       	ldi	r31, 0x09	; 9
    15e4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    15e6:	86 ff       	sbrs	r24, 6
    15e8:	fd cf       	rjmp	.-6      	; 0x15e4 <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    15ea:	e0 ea       	ldi	r30, 0xA0	; 160
    15ec:	f9 e0       	ldi	r31, 0x09	; 9
    15ee:	80 e4       	ldi	r24, 0x40	; 64
    15f0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    15f2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    15f4:	be 01       	movw	r22, r28
    15f6:	6f 5f       	subi	r22, 0xFF	; 255
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	80 ea       	ldi	r24, 0xA0	; 160
    15fc:	99 e0       	ldi	r25, 0x09	; 9
    15fe:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1602:	8b e2       	ldi	r24, 0x2B	; 43
    1604:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1606:	be 01       	movw	r22, r28
    1608:	6f 5f       	subi	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	80 ea       	ldi	r24, 0xA0	; 160
    160e:	99 e0       	ldi	r25, 0x09	; 9
    1610:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    161a:	e0 ea       	ldi	r30, 0xA0	; 160
    161c:	f9 e0       	ldi	r31, 0x09	; 9
    161e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1620:	85 ff       	sbrs	r24, 5
    1622:	fd cf       	rjmp	.-6      	; 0x161e <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1624:	86 ea       	ldi	r24, 0xA6	; 166
    1626:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    162a:	e0 ea       	ldi	r30, 0xA0	; 160
    162c:	f9 e0       	ldi	r31, 0x09	; 9
    162e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1630:	86 ff       	sbrs	r24, 6
    1632:	fd cf       	rjmp	.-6      	; 0x162e <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1634:	e0 ea       	ldi	r30, 0xA0	; 160
    1636:	f9 e0       	ldi	r31, 0x09	; 9
    1638:	80 e4       	ldi	r24, 0x40	; 64
    163a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    163c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    163e:	be 01       	movw	r22, r28
    1640:	6f 5f       	subi	r22, 0xFF	; 255
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	80 ea       	ldi	r24, 0xA0	; 160
    1646:	99 e0       	ldi	r25, 0x09	; 9
    1648:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    164c:	8b e2       	ldi	r24, 0x2B	; 43
    164e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1650:	be 01       	movw	r22, r28
    1652:	6f 5f       	subi	r22, 0xFF	; 255
    1654:	7f 4f       	sbci	r23, 0xFF	; 255
    1656:	80 ea       	ldi	r24, 0xA0	; 160
    1658:	99 e0       	ldi	r25, 0x09	; 9
    165a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1664:	e0 ea       	ldi	r30, 0xA0	; 160
    1666:	f9 e0       	ldi	r31, 0x09	; 9
    1668:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    166a:	85 ff       	sbrs	r24, 5
    166c:	fd cf       	rjmp	.-6      	; 0x1668 <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    166e:	88 ec       	ldi	r24, 0xC8	; 200
    1670:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1674:	e0 ea       	ldi	r30, 0xA0	; 160
    1676:	f9 e0       	ldi	r31, 0x09	; 9
    1678:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    167a:	86 ff       	sbrs	r24, 6
    167c:	fd cf       	rjmp	.-6      	; 0x1678 <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    167e:	e0 ea       	ldi	r30, 0xA0	; 160
    1680:	f9 e0       	ldi	r31, 0x09	; 9
    1682:	80 e4       	ldi	r24, 0x40	; 64
    1684:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1686:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1688:	be 01       	movw	r22, r28
    168a:	6f 5f       	subi	r22, 0xFF	; 255
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	80 ea       	ldi	r24, 0xA0	; 160
    1690:	99 e0       	ldi	r25, 0x09	; 9
    1692:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1696:	8b e2       	ldi	r24, 0x2B	; 43
    1698:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    169a:	be 01       	movw	r22, r28
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	80 ea       	ldi	r24, 0xA0	; 160
    16a2:	99 e0       	ldi	r25, 0x09	; 9
    16a4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    16ae:	e0 ea       	ldi	r30, 0xA0	; 160
    16b0:	f9 e0       	ldi	r31, 0x09	; 9
    16b2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    16b4:	85 ff       	sbrs	r24, 5
    16b6:	fd cf       	rjmp	.-6      	; 0x16b2 <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    16b8:	82 ea       	ldi	r24, 0xA2	; 162
    16ba:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    16be:	e0 ea       	ldi	r30, 0xA0	; 160
    16c0:	f9 e0       	ldi	r31, 0x09	; 9
    16c2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    16c4:	86 ff       	sbrs	r24, 6
    16c6:	fd cf       	rjmp	.-6      	; 0x16c2 <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    16c8:	e0 ea       	ldi	r30, 0xA0	; 160
    16ca:	f9 e0       	ldi	r31, 0x09	; 9
    16cc:	80 e4       	ldi	r24, 0x40	; 64
    16ce:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    16d0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    16d2:	be 01       	movw	r22, r28
    16d4:	6f 5f       	subi	r22, 0xFF	; 255
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	80 ea       	ldi	r24, 0xA0	; 160
    16da:	99 e0       	ldi	r25, 0x09	; 9
    16dc:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    16e0:	8b e2       	ldi	r24, 0x2B	; 43
    16e2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    16e4:	be 01       	movw	r22, r28
    16e6:	6f 5f       	subi	r22, 0xFF	; 255
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	80 ea       	ldi	r24, 0xA0	; 160
    16ec:	99 e0       	ldi	r25, 0x09	; 9
    16ee:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    16f8:	e0 ea       	ldi	r30, 0xA0	; 160
    16fa:	f9 e0       	ldi	r31, 0x09	; 9
    16fc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    16fe:	85 ff       	sbrs	r24, 5
    1700:	fd cf       	rjmp	.-6      	; 0x16fc <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1702:	8f e2       	ldi	r24, 0x2F	; 47
    1704:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1708:	e0 ea       	ldi	r30, 0xA0	; 160
    170a:	f9 e0       	ldi	r31, 0x09	; 9
    170c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    170e:	86 ff       	sbrs	r24, 6
    1710:	fd cf       	rjmp	.-6      	; 0x170c <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1712:	e0 ea       	ldi	r30, 0xA0	; 160
    1714:	f9 e0       	ldi	r31, 0x09	; 9
    1716:	80 e4       	ldi	r24, 0x40	; 64
    1718:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    171a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    171c:	be 01       	movw	r22, r28
    171e:	6f 5f       	subi	r22, 0xFF	; 255
    1720:	7f 4f       	sbci	r23, 0xFF	; 255
    1722:	80 ea       	ldi	r24, 0xA0	; 160
    1724:	99 e0       	ldi	r25, 0x09	; 9
    1726:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    172a:	8b e2       	ldi	r24, 0x2B	; 43
    172c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    172e:	be 01       	movw	r22, r28
    1730:	6f 5f       	subi	r22, 0xFF	; 255
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	80 ea       	ldi	r24, 0xA0	; 160
    1736:	99 e0       	ldi	r25, 0x09	; 9
    1738:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1742:	e0 ea       	ldi	r30, 0xA0	; 160
    1744:	f9 e0       	ldi	r31, 0x09	; 9
    1746:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1748:	85 ff       	sbrs	r24, 5
    174a:	fd cf       	rjmp	.-6      	; 0x1746 <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    174c:	88 ef       	ldi	r24, 0xF8	; 248
    174e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1752:	e0 ea       	ldi	r30, 0xA0	; 160
    1754:	f9 e0       	ldi	r31, 0x09	; 9
    1756:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1758:	86 ff       	sbrs	r24, 6
    175a:	fd cf       	rjmp	.-6      	; 0x1756 <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    175c:	e0 ea       	ldi	r30, 0xA0	; 160
    175e:	f9 e0       	ldi	r31, 0x09	; 9
    1760:	80 e4       	ldi	r24, 0x40	; 64
    1762:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1764:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1766:	be 01       	movw	r22, r28
    1768:	6f 5f       	subi	r22, 0xFF	; 255
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	80 ea       	ldi	r24, 0xA0	; 160
    176e:	99 e0       	ldi	r25, 0x09	; 9
    1770:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1774:	8b e2       	ldi	r24, 0x2B	; 43
    1776:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1778:	be 01       	movw	r22, r28
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	80 ea       	ldi	r24, 0xA0	; 160
    1780:	99 e0       	ldi	r25, 0x09	; 9
    1782:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    178c:	e0 ea       	ldi	r30, 0xA0	; 160
    178e:	f9 e0       	ldi	r31, 0x09	; 9
    1790:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1792:	85 ff       	sbrs	r24, 5
    1794:	fd cf       	rjmp	.-6      	; 0x1790 <st7565r_init+0x24e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1796:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    179a:	e0 ea       	ldi	r30, 0xA0	; 160
    179c:	f9 e0       	ldi	r31, 0x09	; 9
    179e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    17a0:	86 ff       	sbrs	r24, 6
    17a2:	fd cf       	rjmp	.-6      	; 0x179e <st7565r_init+0x25c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    17a4:	e0 ea       	ldi	r30, 0xA0	; 160
    17a6:	f9 e0       	ldi	r31, 0x09	; 9
    17a8:	80 e4       	ldi	r24, 0x40	; 64
    17aa:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    17ac:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    17ae:	be 01       	movw	r22, r28
    17b0:	6f 5f       	subi	r22, 0xFF	; 255
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	80 ea       	ldi	r24, 0xA0	; 160
    17b6:	99 e0       	ldi	r25, 0x09	; 9
    17b8:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    17bc:	8b e2       	ldi	r24, 0x2B	; 43
    17be:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    17c0:	be 01       	movw	r22, r28
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	80 ea       	ldi	r24, 0xA0	; 160
    17c8:	99 e0       	ldi	r25, 0x09	; 9
    17ca:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    17d4:	e0 ea       	ldi	r30, 0xA0	; 160
    17d6:	f9 e0       	ldi	r31, 0x09	; 9
    17d8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    17da:	85 ff       	sbrs	r24, 5
    17dc:	fd cf       	rjmp	.-6      	; 0x17d8 <st7565r_init+0x296>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    17de:	81 e2       	ldi	r24, 0x21	; 33
    17e0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    17e4:	e0 ea       	ldi	r30, 0xA0	; 160
    17e6:	f9 e0       	ldi	r31, 0x09	; 9
    17e8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    17ea:	86 ff       	sbrs	r24, 6
    17ec:	fd cf       	rjmp	.-6      	; 0x17e8 <st7565r_init+0x2a6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    17ee:	e0 ea       	ldi	r30, 0xA0	; 160
    17f0:	f9 e0       	ldi	r31, 0x09	; 9
    17f2:	80 e4       	ldi	r24, 0x40	; 64
    17f4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    17f6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    17f8:	be 01       	movw	r22, r28
    17fa:	6f 5f       	subi	r22, 0xFF	; 255
    17fc:	7f 4f       	sbci	r23, 0xFF	; 255
    17fe:	80 ea       	ldi	r24, 0xA0	; 160
    1800:	99 e0       	ldi	r25, 0x09	; 9
    1802:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1806:	8b e2       	ldi	r24, 0x2B	; 43
    1808:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    180a:	be 01       	movw	r22, r28
    180c:	6f 5f       	subi	r22, 0xFF	; 255
    180e:	7f 4f       	sbci	r23, 0xFF	; 255
    1810:	80 ea       	ldi	r24, 0xA0	; 160
    1812:	99 e0       	ldi	r25, 0x09	; 9
    1814:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    181e:	e0 ea       	ldi	r30, 0xA0	; 160
    1820:	f9 e0       	ldi	r31, 0x09	; 9
    1822:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1824:	85 ff       	sbrs	r24, 5
    1826:	fd cf       	rjmp	.-6      	; 0x1822 <st7565r_init+0x2e0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1828:	81 e8       	ldi	r24, 0x81	; 129
    182a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    182e:	e0 ea       	ldi	r30, 0xA0	; 160
    1830:	f9 e0       	ldi	r31, 0x09	; 9
    1832:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1834:	86 ff       	sbrs	r24, 6
    1836:	fd cf       	rjmp	.-6      	; 0x1832 <st7565r_init+0x2f0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1838:	e0 ea       	ldi	r30, 0xA0	; 160
    183a:	f9 e0       	ldi	r31, 0x09	; 9
    183c:	80 e4       	ldi	r24, 0x40	; 64
    183e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1840:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1842:	be 01       	movw	r22, r28
    1844:	6f 5f       	subi	r22, 0xFF	; 255
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	80 ea       	ldi	r24, 0xA0	; 160
    184a:	99 e0       	ldi	r25, 0x09	; 9
    184c:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1850:	8b e2       	ldi	r24, 0x2B	; 43
    1852:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1854:	be 01       	movw	r22, r28
    1856:	6f 5f       	subi	r22, 0xFF	; 255
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	80 ea       	ldi	r24, 0xA0	; 160
    185c:	99 e0       	ldi	r25, 0x09	; 9
    185e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1868:	e0 ea       	ldi	r30, 0xA0	; 160
    186a:	f9 e0       	ldi	r31, 0x09	; 9
    186c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    186e:	85 ff       	sbrs	r24, 5
    1870:	fd cf       	rjmp	.-6      	; 0x186c <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1872:	81 e2       	ldi	r24, 0x21	; 33
    1874:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1878:	e0 ea       	ldi	r30, 0xA0	; 160
    187a:	f9 e0       	ldi	r31, 0x09	; 9
    187c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    187e:	86 ff       	sbrs	r24, 6
    1880:	fd cf       	rjmp	.-6      	; 0x187c <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1882:	e0 ea       	ldi	r30, 0xA0	; 160
    1884:	f9 e0       	ldi	r31, 0x09	; 9
    1886:	80 e4       	ldi	r24, 0x40	; 64
    1888:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    188a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    188c:	be 01       	movw	r22, r28
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	80 ea       	ldi	r24, 0xA0	; 160
    1894:	99 e0       	ldi	r25, 0x09	; 9
    1896:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    189a:	8b e2       	ldi	r24, 0x2B	; 43
    189c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    189e:	be 01       	movw	r22, r28
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	80 ea       	ldi	r24, 0xA0	; 160
    18a6:	99 e0       	ldi	r25, 0x09	; 9
    18a8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    18b2:	e0 ea       	ldi	r30, 0xA0	; 160
    18b4:	f9 e0       	ldi	r31, 0x09	; 9
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    18b8:	85 ff       	sbrs	r24, 5
    18ba:	fd cf       	rjmp	.-6      	; 0x18b6 <st7565r_init+0x374>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    18bc:	8f ea       	ldi	r24, 0xAF	; 175
    18be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    18c2:	e0 ea       	ldi	r30, 0xA0	; 160
    18c4:	f9 e0       	ldi	r31, 0x09	; 9
    18c6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    18c8:	86 ff       	sbrs	r24, 6
    18ca:	fd cf       	rjmp	.-6      	; 0x18c6 <st7565r_init+0x384>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    18cc:	e0 ea       	ldi	r30, 0xA0	; 160
    18ce:	f9 e0       	ldi	r31, 0x09	; 9
    18d0:	80 e4       	ldi	r24, 0x40	; 64
    18d2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    18d4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    18d6:	be 01       	movw	r22, r28
    18d8:	6f 5f       	subi	r22, 0xFF	; 255
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	80 ea       	ldi	r24, 0xA0	; 160
    18de:	99 e0       	ldi	r25, 0x09	; 9
    18e0:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
    18e4:	0f 90       	pop	r0
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	08 95       	ret

000018fa <calendar_leapyear>:
 *
 * \retval true  if the year is a leap year
 * \retval false if the year is not a leap year
 */
static bool calendar_leapyear(uint16_t year)
{
    18fa:	ac 01       	movw	r20, r24
	if(!((year) % 4) && (((year) % 100) || !((year) % 400))) {
    18fc:	83 70       	andi	r24, 0x03	; 3
    18fe:	99 27       	eor	r25, r25
    1900:	89 2b       	or	r24, r25
    1902:	71 f5       	brne	.+92     	; 0x1960 <calendar_leapyear+0x66>
    1904:	9a 01       	movw	r18, r20
    1906:	36 95       	lsr	r19
    1908:	27 95       	ror	r18
    190a:	36 95       	lsr	r19
    190c:	27 95       	ror	r18
    190e:	ab e7       	ldi	r26, 0x7B	; 123
    1910:	b4 e1       	ldi	r27, 0x14	; 20
    1912:	0e 94 1f 42 	call	0x843e	; 0x843e <__umulhisi3>
    1916:	96 95       	lsr	r25
    1918:	87 95       	ror	r24
    191a:	64 e6       	ldi	r22, 0x64	; 100
    191c:	68 9f       	mul	r22, r24
    191e:	90 01       	movw	r18, r0
    1920:	69 9f       	mul	r22, r25
    1922:	30 0d       	add	r19, r0
    1924:	11 24       	eor	r1, r1
    1926:	42 17       	cp	r20, r18
    1928:	53 07       	cpc	r21, r19
    192a:	e1 f4       	brne	.+56     	; 0x1964 <calendar_leapyear+0x6a>
    192c:	9a 01       	movw	r18, r20
    192e:	32 95       	swap	r19
    1930:	22 95       	swap	r18
    1932:	2f 70       	andi	r18, 0x0F	; 15
    1934:	23 27       	eor	r18, r19
    1936:	3f 70       	andi	r19, 0x0F	; 15
    1938:	23 27       	eor	r18, r19
    193a:	ae e3       	ldi	r26, 0x3E	; 62
    193c:	ba e0       	ldi	r27, 0x0A	; 10
    193e:	0e 94 1f 42 	call	0x843e	; 0x843e <__umulhisi3>
    1942:	60 e9       	ldi	r22, 0x90	; 144
    1944:	71 e0       	ldi	r23, 0x01	; 1
    1946:	86 9f       	mul	r24, r22
    1948:	90 01       	movw	r18, r0
    194a:	87 9f       	mul	r24, r23
    194c:	30 0d       	add	r19, r0
    194e:	96 9f       	mul	r25, r22
    1950:	30 0d       	add	r19, r0
    1952:	11 24       	eor	r1, r1
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	42 17       	cp	r20, r18
    1958:	53 07       	cpc	r21, r19
    195a:	29 f0       	breq	.+10     	; 0x1966 <calendar_leapyear+0x6c>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	08 95       	ret
		return true;
	} else {
		return false;
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	08 95       	ret
 * \retval false if the year is not a leap year
 */
static bool calendar_leapyear(uint16_t year)
{
	if(!((year) % 4) && (((year) % 100) || !((year) % 400))) {
		return true;
    1964:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    1966:	08 95       	ret

00001968 <calendar_is_date_valid>:
 *
 * \param *date the date to check if valid
 *
 */
bool calendar_is_date_valid(struct calendar_date *date)
{
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	fc 01       	movw	r30, r24
	// Make sure time is valid
	if ((date->second >= 60) || (date->minute >= 60) || (date->hour >= 24)) {
    1972:	80 81       	ld	r24, Z
    1974:	8c 33       	cpi	r24, 0x3C	; 60
    1976:	48 f5       	brcc	.+82     	; 0x19ca <calendar_is_date_valid+0x62>
    1978:	81 81       	ldd	r24, Z+1	; 0x01
    197a:	8c 33       	cpi	r24, 0x3C	; 60
    197c:	40 f5       	brcc	.+80     	; 0x19ce <calendar_is_date_valid+0x66>
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	88 31       	cpi	r24, 0x18	; 24
    1982:	38 f5       	brcc	.+78     	; 0x19d2 <calendar_is_date_valid+0x6a>
		return false;
	}

	// Make sure month and date is valid
	if ((date->month >= 12) || (date->date >=31)) {
    1984:	04 81       	ldd	r16, Z+4	; 0x04
    1986:	0c 30       	cpi	r16, 0x0C	; 12
    1988:	30 f5       	brcc	.+76     	; 0x19d6 <calendar_is_date_valid+0x6e>
    198a:	13 81       	ldd	r17, Z+3	; 0x03
    198c:	1f 31       	cpi	r17, 0x1F	; 31
    198e:	28 f5       	brcc	.+74     	; 0x19da <calendar_is_date_valid+0x72>
		return false;
	}

	// Make sure days in month are not more than it should be
	if (date->date >= month[calendar_leapyear(date->year)][date->month]) {
    1990:	c5 81       	ldd	r28, Z+5	; 0x05
    1992:	d6 81       	ldd	r29, Z+6	; 0x06
    1994:	ce 01       	movw	r24, r28
    1996:	b1 df       	rcall	.-158    	; 0x18fa <calendar_leapyear>
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	fc 01       	movw	r30, r24
    199c:	ee 0f       	add	r30, r30
    199e:	ff 1f       	adc	r31, r31
    19a0:	e8 0f       	add	r30, r24
    19a2:	f9 1f       	adc	r31, r25
    19a4:	ee 0f       	add	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	ed 55       	subi	r30, 0x5D	; 93
    19ae:	fe 4d       	sbci	r31, 0xDE	; 222
    19b0:	e0 0f       	add	r30, r16
    19b2:	f1 1d       	adc	r31, r1
    19b4:	80 81       	ld	r24, Z
    19b6:	18 17       	cp	r17, r24
    19b8:	90 f4       	brcc	.+36     	; 0x19de <calendar_is_date_valid+0x76>
		return false;
	}

	// Make sure year is not earlier than 1970 and before 2106
	if ((date->year < EPOCH_YEAR) || (date->year >= 2106)) {
    19ba:	c2 5b       	subi	r28, 0xB2	; 178
    19bc:	d7 40       	sbci	r29, 0x07	; 7
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	c8 38       	cpi	r28, 0x88	; 136
    19c2:	d1 05       	cpc	r29, r1
    19c4:	68 f0       	brcs	.+26     	; 0x19e0 <calendar_is_date_valid+0x78>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	0b c0       	rjmp	.+22     	; 0x19e0 <calendar_is_date_valid+0x78>
 */
bool calendar_is_date_valid(struct calendar_date *date)
{
	// Make sure time is valid
	if ((date->second >= 60) || (date->minute >= 60) || (date->hour >= 24)) {
		return false;
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	09 c0       	rjmp	.+18     	; 0x19e0 <calendar_is_date_valid+0x78>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	07 c0       	rjmp	.+14     	; 0x19e0 <calendar_is_date_valid+0x78>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <calendar_is_date_valid+0x78>
	}

	// Make sure month and date is valid
	if ((date->month >= 12) || (date->date >=31)) {
		return false;
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <calendar_is_date_valid+0x78>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <calendar_is_date_valid+0x78>
	}

	// Make sure days in month are not more than it should be
	if (date->date >= month[calendar_leapyear(date->year)][date->month]) {
		return false;
    19de:	80 e0       	ldi	r24, 0x00	; 0
	if ((date->year < EPOCH_YEAR) || (date->year >= 2106)) {
		return false;
	} else {
		return true;
	}
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <calendar_timestamp_to_date>:
 * \param date_out   Date to store result
 *
 */
void calendar_timestamp_to_date(uint32_t timestamp,
		struct calendar_date *date_out)
{
    19ea:	4f 92       	push	r4
    19ec:	5f 92       	push	r5
    19ee:	6f 92       	push	r6
    19f0:	7f 92       	push	r7
    19f2:	8f 92       	push	r8
    19f4:	9f 92       	push	r9
    19f6:	af 92       	push	r10
    19f8:	bf 92       	push	r11
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <calendar_timestamp_to_date+0x22>
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <calendar_timestamp_to_date+0x24>
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	4d 83       	std	Y+5, r20	; 0x05
    1a14:	5e 83       	std	Y+6, r21	; 0x06
	uint32_t day_number;
	uint32_t day_clock;

	date_out->year = EPOCH_YEAR;
    1a16:	22 eb       	ldi	r18, 0xB2	; 178
    1a18:	37 e0       	ldi	r19, 0x07	; 7
    1a1a:	fa 01       	movw	r30, r20
    1a1c:	25 83       	std	Z+5, r18	; 0x05
    1a1e:	36 83       	std	Z+6, r19	; 0x06
	date_out->month = 0;
    1a20:	14 82       	std	Z+4, r1	; 0x04

	day_clock = timestamp % SECS_PER_DAY;
    1a22:	20 e8       	ldi	r18, 0x80	; 128
    1a24:	31 e5       	ldi	r19, 0x51	; 81
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	0e 94 f5 41 	call	0x83ea	; 0x83ea <__udivmodsi4>
    1a2e:	49 01       	movw	r8, r18
    1a30:	5a 01       	movw	r10, r20
    1a32:	69 83       	std	Y+1, r22	; 0x01
    1a34:	7a 83       	std	Y+2, r23	; 0x02
    1a36:	8b 83       	std	Y+3, r24	; 0x03
    1a38:	9c 83       	std	Y+4, r25	; 0x04
	day_number = timestamp / SECS_PER_DAY;
    1a3a:	69 01       	movw	r12, r18
    1a3c:	7a 01       	movw	r14, r20

	date_out->second = day_clock % SECS_PER_MINUTE;
    1a3e:	0f 2e       	mov	r0, r31
    1a40:	fc e3       	ldi	r31, 0x3C	; 60
    1a42:	4f 2e       	mov	r4, r31
    1a44:	51 2c       	mov	r5, r1
    1a46:	61 2c       	mov	r6, r1
    1a48:	71 2c       	mov	r7, r1
    1a4a:	f0 2d       	mov	r31, r0
    1a4c:	a3 01       	movw	r20, r6
    1a4e:	92 01       	movw	r18, r4
    1a50:	0e 94 f5 41 	call	0x83ea	; 0x83ea <__udivmodsi4>
    1a54:	ed 81       	ldd	r30, Y+5	; 0x05
    1a56:	fe 81       	ldd	r31, Y+6	; 0x06
    1a58:	60 83       	st	Z, r22
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
    1a5a:	69 81       	ldd	r22, Y+1	; 0x01
    1a5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	20 e1       	ldi	r18, 0x10	; 16
    1a64:	3e e0       	ldi	r19, 0x0E	; 14
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	0e 94 f5 41 	call	0x83ea	; 0x83ea <__udivmodsi4>
    1a6e:	12 2f       	mov	r17, r18
    1a70:	a3 01       	movw	r20, r6
    1a72:	92 01       	movw	r18, r4
    1a74:	0e 94 f5 41 	call	0x83ea	; 0x83ea <__udivmodsi4>
    1a78:	ed 81       	ldd	r30, Y+5	; 0x05
    1a7a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a7c:	21 83       	std	Z+1, r18	; 0x01
	date_out->hour = day_clock / SECS_PER_HOUR;
    1a7e:	12 83       	std	Z+2, r17	; 0x02
	date_out->dayofweek = (day_number + 4) % 7;
    1a80:	c5 01       	movw	r24, r10
    1a82:	b4 01       	movw	r22, r8
    1a84:	6c 5f       	subi	r22, 0xFC	; 252
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255
    1a88:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8c:	27 e0       	ldi	r18, 0x07	; 7
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	0e 94 f5 41 	call	0x83ea	; 0x83ea <__udivmodsi4>
    1a98:	ed 81       	ldd	r30, Y+5	; 0x05
    1a9a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a9c:	67 83       	std	Z+7, r22	; 0x07
 * \retval 365 if the year is not a leap year
 */
static uint16_t calendar_yearsize(uint16_t year)
{
	if (calendar_leapyear(year)) {
		return 366;
    1a9e:	0f 2e       	mov	r0, r31
    1aa0:	fe e6       	ldi	r31, 0x6E	; 110
    1aa2:	8f 2e       	mov	r8, r31
    1aa4:	f0 2d       	mov	r31, r0
    1aa6:	99 24       	eor	r9, r9
    1aa8:	93 94       	inc	r9
	} else {
		return 365;
    1aaa:	0d e6       	ldi	r16, 0x6D	; 109
    1aac:	11 e0       	ldi	r17, 0x01	; 1
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <calendar_timestamp_to_date+0xdc>
		day_number -= calendar_yearsize(date_out->year);
    1ab0:	c4 1a       	sub	r12, r20
    1ab2:	d5 0a       	sbc	r13, r21
    1ab4:	e6 0a       	sbc	r14, r22
    1ab6:	f7 0a       	sbc	r15, r23
		date_out->year++;
    1ab8:	ff ef       	ldi	r31, 0xFF	; 255
    1aba:	af 1a       	sub	r10, r31
    1abc:	bf 0a       	sbc	r11, r31
    1abe:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ac2:	a5 82       	std	Z+5, r10	; 0x05
    1ac4:	b6 82       	std	Z+6, r11	; 0x06
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    1ac6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aca:	a5 80       	ldd	r10, Z+5	; 0x05
    1acc:	b6 80       	ldd	r11, Z+6	; 0x06
 * \retval 366 if the year is a leap year
 * \retval 365 if the year is not a leap year
 */
static uint16_t calendar_yearsize(uint16_t year)
{
	if (calendar_leapyear(year)) {
    1ace:	c5 01       	movw	r24, r10
    1ad0:	14 df       	rcall	.-472    	; 0x18fa <calendar_leapyear>
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <calendar_timestamp_to_date+0xf2>
		return 366;
	} else {
		return 365;
    1ad6:	40 2f       	mov	r20, r16
    1ad8:	51 2f       	mov	r21, r17
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <calendar_timestamp_to_date+0xf6>
 * \retval 365 if the year is not a leap year
 */
static uint16_t calendar_yearsize(uint16_t year)
{
	if (calendar_leapyear(year)) {
		return 366;
    1adc:	48 2d       	mov	r20, r8
    1ade:	59 2d       	mov	r21, r9
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	c4 16       	cp	r12, r20
    1ae6:	d5 06       	cpc	r13, r21
    1ae8:	e6 06       	cpc	r14, r22
    1aea:	f7 06       	cpc	r15, r23
    1aec:	08 f7       	brcc	.-62     	; 0x1ab0 <calendar_timestamp_to_date+0xc6>
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	f9 01       	movw	r30, r18
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	e2 0f       	add	r30, r18
    1afa:	f3 1f       	adc	r31, r19
    1afc:	ee 0f       	add	r30, r30
    1afe:	ff 1f       	adc	r31, r31
    1b00:	ee 0f       	add	r30, r30
    1b02:	ff 1f       	adc	r31, r31
    1b04:	ed 55       	subi	r30, 0x5D	; 93
    1b06:	fe 4d       	sbci	r31, 0xDE	; 222
	while (day_number >= calendar_yearsize(date_out->year)) {
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
    1b08:	40 81       	ld	r20, Z
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	c4 16       	cp	r12, r20
    1b12:	d5 06       	cpc	r13, r21
    1b14:	e6 06       	cpc	r14, r22
    1b16:	f7 06       	cpc	r15, r23
    1b18:	18 f1       	brcs	.+70     	; 0x1b60 <calendar_timestamp_to_date+0x176>
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	2e 0f       	add	r18, r30
    1b24:	3f 1f       	adc	r19, r31
    1b26:	22 0f       	add	r18, r18
    1b28:	33 1f       	adc	r19, r19
    1b2a:	22 0f       	add	r18, r18
    1b2c:	33 1f       	adc	r19, r19
    1b2e:	2d 55       	subi	r18, 0x5D	; 93
    1b30:	3e 4d       	sbci	r19, 0xDE	; 222
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <calendar_timestamp_to_date+0x14c>
    1b34:	98 2f       	mov	r25, r24
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
    1b36:	c4 1a       	sub	r12, r20
    1b38:	d5 0a       	sbc	r13, r21
    1b3a:	e6 0a       	sbc	r14, r22
    1b3c:	f7 0a       	sbc	r15, r23
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    1b3e:	f9 01       	movw	r30, r18
    1b40:	e9 0f       	add	r30, r25
    1b42:	f1 1d       	adc	r31, r1
	while (day_number >= calendar_yearsize(date_out->year)) {
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
    1b44:	40 81       	ld	r20, Z
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 0f       	add	r24, r25
    1b50:	c4 16       	cp	r12, r20
    1b52:	d5 06       	cpc	r13, r21
    1b54:	e6 06       	cpc	r14, r22
    1b56:	f7 06       	cpc	r15, r23
    1b58:	68 f7       	brcc	.-38     	; 0x1b34 <calendar_timestamp_to_date+0x14a>
    1b5a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b5c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b5e:	94 83       	std	Z+4, r25	; 0x04
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
		date_out->month++;
	}
	date_out->date = day_number;
    1b60:	ed 81       	ldd	r30, Y+5	; 0x05
    1b62:	fe 81       	ldd	r31, Y+6	; 0x06
    1b64:	c3 82       	std	Z+3, r12	; 0x03
}
    1b66:	26 96       	adiw	r28, 0x06	; 6
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	bf 90       	pop	r11
    1b7e:	af 90       	pop	r10
    1b80:	9f 90       	pop	r9
    1b82:	8f 90       	pop	r8
    1b84:	7f 90       	pop	r7
    1b86:	6f 90       	pop	r6
    1b88:	5f 90       	pop	r5
    1b8a:	4f 90       	pop	r4
    1b8c:	08 95       	ret

00001b8e <calendar_timestamp_to_date_tz>:
 * \param date_out   Date to store result
 *
 */
void calendar_timestamp_to_date_tz(uint32_t timestamp, int8_t hour,
		uint8_t min, struct calendar_date *date_out)
{
    1b8e:	8f 92       	push	r8
    1b90:	9f 92       	push	r9
    1b92:	af 92       	push	r10
    1b94:	bf 92       	push	r11
    1b96:	cf 92       	push	r12
    1b98:	df 92       	push	r13
    1b9a:	ef 92       	push	r14
    1b9c:	ff 92       	push	r15
    1b9e:	0f 93       	push	r16
    1ba0:	1f 93       	push	r17
    1ba2:	6b 01       	movw	r12, r22
    1ba4:	7c 01       	movw	r14, r24
    1ba6:	52 2f       	mov	r21, r18
	// Multiply timezone offset by seconds, and add to timestamp
	if (hour >= 0) {
    1ba8:	44 23       	and	r20, r20
    1baa:	bc f0       	brlt	.+46     	; 0x1bda <calendar_timestamp_to_date_tz+0x4c>
		calendar_timestamp_to_date((timestamp + (SECS_PER_HOUR * hour) +
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	ac e3       	ldi	r26, 0x3C	; 60
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	0e 94 1f 42 	call	0x843e	; 0x843e <__umulhisi3>
    1bb6:	c6 0e       	add	r12, r22
    1bb8:	d7 1e       	adc	r13, r23
    1bba:	e8 1e       	adc	r14, r24
    1bbc:	f9 1e       	adc	r15, r25
    1bbe:	a4 2f       	mov	r26, r20
    1bc0:	44 0f       	add	r20, r20
    1bc2:	bb 0b       	sbc	r27, r27
    1bc4:	20 e1       	ldi	r18, 0x10	; 16
    1bc6:	3e e0       	ldi	r19, 0x0E	; 14
    1bc8:	0e 94 2e 42 	call	0x845c	; 0x845c <__usmulhisi3>
    1bcc:	6c 0d       	add	r22, r12
    1bce:	7d 1d       	adc	r23, r13
    1bd0:	8e 1d       	adc	r24, r14
    1bd2:	9f 1d       	adc	r25, r15
    1bd4:	a8 01       	movw	r20, r16
    1bd6:	09 df       	rcall	.-494    	; 0x19ea <calendar_timestamp_to_date>
    1bd8:	1d c0       	rjmp	.+58     	; 0x1c14 <calendar_timestamp_to_date_tz+0x86>
				(SECS_PER_MINUTE * min)), date_out);
	} else {
		calendar_timestamp_to_date((timestamp + (SECS_PER_HOUR * hour) -
    1bda:	a4 2f       	mov	r26, r20
    1bdc:	44 0f       	add	r20, r20
    1bde:	bb 0b       	sbc	r27, r27
    1be0:	20 e1       	ldi	r18, 0x10	; 16
    1be2:	3e e0       	ldi	r19, 0x0E	; 14
    1be4:	0e 94 2e 42 	call	0x845c	; 0x845c <__usmulhisi3>
    1be8:	4b 01       	movw	r8, r22
    1bea:	5c 01       	movw	r10, r24
    1bec:	25 2f       	mov	r18, r21
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	ac e3       	ldi	r26, 0x3C	; 60
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	0e 94 1f 42 	call	0x843e	; 0x843e <__umulhisi3>
    1bf8:	a5 01       	movw	r20, r10
    1bfa:	94 01       	movw	r18, r8
    1bfc:	26 1b       	sub	r18, r22
    1bfe:	37 0b       	sbc	r19, r23
    1c00:	48 0b       	sbc	r20, r24
    1c02:	59 0b       	sbc	r21, r25
    1c04:	ca 01       	movw	r24, r20
    1c06:	b9 01       	movw	r22, r18
    1c08:	6c 0d       	add	r22, r12
    1c0a:	7d 1d       	adc	r23, r13
    1c0c:	8e 1d       	adc	r24, r14
    1c0e:	9f 1d       	adc	r25, r15
    1c10:	a8 01       	movw	r20, r16
    1c12:	eb de       	rcall	.-554    	; 0x19ea <calendar_timestamp_to_date>
				(SECS_PER_MINUTE * min)), date_out);
	}
}
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	df 90       	pop	r13
    1c1e:	cf 90       	pop	r12
    1c20:	bf 90       	pop	r11
    1c22:	af 90       	pop	r10
    1c24:	9f 90       	pop	r9
    1c26:	8f 90       	pop	r8
    1c28:	08 95       	ret

00001c2a <calendar_date_to_timestamp>:
 *
 * \return The corresponding UNIX timestamp
 * \retval 0 if date is not valid
 */
uint32_t calendar_date_to_timestamp(struct calendar_date *date)
{
    1c2a:	8f 92       	push	r8
    1c2c:	9f 92       	push	r9
    1c2e:	af 92       	push	r10
    1c30:	bf 92       	push	r11
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	7c 01       	movw	r14, r24

	// Make sure date is valid
	if (!calendar_is_date_valid(date))
    1c44:	91 de       	rcall	.-734    	; 0x1968 <calendar_is_date_valid>
    1c46:	88 23       	and	r24, r24
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <calendar_date_to_timestamp+0x22>
    1c4a:	74 c0       	rjmp	.+232    	; 0x1d34 <calendar_date_to_timestamp+0x10a>

	uint32_t timestamp = 0;
	uint8_t date_month;
	uint16_t date_year;

	date_month = date->month;
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	14 81       	ldd	r17, Z+4	; 0x04
	date_year = date->year;
    1c50:	c5 81       	ldd	r28, Z+5	; 0x05
    1c52:	d6 81       	ldd	r29, Z+6	; 0x06

	// Add number of seconds elapsed in current month
	timestamp += (date->date * SECS_PER_DAY) + (date->hour * SECS_PER_HOUR) +
			(date->minute * SECS_PER_MINUTE) + date->second;
    1c54:	a3 81       	ldd	r26, Z+3	; 0x03
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	20 e8       	ldi	r18, 0x80	; 128
    1c5a:	31 e5       	ldi	r19, 0x51	; 81
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	0e 94 34 42 	call	0x8468	; 0x8468 <__muluhisi3>
    1c64:	4b 01       	movw	r8, r22
    1c66:	5c 01       	movw	r10, r24
    1c68:	22 81       	ldd	r18, Z+2	; 0x02
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	a0 e1       	ldi	r26, 0x10	; 16
    1c6e:	be e0       	ldi	r27, 0x0E	; 14
    1c70:	0e 94 1f 42 	call	0x843e	; 0x843e <__umulhisi3>
    1c74:	86 0e       	add	r8, r22
    1c76:	97 1e       	adc	r9, r23
    1c78:	a8 1e       	adc	r10, r24
    1c7a:	b9 1e       	adc	r11, r25
    1c7c:	80 81       	ld	r24, Z
    1c7e:	88 0e       	add	r8, r24
    1c80:	91 1c       	adc	r9, r1
    1c82:	a1 1c       	adc	r10, r1
    1c84:	b1 1c       	adc	r11, r1
    1c86:	21 81       	ldd	r18, Z+1	; 0x01
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	ac e3       	ldi	r26, 0x3C	; 60
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	0e 94 1f 42 	call	0x843e	; 0x843e <__umulhisi3>
    1c92:	75 01       	movw	r14, r10
    1c94:	64 01       	movw	r12, r8
    1c96:	c6 0e       	add	r12, r22
    1c98:	d7 1e       	adc	r13, r23
    1c9a:	e8 1e       	adc	r14, r24
    1c9c:	f9 1e       	adc	r15, r25

	while (date_month != 0) {
    1c9e:	11 23       	and	r17, r17
    1ca0:	01 f1       	breq	.+64     	; 0x1ce2 <calendar_date_to_timestamp+0xb8>
		date_month--;
		// Add number of seconds in months of current year
		timestamp += month[calendar_leapyear(date_year)][date_month]
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	2a de       	rcall	.-940    	; 0x18fa <calendar_leapyear>
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	fc 01       	movw	r30, r24
    1caa:	ee 0f       	add	r30, r30
    1cac:	ff 1f       	adc	r31, r31
    1cae:	e8 0f       	add	r30, r24
    1cb0:	f9 1f       	adc	r31, r25
    1cb2:	ee 0f       	add	r30, r30
    1cb4:	ff 1f       	adc	r31, r31
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	ed 55       	subi	r30, 0x5D	; 93
    1cbc:	fe 4d       	sbci	r31, 0xDE	; 222
	// Add number of seconds elapsed in current month
	timestamp += (date->date * SECS_PER_DAY) + (date->hour * SECS_PER_HOUR) +
			(date->minute * SECS_PER_MINUTE) + date->second;

	while (date_month != 0) {
		date_month--;
    1cbe:	11 50       	subi	r17, 0x01	; 1
		// Add number of seconds in months of current year
		timestamp += month[calendar_leapyear(date_year)][date_month]
    1cc0:	df 01       	movw	r26, r30
    1cc2:	a1 0f       	add	r26, r17
    1cc4:	b1 1d       	adc	r27, r1
    1cc6:	ac 91       	ld	r26, X
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	20 e8       	ldi	r18, 0x80	; 128
    1ccc:	31 e5       	ldi	r19, 0x51	; 81
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	0e 94 34 42 	call	0x8468	; 0x8468 <__muluhisi3>
    1cd6:	c6 0e       	add	r12, r22
    1cd8:	d7 1e       	adc	r13, r23
    1cda:	e8 1e       	adc	r14, r24
    1cdc:	f9 1e       	adc	r15, r25

	// Add number of seconds elapsed in current month
	timestamp += (date->date * SECS_PER_DAY) + (date->hour * SECS_PER_HOUR) +
			(date->minute * SECS_PER_MINUTE) + date->second;

	while (date_month != 0) {
    1cde:	11 11       	cpse	r17, r1
    1ce0:	ee cf       	rjmp	.-36     	; 0x1cbe <calendar_date_to_timestamp+0x94>
		date_month--;
		// Add number of seconds in months of current year
		timestamp += month[calendar_leapyear(date_year)][date_month]
				* SECS_PER_DAY;
	}
	while (date_year > EPOCH_YEAR) {
    1ce2:	c3 3b       	cpi	r28, 0xB3	; 179
    1ce4:	f7 e0       	ldi	r31, 0x07	; 7
    1ce6:	df 07       	cpc	r29, r31
    1ce8:	50 f1       	brcs	.+84     	; 0x1d3e <calendar_date_to_timestamp+0x114>
static uint16_t calendar_yearsize(uint16_t year)
{
	if (calendar_leapyear(year)) {
		return 366;
	} else {
		return 365;
    1cea:	0d e6       	ldi	r16, 0x6D	; 109
    1cec:	11 e0       	ldi	r17, 0x01	; 1
 * \retval 365 if the year is not a leap year
 */
static uint16_t calendar_yearsize(uint16_t year)
{
	if (calendar_leapyear(year)) {
		return 366;
    1cee:	0f 2e       	mov	r0, r31
    1cf0:	fe e6       	ldi	r31, 0x6E	; 110
    1cf2:	af 2e       	mov	r10, r31
    1cf4:	f0 2d       	mov	r31, r0
    1cf6:	bb 24       	eor	r11, r11
    1cf8:	b3 94       	inc	r11
 * \retval 366 if the year is a leap year
 * \retval 365 if the year is not a leap year
 */
static uint16_t calendar_yearsize(uint16_t year)
{
	if (calendar_leapyear(year)) {
    1cfa:	21 97       	sbiw	r28, 0x01	; 1
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	fd dd       	rcall	.-1030   	; 0x18fa <calendar_leapyear>
    1d00:	81 11       	cpse	r24, r1
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <calendar_date_to_timestamp+0xe0>
		return 366;
	} else {
		return 365;
    1d04:	a0 2f       	mov	r26, r16
    1d06:	b1 2f       	mov	r27, r17
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <calendar_date_to_timestamp+0xe4>
 * \retval 365 if the year is not a leap year
 */
static uint16_t calendar_yearsize(uint16_t year)
{
	if (calendar_leapyear(year)) {
		return 366;
    1d0a:	aa 2d       	mov	r26, r10
    1d0c:	bb 2d       	mov	r27, r11
				* SECS_PER_DAY;
	}
	while (date_year > EPOCH_YEAR) {
		date_year--;
		// Add number of seconds in all years since epoch year
		timestamp += calendar_yearsize(date_year) * SECS_PER_DAY;
    1d0e:	20 e8       	ldi	r18, 0x80	; 128
    1d10:	31 e5       	ldi	r19, 0x51	; 81
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	0e 94 34 42 	call	0x8468	; 0x8468 <__muluhisi3>
    1d1a:	c6 0e       	add	r12, r22
    1d1c:	d7 1e       	adc	r13, r23
    1d1e:	e8 1e       	adc	r14, r24
    1d20:	f9 1e       	adc	r15, r25
		date_month--;
		// Add number of seconds in months of current year
		timestamp += month[calendar_leapyear(date_year)][date_month]
				* SECS_PER_DAY;
	}
	while (date_year > EPOCH_YEAR) {
    1d22:	c2 3b       	cpi	r28, 0xB2	; 178
    1d24:	87 e0       	ldi	r24, 0x07	; 7
    1d26:	d8 07       	cpc	r29, r24
    1d28:	41 f7       	brne	.-48     	; 0x1cfa <calendar_date_to_timestamp+0xd0>
		date_year--;
		// Add number of seconds in all years since epoch year
		timestamp += calendar_yearsize(date_year) * SECS_PER_DAY;
    1d2a:	6c 2d       	mov	r22, r12
    1d2c:	7d 2d       	mov	r23, r13
    1d2e:	8e 2d       	mov	r24, r14
    1d30:	9f 2d       	mov	r25, r15
    1d32:	09 c0       	rjmp	.+18     	; 0x1d46 <calendar_date_to_timestamp+0x11c>
uint32_t calendar_date_to_timestamp(struct calendar_date *date)
{

	// Make sure date is valid
	if (!calendar_is_date_valid(date))
		return 0;
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	04 c0       	rjmp	.+8      	; 0x1d46 <calendar_date_to_timestamp+0x11c>
		date_month--;
		// Add number of seconds in months of current year
		timestamp += month[calendar_leapyear(date_year)][date_month]
				* SECS_PER_DAY;
	}
	while (date_year > EPOCH_YEAR) {
    1d3e:	6c 2d       	mov	r22, r12
    1d40:	7d 2d       	mov	r23, r13
    1d42:	8e 2d       	mov	r24, r14
    1d44:	9f 2d       	mov	r25, r15
		// Add number of seconds in all years since epoch year
		timestamp += calendar_yearsize(date_year) * SECS_PER_DAY;
	}

	return timestamp;
}
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	cf 90       	pop	r12
    1d56:	bf 90       	pop	r11
    1d58:	af 90       	pop	r10
    1d5a:	9f 90       	pop	r9
    1d5c:	8f 90       	pop	r8
    1d5e:	08 95       	ret

00001d60 <calendar_date_to_timestamp_tz>:
 * \return The corresponding UNIX timestamp
 * \retval 0 if date is not valid
 */
uint32_t calendar_date_to_timestamp_tz(struct calendar_date *date, int8_t hour,
		uint8_t min)
{
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	c6 2f       	mov	r28, r22
    1d76:	d4 2f       	mov	r29, r20
	uint32_t timestamp = calendar_date_to_timestamp(date);
    1d78:	58 df       	rcall	.-336    	; 0x1c2a <calendar_date_to_timestamp>
    1d7a:	6b 01       	movw	r12, r22
    1d7c:	7c 01       	movw	r14, r24
	if (timestamp == 0) {
    1d7e:	67 2b       	or	r22, r23
    1d80:	68 2b       	or	r22, r24
    1d82:	69 2b       	or	r22, r25
    1d84:	e1 f1       	breq	.+120    	; 0x1dfe <calendar_date_to_timestamp_tz+0x9e>
		return 0;
	} else {
		// Subtract the seconds of offset in time zone offset from timestamp
		if (hour >= 0) {
    1d86:	cc 23       	and	r28, r28
    1d88:	f4 f0       	brlt	.+60     	; 0x1dc6 <calendar_date_to_timestamp_tz+0x66>
			return (timestamp - (SECS_PER_HOUR * hour + SECS_PER_MINUTE *
    1d8a:	ac 2f       	mov	r26, r28
    1d8c:	cc 0f       	add	r28, r28
    1d8e:	bb 0b       	sbc	r27, r27
    1d90:	20 e1       	ldi	r18, 0x10	; 16
    1d92:	3e e0       	ldi	r19, 0x0E	; 14
    1d94:	0e 94 2e 42 	call	0x845c	; 0x845c <__usmulhisi3>
    1d98:	4b 01       	movw	r8, r22
    1d9a:	5c 01       	movw	r10, r24
    1d9c:	2d 2f       	mov	r18, r29
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	ac e3       	ldi	r26, 0x3C	; 60
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	0e 94 1f 42 	call	0x843e	; 0x843e <__umulhisi3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	88 0d       	add	r24, r8
    1dae:	99 1d       	adc	r25, r9
    1db0:	aa 1d       	adc	r26, r10
    1db2:	bb 1d       	adc	r27, r11
    1db4:	a7 01       	movw	r20, r14
    1db6:	96 01       	movw	r18, r12
    1db8:	28 1b       	sub	r18, r24
    1dba:	39 0b       	sbc	r19, r25
    1dbc:	4a 0b       	sbc	r20, r26
    1dbe:	5b 0b       	sbc	r21, r27
    1dc0:	ca 01       	movw	r24, r20
    1dc2:	b9 01       	movw	r22, r18
    1dc4:	1f c0       	rjmp	.+62     	; 0x1e04 <calendar_date_to_timestamp_tz+0xa4>
					min));
		} else {
			return (timestamp - (SECS_PER_HOUR * hour - SECS_PER_MINUTE *
    1dc6:	2d 2f       	mov	r18, r29
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	ac e3       	ldi	r26, 0x3C	; 60
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	0e 94 1f 42 	call	0x843e	; 0x843e <__umulhisi3>
    1dd2:	4b 01       	movw	r8, r22
    1dd4:	5c 01       	movw	r10, r24
    1dd6:	ac 2f       	mov	r26, r28
    1dd8:	cc 0f       	add	r28, r28
    1dda:	bb 0b       	sbc	r27, r27
    1ddc:	20 e1       	ldi	r18, 0x10	; 16
    1dde:	3e e0       	ldi	r19, 0x0E	; 14
    1de0:	0e 94 2e 42 	call	0x845c	; 0x845c <__usmulhisi3>
    1de4:	a5 01       	movw	r20, r10
    1de6:	94 01       	movw	r18, r8
    1de8:	26 1b       	sub	r18, r22
    1dea:	37 0b       	sbc	r19, r23
    1dec:	48 0b       	sbc	r20, r24
    1dee:	59 0b       	sbc	r21, r25
    1df0:	ca 01       	movw	r24, r20
    1df2:	b9 01       	movw	r22, r18
    1df4:	6c 0d       	add	r22, r12
    1df6:	7d 1d       	adc	r23, r13
    1df8:	8e 1d       	adc	r24, r14
    1dfa:	9f 1d       	adc	r25, r15
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <calendar_date_to_timestamp_tz+0xa4>
uint32_t calendar_date_to_timestamp_tz(struct calendar_date *date, int8_t hour,
		uint8_t min)
{
	uint32_t timestamp = calendar_date_to_timestamp(date);
	if (timestamp == 0) {
		return 0;
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	cb 01       	movw	r24, r22
		} else {
			return (timestamp - (SECS_PER_HOUR * hour - SECS_PER_MINUTE *
					min));
		}
	}
}
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	ff 90       	pop	r15
    1e0a:	ef 90       	pop	r14
    1e0c:	df 90       	pop	r13
    1e0e:	cf 90       	pop	r12
    1e10:	bf 90       	pop	r11
    1e12:	af 90       	pop	r10
    1e14:	9f 90       	pop	r9
    1e16:	8f 90       	pop	r8
    1e18:	08 95       	ret

00001e1a <calendar_time_between_dates>:
 * \param date_out         The time between the dates
 *
 */
void calendar_time_between_dates(struct calendar_date *date_end,
		struct calendar_date *date_start, struct calendar_date *date_out)
{
    1e1a:	8f 92       	push	r8
    1e1c:	9f 92       	push	r9
    1e1e:	af 92       	push	r10
    1e20:	bf 92       	push	r11
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	ec 01       	movw	r28, r24
    1e32:	8b 01       	movw	r16, r22
    1e34:	7a 01       	movw	r14, r20
	uint32_t timestamp_start;
	uint32_t timestamp_end;
	struct calendar_date *temp;

	timestamp_start = calendar_date_to_timestamp(date_start);
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 de       	rcall	.-528    	; 0x1c2a <calendar_date_to_timestamp>
    1e3a:	4b 01       	movw	r8, r22
    1e3c:	5c 01       	movw	r10, r24
	timestamp_end = calendar_date_to_timestamp(date_end);
    1e3e:	ce 01       	movw	r24, r28
    1e40:	f4 de       	rcall	.-536    	; 0x1c2a <calendar_date_to_timestamp>

	// Switch dates if date_end is before date_start
	if (timestamp_end < timestamp_start) {
    1e42:	68 15       	cp	r22, r8
    1e44:	79 05       	cpc	r23, r9
    1e46:	8a 05       	cpc	r24, r10
    1e48:	9b 05       	cpc	r25, r11
    1e4a:	28 f4       	brcc	.+10     	; 0x1e56 <calendar_time_between_dates+0x3c>
    1e4c:	9c 2f       	mov	r25, r28
    1e4e:	8d 2f       	mov	r24, r29
		temp = date_end;
		date_end = date_start;
    1e50:	e8 01       	movw	r28, r16
		date_start = temp;
    1e52:	09 2f       	mov	r16, r25
    1e54:	18 2f       	mov	r17, r24
	}

	// Calculate number of years
	date_out->year = date_end->year - date_start->year;
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	25 81       	ldd	r18, Z+5	; 0x05
    1e5e:	36 81       	ldd	r19, Z+6	; 0x06
    1e60:	82 1b       	sub	r24, r18
    1e62:	93 0b       	sbc	r25, r19
    1e64:	f7 01       	movw	r30, r14
    1e66:	85 83       	std	Z+5, r24	; 0x05
    1e68:	96 83       	std	Z+6, r25	; 0x06

	// Check if months wrap around new year
	if (date_end->month - date_start->month < 0 ) {
    1e6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6c:	82 2f       	mov	r24, r18
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	f8 01       	movw	r30, r16
    1e72:	34 81       	ldd	r19, Z+4	; 0x04
    1e74:	83 1b       	sub	r24, r19
    1e76:	91 09       	sbc	r25, r1
    1e78:	52 f4       	brpl	.+20     	; 0x1e8e <calendar_time_between_dates+0x74>
		date_end->month += 12;
    1e7a:	24 5f       	subi	r18, 0xF4	; 244
    1e7c:	2c 83       	std	Y+4, r18	; 0x04
		if (date_out->year != 0) {
    1e7e:	f7 01       	movw	r30, r14
    1e80:	85 81       	ldd	r24, Z+5	; 0x05
    1e82:	96 81       	ldd	r25, Z+6	; 0x06
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	19 f0       	breq	.+6      	; 0x1e8e <calendar_time_between_dates+0x74>
			date_out->year--;
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	85 83       	std	Z+5, r24	; 0x05
    1e8c:	96 83       	std	Z+6, r25	; 0x06
		}
	}
	// Calculate number of months
	date_out->month = date_end->month - date_start->month;
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	f8 01       	movw	r30, r16
    1e92:	94 81       	ldd	r25, Z+4	; 0x04
    1e94:	89 1b       	sub	r24, r25
    1e96:	f7 01       	movw	r30, r14
    1e98:	84 83       	std	Z+4, r24	; 0x04

	// Check if dates wrap around month
	if(date_end->date - date_start->date < 0) {
    1e9a:	db 80       	ldd	r13, Y+3	; 0x03
    1e9c:	8d 2d       	mov	r24, r13
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	23 81       	ldd	r18, Z+3	; 0x03
    1ea4:	82 1b       	sub	r24, r18
    1ea6:	91 09       	sbc	r25, r1
    1ea8:	e2 f4       	brpl	.+56     	; 0x1ee2 <calendar_time_between_dates+0xc8>
		// Add number of days in last month to get number of days correct
		date_end->date +=
			month[calendar_leapyear(date_end->year)][date_end->month-1];
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	25 dd       	rcall	.-1462   	; 0x18fa <calendar_leapyear>
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	e8 0f       	add	r30, r24
    1ebc:	f9 1f       	adc	r31, r25
    1ebe:	ee 0f       	add	r30, r30
    1ec0:	ff 1f       	adc	r31, r31
    1ec2:	ee 0f       	add	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	ed 55       	subi	r30, 0x5D	; 93
    1ec8:	fe 4d       	sbci	r31, 0xDE	; 222
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f1 1d       	adc	r31, r1
    1ece:	31 97       	sbiw	r30, 0x01	; 1
	date_out->month = date_end->month - date_start->month;

	// Check if dates wrap around month
	if(date_end->date - date_start->date < 0) {
		// Add number of days in last month to get number of days correct
		date_end->date +=
    1ed0:	80 81       	ld	r24, Z
    1ed2:	d8 0e       	add	r13, r24
    1ed4:	db 82       	std	Y+3, r13	; 0x03
			month[calendar_leapyear(date_end->year)][date_end->month-1];
		if (date_out->month != 0) {
    1ed6:	f7 01       	movw	r30, r14
    1ed8:	84 81       	ldd	r24, Z+4	; 0x04
    1eda:	88 23       	and	r24, r24
    1edc:	11 f0       	breq	.+4      	; 0x1ee2 <calendar_time_between_dates+0xc8>
			date_out->month--;
    1ede:	81 50       	subi	r24, 0x01	; 1
    1ee0:	84 83       	std	Z+4, r24	; 0x04
		}
	}
	// Calculate number of days
	date_out->date = date_end->date - date_start->date;
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	89 1b       	sub	r24, r25
    1eea:	f7 01       	movw	r30, r14
    1eec:	83 83       	std	Z+3, r24	; 0x03

	// Check if hours wrap around midnight
	if (date_end->hour - date_start->hour < 0) {
    1eee:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef0:	82 2f       	mov	r24, r18
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	32 81       	ldd	r19, Z+2	; 0x02
    1ef8:	83 1b       	sub	r24, r19
    1efa:	91 09       	sbc	r25, r1
    1efc:	42 f4       	brpl	.+16     	; 0x1f0e <calendar_time_between_dates+0xf4>
		date_end->hour += 24;
    1efe:	28 5e       	subi	r18, 0xE8	; 232
    1f00:	2a 83       	std	Y+2, r18	; 0x02
		if (date_out->date != 0) {
    1f02:	f7 01       	movw	r30, r14
    1f04:	83 81       	ldd	r24, Z+3	; 0x03
    1f06:	88 23       	and	r24, r24
    1f08:	11 f0       	breq	.+4      	; 0x1f0e <calendar_time_between_dates+0xf4>
			date_out->date--;
    1f0a:	81 50       	subi	r24, 0x01	; 1
    1f0c:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	// Calculate number of hours
	date_out->hour = date_end->hour - date_start->hour;
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	f8 01       	movw	r30, r16
    1f12:	92 81       	ldd	r25, Z+2	; 0x02
    1f14:	89 1b       	sub	r24, r25
    1f16:	f7 01       	movw	r30, r14
    1f18:	82 83       	std	Z+2, r24	; 0x02

	// Check if minutes wrap around hour
	if (date_end->minute - date_start->minute < 0) {
    1f1a:	29 81       	ldd	r18, Y+1	; 0x01
    1f1c:	82 2f       	mov	r24, r18
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	f8 01       	movw	r30, r16
    1f22:	31 81       	ldd	r19, Z+1	; 0x01
    1f24:	83 1b       	sub	r24, r19
    1f26:	91 09       	sbc	r25, r1
    1f28:	42 f4       	brpl	.+16     	; 0x1f3a <calendar_time_between_dates+0x120>
		date_end->minute += 60;
    1f2a:	24 5c       	subi	r18, 0xC4	; 196
    1f2c:	29 83       	std	Y+1, r18	; 0x01
		if (date_out->hour != 0) {
    1f2e:	f7 01       	movw	r30, r14
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	88 23       	and	r24, r24
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <calendar_time_between_dates+0x120>
			date_out->hour--;
    1f36:	81 50       	subi	r24, 0x01	; 1
    1f38:	82 83       	std	Z+2, r24	; 0x02
		}
	}
	// Calculate number of minutes
	date_out->minute = date_end->minute - date_start->minute;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	89 1b       	sub	r24, r25
    1f42:	f7 01       	movw	r30, r14
    1f44:	81 83       	std	Z+1, r24	; 0x01

	// Check if seconds wrap around minute
	if (date_end->second - date_start->second < 0) {
    1f46:	28 81       	ld	r18, Y
    1f48:	82 2f       	mov	r24, r18
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	30 81       	ld	r19, Z
    1f50:	83 1b       	sub	r24, r19
    1f52:	91 09       	sbc	r25, r1
    1f54:	42 f4       	brpl	.+16     	; 0x1f66 <calendar_time_between_dates+0x14c>
		date_end->second += 60;
    1f56:	24 5c       	subi	r18, 0xC4	; 196
    1f58:	28 83       	st	Y, r18
		if (date_out->minute != 0) {
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	81 81       	ldd	r24, Z+1	; 0x01
    1f5e:	88 23       	and	r24, r24
    1f60:	11 f0       	breq	.+4      	; 0x1f66 <calendar_time_between_dates+0x14c>
			date_out->minute--;
    1f62:	81 50       	subi	r24, 0x01	; 1
    1f64:	81 83       	std	Z+1, r24	; 0x01
		}
	}
	// Calculate number of seconds
	date_out->second = date_end->second - date_start->second;
    1f66:	88 81       	ld	r24, Y
    1f68:	f8 01       	movw	r30, r16
    1f6a:	90 81       	ld	r25, Z
    1f6c:	89 1b       	sub	r24, r25
    1f6e:	f7 01       	movw	r30, r14
    1f70:	80 83       	st	Z, r24

}
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	08 95       	ret

00001f8a <calendar_add_second_to_date>:
 *
 * \param date The date to add a second to
 *
 */
void calendar_add_second_to_date(struct calendar_date *date)
{
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	fc 01       	movw	r30, r24
	// Check if input date is valid
	Assert(calendar_is_date_valid(date));

	if (++date->second == 60) {
    1f98:	90 81       	ld	r25, Z
    1f9a:	9f 5f       	subi	r25, 0xFF	; 255
    1f9c:	9c 33       	cpi	r25, 0x3C	; 60
    1f9e:	11 f0       	breq	.+4      	; 0x1fa4 <calendar_add_second_to_date+0x1a>
    1fa0:	90 83       	st	Z, r25
    1fa2:	40 c0       	rjmp	.+128    	; 0x2024 <calendar_add_second_to_date+0x9a>
    1fa4:	ef 01       	movw	r28, r30
		date->second = 0;
    1fa6:	10 82       	st	Z, r1
 * \param *date the date to add a minute to
 *
 */
static void calendar_add_minute_to_date(struct calendar_date *date)
{
	uint8_t minute = date->minute;
    1fa8:	81 81       	ldd	r24, Z+1	; 0x01
	minute++;
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
	if (minute == 60){
    1fac:	8c 33       	cpi	r24, 0x3C	; 60
    1fae:	c9 f5       	brne	.+114    	; 0x2022 <calendar_add_second_to_date+0x98>
 *
 */
static void calendar_add_hour_to_date(struct calendar_date *date)
{
	int8_t hour = date->hour;
	hour++;
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	8f 5f       	subi	r24, 0xFF	; 255
	if (hour == 24){
    1fb4:	88 31       	cpi	r24, 0x18	; 24
    1fb6:	99 f5       	brne	.+102    	; 0x201e <calendar_add_second_to_date+0x94>
 * \param *date the date to add a day to
 *
 */
static void calendar_add_day_to_date(struct calendar_date *date)
{
	uint8_t dates = date->date;
    1fb8:	f3 80       	ldd	r15, Z+3	; 0x03
	uint8_t months = date->month;
    1fba:	e4 80       	ldd	r14, Z+4	; 0x04
	uint8_t year = date->year;
    1fbc:	05 81       	ldd	r16, Z+5	; 0x05
    1fbe:	16 81       	ldd	r17, Z+6	; 0x06

	dates++;
    1fc0:	f3 94       	inc	r15
	if (dates == month[calendar_leapyear(year)][months]) {
    1fc2:	c8 01       	movw	r24, r16
    1fc4:	99 27       	eor	r25, r25
    1fc6:	99 dc       	rcall	.-1742   	; 0x18fa <calendar_leapyear>
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	fc 01       	movw	r30, r24
    1fcc:	ee 0f       	add	r30, r30
    1fce:	ff 1f       	adc	r31, r31
    1fd0:	e8 0f       	add	r30, r24
    1fd2:	f9 1f       	adc	r31, r25
    1fd4:	ee 0f       	add	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	ed 55       	subi	r30, 0x5D	; 93
    1fde:	fe 4d       	sbci	r31, 0xDE	; 222
    1fe0:	ee 0d       	add	r30, r14
    1fe2:	f1 1d       	adc	r31, r1
    1fe4:	80 81       	ld	r24, Z
    1fe6:	f8 12       	cpse	r15, r24
    1fe8:	11 c0       	rjmp	.+34     	; 0x200c <calendar_add_second_to_date+0x82>
 *
 */
static void calendar_add_month_to_date(struct calendar_date *date)
{
	uint8_t months = date->month;
	months++;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	8e 0d       	add	r24, r14
	if (months == 12){
    1fee:	8c 30       	cpi	r24, 0x0C	; 12
    1ff0:	59 f4       	brne	.+22     	; 0x2008 <calendar_add_second_to_date+0x7e>
 * \param *date the date to add a year to
 *
 */
static void calendar_add_year_to_date(struct calendar_date *date)
{
	if (date->year < 2105) {
    1ff2:	09 33       	cpi	r16, 0x39	; 57
    1ff4:	88 e0       	ldi	r24, 0x08	; 8
    1ff6:	18 07       	cpc	r17, r24
    1ff8:	30 f4       	brcc	.+12     	; 0x2006 <calendar_add_second_to_date+0x7c>
		date->year++;
    1ffa:	0f 5f       	subi	r16, 0xFF	; 255
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	0d 83       	std	Y+5, r16	; 0x05
    2000:	1e 83       	std	Y+6, r17	; 0x06
static void calendar_add_month_to_date(struct calendar_date *date)
{
	uint8_t months = date->month;
	months++;
	if (months == 12){
		months = 0;
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <calendar_add_second_to_date+0x7e>
    2006:	80 e0       	ldi	r24, 0x00	; 0
		calendar_add_year_to_date(date);
	}
	date->month = months;
    2008:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t months = date->month;
	uint8_t year = date->year;

	dates++;
	if (dates == month[calendar_leapyear(year)][months]) {
		dates = 0;
    200a:	f1 2c       	mov	r15, r1
		calendar_add_month_to_date(date);
	}
	date->dayofweek++;
    200c:	8f 81       	ldd	r24, Y+7	; 0x07
    200e:	8f 5f       	subi	r24, 0xFF	; 255
	if (date->dayofweek == 7) {
    2010:	87 30       	cpi	r24, 0x07	; 7
    2012:	11 f0       	breq	.+4      	; 0x2018 <calendar_add_second_to_date+0x8e>
	dates++;
	if (dates == month[calendar_leapyear(year)][months]) {
		dates = 0;
		calendar_add_month_to_date(date);
	}
	date->dayofweek++;
    2014:	8f 83       	std	Y+7, r24	; 0x07
    2016:	01 c0       	rjmp	.+2      	; 0x201a <calendar_add_second_to_date+0x90>
	if (date->dayofweek == 7) {
		date->dayofweek = 0;
    2018:	1f 82       	std	Y+7, r1	; 0x07
	}
	date->date = dates;
    201a:	fb 82       	std	Y+3, r15	; 0x03
static void calendar_add_hour_to_date(struct calendar_date *date)
{
	int8_t hour = date->hour;
	hour++;
	if (hour == 24){
		hour = 0;
    201c:	80 e0       	ldi	r24, 0x00	; 0
		calendar_add_day_to_date(date);
	}
	date->hour = hour;
    201e:	8a 83       	std	Y+2, r24	; 0x02
static void calendar_add_minute_to_date(struct calendar_date *date)
{
	uint8_t minute = date->minute;
	minute++;
	if (minute == 60){
		minute = 0;
    2020:	80 e0       	ldi	r24, 0x00	; 0
		calendar_add_hour_to_date(date);
	}
	date->minute = minute;
    2022:	89 83       	std	Y+1, r24	; 0x01

	if (++date->second == 60) {
		date->second = 0;
		calendar_add_minute_to_date(date);
	}
}
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	08 95       	ret

00002032 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	27 97       	sbiw	r28, 0x07	; 7
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2044:	8f ef       	ldi	r24, 0xFF	; 255
    2046:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    204a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    204e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2052:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2056:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    205a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    205e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    2062:	64 e0       	ldi	r22, 0x04	; 4
    2064:	81 e4       	ldi	r24, 0x41	; 65
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 57 25 	call	0x4aae	; 0x4aae <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    206c:	6c e1       	ldi	r22, 0x1C	; 28
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    2076:	8a 83       	std	Y+2, r24	; 0x02
    2078:	6d e1       	ldi	r22, 0x1D	; 29
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    2082:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	21 f4       	brne	.+8      	; 0x2094 <sysclk_init+0x62>
		cal = 0x2340;
    208c:	80 e4       	ldi	r24, 0x40	; 64
    208e:	93 e2       	ldi	r25, 0x23	; 35
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	9a 83       	std	Y+2, r25	; 0x02
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	8b 83       	std	Y+3, r24	; 0x03
    209a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    209c:	e0 e6       	ldi	r30, 0x60	; 96
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    20a6:	8f b7       	in	r24, 0x3f	; 63
    20a8:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    20aa:	f8 94       	cli
	return flags;
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    20ae:	e0 e5       	ldi	r30, 0x50	; 80
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	82 60       	ori	r24, 0x02	; 2
    20b6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20b8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    20ba:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    20bc:	81 ff       	sbrs	r24, 1
    20be:	fd cf       	rjmp	.-6      	; 0x20ba <sysclk_init+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    20c0:	8f b7       	in	r24, 0x3f	; 63
    20c2:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    20c4:	f8 94       	cli
	return flags;
    20c6:	9f 81       	ldd	r25, Y+7	; 0x07
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    20c8:	00 e5       	ldi	r16, 0x50	; 80
    20ca:	10 e0       	ldi	r17, 0x00	; 0
    20cc:	d8 01       	movw	r26, r16
    20ce:	16 96       	adiw	r26, 0x06	; 6
    20d0:	8c 91       	ld	r24, X
    20d2:	16 97       	sbiw	r26, 0x06	; 6
    20d4:	89 7f       	andi	r24, 0xF9	; 249
    20d6:	16 96       	adiw	r26, 0x06	; 6
    20d8:	8c 93       	st	X, r24
    20da:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    20dc:	e0 e6       	ldi	r30, 0x60	; 96
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 e8       	ldi	r24, 0x80	; 128
    20e2:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    20e4:	8b eb       	ldi	r24, 0xBB	; 187
    20e6:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    20e8:	16 96       	adiw	r26, 0x06	; 6
    20ea:	8c 91       	ld	r24, X
    20ec:	16 97       	sbiw	r26, 0x06	; 6
    20ee:	84 60       	ori	r24, 0x04	; 4
    20f0:	16 96       	adiw	r26, 0x06	; 6
    20f2:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    20f4:	80 81       	ld	r24, Z
    20f6:	81 60       	ori	r24, 0x01	; 1
    20f8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20fa:	9f bf       	out	0x3f, r25	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	80 e4       	ldi	r24, 0x40	; 64
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 57 25 	call	0x4aae	; 0x4aae <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2106:	8f b7       	in	r24, 0x3f	; 63
    2108:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    210a:	f8 94       	cli
	return flags;
    210c:	9d 81       	ldd	r25, Y+5	; 0x05
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    210e:	f8 01       	movw	r30, r16
    2110:	80 81       	ld	r24, Z
    2112:	8e 7f       	andi	r24, 0xFE	; 254
    2114:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2116:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2118:	27 96       	adiw	r28, 0x07	; 7
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	08 95       	ret

00002128 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	1f 92       	push	r1
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2132:	9f b7       	in	r25, 0x3f	; 63
    2134:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2136:	f8 94       	cli
	return flags;
    2138:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    213a:	e8 2f       	mov	r30, r24
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	e0 59       	subi	r30, 0x90	; 144
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 95       	com	r22
    2144:	80 81       	ld	r24, Z
    2146:	68 23       	and	r22, r24
    2148:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    214a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    214c:	0f 90       	pop	r0
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	08 95       	ret

00002154 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	1f 92       	push	r1
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    215e:	9f b7       	in	r25, 0x3f	; 63
    2160:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2162:	f8 94       	cli
	return flags;
    2164:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2166:	e8 2f       	mov	r30, r24
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	e0 59       	subi	r30, 0x90	; 144
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	68 2b       	or	r22, r24
    2172:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2174:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2176:	0f 90       	pop	r0
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	08 95       	ret

0000217e <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	1f 92       	push	r1
    2184:	1f 92       	push	r1
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    218a:	86 30       	cpi	r24, 0x06	; 6
    218c:	11 f0       	breq	.+4      	; 0x2192 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    2192:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2194:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2198:	81 fd       	sbrc	r24, 1
    219a:	2a c0       	rjmp	.+84     	; 0x21f0 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    219c:	8f b7       	in	r24, 0x3f	; 63
    219e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    21a0:	f8 94       	cli
	return flags;
    21a2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    21a4:	e0 e5       	ldi	r30, 0x50	; 80
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	82 60       	ori	r24, 0x02	; 2
    21ac:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    21ae:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    21b0:	81 81       	ldd	r24, Z+1	; 0x01
    21b2:	81 ff       	sbrs	r24, 1
    21b4:	fd cf       	rjmp	.-6      	; 0x21b0 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    21b6:	8f b7       	in	r24, 0x3f	; 63
    21b8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    21ba:	f8 94       	cli
	return flags;
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    21be:	a0 e5       	ldi	r26, 0x50	; 80
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	16 96       	adiw	r26, 0x06	; 6
    21c4:	8c 91       	ld	r24, X
    21c6:	16 97       	sbiw	r26, 0x06	; 6
    21c8:	89 7f       	andi	r24, 0xF9	; 249
    21ca:	16 96       	adiw	r26, 0x06	; 6
    21cc:	8c 93       	st	X, r24
    21ce:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    21d0:	e0 e6       	ldi	r30, 0x60	; 96
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 e8       	ldi	r24, 0x80	; 128
    21d6:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    21d8:	8b eb       	ldi	r24, 0xBB	; 187
    21da:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    21dc:	16 96       	adiw	r26, 0x06	; 6
    21de:	8c 91       	ld	r24, X
    21e0:	16 97       	sbiw	r26, 0x06	; 6
    21e2:	84 60       	ori	r24, 0x04	; 4
    21e4:	16 96       	adiw	r26, 0x06	; 6
    21e6:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    21e8:	80 81       	ld	r24, Z
    21ea:	81 60       	ori	r24, 0x01	; 1
    21ec:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    21ee:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    21f0:	63 60       	ori	r22, 0x03	; 3
    21f2:	84 e4       	ldi	r24, 0x44	; 68
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 57 25 	call	0x4aae	; 0x4aae <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    21fa:	60 e4       	ldi	r22, 0x40	; 64
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	94 df       	rcall	.-216    	; 0x2128 <sysclk_enable_module>
}
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	08 95       	ret

0000220a <gfx_mono_st7565r_put_page>:
 */
void gfx_mono_st7565r_get_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_get_page(data, page, column, width);
    220a:	6f 92       	push	r6
    220c:	7f 92       	push	r7
    220e:	8f 92       	push	r8
    2210:	9f 92       	push	r9
    2212:	af 92       	push	r10
    2214:	bf 92       	push	r11
    2216:	cf 92       	push	r12
    2218:	df 92       	push	r13
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	1f 92       	push	r1
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	8c 01       	movw	r16, r24
    222e:	e6 2e       	mov	r14, r22
    2230:	f4 2e       	mov	r15, r20
    2232:	d2 2e       	mov	r13, r18
    2234:	11 d2       	rcall	.+1058   	; 0x2658 <gfx_mono_framebuffer_put_page>
    2236:	8e 2d       	mov	r24, r14
    2238:	8f 70       	andi	r24, 0x0F	; 15
    223a:	80 6b       	ori	r24, 0xB0	; 176
    223c:	e8 2e       	mov	r14, r24
    223e:	8b e2       	ldi	r24, 0x2B	; 43
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	be 01       	movw	r22, r28
    2244:	6f 5f       	subi	r22, 0xFF	; 255
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	80 ea       	ldi	r24, 0xA0	; 160
    224a:	99 e0       	ldi	r25, 0x09	; 9
    224c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    2256:	e0 ea       	ldi	r30, 0xA0	; 160
    2258:	f9 e0       	ldi	r31, 0x09	; 9
    225a:	81 81       	ldd	r24, Z+1	; 0x01
    225c:	85 ff       	sbrs	r24, 5
    225e:	fd cf       	rjmp	.-6      	; 0x225a <gfx_mono_st7565r_put_page+0x50>
    2260:	e0 92 a0 09 	sts	0x09A0, r14	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    2264:	e0 ea       	ldi	r30, 0xA0	; 160
    2266:	f9 e0       	ldi	r31, 0x09	; 9
    2268:	81 81       	ldd	r24, Z+1	; 0x01
    226a:	86 ff       	sbrs	r24, 6
    226c:	fd cf       	rjmp	.-6      	; 0x2268 <gfx_mono_st7565r_put_page+0x5e>
    226e:	e0 ea       	ldi	r30, 0xA0	; 160
    2270:	f9 e0       	ldi	r31, 0x09	; 9
    2272:	80 e4       	ldi	r24, 0x40	; 64
    2274:	81 83       	std	Z+1, r24	; 0x01
    2276:	80 81       	ld	r24, Z
    2278:	be 01       	movw	r22, r28
    227a:	6f 5f       	subi	r22, 0xFF	; 255
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	80 ea       	ldi	r24, 0xA0	; 160
    2280:	99 e0       	ldi	r25, 0x09	; 9
    2282:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
    2286:	8f 2d       	mov	r24, r15
    2288:	8f 77       	andi	r24, 0x7F	; 127
    228a:	82 95       	swap	r24
    228c:	8f 70       	andi	r24, 0x0F	; 15
    228e:	80 61       	ori	r24, 0x10	; 16
    2290:	e8 2e       	mov	r14, r24
    2292:	8b e2       	ldi	r24, 0x2B	; 43
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	be 01       	movw	r22, r28
    2298:	6f 5f       	subi	r22, 0xFF	; 255
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	80 ea       	ldi	r24, 0xA0	; 160
    229e:	99 e0       	ldi	r25, 0x09	; 9
    22a0:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    22aa:	e0 ea       	ldi	r30, 0xA0	; 160
    22ac:	f9 e0       	ldi	r31, 0x09	; 9
    22ae:	81 81       	ldd	r24, Z+1	; 0x01
    22b0:	85 ff       	sbrs	r24, 5
    22b2:	fd cf       	rjmp	.-6      	; 0x22ae <gfx_mono_st7565r_put_page+0xa4>
    22b4:	e0 92 a0 09 	sts	0x09A0, r14	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    22b8:	e0 ea       	ldi	r30, 0xA0	; 160
    22ba:	f9 e0       	ldi	r31, 0x09	; 9
    22bc:	81 81       	ldd	r24, Z+1	; 0x01
    22be:	86 ff       	sbrs	r24, 6
    22c0:	fd cf       	rjmp	.-6      	; 0x22bc <gfx_mono_st7565r_put_page+0xb2>
    22c2:	e0 ea       	ldi	r30, 0xA0	; 160
    22c4:	f9 e0       	ldi	r31, 0x09	; 9
    22c6:	80 e4       	ldi	r24, 0x40	; 64
    22c8:	81 83       	std	Z+1, r24	; 0x01
    22ca:	80 81       	ld	r24, Z
    22cc:	be 01       	movw	r22, r28
    22ce:	6f 5f       	subi	r22, 0xFF	; 255
    22d0:	7f 4f       	sbci	r23, 0xFF	; 255
    22d2:	80 ea       	ldi	r24, 0xA0	; 160
    22d4:	99 e0       	ldi	r25, 0x09	; 9
    22d6:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
    22da:	8f 2d       	mov	r24, r15
    22dc:	8f 70       	andi	r24, 0x0F	; 15
    22de:	f8 2e       	mov	r15, r24
    22e0:	8b e2       	ldi	r24, 0x2B	; 43
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	be 01       	movw	r22, r28
    22e6:	6f 5f       	subi	r22, 0xFF	; 255
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	80 ea       	ldi	r24, 0xA0	; 160
    22ec:	99 e0       	ldi	r25, 0x09	; 9
    22ee:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    22f8:	e0 ea       	ldi	r30, 0xA0	; 160
    22fa:	f9 e0       	ldi	r31, 0x09	; 9
    22fc:	81 81       	ldd	r24, Z+1	; 0x01
    22fe:	85 ff       	sbrs	r24, 5
    2300:	fd cf       	rjmp	.-6      	; 0x22fc <gfx_mono_st7565r_put_page+0xf2>
    2302:	f0 92 a0 09 	sts	0x09A0, r15	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    2306:	e0 ea       	ldi	r30, 0xA0	; 160
    2308:	f9 e0       	ldi	r31, 0x09	; 9
    230a:	81 81       	ldd	r24, Z+1	; 0x01
    230c:	86 ff       	sbrs	r24, 6
    230e:	fd cf       	rjmp	.-6      	; 0x230a <gfx_mono_st7565r_put_page+0x100>
    2310:	e0 ea       	ldi	r30, 0xA0	; 160
    2312:	f9 e0       	ldi	r31, 0x09	; 9
    2314:	80 e4       	ldi	r24, 0x40	; 64
    2316:	81 83       	std	Z+1, r24	; 0x01
    2318:	80 81       	ld	r24, Z
    231a:	be 01       	movw	r22, r28
    231c:	6f 5f       	subi	r22, 0xFF	; 255
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	80 ea       	ldi	r24, 0xA0	; 160
    2322:	99 e0       	ldi	r25, 0x09	; 9
    2324:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
    2328:	78 01       	movw	r14, r16
    232a:	da 94       	dec	r13
    232c:	ad 2c       	mov	r10, r13
    232e:	b1 2c       	mov	r11, r1
    2330:	ef ef       	ldi	r30, 0xFF	; 255
    2332:	ae 1a       	sub	r10, r30
    2334:	be 0a       	sbc	r11, r30
    2336:	a0 0e       	add	r10, r16
    2338:	b1 1e       	adc	r11, r17
    233a:	0f 2e       	mov	r0, r31
    233c:	fb e2       	ldi	r31, 0x2B	; 43
    233e:	6f 2e       	mov	r6, r31
    2340:	f0 2d       	mov	r31, r0
    2342:	00 ea       	ldi	r16, 0xA0	; 160
    2344:	19 e0       	ldi	r17, 0x09	; 9
    2346:	0f 2e       	mov	r0, r31
    2348:	f0 e6       	ldi	r31, 0x60	; 96
    234a:	cf 2e       	mov	r12, r31
    234c:	f6 e0       	ldi	r31, 0x06	; 6
    234e:	df 2e       	mov	r13, r31
    2350:	f0 2d       	mov	r31, r0
    2352:	99 24       	eor	r9, r9
    2354:	93 94       	inc	r9
    2356:	68 94       	set
    2358:	77 24       	eor	r7, r7
    235a:	76 f8       	bld	r7, 6
    235c:	f7 01       	movw	r30, r14
    235e:	81 90       	ld	r8, Z+
    2360:	7f 01       	movw	r14, r30
    2362:	69 82       	std	Y+1, r6	; 0x01
    2364:	be 01       	movw	r22, r28
    2366:	6f 5f       	subi	r22, 0xFF	; 255
    2368:	7f 4f       	sbci	r23, 0xFF	; 255
    236a:	c8 01       	movw	r24, r16
    236c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    2370:	f6 01       	movw	r30, r12
    2372:	95 82       	std	Z+5, r9	; 0x05
    2374:	f8 01       	movw	r30, r16
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	95 ff       	sbrs	r25, 5
    237a:	fc cf       	rjmp	.-8      	; 0x2374 <gfx_mono_st7565r_put_page+0x16a>
    237c:	80 82       	st	Z, r8
    237e:	f8 01       	movw	r30, r16
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	96 ff       	sbrs	r25, 6
    2384:	fc cf       	rjmp	.-8      	; 0x237e <gfx_mono_st7565r_put_page+0x174>
    2386:	71 82       	std	Z+1, r7	; 0x01
    2388:	80 81       	ld	r24, Z
    238a:	f6 01       	movw	r30, r12
    238c:	96 82       	std	Z+6, r9	; 0x06
    238e:	be 01       	movw	r22, r28
    2390:	6f 5f       	subi	r22, 0xFF	; 255
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	c8 01       	movw	r24, r16
    2396:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
    239a:	ea 14       	cp	r14, r10
    239c:	fb 04       	cpc	r15, r11
    239e:	f1 f6       	brne	.-68     	; 0x235c <gfx_mono_st7565r_put_page+0x152>
    23a0:	0f 90       	pop	r0
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	bf 90       	pop	r11
    23b4:	af 90       	pop	r10
    23b6:	9f 90       	pop	r9
    23b8:	8f 90       	pop	r8
    23ba:	7f 90       	pop	r7
    23bc:	6f 90       	pop	r6
    23be:	08 95       	ret

000023c0 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	1f 92       	push	r1
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	08 2f       	mov	r16, r24
    23d2:	f6 2e       	mov	r15, r22
    23d4:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
    23d6:	54 d1       	rcall	.+680    	; 0x2680 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    23d8:	0f 70       	andi	r16, 0x0F	; 15
    23da:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    23dc:	8b e2       	ldi	r24, 0x2B	; 43
    23de:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    23e0:	be 01       	movw	r22, r28
    23e2:	6f 5f       	subi	r22, 0xFF	; 255
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	80 ea       	ldi	r24, 0xA0	; 160
    23e8:	99 e0       	ldi	r25, 0x09	; 9
    23ea:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    23f4:	e0 ea       	ldi	r30, 0xA0	; 160
    23f6:	f9 e0       	ldi	r31, 0x09	; 9
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    23fa:	95 ff       	sbrs	r25, 5
    23fc:	fd cf       	rjmp	.-6      	; 0x23f8 <gfx_mono_st7565r_put_byte+0x38>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    23fe:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2402:	e0 ea       	ldi	r30, 0xA0	; 160
    2404:	f9 e0       	ldi	r31, 0x09	; 9
    2406:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2408:	86 ff       	sbrs	r24, 6
    240a:	fd cf       	rjmp	.-6      	; 0x2406 <gfx_mono_st7565r_put_byte+0x46>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    240c:	e0 ea       	ldi	r30, 0xA0	; 160
    240e:	f9 e0       	ldi	r31, 0x09	; 9
    2410:	80 e4       	ldi	r24, 0x40	; 64
    2412:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2414:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2416:	be 01       	movw	r22, r28
    2418:	6f 5f       	subi	r22, 0xFF	; 255
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	80 ea       	ldi	r24, 0xA0	; 160
    241e:	99 e0       	ldi	r25, 0x09	; 9
    2420:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
    2424:	0f 2d       	mov	r16, r15
    2426:	0f 77       	andi	r16, 0x7F	; 127
    2428:	02 95       	swap	r16
    242a:	0f 70       	andi	r16, 0x0F	; 15
    242c:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    242e:	8b e2       	ldi	r24, 0x2B	; 43
    2430:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2432:	be 01       	movw	r22, r28
    2434:	6f 5f       	subi	r22, 0xFF	; 255
    2436:	7f 4f       	sbci	r23, 0xFF	; 255
    2438:	80 ea       	ldi	r24, 0xA0	; 160
    243a:	99 e0       	ldi	r25, 0x09	; 9
    243c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2446:	e0 ea       	ldi	r30, 0xA0	; 160
    2448:	f9 e0       	ldi	r31, 0x09	; 9
    244a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    244c:	85 ff       	sbrs	r24, 5
    244e:	fd cf       	rjmp	.-6      	; 0x244a <gfx_mono_st7565r_put_byte+0x8a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2450:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2454:	e0 ea       	ldi	r30, 0xA0	; 160
    2456:	f9 e0       	ldi	r31, 0x09	; 9
    2458:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    245a:	86 ff       	sbrs	r24, 6
    245c:	fd cf       	rjmp	.-6      	; 0x2458 <gfx_mono_st7565r_put_byte+0x98>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    245e:	e0 ea       	ldi	r30, 0xA0	; 160
    2460:	f9 e0       	ldi	r31, 0x09	; 9
    2462:	80 e4       	ldi	r24, 0x40	; 64
    2464:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2466:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2468:	be 01       	movw	r22, r28
    246a:	6f 5f       	subi	r22, 0xFF	; 255
    246c:	7f 4f       	sbci	r23, 0xFF	; 255
    246e:	80 ea       	ldi	r24, 0xA0	; 160
    2470:	99 e0       	ldi	r25, 0x09	; 9
    2472:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
    2476:	0f 2d       	mov	r16, r15
    2478:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    247a:	8b e2       	ldi	r24, 0x2B	; 43
    247c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    247e:	be 01       	movw	r22, r28
    2480:	6f 5f       	subi	r22, 0xFF	; 255
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	80 ea       	ldi	r24, 0xA0	; 160
    2486:	99 e0       	ldi	r25, 0x09	; 9
    2488:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2492:	e0 ea       	ldi	r30, 0xA0	; 160
    2494:	f9 e0       	ldi	r31, 0x09	; 9
    2496:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2498:	85 ff       	sbrs	r24, 5
    249a:	fd cf       	rjmp	.-6      	; 0x2496 <gfx_mono_st7565r_put_byte+0xd6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    249c:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    24a0:	e0 ea       	ldi	r30, 0xA0	; 160
    24a2:	f9 e0       	ldi	r31, 0x09	; 9
    24a4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    24a6:	86 ff       	sbrs	r24, 6
    24a8:	fd cf       	rjmp	.-6      	; 0x24a4 <gfx_mono_st7565r_put_byte+0xe4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    24aa:	e0 ea       	ldi	r30, 0xA0	; 160
    24ac:	f9 e0       	ldi	r31, 0x09	; 9
    24ae:	80 e4       	ldi	r24, 0x40	; 64
    24b0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    24b2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    24b4:	be 01       	movw	r22, r28
    24b6:	6f 5f       	subi	r22, 0xFF	; 255
    24b8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ba:	80 ea       	ldi	r24, 0xA0	; 160
    24bc:	99 e0       	ldi	r25, 0x09	; 9
    24be:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    24c2:	8b e2       	ldi	r24, 0x2B	; 43
    24c4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    24c6:	be 01       	movw	r22, r28
    24c8:	6f 5f       	subi	r22, 0xFF	; 255
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	80 ea       	ldi	r24, 0xA0	; 160
    24ce:	99 e0       	ldi	r25, 0x09	; 9
    24d0:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    24da:	e0 ea       	ldi	r30, 0xA0	; 160
    24dc:	f9 e0       	ldi	r31, 0x09	; 9
    24de:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    24e0:	85 ff       	sbrs	r24, 5
    24e2:	fd cf       	rjmp	.-6      	; 0x24de <gfx_mono_st7565r_put_byte+0x11e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    24e4:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    24e8:	e0 ea       	ldi	r30, 0xA0	; 160
    24ea:	f9 e0       	ldi	r31, 0x09	; 9
    24ec:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    24ee:	86 ff       	sbrs	r24, 6
    24f0:	fd cf       	rjmp	.-6      	; 0x24ec <gfx_mono_st7565r_put_byte+0x12c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    24f2:	e0 ea       	ldi	r30, 0xA0	; 160
    24f4:	f9 e0       	ldi	r31, 0x09	; 9
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    24fa:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2502:	be 01       	movw	r22, r28
    2504:	6f 5f       	subi	r22, 0xFF	; 255
    2506:	7f 4f       	sbci	r23, 0xFF	; 255
    2508:	80 ea       	ldi	r24, 0xA0	; 160
    250a:	99 e0       	ldi	r25, 0x09	; 9
    250c:	0e 94 93 1a 	call	0x3526	; 0x3526 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
    2510:	0f 90       	pop	r0
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	ff 90       	pop	r15
    251c:	08 95       	ret

0000251e <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
    251e:	0f 93       	push	r16
    2520:	1f 93       	push	r17
    2522:	cf 93       	push	r28
    2524:	df 93       	push	r29
    2526:	1f 92       	push	r1
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
    252c:	8c eb       	ldi	r24, 0xBC	; 188
    252e:	92 e2       	ldi	r25, 0x22	; 34
    2530:	8e d0       	rcall	.+284    	; 0x264e <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
    2532:	07 d8       	rcall	.-4082   	; 0x1542 <st7565r_init>
    2534:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    253a:	6f 5f       	subi	r22, 0xFF	; 255
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	80 ea       	ldi	r24, 0xA0	; 160
    2540:	99 e0       	ldi	r25, 0x09	; 9
    2542:	db d7       	rcall	.+4022   	; 0x34fa <usart_spi_select_device>
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    254a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    254c:	f9 e0       	ldi	r31, 0x09	; 9
    254e:	81 81       	ldd	r24, Z+1	; 0x01
    2550:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2552:	fd cf       	rjmp	.-6      	; 0x254e <gfx_mono_st7565r_init+0x30>
    2554:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2556:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    255a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    255c:	f9 e0       	ldi	r31, 0x09	; 9
    255e:	81 81       	ldd	r24, Z+1	; 0x01
    2560:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2562:	fd cf       	rjmp	.-6      	; 0x255e <gfx_mono_st7565r_init+0x40>
    2564:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2566:	f9 e0       	ldi	r31, 0x09	; 9
    2568:	80 e4       	ldi	r24, 0x40	; 64
    256a:	81 83       	std	Z+1, r24	; 0x01
    256c:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    256e:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2570:	6f 5f       	subi	r22, 0xFF	; 255
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	80 ea       	ldi	r24, 0xA0	; 160
    2576:	99 e0       	ldi	r25, 0x09	; 9
    2578:	d6 d7       	rcall	.+4012   	; 0x3526 <usart_spi_deselect_device>
    257a:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    257c:	0a c0       	rjmp	.+20     	; 0x2592 <gfx_mono_st7565r_init+0x74>
    257e:	40 e0       	ldi	r20, 0x00	; 0
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
    2580:	61 2f       	mov	r22, r17
    2582:	80 2f       	mov	r24, r16
    2584:	1d df       	rcall	.-454    	; 0x23c0 <gfx_mono_st7565r_put_byte>
    2586:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    2588:	10 38       	cpi	r17, 0x80	; 128
    258a:	c9 f7       	brne	.-14     	; 0x257e <gfx_mono_st7565r_init+0x60>
    258c:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    258e:	04 30       	cpi	r16, 0x04	; 4
    2590:	11 f0       	breq	.+4      	; 0x2596 <gfx_mono_st7565r_init+0x78>
    2592:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
    2594:	f4 cf       	rjmp	.-24     	; 0x257e <gfx_mono_st7565r_init+0x60>
    2596:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	08 95       	ret

000025a2 <gfx_mono_st7565r_draw_pixel>:
    25a2:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    25ac:	88 23       	and	r24, r24
    25ae:	4c f1       	brlt	.+82     	; 0x2602 <gfx_mono_st7565r_draw_pixel+0x60>
    25b0:	60 32       	cpi	r22, 0x20	; 32
    25b2:	38 f5       	brcc	.+78     	; 0x2602 <gfx_mono_st7565r_draw_pixel+0x60>
    25b4:	d4 2f       	mov	r29, r20
    25b6:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    25b8:	f6 2e       	mov	r15, r22
    25ba:	f6 94       	lsr	r15
    25bc:	f6 94       	lsr	r15
    25be:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	88 e0       	ldi	r24, 0x08	; 8
    25c4:	f8 9e       	mul	r15, r24
    25c6:	60 19       	sub	r22, r0
    25c8:	71 09       	sbc	r23, r1
    25ca:	11 24       	eor	r1, r1
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	8c 01       	movw	r16, r24
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <gfx_mono_st7565r_draw_pixel+0x36>
    25d4:	00 0f       	add	r16, r16
    25d6:	11 1f       	adc	r17, r17
    25d8:	6a 95       	dec	r22
    25da:	e2 f7       	brpl	.-8      	; 0x25d4 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    25dc:	6c 2f       	mov	r22, r28
    25de:	8f 2d       	mov	r24, r15
    25e0:	5d d0       	rcall	.+186    	; 0x269c <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
    25e2:	d1 30       	cpi	r29, 0x01	; 1
    25e4:	21 f0       	breq	.+8      	; 0x25ee <gfx_mono_st7565r_draw_pixel+0x4c>
    25e6:	28 f0       	brcs	.+10     	; 0x25f2 <gfx_mono_st7565r_draw_pixel+0x50>
    25e8:	d2 30       	cpi	r29, 0x02	; 2
    25ea:	31 f0       	breq	.+12     	; 0x25f8 <gfx_mono_st7565r_draw_pixel+0x56>
    25ec:	06 c0       	rjmp	.+12     	; 0x25fa <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
    25ee:	80 2b       	or	r24, r16
		break;
    25f0:	04 c0       	rjmp	.+8      	; 0x25fa <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
    25f2:	00 95       	com	r16
    25f4:	80 23       	and	r24, r16
		break;
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
    25f8:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
    25fa:	48 2f       	mov	r20, r24
    25fc:	6c 2f       	mov	r22, r28
    25fe:	8f 2d       	mov	r24, r15
    2600:	df de       	rcall	.-578    	; 0x23c0 <gfx_mono_st7565r_put_byte>
}
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	ff 90       	pop	r15
    260c:	08 95       	ret

0000260e <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    260e:	46 c0       	rjmp	.+140    	; 0x269c <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
    2610:	08 95       	ret

00002612 <gfx_mono_st7565r_mask_byte>:
	gfx_mono_st7565r_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	d8 2f       	mov	r29, r24
    261c:	16 2f       	mov	r17, r22
    261e:	04 2f       	mov	r16, r20
    2620:	c2 2f       	mov	r28, r18
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    2622:	3c d0       	rcall	.+120    	; 0x269c <gfx_mono_framebuffer_get_byte>
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
    2624:	c1 30       	cpi	r28, 0x01	; 1
    2626:	21 f0       	breq	.+8      	; 0x2630 <gfx_mono_st7565r_mask_byte+0x1e>
    2628:	28 f0       	brcs	.+10     	; 0x2634 <gfx_mono_st7565r_mask_byte+0x22>
    262a:	c2 30       	cpi	r28, 0x02	; 2
    262c:	31 f0       	breq	.+12     	; 0x263a <gfx_mono_st7565r_mask_byte+0x28>
    262e:	06 c0       	rjmp	.+12     	; 0x263c <gfx_mono_st7565r_mask_byte+0x2a>
	case GFX_PIXEL_SET:
		temp |= pixel_mask;
    2630:	80 2b       	or	r24, r16
		break;
    2632:	04 c0       	rjmp	.+8      	; 0x263c <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_CLR:
		temp &= ~pixel_mask;
    2634:	00 95       	com	r16
    2636:	80 23       	and	r24, r16
		break;
    2638:	01 c0       	rjmp	.+2      	; 0x263c <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
    263a:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
    263c:	48 2f       	mov	r20, r24
    263e:	61 2f       	mov	r22, r17
    2640:	8d 2f       	mov	r24, r29
    2642:	be de       	rcall	.-644    	; 0x23c0 <gfx_mono_st7565r_put_byte>
}
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	08 95       	ret

0000264e <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    264e:	80 93 bc 24 	sts	0x24BC, r24	; 0x8024bc <fbpointer>
    2652:	90 93 bd 24 	sts	0x24BD, r25	; 0x8024bd <fbpointer+0x1>
    2656:	08 95       	ret

00002658 <gfx_mono_framebuffer_put_page>:
    2658:	dc 01       	movw	r26, r24
    265a:	e4 2f       	mov	r30, r20
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	af 01       	movw	r20, r30
    2660:	80 e8       	ldi	r24, 0x80	; 128
    2662:	68 9f       	mul	r22, r24
    2664:	40 0d       	add	r20, r0
    2666:	51 1d       	adc	r21, r1
    2668:	11 24       	eor	r1, r1
    266a:	e0 91 bc 24 	lds	r30, 0x24BC	; 0x8024bc <fbpointer>
    266e:	f0 91 bd 24 	lds	r31, 0x24BD	; 0x8024bd <fbpointer+0x1>
    2672:	e4 0f       	add	r30, r20
    2674:	f5 1f       	adc	r31, r21
    2676:	8d 91       	ld	r24, X+
    2678:	81 93       	st	Z+, r24
    267a:	21 50       	subi	r18, 0x01	; 1
    267c:	e1 f7       	brne	.-8      	; 0x2676 <gfx_mono_framebuffer_put_page+0x1e>
    267e:	08 95       	ret

00002680 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    2680:	20 91 bc 24 	lds	r18, 0x24BC	; 0x8024bc <fbpointer>
    2684:	30 91 bd 24 	lds	r19, 0x24BD	; 0x8024bd <fbpointer+0x1>
    2688:	90 e8       	ldi	r25, 0x80	; 128
    268a:	89 9f       	mul	r24, r25
    268c:	20 0d       	add	r18, r0
    268e:	31 1d       	adc	r19, r1
    2690:	11 24       	eor	r1, r1
    2692:	f9 01       	movw	r30, r18
    2694:	e6 0f       	add	r30, r22
    2696:	f1 1d       	adc	r31, r1
    2698:	40 83       	st	Z, r20
    269a:	08 95       	ret

0000269c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    269c:	20 91 bc 24 	lds	r18, 0x24BC	; 0x8024bc <fbpointer>
    26a0:	30 91 bd 24 	lds	r19, 0x24BD	; 0x8024bd <fbpointer+0x1>
    26a4:	90 e8       	ldi	r25, 0x80	; 128
    26a6:	89 9f       	mul	r24, r25
    26a8:	20 0d       	add	r18, r0
    26aa:	31 1d       	adc	r19, r1
    26ac:	11 24       	eor	r1, r1
    26ae:	f9 01       	movw	r30, r18
    26b0:	e6 0f       	add	r30, r22
    26b2:	f1 1d       	adc	r31, r1
}
    26b4:	80 81       	ld	r24, Z
    26b6:	08 95       	ret

000026b8 <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
    26b8:	ff 92       	push	r15
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
    26c2:	e4 2f       	mov	r30, r20
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	e8 0f       	add	r30, r24
    26c8:	f1 1d       	adc	r31, r1
    26ca:	e1 38       	cpi	r30, 0x81	; 129
    26cc:	f1 05       	cpc	r31, r1
    26ce:	1c f0       	brlt	.+6      	; 0x26d6 <gfx_mono_generic_draw_horizontal_line+0x1e>
    26d0:	c0 e8       	ldi	r28, 0x80	; 128
    26d2:	4c 2f       	mov	r20, r28
    26d4:	48 1b       	sub	r20, r24
    26d6:	44 23       	and	r20, r20
    26d8:	09 f4       	brne	.+2      	; 0x26dc <gfx_mono_generic_draw_horizontal_line+0x24>
    26da:	4a c0       	rjmp	.+148    	; 0x2770 <gfx_mono_generic_draw_horizontal_line+0xb8>
    26dc:	d6 2f       	mov	r29, r22
    26de:	d6 95       	lsr	r29
    26e0:	d6 95       	lsr	r29
    26e2:	d6 95       	lsr	r29
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	98 e0       	ldi	r25, 0x08	; 8
    26e8:	d9 9f       	mul	r29, r25
    26ea:	60 19       	sub	r22, r0
    26ec:	71 09       	sbc	r23, r1
    26ee:	11 24       	eor	r1, r1
    26f0:	e1 e0       	ldi	r30, 0x01	; 1
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	df 01       	movw	r26, r30
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <gfx_mono_generic_draw_horizontal_line+0x44>
    26f8:	aa 0f       	add	r26, r26
    26fa:	bb 1f       	adc	r27, r27
    26fc:	6a 95       	dec	r22
    26fe:	e2 f7       	brpl	.-8      	; 0x26f8 <gfx_mono_generic_draw_horizontal_line+0x40>
    2700:	fa 2e       	mov	r15, r26
    2702:	21 30       	cpi	r18, 0x01	; 1
    2704:	21 f0       	breq	.+8      	; 0x270e <gfx_mono_generic_draw_horizontal_line+0x56>
    2706:	98 f0       	brcs	.+38     	; 0x272e <gfx_mono_generic_draw_horizontal_line+0x76>
    2708:	22 30       	cpi	r18, 0x02	; 2
    270a:	19 f1       	breq	.+70     	; 0x2752 <gfx_mono_generic_draw_horizontal_line+0x9a>
    270c:	31 c0       	rjmp	.+98     	; 0x2770 <gfx_mono_generic_draw_horizontal_line+0xb8>
    270e:	c4 2f       	mov	r28, r20
    2710:	1f ef       	ldi	r17, 0xFF	; 255
    2712:	18 0f       	add	r17, r24
    2714:	01 2f       	mov	r16, r17
    2716:	0c 0f       	add	r16, r28
    2718:	60 2f       	mov	r22, r16
    271a:	8d 2f       	mov	r24, r29
    271c:	78 df       	rcall	.-272    	; 0x260e <gfx_mono_st7565r_get_byte>
    271e:	4f 2d       	mov	r20, r15
    2720:	48 2b       	or	r20, r24
    2722:	60 2f       	mov	r22, r16
    2724:	8d 2f       	mov	r24, r29
    2726:	4c de       	rcall	.-872    	; 0x23c0 <gfx_mono_st7565r_put_byte>
    2728:	c1 50       	subi	r28, 0x01	; 1
    272a:	a1 f7       	brne	.-24     	; 0x2714 <gfx_mono_generic_draw_horizontal_line+0x5c>
    272c:	21 c0       	rjmp	.+66     	; 0x2770 <gfx_mono_generic_draw_horizontal_line+0xb8>
    272e:	c4 2f       	mov	r28, r20
    2730:	1f ef       	ldi	r17, 0xFF	; 255
    2732:	18 0f       	add	r17, r24
    2734:	fa 2e       	mov	r15, r26
    2736:	f0 94       	com	r15
    2738:	01 2f       	mov	r16, r17
    273a:	0c 0f       	add	r16, r28
    273c:	60 2f       	mov	r22, r16
    273e:	8d 2f       	mov	r24, r29
    2740:	66 df       	rcall	.-308    	; 0x260e <gfx_mono_st7565r_get_byte>
    2742:	4f 2d       	mov	r20, r15
    2744:	48 23       	and	r20, r24
    2746:	60 2f       	mov	r22, r16
    2748:	8d 2f       	mov	r24, r29
    274a:	3a de       	rcall	.-908    	; 0x23c0 <gfx_mono_st7565r_put_byte>
    274c:	c1 50       	subi	r28, 0x01	; 1
    274e:	a1 f7       	brne	.-24     	; 0x2738 <gfx_mono_generic_draw_horizontal_line+0x80>
    2750:	0f c0       	rjmp	.+30     	; 0x2770 <gfx_mono_generic_draw_horizontal_line+0xb8>
    2752:	c4 2f       	mov	r28, r20
    2754:	1f ef       	ldi	r17, 0xFF	; 255
    2756:	18 0f       	add	r17, r24
    2758:	01 2f       	mov	r16, r17
    275a:	0c 0f       	add	r16, r28
    275c:	60 2f       	mov	r22, r16
    275e:	8d 2f       	mov	r24, r29
    2760:	56 df       	rcall	.-340    	; 0x260e <gfx_mono_st7565r_get_byte>
    2762:	4f 2d       	mov	r20, r15
    2764:	48 27       	eor	r20, r24
    2766:	60 2f       	mov	r22, r16
    2768:	8d 2f       	mov	r24, r29
    276a:	2a de       	rcall	.-940    	; 0x23c0 <gfx_mono_st7565r_put_byte>
    276c:	c1 50       	subi	r28, 0x01	; 1
    276e:	a1 f7       	brne	.-24     	; 0x2758 <gfx_mono_generic_draw_horizontal_line+0xa0>
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	08 95       	ret

0000277c <gfx_mono_generic_draw_vertical_line>:
    277c:	ef 92       	push	r14
    277e:	ff 92       	push	r15
    2780:	0f 93       	push	r16
    2782:	1f 93       	push	r17
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	44 23       	and	r20, r20
    278a:	09 f4       	brne	.+2      	; 0x278e <gfx_mono_generic_draw_vertical_line+0x12>
    278c:	46 c0       	rjmp	.+140    	; 0x281a <gfx_mono_generic_draw_vertical_line+0x9e>
    278e:	12 2f       	mov	r17, r18
    2790:	d8 2f       	mov	r29, r24
    2792:	9f ef       	ldi	r25, 0xFF	; 255
    2794:	96 0f       	add	r25, r22
    2796:	94 0f       	add	r25, r20
    2798:	69 13       	cpse	r22, r25
    279a:	03 c0       	rjmp	.+6      	; 0x27a2 <gfx_mono_generic_draw_vertical_line+0x26>
    279c:	42 2f       	mov	r20, r18
    279e:	01 df       	rcall	.-510    	; 0x25a2 <gfx_mono_st7565r_draw_pixel>
    27a0:	3c c0       	rjmp	.+120    	; 0x281a <gfx_mono_generic_draw_vertical_line+0x9e>
    27a2:	9f 31       	cpi	r25, 0x1F	; 31
    27a4:	08 f0       	brcs	.+2      	; 0x27a8 <gfx_mono_generic_draw_vertical_line+0x2c>
    27a6:	9f e1       	ldi	r25, 0x1F	; 31
    27a8:	c6 2f       	mov	r28, r22
    27aa:	c6 95       	lsr	r28
    27ac:	c6 95       	lsr	r28
    27ae:	c6 95       	lsr	r28
    27b0:	09 2f       	mov	r16, r25
    27b2:	06 95       	lsr	r16
    27b4:	06 95       	lsr	r16
    27b6:	06 95       	lsr	r16
    27b8:	67 70       	andi	r22, 0x07	; 7
    27ba:	2f ef       	ldi	r18, 0xFF	; 255
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	a9 01       	movw	r20, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <gfx_mono_generic_draw_vertical_line+0x4a>
    27c2:	44 0f       	add	r20, r20
    27c4:	55 1f       	adc	r21, r21
    27c6:	6a 95       	dec	r22
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <gfx_mono_generic_draw_vertical_line+0x46>
    27ca:	97 70       	andi	r25, 0x07	; 7
    27cc:	67 e0       	ldi	r22, 0x07	; 7
    27ce:	70 e0       	ldi	r23, 0x00	; 0
    27d0:	fb 01       	movw	r30, r22
    27d2:	e9 1b       	sub	r30, r25
    27d4:	f1 09       	sbc	r31, r1
    27d6:	79 01       	movw	r14, r18
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <gfx_mono_generic_draw_vertical_line+0x62>
    27da:	f5 94       	asr	r15
    27dc:	e7 94       	ror	r14
    27de:	ea 95       	dec	r30
    27e0:	e2 f7       	brpl	.-8      	; 0x27da <gfx_mono_generic_draw_vertical_line+0x5e>
    27e2:	c0 13       	cpse	r28, r16
    27e4:	06 c0       	rjmp	.+12     	; 0x27f2 <gfx_mono_generic_draw_vertical_line+0x76>
    27e6:	4e 21       	and	r20, r14
    27e8:	21 2f       	mov	r18, r17
    27ea:	6d 2f       	mov	r22, r29
    27ec:	8c 2f       	mov	r24, r28
    27ee:	11 df       	rcall	.-478    	; 0x2612 <gfx_mono_st7565r_mask_byte>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <gfx_mono_generic_draw_vertical_line+0x9e>
    27f2:	21 2f       	mov	r18, r17
    27f4:	6d 2f       	mov	r22, r29
    27f6:	8c 2f       	mov	r24, r28
    27f8:	0c df       	rcall	.-488    	; 0x2612 <gfx_mono_st7565r_mask_byte>
    27fa:	cf 5f       	subi	r28, 0xFF	; 255
    27fc:	c0 17       	cp	r28, r16
    27fe:	40 f4       	brcc	.+16     	; 0x2810 <gfx_mono_generic_draw_vertical_line+0x94>
    2800:	21 2f       	mov	r18, r17
    2802:	4f ef       	ldi	r20, 0xFF	; 255
    2804:	6d 2f       	mov	r22, r29
    2806:	8c 2f       	mov	r24, r28
    2808:	04 df       	rcall	.-504    	; 0x2612 <gfx_mono_st7565r_mask_byte>
    280a:	cf 5f       	subi	r28, 0xFF	; 255
    280c:	c0 17       	cp	r28, r16
    280e:	c0 f3       	brcs	.-16     	; 0x2800 <gfx_mono_generic_draw_vertical_line+0x84>
    2810:	21 2f       	mov	r18, r17
    2812:	4e 2d       	mov	r20, r14
    2814:	6d 2f       	mov	r22, r29
    2816:	80 2f       	mov	r24, r16
    2818:	fc de       	rcall	.-520    	; 0x2612 <gfx_mono_st7565r_mask_byte>
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	08 95       	ret

00002828 <gfx_mono_generic_draw_rect>:
    2828:	ff 92       	push	r15
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	d8 2f       	mov	r29, r24
    2834:	16 2f       	mov	r17, r22
    2836:	c4 2f       	mov	r28, r20
    2838:	f2 2e       	mov	r15, r18
    283a:	20 2f       	mov	r18, r16
    283c:	3d df       	rcall	.-390    	; 0x26b8 <gfx_mono_generic_draw_horizontal_line>
    283e:	6f ef       	ldi	r22, 0xFF	; 255
    2840:	6f 0d       	add	r22, r15
    2842:	61 0f       	add	r22, r17
    2844:	20 2f       	mov	r18, r16
    2846:	4c 2f       	mov	r20, r28
    2848:	8d 2f       	mov	r24, r29
    284a:	36 df       	rcall	.-404    	; 0x26b8 <gfx_mono_generic_draw_horizontal_line>
    284c:	20 2f       	mov	r18, r16
    284e:	4f 2d       	mov	r20, r15
    2850:	61 2f       	mov	r22, r17
    2852:	8d 2f       	mov	r24, r29
    2854:	93 df       	rcall	.-218    	; 0x277c <gfx_mono_generic_draw_vertical_line>
    2856:	8f ef       	ldi	r24, 0xFF	; 255
    2858:	8c 0f       	add	r24, r28
    285a:	20 2f       	mov	r18, r16
    285c:	4f 2d       	mov	r20, r15
    285e:	61 2f       	mov	r22, r17
    2860:	8d 0f       	add	r24, r29
    2862:	8c df       	rcall	.-232    	; 0x277c <gfx_mono_generic_draw_vertical_line>
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ff 90       	pop	r15
    286e:	08 95       	ret

00002870 <gfx_mono_generic_draw_filled_rect>:
    2870:	ff 92       	push	r15
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	22 23       	and	r18, r18
    287c:	69 f0       	breq	.+26     	; 0x2898 <gfx_mono_generic_draw_filled_rect+0x28>
    287e:	f4 2e       	mov	r15, r20
    2880:	18 2f       	mov	r17, r24
    2882:	c2 2f       	mov	r28, r18
    2884:	df ef       	ldi	r29, 0xFF	; 255
    2886:	d6 0f       	add	r29, r22
    2888:	6d 2f       	mov	r22, r29
    288a:	6c 0f       	add	r22, r28
    288c:	20 2f       	mov	r18, r16
    288e:	4f 2d       	mov	r20, r15
    2890:	81 2f       	mov	r24, r17
    2892:	12 df       	rcall	.-476    	; 0x26b8 <gfx_mono_generic_draw_horizontal_line>
    2894:	c1 50       	subi	r28, 0x01	; 1
    2896:	c1 f7       	brne	.-16     	; 0x2888 <gfx_mono_generic_draw_filled_rect+0x18>
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	ff 90       	pop	r15
    28a2:	08 95       	ret

000028a4 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
    28a4:	5f 92       	push	r5
    28a6:	6f 92       	push	r6
    28a8:	7f 92       	push	r7
    28aa:	8f 92       	push	r8
    28ac:	9f 92       	push	r9
    28ae:	af 92       	push	r10
    28b0:	bf 92       	push	r11
    28b2:	cf 92       	push	r12
    28b4:	df 92       	push	r13
    28b6:	ef 92       	push	r14
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	98 2e       	mov	r9, r24
    28c4:	a6 2e       	mov	r10, r22
    28c6:	c4 2f       	mov	r28, r20
    28c8:	b2 2e       	mov	r11, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
    28ca:	41 11       	cpse	r20, r1
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <gfx_mono_generic_draw_filled_circle+0x30>
		gfx_mono_draw_pixel(x, y, color);
    28ce:	42 2f       	mov	r20, r18
    28d0:	68 de       	rcall	.-816    	; 0x25a2 <gfx_mono_st7565r_draw_pixel>
		return;
    28d2:	76 c0       	rjmp	.+236    	; 0x29c0 <gfx_mono_generic_draw_filled_circle+0x11c>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
    28d4:	84 2f       	mov	r24, r20
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	23 e0       	ldi	r18, 0x03	; 3
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	79 01       	movw	r14, r18
    28e2:	e8 1a       	sub	r14, r24
    28e4:	f9 0a       	sbc	r15, r25
    28e6:	c6 2e       	mov	r12, r22
    28e8:	d9 2c       	mov	r13, r9
    28ea:	19 2d       	mov	r17, r9
    28ec:	d1 e0       	ldi	r29, 0x01	; 1

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
    28ee:	80 2f       	mov	r24, r16
    28f0:	83 70       	andi	r24, 0x03	; 3
    28f2:	68 2e       	mov	r6, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
    28f4:	80 2f       	mov	r24, r16
    28f6:	8c 70       	andi	r24, 0x0C	; 12
    28f8:	78 2e       	mov	r7, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
    28fa:	80 2f       	mov	r24, r16
    28fc:	80 73       	andi	r24, 0x30	; 48
    28fe:	88 2e       	mov	r8, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
    2900:	00 7c       	andi	r16, 0xC0	; 192
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <gfx_mono_generic_draw_filled_circle+0x62>
    2904:	d8 2f       	mov	r29, r24
    2906:	55 24       	eor	r5, r5
    2908:	5a 94       	dec	r5
    290a:	5d 0e       	add	r5, r29
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
    290c:	66 20       	and	r6, r6
    290e:	69 f0       	breq	.+26     	; 0x292a <gfx_mono_generic_draw_filled_circle+0x86>
			gfx_mono_draw_vertical_line(x + offset_y,
    2910:	2b 2d       	mov	r18, r11
    2912:	4d 2f       	mov	r20, r29
    2914:	6c 2d       	mov	r22, r12
    2916:	89 2d       	mov	r24, r9
    2918:	8c 0f       	add	r24, r28
    291a:	30 df       	rcall	.-416    	; 0x277c <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
    291c:	2b 2d       	mov	r18, r11
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	4c 0f       	add	r20, r28
    2922:	6a 2d       	mov	r22, r10
    2924:	6c 1b       	sub	r22, r28
    2926:	81 2f       	mov	r24, r17
    2928:	29 df       	rcall	.-430    	; 0x277c <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
    292a:	77 20       	and	r7, r7
    292c:	69 f0       	breq	.+26     	; 0x2948 <gfx_mono_generic_draw_filled_circle+0xa4>
			gfx_mono_draw_vertical_line(x - offset_y,
    292e:	2b 2d       	mov	r18, r11
    2930:	4d 2f       	mov	r20, r29
    2932:	6c 2d       	mov	r22, r12
    2934:	89 2d       	mov	r24, r9
    2936:	8c 1b       	sub	r24, r28
    2938:	21 df       	rcall	.-446    	; 0x277c <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
    293a:	2b 2d       	mov	r18, r11
    293c:	41 e0       	ldi	r20, 0x01	; 1
    293e:	4c 0f       	add	r20, r28
    2940:	6a 2d       	mov	r22, r10
    2942:	6c 1b       	sub	r22, r28
    2944:	8d 2d       	mov	r24, r13
    2946:	1a df       	rcall	.-460    	; 0x277c <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
    2948:	88 20       	and	r8, r8
    294a:	61 f0       	breq	.+24     	; 0x2964 <gfx_mono_generic_draw_filled_circle+0xc0>
			gfx_mono_draw_vertical_line(x - offset_y,
    294c:	2b 2d       	mov	r18, r11
    294e:	4d 2f       	mov	r20, r29
    2950:	6a 2d       	mov	r22, r10
    2952:	89 2d       	mov	r24, r9
    2954:	8c 1b       	sub	r24, r28
    2956:	12 df       	rcall	.-476    	; 0x277c <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
    2958:	2b 2d       	mov	r18, r11
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	4c 0f       	add	r20, r28
    295e:	6a 2d       	mov	r22, r10
    2960:	8d 2d       	mov	r24, r13
    2962:	0c df       	rcall	.-488    	; 0x277c <gfx_mono_generic_draw_vertical_line>
    2964:	00 23       	and	r16, r16
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
    2966:	61 f0       	breq	.+24     	; 0x2980 <gfx_mono_generic_draw_filled_circle+0xdc>
			gfx_mono_draw_vertical_line(x + offset_y,
    2968:	2b 2d       	mov	r18, r11
    296a:	4d 2f       	mov	r20, r29
    296c:	6a 2d       	mov	r22, r10
    296e:	89 2d       	mov	r24, r9
    2970:	8c 0f       	add	r24, r28
    2972:	04 df       	rcall	.-504    	; 0x277c <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
    2974:	2b 2d       	mov	r18, r11
    2976:	41 e0       	ldi	r20, 0x01	; 1
    2978:	4c 0f       	add	r20, r28
    297a:	6a 2d       	mov	r22, r10
    297c:	81 2f       	mov	r24, r17
    297e:	fe de       	rcall	.-516    	; 0x277c <gfx_mono_generic_draw_vertical_line>
    2980:	ff 20       	and	r15, r15
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
    2982:	54 f4       	brge	.+20     	; 0x2998 <gfx_mono_generic_draw_filled_circle+0xf4>
    2984:	85 2d       	mov	r24, r5
			error += ((offset_x << 2) + 6);
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	88 0f       	add	r24, r24
    298e:	99 1f       	adc	r25, r25
    2990:	06 96       	adiw	r24, 0x06	; 6
    2992:	e8 0e       	add	r14, r24
    2994:	f9 1e       	adc	r15, r25
    2996:	0c c0       	rjmp	.+24     	; 0x29b0 <gfx_mono_generic_draw_filled_circle+0x10c>
    2998:	85 2d       	mov	r24, r5
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	8c 1b       	sub	r24, r28
    299e:	91 09       	sbc	r25, r1
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	0a 96       	adiw	r24, 0x0a	; 10
    29aa:	e8 0e       	add	r14, r24
    29ac:	f9 1e       	adc	r15, r25
    29ae:	c1 50       	subi	r28, 0x01	; 1
			--offset_y;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	8d 0f       	add	r24, r29
    29b4:	1f 5f       	subi	r17, 0xFF	; 255
    29b6:	da 94       	dec	r13
    29b8:	ca 94       	dec	r12
    29ba:	cd 17       	cp	r28, r29
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
    29bc:	08 f0       	brcs	.+2      	; 0x29c0 <gfx_mono_generic_draw_filled_circle+0x11c>
    29be:	a2 cf       	rjmp	.-188    	; 0x2904 <gfx_mono_generic_draw_filled_circle+0x60>
    29c0:	df 91       	pop	r29
		}

		/* Next X. */
		++offset_x;
	}
}
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	ff 90       	pop	r15
    29ca:	ef 90       	pop	r14
    29cc:	df 90       	pop	r13
    29ce:	cf 90       	pop	r12
    29d0:	bf 90       	pop	r11
    29d2:	af 90       	pop	r10
    29d4:	9f 90       	pop	r9
    29d6:	8f 90       	pop	r8
    29d8:	7f 90       	pop	r7
    29da:	6f 90       	pop	r6
    29dc:	5f 90       	pop	r5
    29de:	08 95       	ret

000029e0 <gfx_mono_generic_put_bitmap>:
    29e0:	cf 92       	push	r12
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	7c 01       	movw	r14, r24
    29f2:	d6 2e       	mov	r13, r22
	gfx_coord_t num_pages = bitmap->height / 8;
    29f4:	dc 01       	movw	r26, r24
    29f6:	11 96       	adiw	r26, 0x01	; 1
    29f8:	cc 90       	ld	r12, X
    29fa:	11 97       	sbiw	r26, 0x01	; 1
    29fc:	c6 94       	lsr	r12
    29fe:	c6 94       	lsr	r12
    2a00:	c6 94       	lsr	r12
	gfx_coord_t page = y / 8;
    2a02:	46 95       	lsr	r20
    2a04:	46 95       	lsr	r20
    2a06:	46 95       	lsr	r20
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
    2a08:	12 96       	adiw	r26, 0x02	; 2
    2a0a:	8c 91       	ld	r24, X
    2a0c:	88 23       	and	r24, r24
    2a0e:	31 f0       	breq	.+12     	; 0x2a1c <gfx_mono_generic_put_bitmap+0x3c>
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	09 f0       	breq	.+2      	; 0x2a16 <gfx_mono_generic_put_bitmap+0x36>
    2a14:	45 c0       	rjmp	.+138    	; 0x2aa0 <gfx_mono_generic_put_bitmap+0xc0>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    2a16:	c1 10       	cpse	r12, r1
    2a18:	23 c0       	rjmp	.+70     	; 0x2a60 <gfx_mono_generic_put_bitmap+0x80>
    2a1a:	42 c0       	rjmp	.+132    	; 0x2aa0 <gfx_mono_generic_put_bitmap+0xc0>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    2a1c:	c1 10       	cpse	r12, r1
    2a1e:	28 c0       	rjmp	.+80     	; 0x2a70 <gfx_mono_generic_put_bitmap+0x90>
    2a20:	3f c0       	rjmp	.+126    	; 0x2aa0 <gfx_mono_generic_put_bitmap+0xc0>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    2a22:	c0 e0       	ldi	r28, 0x00	; 0
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
    2a24:	80 9f       	mul	r24, r16
    2a26:	f0 01       	movw	r30, r0
    2a28:	81 9f       	mul	r24, r17
    2a2a:	f0 0d       	add	r31, r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	ec 0f       	add	r30, r28
    2a30:	f1 1d       	adc	r31, r1
    2a32:	d7 01       	movw	r26, r14
    2a34:	13 96       	adiw	r26, 0x03	; 3
    2a36:	4d 91       	ld	r20, X+
    2a38:	5c 91       	ld	r21, X
    2a3a:	14 97       	sbiw	r26, 0x04	; 4
    2a3c:	e4 0f       	add	r30, r20
    2a3e:	f5 1f       	adc	r31, r21
    2a40:	44 91       	lpm	r20, Z
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
    2a42:	6d 2d       	mov	r22, r13
    2a44:	6c 0f       	add	r22, r28
    2a46:	8d 2f       	mov	r24, r29
    2a48:	bb dc       	rcall	.-1674   	; 0x23c0 <gfx_mono_st7565r_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    2a4a:	cf 5f       	subi	r28, 0xFF	; 255
    2a4c:	f7 01       	movw	r30, r14
    2a4e:	80 81       	ld	r24, Z
    2a50:	c8 17       	cp	r28, r24
    2a52:	40 f3       	brcs	.-48     	; 0x2a24 <gfx_mono_generic_put_bitmap+0x44>
    2a54:	0f 5f       	subi	r16, 0xFF	; 255
    2a56:	1f 4f       	sbci	r17, 0xFF	; 255
    2a58:	df 5f       	subi	r29, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    2a5a:	0c 15       	cp	r16, r12
    2a5c:	20 f0       	brcs	.+8      	; 0x2a66 <gfx_mono_generic_put_bitmap+0x86>
    2a5e:	20 c0       	rjmp	.+64     	; 0x2aa0 <gfx_mono_generic_put_bitmap+0xc0>
    2a60:	d4 2f       	mov	r29, r20
    2a62:	00 e0       	ldi	r16, 0x00	; 0
    2a64:	10 e0       	ldi	r17, 0x00	; 0
			for (column = 0; column < bitmap->width; column++) {
    2a66:	d7 01       	movw	r26, r14
    2a68:	8c 91       	ld	r24, X
    2a6a:	81 11       	cpse	r24, r1
    2a6c:	da cf       	rjmp	.-76     	; 0x2a22 <gfx_mono_generic_put_bitmap+0x42>
    2a6e:	f2 cf       	rjmp	.-28     	; 0x2a54 <gfx_mono_generic_put_bitmap+0x74>
    2a70:	c4 0e       	add	r12, r20
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    2a72:	d4 2f       	mov	r29, r20
    2a74:	00 e0       	ldi	r16, 0x00	; 0
    2a76:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
    2a78:	f7 01       	movw	r30, r14
    2a7a:	20 81       	ld	r18, Z
    2a7c:	20 9f       	mul	r18, r16
    2a7e:	c0 01       	movw	r24, r0
    2a80:	21 9f       	mul	r18, r17
    2a82:	90 0d       	add	r25, r0
    2a84:	11 24       	eor	r1, r1
    2a86:	03 80       	ldd	r0, Z+3	; 0x03
    2a88:	f4 81       	ldd	r31, Z+4	; 0x04
    2a8a:	e0 2d       	mov	r30, r0
    2a8c:	4d 2d       	mov	r20, r13
    2a8e:	6d 2f       	mov	r22, r29
    2a90:	8e 0f       	add	r24, r30
    2a92:	9f 1f       	adc	r25, r31
    2a94:	ba db       	rcall	.-2188   	; 0x220a <gfx_mono_st7565r_put_page>
    2a96:	0f 5f       	subi	r16, 0xFF	; 255
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	df 5f       	subi	r29, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    2a9c:	cd 12       	cpse	r12, r29
    2a9e:	ec cf       	rjmp	.-40     	; 0x2a78 <gfx_mono_generic_put_bitmap+0x98>
		break;

	default:
		break;
	}
}
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	ff 90       	pop	r15
    2aaa:	ef 90       	pop	r14
    2aac:	df 90       	pop	r13
    2aae:	cf 90       	pop	r12
    2ab0:	08 95       	ret

00002ab2 <menu_draw>:
 *
 * \param menu     a menu struct with menu settings
 * \param redraw   clear screen before drawing menu
 */
static void menu_draw(struct gfx_mono_menu *menu, bool redraw)
{
    2ab2:	ef 92       	push	r14
    2ab4:	ff 92       	push	r15
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	7c 01       	movw	r14, r24
	static bool redraw_state;
	uint8_t i;
	uint8_t line = 1;
	uint8_t menu_page = menu->current_selection /
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	15 96       	adiw	r26, 0x05	; 5
    2ac4:	8c 91       	ld	r24, X
    2ac6:	15 97       	sbiw	r26, 0x05	; 5
    2ac8:	0b ea       	ldi	r16, 0xAB	; 171
    2aca:	80 9f       	mul	r24, r16
    2acc:	01 2d       	mov	r16, r1
    2ace:	11 24       	eor	r1, r1
    2ad0:	d0 2f       	mov	r29, r16
    2ad2:	d6 95       	lsr	r29
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN;

	if (menu->current_page != menu_page || redraw == true) {
    2ad4:	16 96       	adiw	r26, 0x06	; 6
    2ad6:	8c 91       	ld	r24, X
    2ad8:	d8 13       	cpse	r29, r24
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <menu_draw+0x2e>
    2adc:	66 23       	and	r22, r22
    2ade:	49 f0       	breq	.+18     	; 0x2af2 <menu_draw+0x40>
		/* clear screen if we have changed the page or menu and prepare
		 * redraw */
		gfx_mono_draw_filled_rect(0, SYSFONT_LINESPACING,
    2ae0:	00 e0       	ldi	r16, 0x00	; 0
    2ae2:	28 e1       	ldi	r18, 0x18	; 24
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	68 e0       	ldi	r22, 0x08	; 8
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	c2 de       	rcall	.-636    	; 0x2870 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_LCD_WIDTH,
				GFX_MONO_LCD_HEIGHT - SYSFONT_LINESPACING,
				GFX_PIXEL_CLR);
		redraw_state = true;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	80 93 be 24 	sts	0x24BE, r24	; 0x8024be <redraw_state.5262>
	}

	menu->current_page = menu_page;
    2af2:	f7 01       	movw	r30, r14
    2af4:	d6 83       	std	Z+6, r29	; 0x06

	/* Clear old indicator icon */
	gfx_mono_draw_filled_rect(0, SYSFONT_LINESPACING,
    2af6:	00 e0       	ldi	r16, 0x00	; 0
    2af8:	28 e1       	ldi	r18, 0x18	; 24
    2afa:	44 e0       	ldi	r20, 0x04	; 4
    2afc:	68 e0       	ldi	r22, 0x08	; 8
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	b7 de       	rcall	.-658    	; 0x2870 <gfx_mono_generic_draw_filled_rect>
			GFX_MONO_MENU_INDICATOR_WIDTH, GFX_MONO_LCD_HEIGHT -
			SYSFONT_LINESPACING, GFX_PIXEL_CLR);

	/* Put indicator icon on current selection */
	gfx_mono_put_bitmap(&menu_bitmap_indicator, 0,
    2b02:	d7 01       	movw	r26, r14
    2b04:	15 96       	adiw	r26, 0x05	; 5
    2b06:	4c 91       	ld	r20, X
    2b08:	8b ea       	ldi	r24, 0xAB	; 171
    2b0a:	48 9f       	mul	r20, r24
    2b0c:	81 2d       	mov	r24, r1
    2b0e:	11 24       	eor	r1, r1
    2b10:	86 95       	lsr	r24
    2b12:	98 2f       	mov	r25, r24
    2b14:	99 0f       	add	r25, r25
    2b16:	89 0f       	add	r24, r25
    2b18:	48 1b       	sub	r20, r24
    2b1a:	44 0f       	add	r20, r20
    2b1c:	44 0f       	add	r20, r20
    2b1e:	44 0f       	add	r20, r20
    2b20:	48 5f       	subi	r20, 0xF8	; 248
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e2       	ldi	r25, 0x20	; 32
    2b28:	5b df       	rcall	.-330    	; 0x29e0 <gfx_mono_generic_put_bitmap>
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
    2b2a:	80 91 be 24 	lds	r24, 0x24BE	; 0x8024be <redraw_state.5262>
    2b2e:	88 23       	and	r24, r24
    2b30:	a9 f1       	breq	.+106    	; 0x2b9c <menu_draw+0xea>
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    2b32:	cd 2f       	mov	r28, r29
    2b34:	cc 0f       	add	r28, r28
    2b36:	cd 0f       	add	r28, r29
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
    2b38:	0d 2f       	mov	r16, r29
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	0f 5f       	subi	r16, 0xFF	; 255
    2b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b40:	c8 01       	movw	r24, r16
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	08 0f       	add	r16, r24
    2b48:	19 1f       	adc	r17, r25
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    2b4a:	8c 2f       	mov	r24, r28
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	80 17       	cp	r24, r16
    2b50:	91 07       	cpc	r25, r17
    2b52:	14 f5       	brge	.+68     	; 0x2b98 <menu_draw+0xe6>
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
    2b54:	f7 01       	movw	r30, r14
    2b56:	84 81       	ldd	r24, Z+4	; 0x04
    2b58:	c8 17       	cp	r28, r24
    2b5a:	f0 f4       	brcc	.+60     	; 0x2b98 <menu_draw+0xe6>
    2b5c:	d8 e0       	ldi	r29, 0x08	; 8
				i < menu->num_elements; i++) {
			gfx_mono_draw_progmem_string(
    2b5e:	ec 2f       	mov	r30, r28
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	ee 0f       	add	r30, r30
    2b64:	ff 1f       	adc	r31, r31
    2b66:	d7 01       	movw	r26, r14
    2b68:	12 96       	adiw	r26, 0x02	; 2
    2b6a:	8d 91       	ld	r24, X+
    2b6c:	9c 91       	ld	r25, X
    2b6e:	13 97       	sbiw	r26, 0x03	; 3
    2b70:	e8 0f       	add	r30, r24
    2b72:	f9 1f       	adc	r31, r25
    2b74:	20 e1       	ldi	r18, 0x10	; 16
    2b76:	30 e2       	ldi	r19, 0x20	; 32
    2b78:	4d 2f       	mov	r20, r29
    2b7a:	65 e0       	ldi	r22, 0x05	; 5
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	f8 d3       	rcall	.+2032   	; 0x3372 <gfx_mono_draw_progmem_string>
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
				i < menu->num_elements; i++) {
    2b82:	cf 5f       	subi	r28, 0xFF	; 255
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    2b84:	8c 2f       	mov	r24, r28
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	80 17       	cp	r24, r16
    2b8a:	91 07       	cpc	r25, r17
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <menu_draw+0xe6>
    2b8e:	d8 5f       	subi	r29, 0xF8	; 248
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
    2b90:	f7 01       	movw	r30, r14
    2b92:	84 81       	ldd	r24, Z+4	; 0x04
    2b94:	c8 17       	cp	r28, r24
    2b96:	18 f3       	brcs	.-58     	; 0x2b5e <menu_draw+0xac>
					(char PROGMEM_PTR_T)menu->strings[i],
					GFX_MONO_MENU_INDICATOR_WIDTH + 1,
					line * SYSFONT_LINESPACING, &sysfont);
			line++;
		}
		redraw_state = false;
    2b98:	10 92 be 24 	sts	0x24BE, r1	; 0x8024be <redraw_state.5262>
	}
}
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	1f 91       	pop	r17
    2ba2:	0f 91       	pop	r16
    2ba4:	ff 90       	pop	r15
    2ba6:	ef 90       	pop	r14
    2ba8:	08 95       	ret

00002baa <gfx_mono_menu_init>:
 *
 * \param menu  menu struct with menu options
 *
 */
void gfx_mono_menu_init(struct gfx_mono_menu *menu)
{
    2baa:	0f 93       	push	r16
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29
    2bb0:	ec 01       	movw	r28, r24
	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0,
    2bb2:	00 e0       	ldi	r16, 0x00	; 0
    2bb4:	20 e2       	ldi	r18, 0x20	; 32
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	59 de       	rcall	.-846    	; 0x2870 <gfx_mono_generic_draw_filled_rect>
			GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT, GFX_PIXEL_CLR);

	/* Draw the menu title on the top of the screen */
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)menu->title,
    2bbe:	20 e1       	ldi	r18, 0x10	; 16
    2bc0:	30 e2       	ldi	r19, 0x20	; 32
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	88 81       	ld	r24, Y
    2bc8:	99 81       	ldd	r25, Y+1	; 0x01
    2bca:	d3 d3       	rcall	.+1958   	; 0x3372 <gfx_mono_draw_progmem_string>
			0, 0, &sysfont);

	/* Draw menu options below */
	menu_draw(menu, true);
    2bcc:	61 e0       	ldi	r22, 0x01	; 1
    2bce:	ce 01       	movw	r24, r28
    2bd0:	70 df       	rcall	.-288    	; 0x2ab2 <menu_draw>
}
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	0f 91       	pop	r16
    2bd8:	08 95       	ret

00002bda <gfx_mono_menu_process_key>:
 *
 * \retval selected menu option or status code
 */
uint8_t gfx_mono_menu_process_key(struct gfx_mono_menu *menu, uint8_t keycode)
{
	switch (keycode) {
    2bda:	6d 30       	cpi	r22, 0x0D	; 13
    2bdc:	59 f1       	breq	.+86     	; 0x2c34 <gfx_mono_menu_process_key+0x5a>
    2bde:	18 f4       	brcc	.+6      	; 0x2be6 <gfx_mono_menu_process_key+0xc>
    2be0:	68 30       	cpi	r22, 0x08	; 8
    2be2:	59 f1       	breq	.+86     	; 0x2c3a <gfx_mono_menu_process_key+0x60>
    2be4:	05 c0       	rjmp	.+10     	; 0x2bf0 <gfx_mono_menu_process_key+0x16>
    2be6:	fc 01       	movw	r30, r24
    2be8:	66 32       	cpi	r22, 0x26	; 38
    2bea:	b1 f0       	breq	.+44     	; 0x2c18 <gfx_mono_menu_process_key+0x3e>
    2bec:	68 32       	cpi	r22, 0x28	; 40
    2bee:	11 f0       	breq	.+4      	; 0x2bf4 <gfx_mono_menu_process_key+0x1a>
		/* User pressed "back" key, inform user */
		return GFX_MONO_MENU_EVENT_EXIT;

	default:
		/* Unknown key event */
		return GFX_MONO_MENU_EVENT_IDLE;
    2bf0:	8f ef       	ldi	r24, 0xFF	; 255
    2bf2:	08 95       	ret
 */
uint8_t gfx_mono_menu_process_key(struct gfx_mono_menu *menu, uint8_t keycode)
{
	switch (keycode) {
	case GFX_MONO_MENU_KEYCODE_DOWN:
		if (menu->current_selection == menu->num_elements - 1) {
    2bf4:	25 81       	ldd	r18, Z+5	; 0x05
    2bf6:	42 2f       	mov	r20, r18
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	84 81       	ldd	r24, Z+4	; 0x04
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	48 17       	cp	r20, r24
    2c02:	59 07       	cpc	r21, r25
    2c04:	11 f4       	brne	.+4      	; 0x2c0a <gfx_mono_menu_process_key+0x30>
			menu->current_selection = 0;
    2c06:	15 82       	std	Z+5, r1	; 0x05
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <gfx_mono_menu_process_key+0x34>
		} else {
			menu->current_selection++;
    2c0a:	2f 5f       	subi	r18, 0xFF	; 255
    2c0c:	25 83       	std	Z+5, r18	; 0x05
		}

		/* Update menu on display */
		menu_draw(menu, false);
    2c0e:	60 e0       	ldi	r22, 0x00	; 0
    2c10:	cf 01       	movw	r24, r30
    2c12:	4f df       	rcall	.-354    	; 0x2ab2 <menu_draw>
		/* Nothing selected yet */
		return GFX_MONO_MENU_EVENT_IDLE;
    2c14:	8f ef       	ldi	r24, 0xFF	; 255
    2c16:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_UP:
		if (menu->current_selection) {
    2c18:	85 81       	ldd	r24, Z+5	; 0x05
    2c1a:	88 23       	and	r24, r24
    2c1c:	19 f0       	breq	.+6      	; 0x2c24 <gfx_mono_menu_process_key+0x4a>
			menu->current_selection--;
    2c1e:	81 50       	subi	r24, 0x01	; 1
    2c20:	85 83       	std	Z+5, r24	; 0x05
    2c22:	03 c0       	rjmp	.+6      	; 0x2c2a <gfx_mono_menu_process_key+0x50>
		} else {
			menu->current_selection = menu->num_elements - 1;
    2c24:	84 81       	ldd	r24, Z+4	; 0x04
    2c26:	81 50       	subi	r24, 0x01	; 1
    2c28:	85 83       	std	Z+5, r24	; 0x05
		}

		/* Update menu on display */
		menu_draw(menu, false);
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	cf 01       	movw	r24, r30
    2c2e:	41 df       	rcall	.-382    	; 0x2ab2 <menu_draw>
		/* Nothing selected yet */
		return GFX_MONO_MENU_EVENT_IDLE;
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_ENTER:
		/* Got what we want. Return selection. */
		return menu->current_selection;
    2c34:	fc 01       	movw	r30, r24
    2c36:	85 81       	ldd	r24, Z+5	; 0x05
    2c38:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_BACK:
		/* User pressed "back" key, inform user */
		return GFX_MONO_MENU_EVENT_EXIT;
    2c3a:	8e ef       	ldi	r24, 0xFE	; 254

	default:
		/* Unknown key event */
		return GFX_MONO_MENU_EVENT_IDLE;
	}
}
    2c3c:	08 95       	ret

00002c3e <gfx_mono_spinctrl_draw_indicator>:
 * \param *spinner initialized gfx_mono_spinctrl struct
 * \param draw     true on draw, false on delete
 */
static void gfx_mono_spinctrl_draw_indicator(struct gfx_mono_spinctrl *spinner,
		bool draw)
{
    2c3e:	0f 93       	push	r16
	if (draw) {
    2c40:	66 23       	and	r22, r22
    2c42:	39 f0       	breq	.+14     	; 0x2c52 <gfx_mono_spinctrl_draw_indicator+0x14>
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator, 0,
    2c44:	fc 01       	movw	r30, r24
    2c46:	44 85       	ldd	r20, Z+12	; 0x0c
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	86 e0       	ldi	r24, 0x06	; 6
    2c4c:	90 e2       	ldi	r25, 0x20	; 32
    2c4e:	c8 de       	rcall	.-624    	; 0x29e0 <gfx_mono_generic_put_bitmap>
    2c50:	07 c0       	rjmp	.+14     	; 0x2c60 <gfx_mono_spinctrl_draw_indicator+0x22>
				spinner->y);
	} else {
		gfx_mono_draw_filled_rect(0, spinner->y,
    2c52:	00 e0       	ldi	r16, 0x00	; 0
    2c54:	28 e0       	ldi	r18, 0x08	; 8
    2c56:	44 e0       	ldi	r20, 0x04	; 4
    2c58:	fc 01       	movw	r30, r24
    2c5a:	64 85       	ldd	r22, Z+12	; 0x0c
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	08 de       	rcall	.-1008   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
				GFX_MONO_SPINCTRL_INDICATOR_HEIGHT,
				GFX_PIXEL_CLR);
	}
}
    2c60:	0f 91       	pop	r16
    2c62:	08 95       	ret

00002c64 <gfx_mono_spinctrl_draw_button>:
 *
 * \param draw       true on draw, false on delete
 * \param indicator  true on draw indicator, false on delete
 */
static void gfx_mono_spinctrl_draw_button(bool draw, bool indicator)
{
    2c64:	df 92       	push	r13
    2c66:	ef 92       	push	r14
    2c68:	ff 92       	push	r15
    2c6a:	0f 93       	push	r16
    2c6c:	1f 93       	push	r17
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	68 97       	sbiw	r28, 0x18	; 24
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	18 2f       	mov	r17, r24
    2c7e:	d6 2e       	mov	r13, r22
	uint8_t height;
	uint8_t offset;
	char string_buf[22];

	/* Clear bottom line */
	gfx_mono_draw_filled_rect(0,
    2c80:	00 e0       	ldi	r16, 0x00	; 0
    2c82:	27 e0       	ldi	r18, 0x07	; 7
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	68 e1       	ldi	r22, 0x18	; 24
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	f2 dd       	rcall	.-1052   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
			(SYSFONT_HEIGHT + 1) *
			GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION,
			GFX_MONO_LCD_WIDTH, SYSFONT_HEIGHT, GFX_PIXEL_CLR);

	snprintf(string_buf, sizeof(string_buf), "OK");
    2c8c:	8f e4       	ldi	r24, 0x4F	; 79
    2c8e:	9b e4       	ldi	r25, 0x4B	; 75
    2c90:	8b 83       	std	Y+3, r24	; 0x03
    2c92:	9c 83       	std	Y+4, r25	; 0x04
    2c94:	1d 82       	std	Y+5, r1	; 0x05
	gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width, &height);
    2c96:	9e 01       	movw	r18, r28
    2c98:	2e 5f       	subi	r18, 0xFE	; 254
    2c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9c:	ae 01       	movw	r20, r28
    2c9e:	4f 5f       	subi	r20, 0xFF	; 255
    2ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca2:	60 e1       	ldi	r22, 0x10	; 16
    2ca4:	70 e2       	ldi	r23, 0x20	; 32
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	03 96       	adiw	r24, 0x03	; 3
    2caa:	91 d3       	rcall	.+1826   	; 0x33ce <gfx_mono_get_string_bounding_box>
	offset = (GFX_MONO_LCD_WIDTH - width) / 2;
    2cac:	29 81       	ldd	r18, Y+1	; 0x01
    2cae:	80 e8       	ldi	r24, 0x80	; 128
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	82 1b       	sub	r24, r18
    2cb4:	91 09       	sbc	r25, r1
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	12 f4       	brpl	.+4      	; 0x2cbe <gfx_mono_spinctrl_draw_button+0x5a>
    2cba:	6f 5f       	subi	r22, 0xFF	; 255
    2cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbe:	7b 01       	movw	r14, r22
    2cc0:	f5 94       	asr	r15
    2cc2:	e7 94       	ror	r14

	if (draw) {
    2cc4:	11 23       	and	r17, r17
    2cc6:	c1 f0       	breq	.+48     	; 0x2cf8 <gfx_mono_spinctrl_draw_button+0x94>
		/* Draw OK button in the middle of the last line */
		gfx_mono_draw_string(string_buf, offset,
    2cc8:	20 e1       	ldi	r18, 0x10	; 16
    2cca:	30 e2       	ldi	r19, 0x20	; 32
    2ccc:	48 e1       	ldi	r20, 0x18	; 24
    2cce:	6e 2d       	mov	r22, r14
    2cd0:	ce 01       	movw	r24, r28
    2cd2:	03 96       	adiw	r24, 0x03	; 3
    2cd4:	25 d3       	rcall	.+1610   	; 0x3320 <gfx_mono_draw_string>
				(SYSFONT_HEIGHT + 1) *
				GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION,
				&sysfont);
		if (indicator) {
    2cd6:	dd 20       	and	r13, r13
    2cd8:	39 f0       	breq	.+14     	; 0x2ce8 <gfx_mono_spinctrl_draw_button+0x84>
			/* Draw indicator arrow in front of button */
			gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator,
    2cda:	6c ef       	ldi	r22, 0xFC	; 252
    2cdc:	6e 0d       	add	r22, r14
    2cde:	48 e1       	ldi	r20, 0x18	; 24
    2ce0:	86 e0       	ldi	r24, 0x06	; 6
    2ce2:	90 e2       	ldi	r25, 0x20	; 32
    2ce4:	7d de       	rcall	.-774    	; 0x29e0 <gfx_mono_generic_put_bitmap>
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <gfx_mono_spinctrl_draw_button+0xa2>
					offset - GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
					(SYSFONT_HEIGHT + 1) *
					GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION);
		} else {
			/* Delete indicator */
			gfx_mono_draw_filled_rect(offset -
    2ce8:	00 e0       	ldi	r16, 0x00	; 0
    2cea:	28 e0       	ldi	r18, 0x08	; 8
    2cec:	44 e0       	ldi	r20, 0x04	; 4
    2cee:	68 e1       	ldi	r22, 0x18	; 24
    2cf0:	8c ef       	ldi	r24, 0xFC	; 252
    2cf2:	8e 0d       	add	r24, r14
    2cf4:	bd dd       	rcall	.-1158   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
    2cf6:	07 c0       	rjmp	.+14     	; 0x2d06 <gfx_mono_spinctrl_draw_button+0xa2>
					GFX_MONO_SPINCTRL_INDICATOR_HEIGHT,
					GFX_PIXEL_CLR);
		}
	} else {
		/* Delete OK button */
		gfx_mono_draw_filled_rect(
    2cf8:	00 e0       	ldi	r16, 0x00	; 0
    2cfa:	27 e0       	ldi	r18, 0x07	; 7
    2cfc:	44 e1       	ldi	r20, 0x14	; 20
    2cfe:	68 e1       	ldi	r22, 0x18	; 24
    2d00:	8c ef       	ldi	r24, 0xFC	; 252
    2d02:	8e 0d       	add	r24, r14
    2d04:	b5 dd       	rcall	.-1174   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
				offset - GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
				(SYSFONT_HEIGHT + 1) *
				GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION, 20,
				SYSFONT_HEIGHT, GFX_PIXEL_CLR);
	}
}
    2d06:	68 96       	adiw	r28, 0x18	; 24
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	ff 90       	pop	r15
    2d16:	ef 90       	pop	r14
    2d18:	df 90       	pop	r13
    2d1a:	08 95       	ret

00002d1c <gfx_mono_spinctrl_draw>:
 *
 * \param spinner  pointer to initialized gfx_mono_spinctrl struct
 * \param redraw   true if title of spinner should be drawn
 */
void gfx_mono_spinctrl_draw(struct gfx_mono_spinctrl *spinner, bool redraw)
{
    2d1c:	cf 92       	push	r12
    2d1e:	df 92       	push	r13
    2d20:	ef 92       	push	r14
    2d22:	ff 92       	push	r15
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	29 97       	sbiw	r28, 0x09	; 9
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	7c 01       	movw	r14, r24
	char string_buf[GFX_MONO_SPINCTRL_INT_SPINNER_WIDTH];
	uint8_t index;
	uint8_t offset;

	if (redraw) {
    2d38:	66 23       	and	r22, r22
    2d3a:	81 f0       	breq	.+32     	; 0x2d5c <gfx_mono_spinctrl_draw+0x40>
		/* Clear line */
		gfx_mono_draw_filled_rect(0, spinner->y, GFX_MONO_LCD_WIDTH,
    2d3c:	00 e0       	ldi	r16, 0x00	; 0
    2d3e:	27 e0       	ldi	r18, 0x07	; 7
    2d40:	40 e8       	ldi	r20, 0x80	; 128
    2d42:	dc 01       	movw	r26, r24
    2d44:	1c 96       	adiw	r26, 0x0c	; 12
    2d46:	6c 91       	ld	r22, X
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	92 dd       	rcall	.-1244   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
				SYSFONT_HEIGHT, GFX_PIXEL_CLR);
		/* Draw title */
		gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)spinner->title,
    2d4c:	20 e1       	ldi	r18, 0x10	; 16
    2d4e:	30 e2       	ldi	r19, 0x20	; 32
    2d50:	f7 01       	movw	r30, r14
    2d52:	44 85       	ldd	r20, Z+12	; 0x0c
    2d54:	65 e0       	ldi	r22, 0x05	; 5
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	0b d3       	rcall	.+1558   	; 0x3372 <gfx_mono_draw_progmem_string>
				GFX_MONO_SPINCTRL_INDICATOR_WIDTH + 1,
				spinner->y, &sysfont);
	}

	if (spinner->in_focus) {
    2d5c:	d7 01       	movw	r26, r14
    2d5e:	1d 96       	adiw	r26, 0x0d	; 13
    2d60:	8c 91       	ld	r24, X
    2d62:	1d 97       	sbiw	r26, 0x0d	; 13
    2d64:	88 23       	and	r24, r24
    2d66:	39 f0       	breq	.+14     	; 0x2d76 <gfx_mono_spinctrl_draw+0x5a>
 */
static void gfx_mono_spinctrl_draw_spin_indicator(struct gfx_mono_spinctrl
		*spinner, bool draw)
{
	if (draw) {
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_spin_indicator,
    2d68:	1c 96       	adiw	r26, 0x0c	; 12
    2d6a:	4c 91       	ld	r20, X
    2d6c:	6c e7       	ldi	r22, 0x7C	; 124
    2d6e:	8b e0       	ldi	r24, 0x0B	; 11
    2d70:	90 e2       	ldi	r25, 0x20	; 32
    2d72:	36 de       	rcall	.-916    	; 0x29e0 <gfx_mono_generic_put_bitmap>
    2d74:	07 c0       	rjmp	.+14     	; 0x2d84 <gfx_mono_spinctrl_draw+0x68>
				GFX_MONO_LCD_WIDTH - GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				spinner->y);
	} else {
		gfx_mono_draw_filled_rect(GFX_MONO_LCD_WIDTH -
    2d76:	00 e0       	ldi	r16, 0x00	; 0
    2d78:	28 e0       	ldi	r18, 0x08	; 8
    2d7a:	44 e0       	ldi	r20, 0x04	; 4
    2d7c:	f7 01       	movw	r30, r14
    2d7e:	64 85       	ldd	r22, Z+12	; 0x0c
    2d80:	8c e7       	ldi	r24, 0x7C	; 124
    2d82:	76 dd       	rcall	.-1300   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
		gfx_mono_spinctrl_draw_spin_indicator(spinner, true);
	} else {
		gfx_mono_spinctrl_draw_spin_indicator(spinner, false);
	}

	if (spinner->datatype == SPINTYPE_INTEGER) {
    2d84:	d7 01       	movw	r26, r14
    2d86:	12 96       	adiw	r26, 0x02	; 2
    2d88:	8c 91       	ld	r24, X
    2d8a:	12 97       	sbiw	r26, 0x02	; 2
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	39 f5       	brne	.+78     	; 0x2dde <gfx_mono_spinctrl_draw+0xc2>
		offset = GFX_MONO_LCD_WIDTH -
				(SYSFONT_WIDTH *
				GFX_MONO_SPINCTRL_INT_SPINNER_WIDTH);
		snprintf(string_buf, sizeof(string_buf), "%d",
    2d90:	14 96       	adiw	r26, 0x04	; 4
    2d92:	8c 91       	ld	r24, X
    2d94:	14 97       	sbiw	r26, 0x04	; 4
    2d96:	8f 93       	push	r24
    2d98:	13 96       	adiw	r26, 0x03	; 3
    2d9a:	8c 91       	ld	r24, X
    2d9c:	8f 93       	push	r24
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	91 e2       	ldi	r25, 0x21	; 33
    2da2:	9f 93       	push	r25
    2da4:	8f 93       	push	r24
    2da6:	1f 92       	push	r1
    2da8:	89 e0       	ldi	r24, 0x09	; 9
    2daa:	8f 93       	push	r24
    2dac:	fe 01       	movw	r30, r28
    2dae:	31 96       	adiw	r30, 0x01	; 1
    2db0:	6f 01       	movw	r12, r30
    2db2:	ff 93       	push	r31
    2db4:	ef 93       	push	r30
    2db6:	0e 94 78 42 	call	0x84f0	; 0x84f0 <snprintf>
				spinner->integer_data);
		/* Delete previous spinner data */
		gfx_mono_draw_filled_rect(offset, spinner->y,
    2dba:	00 e0       	ldi	r16, 0x00	; 0
    2dbc:	27 e0       	ldi	r18, 0x07	; 7
    2dbe:	42 e3       	ldi	r20, 0x32	; 50
    2dc0:	d7 01       	movw	r26, r14
    2dc2:	1c 96       	adiw	r26, 0x0c	; 12
    2dc4:	6c 91       	ld	r22, X
    2dc6:	8a e4       	ldi	r24, 0x4A	; 74
    2dc8:	53 dd       	rcall	.-1370   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_LCD_WIDTH - offset -
				GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				SYSFONT_HEIGHT,
				GFX_PIXEL_CLR);
		/* Draw integer data */
		gfx_mono_draw_string(string_buf, offset, spinner->y, &sysfont);
    2dca:	20 e1       	ldi	r18, 0x10	; 16
    2dcc:	30 e2       	ldi	r19, 0x20	; 32
    2dce:	f7 01       	movw	r30, r14
    2dd0:	44 85       	ldd	r20, Z+12	; 0x0c
    2dd2:	6a e4       	ldi	r22, 0x4A	; 74
    2dd4:	c6 01       	movw	r24, r12
    2dd6:	a4 d2       	rcall	.+1352   	; 0x3320 <gfx_mono_draw_string>
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	20 c0       	rjmp	.+64     	; 0x2e1e <gfx_mono_spinctrl_draw+0x102>
	} else if (spinner->datatype == SPINTYPE_STRING) {
    2dde:	81 11       	cpse	r24, r1
    2de0:	1e c0       	rjmp	.+60     	; 0x2e1e <gfx_mono_spinctrl_draw+0x102>
		index = spinner->strings.index;
    2de2:	d7 01       	movw	r26, r14
    2de4:	15 96       	adiw	r26, 0x05	; 5
    2de6:	1c 91       	ld	r17, X
    2de8:	15 97       	sbiw	r26, 0x05	; 5
		offset = GFX_MONO_LCD_WIDTH -
				(SYSFONT_WIDTH *
				GFX_MONO_SPINCTRL_STRING_SPINNER_WIDTH);

		/* Delete previous spinner data */
		gfx_mono_draw_filled_rect(offset, spinner->y,
    2dea:	00 e0       	ldi	r16, 0x00	; 0
    2dec:	27 e0       	ldi	r18, 0x07	; 7
    2dee:	42 e3       	ldi	r20, 0x32	; 50
    2df0:	1c 96       	adiw	r26, 0x0c	; 12
    2df2:	6c 91       	ld	r22, X
    2df4:	8a e4       	ldi	r24, 0x4A	; 74
    2df6:	3c dd       	rcall	.-1416   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				SYSFONT_HEIGHT,
				GFX_PIXEL_CLR);

		/* Draw string data */
		gfx_mono_draw_progmem_string(
    2df8:	e1 2f       	mov	r30, r17
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	ee 0f       	add	r30, r30
    2dfe:	ff 1f       	adc	r31, r31
    2e00:	d7 01       	movw	r26, r14
    2e02:	13 96       	adiw	r26, 0x03	; 3
    2e04:	8d 91       	ld	r24, X+
    2e06:	9c 91       	ld	r25, X
    2e08:	14 97       	sbiw	r26, 0x04	; 4
    2e0a:	e8 0f       	add	r30, r24
    2e0c:	f9 1f       	adc	r31, r25
    2e0e:	20 e1       	ldi	r18, 0x10	; 16
    2e10:	30 e2       	ldi	r19, 0x20	; 32
    2e12:	1c 96       	adiw	r26, 0x0c	; 12
    2e14:	4c 91       	ld	r20, X
    2e16:	6a e4       	ldi	r22, 0x4A	; 74
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	aa d2       	rcall	.+1364   	; 0x3372 <gfx_mono_draw_progmem_string>
				(char PROGMEM_PTR_T)spinner->strings.data[index], offset,
				spinner->y, &sysfont);
	}
}
    2e1e:	29 96       	adiw	r28, 0x09	; 9
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	1f 91       	pop	r17
    2e2a:	0f 91       	pop	r16
    2e2c:	ff 90       	pop	r15
    2e2e:	ef 90       	pop	r14
    2e30:	df 90       	pop	r13
    2e32:	cf 90       	pop	r12
    2e34:	08 95       	ret

00002e36 <gfx_mono_spinctrl_init>:
void gfx_mono_spinctrl_init(struct gfx_mono_spinctrl *spinner,
		gfx_mono_spinctrl_type_t datatype, PROGMEM_STRING_T title,
		PROGMEM_STRING_T *data, int16_t lower_limit,
		int16_t upper_limit,
		gfx_coord_t y)
{
    2e36:	cf 92       	push	r12
    2e38:	ef 92       	push	r14
    2e3a:	ff 92       	push	r15
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	fc 01       	movw	r30, r24
	/* Initialization of spinner parameters */
	spinner->title = title;
    2e42:	40 83       	st	Z, r20
    2e44:	51 83       	std	Z+1, r21	; 0x01
	spinner->datatype = datatype;
    2e46:	62 83       	std	Z+2, r22	; 0x02
	spinner->lower_limit = lower_limit;
    2e48:	00 87       	std	Z+8, r16	; 0x08
    2e4a:	11 87       	std	Z+9, r17	; 0x09
	spinner->upper_limit = upper_limit;
    2e4c:	e2 86       	std	Z+10, r14	; 0x0a
    2e4e:	f3 86       	std	Z+11, r15	; 0x0b
	spinner->y = y;
    2e50:	c4 86       	std	Z+12, r12	; 0x0c
	spinner->in_focus = false;
    2e52:	15 86       	std	Z+13, r1	; 0x0d
	spinner->last_saved_value = spinner->lower_limit;
    2e54:	06 83       	std	Z+6, r16	; 0x06
    2e56:	17 83       	std	Z+7, r17	; 0x07

	if (datatype == SPINTYPE_STRING) {
    2e58:	61 11       	cpse	r22, r1
    2e5a:	04 c0       	rjmp	.+8      	; 0x2e64 <gfx_mono_spinctrl_init+0x2e>
		spinner->strings.data = data;
    2e5c:	23 83       	std	Z+3, r18	; 0x03
    2e5e:	34 83       	std	Z+4, r19	; 0x04
		spinner->strings.index = lower_limit;
    2e60:	05 83       	std	Z+5, r16	; 0x05
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <gfx_mono_spinctrl_init+0x32>
	} else {
		spinner->integer_data = lower_limit;
    2e64:	03 83       	std	Z+3, r16	; 0x03
    2e66:	14 83       	std	Z+4, r17	; 0x04
	}
}
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	cf 90       	pop	r12
    2e72:	08 95       	ret

00002e74 <gfx_mono_spinctrl_spincollection_init>:
 *
 * \param collection pointer to gfx_mono_spinctrl_spincollection to Initialize
 */
void gfx_mono_spinctrl_spincollection_init(struct
		gfx_mono_spinctrl_spincollection *collection)
{
    2e74:	fc 01       	movw	r30, r24
	collection->active_spinner = false;
    2e76:	10 86       	std	Z+8, r1	; 0x08
	collection->current_selection = 0;
    2e78:	15 82       	std	Z+5, r1	; 0x05
	collection->number_of_spinners = 0;
    2e7a:	14 82       	std	Z+4, r1	; 0x04
	collection->init = true;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	81 87       	std	Z+9, r24	; 0x09
    2e80:	08 95       	ret

00002e82 <gfx_mono_spinctrl_spincollection_add_spinner>:
 *
 */
void gfx_mono_spinctrl_spincollection_add_spinner(struct
		gfx_mono_spinctrl *spinner,
		struct gfx_mono_spinctrl_spincollection *spinners)
{
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	ec 01       	movw	r28, r24
    2e88:	db 01       	movw	r26, r22
	uint8_t i;
	struct gfx_mono_spinctrl *lastspinner;

	/* Do not add more spinner elements than maximum number of spinners */
	if (spinners->number_of_spinners >=
    2e8a:	14 96       	adiw	r26, 0x04	; 4
    2e8c:	9c 91       	ld	r25, X
    2e8e:	14 97       	sbiw	r26, 0x04	; 4
    2e90:	93 30       	cpi	r25, 0x03	; 3
    2e92:	38 f5       	brcc	.+78     	; 0x2ee2 <gfx_mono_spinctrl_spincollection_add_spinner+0x60>
			GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION) {
		return;
	}

	/* Place new spinner below previous spinners on screen */
	spinner->y = (SYSFONT_HEIGHT + 1) * spinners->number_of_spinners;
    2e94:	99 0f       	add	r25, r25
    2e96:	99 0f       	add	r25, r25
    2e98:	99 0f       	add	r25, r25
    2e9a:	9c 87       	std	Y+12, r25	; 0x0c

	/* Add pointer to the spinner in spincollection if empty */
	if (spinners->number_of_spinners == 0) {
    2e9c:	14 96       	adiw	r26, 0x04	; 4
    2e9e:	2c 91       	ld	r18, X
    2ea0:	14 97       	sbiw	r26, 0x04	; 4
    2ea2:	21 11       	cpse	r18, r1
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <gfx_mono_spinctrl_spincollection_add_spinner+0x2c>
		spinners->collection = spinner;
    2ea6:	cd 93       	st	X+, r28
    2ea8:	dc 93       	st	X, r29
    2eaa:	11 97       	sbiw	r26, 0x01	; 1
    2eac:	10 c0       	rjmp	.+32     	; 0x2ece <gfx_mono_spinctrl_spincollection_add_spinner+0x4c>
	} else {
		lastspinner = spinners->collection;
    2eae:	ed 91       	ld	r30, X+
    2eb0:	fc 91       	ld	r31, X
    2eb2:	11 97       	sbiw	r26, 0x01	; 1
		for (i = 1; i < spinners->number_of_spinners; i++) {
    2eb4:	22 30       	cpi	r18, 0x02	; 2
    2eb6:	38 f0       	brcs	.+14     	; 0x2ec6 <gfx_mono_spinctrl_spincollection_add_spinner+0x44>
    2eb8:	91 e0       	ldi	r25, 0x01	; 1
			lastspinner = lastspinner->next;
    2eba:	06 84       	ldd	r0, Z+14	; 0x0e
    2ebc:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ebe:	e0 2d       	mov	r30, r0
	/* Add pointer to the spinner in spincollection if empty */
	if (spinners->number_of_spinners == 0) {
		spinners->collection = spinner;
	} else {
		lastspinner = spinners->collection;
		for (i = 1; i < spinners->number_of_spinners; i++) {
    2ec0:	9f 5f       	subi	r25, 0xFF	; 255
    2ec2:	29 13       	cpse	r18, r25
    2ec4:	fa cf       	rjmp	.-12     	; 0x2eba <gfx_mono_spinctrl_spincollection_add_spinner+0x38>
			lastspinner = lastspinner->next;
		}
		/* Link the new spinner to the current last spinner in the
		 * collection */
		lastspinner->next = spinner;
    2ec6:	c6 87       	std	Z+14, r28	; 0x0e
    2ec8:	d7 87       	std	Z+15, r29	; 0x0f
		/* Link the current last spinner as previous spinner for new
		 * spinner */
		spinner->prev = lastspinner;
    2eca:	e8 8b       	std	Y+16, r30	; 0x10
    2ecc:	f9 8b       	std	Y+17, r31	; 0x11
	}

	/* Set added spinner as last spinner in collection */
	spinners->collection_last = spinner;
    2ece:	12 96       	adiw	r26, 0x02	; 2
    2ed0:	cd 93       	st	X+, r28
    2ed2:	dc 93       	st	X, r29
    2ed4:	13 97       	sbiw	r26, 0x03	; 3
	/* Update number of spinners in collection */
	spinners->number_of_spinners++;
    2ed6:	14 96       	adiw	r26, 0x04	; 4
    2ed8:	8c 91       	ld	r24, X
    2eda:	14 97       	sbiw	r26, 0x04	; 4
    2edc:	8f 5f       	subi	r24, 0xFF	; 255
    2ede:	14 96       	adiw	r26, 0x04	; 4
    2ee0:	8c 93       	st	X, r24
}
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	08 95       	ret

00002ee8 <gfx_mono_spinctrl_spincollection_show>:
 *
 * \param spinners pointer to initialized spincollection to display
 */
void gfx_mono_spinctrl_spincollection_show(struct
		gfx_mono_spinctrl_spincollection *spinners)
{
    2ee8:	ef 92       	push	r14
    2eea:	ff 92       	push	r15
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	7c 01       	movw	r14, r24
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    2ef4:	00 e0       	ldi	r16, 0x00	; 0
    2ef6:	20 e2       	ldi	r18, 0x20	; 32
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	b8 dc       	rcall	.-1680   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	/* Make sure there are spinners in the collection */
	if (spinners->number_of_spinners == 0) {
    2f00:	f7 01       	movw	r30, r14
    2f02:	84 81       	ldd	r24, Z+4	; 0x04
    2f04:	88 23       	and	r24, r24
    2f06:	b1 f0       	breq	.+44     	; 0x2f34 <gfx_mono_spinctrl_spincollection_show+0x4c>
		return;
	}

	/* Draw spinners on screen */
	iterator = spinners->collection;
    2f08:	00 81       	ld	r16, Z
    2f0a:	11 81       	ldd	r17, Z+1	; 0x01
    2f0c:	c0 e0       	ldi	r28, 0x00	; 0
	for (i = 0; i < spinners->number_of_spinners; i++) {
		gfx_mono_spinctrl_draw(iterator, true);
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	c8 01       	movw	r24, r16
    2f12:	04 df       	rcall	.-504    	; 0x2d1c <gfx_mono_spinctrl_draw>
		iterator = iterator->next;
    2f14:	f8 01       	movw	r30, r16
    2f16:	06 85       	ldd	r16, Z+14	; 0x0e
    2f18:	17 85       	ldd	r17, Z+15	; 0x0f
		return;
	}

	/* Draw spinners on screen */
	iterator = spinners->collection;
	for (i = 0; i < spinners->number_of_spinners; i++) {
    2f1a:	cf 5f       	subi	r28, 0xFF	; 255
    2f1c:	f7 01       	movw	r30, r14
    2f1e:	84 81       	ldd	r24, Z+4	; 0x04
    2f20:	c8 17       	cp	r28, r24
    2f22:	a8 f3       	brcs	.-22     	; 0x2f0e <gfx_mono_spinctrl_spincollection_show+0x26>
		gfx_mono_spinctrl_draw(iterator, true);
		iterator = iterator->next;
	}
	/* Draw OK button at bottom of screen */
	gfx_mono_spinctrl_draw_button(true, false);
    2f24:	60 e0       	ldi	r22, 0x00	; 0
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	9d de       	rcall	.-710    	; 0x2c64 <gfx_mono_spinctrl_draw_button>
	/* Draw indicator arrow in front of first spinner */
	gfx_mono_spinctrl_draw_indicator(spinners->collection, true);
    2f2a:	61 e0       	ldi	r22, 0x01	; 1
    2f2c:	f7 01       	movw	r30, r14
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	85 de       	rcall	.-758    	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
}
    2f34:	cf 91       	pop	r28
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	ff 90       	pop	r15
    2f3c:	ef 90       	pop	r14
    2f3e:	08 95       	ret

00002f40 <gfx_mono_spinctrl_process_key>:
 * \retval GFX_MONO_SPINCTRL_EVENT_IDLE spinner spinning
 * \retval GFX_MONO_SPINCTRL_EVENT_BACK spinner deselected
 */
int16_t gfx_mono_spinctrl_process_key(struct gfx_mono_spinctrl *spinner,
		uint8_t keycode)
{
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	ec 01       	movw	r28, r24
	switch (keycode) {
    2f46:	6d 30       	cpi	r22, 0x0D	; 13
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <gfx_mono_spinctrl_process_key+0xc>
    2f4a:	62 c0       	rjmp	.+196    	; 0x3010 <gfx_mono_spinctrl_process_key+0xd0>
    2f4c:	20 f4       	brcc	.+8      	; 0x2f56 <gfx_mono_spinctrl_process_key+0x16>
    2f4e:	68 30       	cpi	r22, 0x08	; 8
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <gfx_mono_spinctrl_process_key+0x14>
    2f52:	80 c0       	rjmp	.+256    	; 0x3054 <gfx_mono_spinctrl_process_key+0x114>
    2f54:	92 c0       	rjmp	.+292    	; 0x307a <gfx_mono_spinctrl_process_key+0x13a>
    2f56:	66 32       	cpi	r22, 0x26	; 38
    2f58:	79 f1       	breq	.+94     	; 0x2fb8 <gfx_mono_spinctrl_process_key+0x78>
    2f5a:	68 32       	cpi	r22, 0x28	; 40
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <gfx_mono_spinctrl_process_key+0x20>
    2f5e:	8d c0       	rjmp	.+282    	; 0x307a <gfx_mono_spinctrl_process_key+0x13a>
	case GFX_MONO_SPINCTRL_KEYCODE_DOWN:
		if (spinner->in_focus) {
    2f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f62:	88 23       	and	r24, r24
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <gfx_mono_spinctrl_process_key+0x28>
    2f66:	8c c0       	rjmp	.+280    	; 0x3080 <gfx_mono_spinctrl_process_key+0x140>
static void gfx_mono_spinctrl_step_down(struct gfx_mono_spinctrl *spinner)
{
	/* Check if spinner type is integer or string, increment integer data,
	 * move to next string index.
	 */
	if (spinner->datatype == SPINTYPE_INTEGER) {
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	81 30       	cpi	r24, 0x01	; 1
    2f6c:	81 f4       	brne	.+32     	; 0x2f8e <gfx_mono_spinctrl_process_key+0x4e>
		if (spinner->integer_data > spinner->lower_limit) {
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	9c 81       	ldd	r25, Y+4	; 0x04
    2f72:	28 85       	ldd	r18, Y+8	; 0x08
    2f74:	39 85       	ldd	r19, Y+9	; 0x09
    2f76:	28 17       	cp	r18, r24
    2f78:	39 07       	cpc	r19, r25
    2f7a:	24 f4       	brge	.+8      	; 0x2f84 <gfx_mono_spinctrl_process_key+0x44>
			spinner->integer_data--;
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	14 c0       	rjmp	.+40     	; 0x2fac <gfx_mono_spinctrl_process_key+0x6c>
		} else {
			spinner->integer_data = spinner->upper_limit;
    2f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f86:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f88:	8b 83       	std	Y+3, r24	; 0x03
    2f8a:	9c 83       	std	Y+4, r25	; 0x04
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <gfx_mono_spinctrl_process_key+0x6c>
		}
	} else if (spinner->datatype == SPINTYPE_STRING) {
    2f8e:	81 11       	cpse	r24, r1
    2f90:	0d c0       	rjmp	.+26     	; 0x2fac <gfx_mono_spinctrl_process_key+0x6c>
		if (spinner->strings.index > (spinner->lower_limit)) {
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	48 2f       	mov	r20, r24
    2f96:	50 e0       	ldi	r21, 0x00	; 0
    2f98:	28 85       	ldd	r18, Y+8	; 0x08
    2f9a:	39 85       	ldd	r19, Y+9	; 0x09
    2f9c:	24 17       	cp	r18, r20
    2f9e:	35 07       	cpc	r19, r21
    2fa0:	1c f4       	brge	.+6      	; 0x2fa8 <gfx_mono_spinctrl_process_key+0x68>
			spinner->strings.index--;
    2fa2:	81 50       	subi	r24, 0x01	; 1
    2fa4:	8d 83       	std	Y+5, r24	; 0x05
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <gfx_mono_spinctrl_process_key+0x6c>
		} else {
			spinner->strings.index = spinner->upper_limit;
    2fa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2faa:	8d 83       	std	Y+5, r24	; 0x05
	switch (keycode) {
	case GFX_MONO_SPINCTRL_KEYCODE_DOWN:
		if (spinner->in_focus) {
			gfx_mono_spinctrl_step_down(spinner);
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
    2fac:	60 e0       	ldi	r22, 0x00	; 0
    2fae:	ce 01       	movw	r24, r28
    2fb0:	b5 de       	rcall	.-662    	; 0x2d1c <gfx_mono_spinctrl_draw>
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    2fb2:	8f ef       	ldi	r24, 0xFF	; 255
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	6c c0       	rjmp	.+216    	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>

	case GFX_MONO_SPINCTRL_KEYCODE_UP:
		if (spinner->in_focus) {
    2fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fba:	88 23       	and	r24, r24
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <gfx_mono_spinctrl_process_key+0x80>
    2fbe:	63 c0       	rjmp	.+198    	; 0x3086 <gfx_mono_spinctrl_process_key+0x146>
static void gfx_mono_spinctrl_step_up(struct gfx_mono_spinctrl *spinner)
{
	/* Check if spinner type is integer or string, increment integer data or
	 * move to next string index.
	 */
	if (spinner->datatype == SPINTYPE_INTEGER) {
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	81 30       	cpi	r24, 0x01	; 1
    2fc4:	81 f4       	brne	.+32     	; 0x2fe6 <gfx_mono_spinctrl_process_key+0xa6>
		if (spinner->integer_data < spinner->upper_limit) {
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fca:	2a 85       	ldd	r18, Y+10	; 0x0a
    2fcc:	3b 85       	ldd	r19, Y+11	; 0x0b
    2fce:	82 17       	cp	r24, r18
    2fd0:	93 07       	cpc	r25, r19
    2fd2:	24 f4       	brge	.+8      	; 0x2fdc <gfx_mono_spinctrl_process_key+0x9c>
			spinner->integer_data++;
    2fd4:	01 96       	adiw	r24, 0x01	; 1
    2fd6:	8b 83       	std	Y+3, r24	; 0x03
    2fd8:	9c 83       	std	Y+4, r25	; 0x04
    2fda:	14 c0       	rjmp	.+40     	; 0x3004 <gfx_mono_spinctrl_process_key+0xc4>
		} else {
			spinner->integer_data = spinner->lower_limit;
    2fdc:	88 85       	ldd	r24, Y+8	; 0x08
    2fde:	99 85       	ldd	r25, Y+9	; 0x09
    2fe0:	8b 83       	std	Y+3, r24	; 0x03
    2fe2:	9c 83       	std	Y+4, r25	; 0x04
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <gfx_mono_spinctrl_process_key+0xc4>
		}
	} else if (spinner->datatype == SPINTYPE_STRING) {
    2fe6:	81 11       	cpse	r24, r1
    2fe8:	0d c0       	rjmp	.+26     	; 0x3004 <gfx_mono_spinctrl_process_key+0xc4>
		if (spinner->strings.index < spinner->upper_limit) {
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	48 2f       	mov	r20, r24
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ff2:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ff4:	42 17       	cp	r20, r18
    2ff6:	53 07       	cpc	r21, r19
    2ff8:	1c f4       	brge	.+6      	; 0x3000 <gfx_mono_spinctrl_process_key+0xc0>
			spinner->strings.index++;
    2ffa:	8f 5f       	subi	r24, 0xFF	; 255
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
    2ffe:	02 c0       	rjmp	.+4      	; 0x3004 <gfx_mono_spinctrl_process_key+0xc4>
		} else {
			(spinner->strings.index) = spinner->lower_limit;
    3000:	88 85       	ldd	r24, Y+8	; 0x08
    3002:	8d 83       	std	Y+5, r24	; 0x05

	case GFX_MONO_SPINCTRL_KEYCODE_UP:
		if (spinner->in_focus) {
			gfx_mono_spinctrl_step_up(spinner);
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	ce 01       	movw	r24, r28
    3008:	89 de       	rcall	.-750    	; 0x2d1c <gfx_mono_spinctrl_draw>
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    300a:	8f ef       	ldi	r24, 0xFF	; 255
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	40 c0       	rjmp	.+128    	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>

	case GFX_MONO_SPINCTRL_KEYCODE_ENTER:
		if (spinner->in_focus) {
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	88 23       	and	r24, r24
    3014:	b9 f0       	breq	.+46     	; 0x3044 <gfx_mono_spinctrl_process_key+0x104>
			if (spinner->datatype == SPINTYPE_INTEGER) {
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	81 30       	cpi	r24, 0x01	; 1
    301a:	49 f4       	brne	.+18     	; 0x302e <gfx_mono_spinctrl_process_key+0xee>
				spinner->in_focus = false;
    301c:	1d 86       	std	Y+13, r1	; 0x0d
				gfx_mono_spinctrl_draw(spinner, false);
    301e:	60 e0       	ldi	r22, 0x00	; 0
    3020:	ce 01       	movw	r24, r28
    3022:	7c de       	rcall	.-776    	; 0x2d1c <gfx_mono_spinctrl_draw>
				/* Store saved value in case of aborting spinner
				 * later */
				spinner->last_saved_value
					= spinner->integer_data;
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	9c 81       	ldd	r25, Y+4	; 0x04
    3028:	8e 83       	std	Y+6, r24	; 0x06
    302a:	9f 83       	std	Y+7, r25	; 0x07
				/* Got what we want. Return selection. */
				return spinner->integer_data;
    302c:	31 c0       	rjmp	.+98     	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>
			} else if (spinner->datatype == SPINTYPE_STRING) {
    302e:	81 11       	cpse	r24, r1
    3030:	2d c0       	rjmp	.+90     	; 0x308c <gfx_mono_spinctrl_process_key+0x14c>
				spinner->in_focus = false;
				gfx_mono_spinctrl_draw(spinner, false);
    3032:	1d 86       	std	Y+13, r1	; 0x0d
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	ce 01       	movw	r24, r28
    3038:	71 de       	rcall	.-798    	; 0x2d1c <gfx_mono_spinctrl_draw>
				/* Store saved value in case of aborting spinner
				 * later */
				spinner->last_saved_value
					= spinner->strings.index;
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	8e 83       	std	Y+6, r24	; 0x06
    3040:	9f 83       	std	Y+7, r25	; 0x07
				/* Got what we want. Return selection. */
				return spinner->strings.index;
    3042:	26 c0       	rjmp	.+76     	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>
			}
		} else {
			/* Spinner selected */
			spinner->in_focus = true;
    3044:	81 e0       	ldi	r24, 0x01	; 1
			gfx_mono_spinctrl_draw(spinner, false);
    3046:	8d 87       	std	Y+13, r24	; 0x0d
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	ce 01       	movw	r24, r28
    304c:	67 de       	rcall	.-818    	; 0x2d1c <gfx_mono_spinctrl_draw>
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    304e:	8f ef       	ldi	r24, 0xFF	; 255
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	1e c0       	rjmp	.+60     	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>
		}

	case GFX_MONO_SPINCTRL_KEYCODE_BACK:
		/* User pressed "back" key, */
		spinner->in_focus = false;
    3054:	1d 86       	std	Y+13, r1	; 0x0d
		/* Spinner choice aborted, show last saved value instead */
		if (spinner->datatype == SPINTYPE_INTEGER) {
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	29 f4       	brne	.+10     	; 0x3066 <gfx_mono_spinctrl_process_key+0x126>
			spinner->integer_data = spinner->last_saved_value;
    305c:	8e 81       	ldd	r24, Y+6	; 0x06
    305e:	9f 81       	ldd	r25, Y+7	; 0x07
    3060:	8b 83       	std	Y+3, r24	; 0x03
    3062:	9c 83       	std	Y+4, r25	; 0x04
    3064:	04 c0       	rjmp	.+8      	; 0x306e <gfx_mono_spinctrl_process_key+0x12e>
		} else if (spinner->datatype == SPINTYPE_STRING) {
    3066:	81 11       	cpse	r24, r1
			spinner->strings.index = spinner->last_saved_value;
    3068:	02 c0       	rjmp	.+4      	; 0x306e <gfx_mono_spinctrl_process_key+0x12e>
    306a:	8e 81       	ldd	r24, Y+6	; 0x06
		}

		gfx_mono_spinctrl_draw(spinner, false);
    306c:	8d 83       	std	Y+5, r24	; 0x05
    306e:	60 e0       	ldi	r22, 0x00	; 0
    3070:	ce 01       	movw	r24, r28
    3072:	54 de       	rcall	.-856    	; 0x2d1c <gfx_mono_spinctrl_draw>
		return GFX_MONO_SPINCTRL_EVENT_BACK;
    3074:	8e ef       	ldi	r24, 0xFE	; 254
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0b c0       	rjmp	.+22     	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>

	default:
		/* Unknown key event */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    307a:	8f ef       	ldi	r24, 0xFF	; 255
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	08 c0       	rjmp	.+16     	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    3080:	8f ef       	ldi	r24, 0xFF	; 255
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	05 c0       	rjmp	.+10     	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    3086:	8f ef       	ldi	r24, 0xFF	; 255
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <gfx_mono_spinctrl_process_key+0x150>
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
		}

	case GFX_MONO_SPINCTRL_KEYCODE_BACK:
		/* User pressed "back" key, */
		spinner->in_focus = false;
    308c:	1d 86       	std	Y+13, r1	; 0x0d
    308e:	ef cf       	rjmp	.-34     	; 0x306e <gfx_mono_spinctrl_process_key+0x12e>

	default:
		/* Unknown key event */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
	}
}
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	08 95       	ret

00003096 <gfx_mono_spinctrl_spincollection_process_key>:
 * \retval GFX_MONO_SPINCTRL_EVENT_IDLE    user is navigating in spincollection
 */
int16_t gfx_mono_spinctrl_spincollection_process_key(struct
		gfx_mono_spinctrl_spincollection *spinners, uint8_t keycode,
		int16_t results[])
{
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	ec 01       	movw	r28, r24
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Make sure there are spinners in the collection, if not, cancel */
	if (spinners->number_of_spinners == 0) {
    30a4:	8c 81       	ldd	r24, Y+4	; 0x04
    30a6:	88 23       	and	r24, r24
    30a8:	09 f4       	brne	.+2      	; 0x30ac <gfx_mono_spinctrl_spincollection_process_key+0x16>
    30aa:	cb c0       	rjmp	.+406    	; 0x3242 <gfx_mono_spinctrl_spincollection_process_key+0x1ac>
		return GFX_MONO_SPINCTRL_EVENT_BACK;
	}

	/* Store initial values in results array first time function is run */
	if (spinners->init) {
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	88 23       	and	r24, r24
    30b0:	51 f1       	breq	.+84     	; 0x3106 <gfx_mono_spinctrl_spincollection_process_key+0x70>
		iterator = spinners->collection;
    30b2:	a8 81       	ld	r26, Y
    30b4:	b9 81       	ldd	r27, Y+1	; 0x01
    30b6:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < spinners->number_of_spinners; i++) {
			if (iterator->datatype == SPINTYPE_INTEGER) {
    30b8:	12 96       	adiw	r26, 0x02	; 2
    30ba:	8c 91       	ld	r24, X
    30bc:	12 97       	sbiw	r26, 0x02	; 2
    30be:	81 30       	cpi	r24, 0x01	; 1
    30c0:	69 f4       	brne	.+26     	; 0x30dc <gfx_mono_spinctrl_spincollection_process_key+0x46>
				results[i] = iterator->integer_data;
    30c2:	13 96       	adiw	r26, 0x03	; 3
    30c4:	2d 91       	ld	r18, X+
    30c6:	3c 91       	ld	r19, X
    30c8:	14 97       	sbiw	r26, 0x04	; 4
    30ca:	e9 2f       	mov	r30, r25
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	ee 0f       	add	r30, r30
    30d0:	ff 1f       	adc	r31, r31
    30d2:	e4 0f       	add	r30, r20
    30d4:	f5 1f       	adc	r31, r21
    30d6:	20 83       	st	Z, r18
    30d8:	31 83       	std	Z+1, r19	; 0x01
    30da:	0c c0       	rjmp	.+24     	; 0x30f4 <gfx_mono_spinctrl_spincollection_process_key+0x5e>
			} else {
				results[i] = iterator->strings.index;
    30dc:	e9 2f       	mov	r30, r25
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	ee 0f       	add	r30, r30
    30e2:	ff 1f       	adc	r31, r31
    30e4:	e4 0f       	add	r30, r20
    30e6:	f5 1f       	adc	r31, r21
    30e8:	15 96       	adiw	r26, 0x05	; 5
    30ea:	2c 91       	ld	r18, X
    30ec:	15 97       	sbiw	r26, 0x05	; 5
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	20 83       	st	Z, r18
    30f2:	31 83       	std	Z+1, r19	; 0x01
			}

			iterator = iterator->next;
    30f4:	1e 96       	adiw	r26, 0x0e	; 14
    30f6:	0d 90       	ld	r0, X+
    30f8:	bc 91       	ld	r27, X
    30fa:	a0 2d       	mov	r26, r0
	}

	/* Store initial values in results array first time function is run */
	if (spinners->init) {
		iterator = spinners->collection;
		for (i = 0; i < spinners->number_of_spinners; i++) {
    30fc:	9f 5f       	subi	r25, 0xFF	; 255
    30fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3100:	98 17       	cp	r25, r24
    3102:	d0 f2       	brcs	.-76     	; 0x30b8 <gfx_mono_spinctrl_spincollection_process_key+0x22>
				results[i] = iterator->strings.index;
			}

			iterator = iterator->next;
		}
		spinners->init = false;
    3104:	19 86       	std	Y+9, r1	; 0x09
	}

	/* Find current spinner selection */
	iterator = spinners->collection;
    3106:	08 81       	ld	r16, Y
    3108:	19 81       	ldd	r17, Y+1	; 0x01
	if (spinners->current_selection != GFX_MONO_SPINCTRL_BUTTON) {
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
		for (i = 0; i < spinners->current_selection; i++) {
    310c:	9f ef       	ldi	r25, 0xFF	; 255
    310e:	98 0f       	add	r25, r24
    3110:	9e 3f       	cpi	r25, 0xFE	; 254
    3112:	38 f4       	brcc	.+14     	; 0x3122 <gfx_mono_spinctrl_spincollection_process_key+0x8c>
    3114:	90 e0       	ldi	r25, 0x00	; 0
			iterator = iterator->next;
    3116:	f8 01       	movw	r30, r16
    3118:	06 85       	ldd	r16, Z+14	; 0x0e
    311a:	17 85       	ldd	r17, Z+15	; 0x0f
	}

	/* Find current spinner selection */
	iterator = spinners->collection;
	if (spinners->current_selection != GFX_MONO_SPINCTRL_BUTTON) {
		for (i = 0; i < spinners->current_selection; i++) {
    311c:	9f 5f       	subi	r25, 0xFF	; 255
    311e:	89 13       	cpse	r24, r25
    3120:	fa cf       	rjmp	.-12     	; 0x3116 <gfx_mono_spinctrl_spincollection_process_key+0x80>
    3122:	7a 01       	movw	r14, r20
			iterator = iterator->next;
		}
	}

	if (spinners->active_spinner) {
    3124:	98 85       	ldd	r25, Y+8	; 0x08
    3126:	99 23       	and	r25, r25
    3128:	e1 f0       	breq	.+56     	; 0x3162 <gfx_mono_spinctrl_spincollection_process_key+0xcc>
		/* Process chosen spinner */
		spinners->selection = gfx_mono_spinctrl_process_key(iterator,
    312a:	c8 01       	movw	r24, r16
    312c:	09 df       	rcall	.-494    	; 0x2f40 <gfx_mono_spinctrl_process_key>
    312e:	8e 83       	std	Y+6, r24	; 0x06
    3130:	9f 83       	std	Y+7, r25	; 0x07
				keycode);
		if (spinners->selection == GFX_MONO_SPINCTRL_EVENT_BACK) {
    3132:	8e 3f       	cpi	r24, 0xFE	; 254
    3134:	91 05       	cpc	r25, r1
    3136:	21 f4       	brne	.+8      	; 0x3140 <gfx_mono_spinctrl_spincollection_process_key+0xaa>
			/* User has exited spinner without saving the result */
			spinners->active_spinner = false;
    3138:	18 86       	std	Y+8, r1	; 0x08
				= spinners->selection;
			/* Step out of spinner and into spincollection */
			spinners->active_spinner = false;
		}

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    313a:	8f ef       	ldi	r24, 0xFF	; 255
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	8c c0       	rjmp	.+280    	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
		spinners->selection = gfx_mono_spinctrl_process_key(iterator,
				keycode);
		if (spinners->selection == GFX_MONO_SPINCTRL_EVENT_BACK) {
			/* User has exited spinner without saving the result */
			spinners->active_spinner = false;
		} else if (spinners->selection !=
    3140:	8f 3f       	cpi	r24, 0xFF	; 255
    3142:	91 05       	cpc	r25, r1
    3144:	09 f4       	brne	.+2      	; 0x3148 <gfx_mono_spinctrl_spincollection_process_key+0xb2>
    3146:	80 c0       	rjmp	.+256    	; 0x3248 <gfx_mono_spinctrl_spincollection_process_key+0x1b2>
				GFX_MONO_SPINCTRL_EVENT_IDLE) {
			/* Value selected, store in array */
			results[spinners->current_selection]
				= spinners->selection;
    3148:	4d 81       	ldd	r20, Y+5	; 0x05
    314a:	50 e0       	ldi	r21, 0x00	; 0
    314c:	44 0f       	add	r20, r20
    314e:	55 1f       	adc	r21, r21
    3150:	f7 01       	movw	r30, r14
    3152:	e4 0f       	add	r30, r20
    3154:	f5 1f       	adc	r31, r21
    3156:	80 83       	st	Z, r24
    3158:	91 83       	std	Z+1, r25	; 0x01
			/* Step out of spinner and into spincollection */
			spinners->active_spinner = false;
    315a:	18 86       	std	Y+8, r1	; 0x08
		}

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    315c:	8f ef       	ldi	r24, 0xFF	; 255
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	7b c0       	rjmp	.+246    	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
	} else {
		switch (keycode) {
    3162:	6d 30       	cpi	r22, 0x0D	; 13
    3164:	09 f4       	brne	.+2      	; 0x3168 <gfx_mono_spinctrl_spincollection_process_key+0xd2>
    3166:	63 c0       	rjmp	.+198    	; 0x322e <gfx_mono_spinctrl_spincollection_process_key+0x198>
    3168:	20 f4       	brcc	.+8      	; 0x3172 <gfx_mono_spinctrl_spincollection_process_key+0xdc>
    316a:	68 30       	cpi	r22, 0x08	; 8
    316c:	09 f4       	brne	.+2      	; 0x3170 <gfx_mono_spinctrl_spincollection_process_key+0xda>
    316e:	6f c0       	rjmp	.+222    	; 0x324e <gfx_mono_spinctrl_spincollection_process_key+0x1b8>
    3170:	04 c0       	rjmp	.+8      	; 0x317a <gfx_mono_spinctrl_spincollection_process_key+0xe4>
    3172:	66 32       	cpi	r22, 0x26	; 38
    3174:	91 f1       	breq	.+100    	; 0x31da <gfx_mono_spinctrl_spincollection_process_key+0x144>
    3176:	68 32       	cpi	r22, 0x28	; 40
    3178:	19 f0       	breq	.+6      	; 0x3180 <gfx_mono_spinctrl_spincollection_process_key+0xea>
			/* User pressed "back" key, */
			return GFX_MONO_SPINCTRL_EVENT_BACK;

		default:
			/* Unknown key event */
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    317a:	8f ef       	ldi	r24, 0xFF	; 255
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	6c c0       	rjmp	.+216    	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
	} else {
		switch (keycode) {
		case GFX_MONO_SPINCTRL_KEYCODE_DOWN:
			if (spinners->current_selection ==
    3180:	8f 3f       	cpi	r24, 0xFF	; 255
    3182:	51 f4       	brne	.+20     	; 0x3198 <gfx_mono_spinctrl_spincollection_process_key+0x102>
					GFX_MONO_SPINCTRL_BUTTON) {
				spinners->current_selection = 0;
    3184:	1d 82       	std	Y+5, r1	; 0x05
				/* Delete indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, false);
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	6c dd       	rcall	.-1320   	; 0x2c64 <gfx_mono_spinctrl_draw_button>
				/* Draw indicator arrow in front of first
				 * spinner */
				gfx_mono_spinctrl_draw_indicator(iterator,
    318c:	61 e0       	ldi	r22, 0x01	; 1
    318e:	c8 01       	movw	r24, r16
    3190:	56 dd       	rcall	.-1364   	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    3192:	8f ef       	ldi	r24, 0xFF	; 255
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	60 c0       	rjmp	.+192    	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
				gfx_mono_spinctrl_draw_button(true, false);
				/* Draw indicator arrow in front of first
				 * spinner */
				gfx_mono_spinctrl_draw_indicator(iterator,
						true);
			} else if (spinners->current_selection <
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	2c 81       	ldd	r18, Y+4	; 0x04
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	21 50       	subi	r18, 0x01	; 1
    31a0:	31 09       	sbc	r19, r1
    31a2:	82 17       	cp	r24, r18
    31a4:	93 07       	cpc	r25, r19
					spinners->number_of_spinners - 1) {
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
    31a6:	74 f4       	brge	.+28     	; 0x31c4 <gfx_mono_spinctrl_spincollection_process_key+0x12e>
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	c8 01       	movw	r24, r16
    31ac:	48 dd       	rcall	.-1392   	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
						false);
				spinners->current_selection++;
    31ae:	8d 81       	ldd	r24, Y+5	; 0x05
    31b0:	8f 5f       	subi	r24, 0xFF	; 255
    31b2:	8d 83       	std	Y+5, r24	; 0x05
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->next,
    31b4:	61 e0       	ldi	r22, 0x01	; 1
    31b6:	f8 01       	movw	r30, r16
    31b8:	86 85       	ldd	r24, Z+14	; 0x0e
    31ba:	97 85       	ldd	r25, Z+15	; 0x0f
    31bc:	40 dd       	rcall	.-1408   	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    31be:	8f ef       	ldi	r24, 0xFF	; 255
    31c0:	90 e0       	ldi	r25, 0x00	; 0
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->next,
						true);
			} else {
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
    31c2:	4a c0       	rjmp	.+148    	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
    31c4:	60 e0       	ldi	r22, 0x00	; 0
    31c6:	c8 01       	movw	r24, r16
						false);
				spinners->current_selection
					= GFX_MONO_SPINCTRL_BUTTON;
    31c8:	3a dd       	rcall	.-1420   	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
    31ca:	8f ef       	ldi	r24, 0xFF	; 255
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	61 e0       	ldi	r22, 0x01	; 1
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	48 dd       	rcall	.-1392   	; 0x2c64 <gfx_mono_spinctrl_draw_button>
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    31d4:	8f ef       	ldi	r24, 0xFF	; 255
    31d6:	90 e0       	ldi	r25, 0x00	; 0

		case GFX_MONO_SPINCTRL_KEYCODE_UP:
			if (spinners->current_selection ==
    31d8:	3f c0       	rjmp	.+126    	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
    31da:	8f 3f       	cpi	r24, 0xFF	; 255
					GFX_MONO_SPINCTRL_BUTTON) {
				/* Delete indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, false);
    31dc:	69 f4       	brne	.+26     	; 0x31f8 <gfx_mono_spinctrl_spincollection_process_key+0x162>
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	81 e0       	ldi	r24, 0x01	; 1
				spinners->current_selection
					= spinners->number_of_spinners - 1;
    31e2:	40 dd       	rcall	.-1408   	; 0x2c64 <gfx_mono_spinctrl_draw_button>
    31e4:	8c 81       	ldd	r24, Y+4	; 0x04
    31e6:	81 50       	subi	r24, 0x01	; 1
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(
    31e8:	8d 83       	std	Y+5, r24	; 0x05
    31ea:	61 e0       	ldi	r22, 0x01	; 1
    31ec:	8a 81       	ldd	r24, Y+2	; 0x02
    31ee:	9b 81       	ldd	r25, Y+3	; 0x03
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    31f0:	26 dd       	rcall	.-1460   	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
    31f2:	8f ef       	ldi	r24, 0xFF	; 255
    31f4:	90 e0       	ldi	r25, 0x00	; 0
					= spinners->number_of_spinners - 1;
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(
						spinners->collection_last,
						true);
			} else if (spinners->current_selection > 0) {
    31f6:	30 c0       	rjmp	.+96     	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
    31f8:	88 23       	and	r24, r24
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
    31fa:	71 f0       	breq	.+28     	; 0x3218 <gfx_mono_spinctrl_spincollection_process_key+0x182>
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	c8 01       	movw	r24, r16
						false);
				spinners->current_selection--;
    3200:	1e dd       	rcall	.-1476   	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	81 50       	subi	r24, 0x01	; 1
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->prev,
    3206:	8d 83       	std	Y+5, r24	; 0x05
    3208:	61 e0       	ldi	r22, 0x01	; 1
    320a:	f8 01       	movw	r30, r16
    320c:	80 89       	ldd	r24, Z+16	; 0x10
    320e:	91 89       	ldd	r25, Z+17	; 0x11
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    3210:	16 dd       	rcall	.-1492   	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
    3212:	8f ef       	ldi	r24, 0xFF	; 255
    3214:	90 e0       	ldi	r25, 0x00	; 0
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->prev,
						true);
			} else {
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
    3216:	20 c0       	rjmp	.+64     	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	c8 01       	movw	r24, r16
    321c:	10 dd       	rcall	.-1504   	; 0x2c3e <gfx_mono_spinctrl_draw_indicator>
						false);
				spinners->current_selection
					= GFX_MONO_SPINCTRL_BUTTON;
    321e:	8f ef       	ldi	r24, 0xFF	; 255
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
    3220:	8d 83       	std	Y+5, r24	; 0x05
    3222:	61 e0       	ldi	r22, 0x01	; 1
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	1e dd       	rcall	.-1476   	; 0x2c64 <gfx_mono_spinctrl_draw_button>
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    3228:	8f ef       	ldi	r24, 0xFF	; 255
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	15 c0       	rjmp	.+42     	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>

		case GFX_MONO_SPINCTRL_KEYCODE_ENTER:
			if (spinners->current_selection ==
    322e:	8f 3f       	cpi	r24, 0xFF	; 255
    3230:	89 f0       	breq	.+34     	; 0x3254 <gfx_mono_spinctrl_spincollection_process_key+0x1be>
				/* Finished with all selections, return */
				return GFX_MONO_SPINCTRL_EVENT_FINISH;
			} else {
				/* Spinner selected, send next keycode directly
				 * to spinner */
				gfx_mono_spinctrl_process_key(iterator,
    3232:	6d e0       	ldi	r22, 0x0D	; 13
    3234:	c8 01       	movw	r24, r16
    3236:	84 de       	rcall	.-760    	; 0x2f40 <gfx_mono_spinctrl_process_key>
    3238:	81 e0       	ldi	r24, 0x01	; 1
						keycode);
				spinners->active_spinner = true;
    323a:	88 87       	std	Y+8, r24	; 0x08
    323c:	8f ef       	ldi	r24, 0xFF	; 255
				return GFX_MONO_SPINCTRL_EVENT_IDLE;
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	0b c0       	rjmp	.+22     	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
    3242:	8e ef       	ldi	r24, 0xFE	; 254
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Make sure there are spinners in the collection, if not, cancel */
	if (spinners->number_of_spinners == 0) {
		return GFX_MONO_SPINCTRL_EVENT_BACK;
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	08 c0       	rjmp	.+16     	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
    3248:	8f ef       	ldi	r24, 0xFF	; 255
				= spinners->selection;
			/* Step out of spinner and into spincollection */
			spinners->active_spinner = false;
		}

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	05 c0       	rjmp	.+10     	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
    324e:	8e ef       	ldi	r24, 0xFE	; 254
				return GFX_MONO_SPINCTRL_EVENT_IDLE;
			}

		case GFX_MONO_SPINCTRL_KEYCODE_BACK:
			/* User pressed "back" key, */
			return GFX_MONO_SPINCTRL_EVENT_BACK;
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	02 c0       	rjmp	.+4      	; 0x3258 <gfx_mono_spinctrl_spincollection_process_key+0x1c2>
    3254:	8d ef       	ldi	r24, 0xFD	; 253

		case GFX_MONO_SPINCTRL_KEYCODE_ENTER:
			if (spinners->current_selection ==
					GFX_MONO_SPINCTRL_BUTTON) {
				/* Finished with all selections, return */
				return GFX_MONO_SPINCTRL_EVENT_FINISH;
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	df 91       	pop	r29
		default:
			/* Unknown key event */
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
		}
	}
}
    325a:	cf 91       	pop	r28
    325c:	1f 91       	pop	r17
    325e:	0f 91       	pop	r16
    3260:	ff 90       	pop	r15
    3262:	ef 90       	pop	r14
    3264:	08 95       	ret

00003266 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    3266:	af 92       	push	r10
    3268:	bf 92       	push	r11
    326a:	cf 92       	push	r12
    326c:	df 92       	push	r13
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	c8 2f       	mov	r28, r24
    327c:	e6 2e       	mov	r14, r22
    327e:	b4 2e       	mov	r11, r20
    3280:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    3282:	00 e0       	ldi	r16, 0x00	; 0
    3284:	f9 01       	movw	r30, r18
    3286:	24 81       	ldd	r18, Z+4	; 0x04
    3288:	43 81       	ldd	r20, Z+3	; 0x03
    328a:	6b 2d       	mov	r22, r11
    328c:	8e 2d       	mov	r24, r14
    328e:	f0 da       	rcall	.-2592   	; 0x2870 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    3290:	f6 01       	movw	r30, r12
    3292:	80 81       	ld	r24, Z
    3294:	81 11       	cpse	r24, r1
    3296:	39 c0       	rjmp	.+114    	; 0x330a <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    3298:	83 81       	ldd	r24, Z+3	; 0x03
    329a:	28 2f       	mov	r18, r24
    329c:	26 95       	lsr	r18
    329e:	26 95       	lsr	r18
    32a0:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    32a2:	87 70       	andi	r24, 0x07	; 7
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <gfx_mono_draw_char+0x42>
		char_row_size++;
    32a6:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    32a8:	f6 01       	movw	r30, r12
    32aa:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    32ac:	8c 2f       	mov	r24, r28
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	35 81       	ldd	r19, Z+5	; 0x05
    32b2:	83 1b       	sub	r24, r19
    32b4:	91 09       	sbc	r25, r1
    32b6:	2a 9d       	mul	r18, r10
    32b8:	90 01       	movw	r18, r0
    32ba:	11 24       	eor	r1, r1
    32bc:	82 9f       	mul	r24, r18
    32be:	a0 01       	movw	r20, r0
    32c0:	83 9f       	mul	r24, r19
    32c2:	50 0d       	add	r21, r0
    32c4:	92 9f       	mul	r25, r18
    32c6:	50 0d       	add	r21, r0
    32c8:	11 24       	eor	r1, r1
    32ca:	01 81       	ldd	r16, Z+1	; 0x01
    32cc:	12 81       	ldd	r17, Z+2	; 0x02
    32ce:	04 0f       	add	r16, r20
    32d0:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    32d2:	f6 01       	movw	r30, r12
    32d4:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    32d6:	ff 20       	and	r15, r15
    32d8:	a1 f0       	breq	.+40     	; 0x3302 <gfx_mono_draw_char+0x9c>
    32da:	d0 e0       	ldi	r29, 0x00	; 0
    32dc:	c0 e0       	ldi	r28, 0x00	; 0
    32de:	8e 2d       	mov	r24, r14
    32e0:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    32e2:	9c 2f       	mov	r25, r28
    32e4:	97 70       	andi	r25, 0x07	; 7
    32e6:	21 f4       	brne	.+8      	; 0x32f0 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    32e8:	f8 01       	movw	r30, r16
    32ea:	d4 91       	lpm	r29, Z
				glyph_data++;
    32ec:	0f 5f       	subi	r16, 0xFF	; 255
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    32f0:	dd 23       	and	r29, r29
    32f2:	1c f4       	brge	.+6      	; 0x32fa <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	6b 2d       	mov	r22, r11
    32f8:	54 d9       	rcall	.-3416   	; 0x25a2 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    32fa:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    32fc:	cf 5f       	subi	r28, 0xFF	; 255
    32fe:	fc 12       	cpse	r15, r28
    3300:	ee cf       	rjmp	.-36     	; 0x32de <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    3302:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    3304:	aa 94       	dec	r10
	} while (rows_left > 0);
    3306:	a1 10       	cpse	r10, r1
    3308:	e4 cf       	rjmp	.-56     	; 0x32d2 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	df 90       	pop	r13
    3318:	cf 90       	pop	r12
    331a:	bf 90       	pop	r11
    331c:	af 90       	pop	r10
    331e:	08 95       	ret

00003320 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    3320:	df 92       	push	r13
    3322:	ef 92       	push	r14
    3324:	ff 92       	push	r15
    3326:	0f 93       	push	r16
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	d6 2e       	mov	r13, r22
    3330:	04 2f       	mov	r16, r20
    3332:	79 01       	movw	r14, r18
    3334:	ec 01       	movw	r28, r24
    3336:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    3338:	89 91       	ld	r24, Y+
    333a:	8a 30       	cpi	r24, 0x0A	; 10
    333c:	31 f4       	brne	.+12     	; 0x334a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    333e:	f7 01       	movw	r30, r14
    3340:	84 81       	ldd	r24, Z+4	; 0x04
    3342:	8f 5f       	subi	r24, 0xFF	; 255
    3344:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    3346:	1d 2d       	mov	r17, r13
    3348:	09 c0       	rjmp	.+18     	; 0x335c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    334a:	8d 30       	cpi	r24, 0x0D	; 13
    334c:	39 f0       	breq	.+14     	; 0x335c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    334e:	97 01       	movw	r18, r14
    3350:	40 2f       	mov	r20, r16
    3352:	61 2f       	mov	r22, r17
    3354:	88 df       	rcall	.-240    	; 0x3266 <gfx_mono_draw_char>
			x += font->width;
    3356:	f7 01       	movw	r30, r14
    3358:	83 81       	ldd	r24, Z+3	; 0x03
    335a:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    335c:	88 81       	ld	r24, Y
    335e:	81 11       	cpse	r24, r1
    3360:	eb cf       	rjmp	.-42     	; 0x3338 <gfx_mono_draw_string+0x18>
}
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	ff 90       	pop	r15
    336c:	ef 90       	pop	r14
    336e:	df 90       	pop	r13
    3370:	08 95       	ret

00003372 <gfx_mono_draw_progmem_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_progmem_string(char PROGMEM_PTR_T str, gfx_coord_t x,
		gfx_coord_t y, const struct font *font)
{
    3372:	df 92       	push	r13
    3374:	ef 92       	push	r14
    3376:	ff 92       	push	r15
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	ec 01       	movw	r28, r24
    3382:	d6 2e       	mov	r13, r22
    3384:	04 2f       	mov	r16, r20
    3386:	79 01       	movw	r14, r18

	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
    3388:	fc 01       	movw	r30, r24
    338a:	84 91       	lpm	r24, Z

	while (temp_char) {
    338c:	88 23       	and	r24, r24
    338e:	b9 f0       	breq	.+46     	; 0x33be <gfx_mono_draw_progmem_string+0x4c>
    3390:	16 2f       	mov	r17, r22
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
    3392:	8a 30       	cpi	r24, 0x0A	; 10
    3394:	31 f4       	brne	.+12     	; 0x33a2 <gfx_mono_draw_progmem_string+0x30>
			x = start_of_string_position_x;
			y += font->height + 1;
    3396:	f7 01       	movw	r30, r14
    3398:	84 81       	ldd	r24, Z+4	; 0x04
    339a:	8f 5f       	subi	r24, 0xFF	; 255
    339c:	08 0f       	add	r16, r24
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
    339e:	1d 2d       	mov	r17, r13
    33a0:	09 c0       	rjmp	.+18     	; 0x33b4 <gfx_mono_draw_progmem_string+0x42>
			y += font->height + 1;
		} else if (temp_char == '\r') {
    33a2:	8d 30       	cpi	r24, 0x0D	; 13
    33a4:	39 f0       	breq	.+14     	; 0x33b4 <gfx_mono_draw_progmem_string+0x42>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(temp_char, x, y, font);
    33a6:	97 01       	movw	r18, r14
    33a8:	40 2f       	mov	r20, r16
    33aa:	61 2f       	mov	r22, r17
    33ac:	5c df       	rcall	.-328    	; 0x3266 <gfx_mono_draw_char>
			x += font->width;
    33ae:	f7 01       	movw	r30, r14
    33b0:	83 81       	ldd	r24, Z+3	; 0x03
    33b2:	18 0f       	add	r17, r24
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
    33b4:	21 96       	adiw	r28, 0x01	; 1
    33b6:	fe 01       	movw	r30, r28
    33b8:	84 91       	lpm	r24, Z
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
    33ba:	81 11       	cpse	r24, r1
    33bc:	ea cf       	rjmp	.-44     	; 0x3392 <gfx_mono_draw_progmem_string+0x20>
			x += font->width;
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
	}
}
    33be:	df 91       	pop	r29
    33c0:	cf 91       	pop	r28
    33c2:	1f 91       	pop	r17
    33c4:	0f 91       	pop	r16
    33c6:	ff 90       	pop	r15
    33c8:	ef 90       	pop	r14
    33ca:	df 90       	pop	r13
    33cc:	08 95       	ret

000033ce <gfx_mono_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_mono_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	fb 01       	movw	r30, r22
    33d4:	ea 01       	movw	r28, r20
    33d6:	d9 01       	movw	r26, r18
	gfx_coord_t font_width = font->width;
    33d8:	73 81       	ldd	r23, Z+3	; 0x03
	gfx_coord_t font_height = font->height;
    33da:	64 81       	ldd	r22, Z+4	; 0x04
    33dc:	fc 01       	movw	r30, r24

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
    33de:	56 2f       	mov	r21, r22
	gfx_coord_t x = 0;
    33e0:	90 e0       	ldi	r25, 0x00	; 0
		gfx_coord_t *width, gfx_coord_t *height)
{
	gfx_coord_t font_width = font->width;
	gfx_coord_t font_height = font->height;

	gfx_coord_t max_width = 1;
    33e2:	31 e0       	ldi	r19, 0x01	; 1
	Assert(font != NULL);

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    33e4:	81 91       	ld	r24, Z+
    33e6:	8a 30       	cpi	r24, 0x0A	; 10
    33e8:	19 f4       	brne	.+6      	; 0x33f0 <gfx_mono_get_string_bounding_box+0x22>
			x = 0;
			max_height += font_height;
    33ea:	56 0f       	add	r21, r22

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	06 c0       	rjmp	.+12     	; 0x33fc <gfx_mono_get_string_bounding_box+0x2e>
			max_height += font_height;
		} else if (*str == '\r') {
    33f0:	8d 30       	cpi	r24, 0x0D	; 13
    33f2:	21 f0       	breq	.+8      	; 0x33fc <gfx_mono_get_string_bounding_box+0x2e>
			/* Skip '\r' characters. */
		} else {
			x += font_width;
    33f4:	97 0f       	add	r25, r23
    33f6:	39 17       	cp	r19, r25
    33f8:	08 f4       	brcc	.+2      	; 0x33fc <gfx_mono_get_string_bounding_box+0x2e>
    33fa:	39 2f       	mov	r19, r25
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
    33fc:	80 81       	ld	r24, Z
    33fe:	81 11       	cpse	r24, r1
    3400:	f1 cf       	rjmp	.-30     	; 0x33e4 <gfx_mono_get_string_bounding_box+0x16>

	/* Return values through references */
	*width = max_width;
    3402:	38 83       	st	Y, r19
	*height = max_height;
    3404:	5c 93       	st	X, r21
}
    3406:	df 91       	pop	r29
    3408:	cf 91       	pop	r28
    340a:	08 95       	ret

0000340c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    3416:	c6 2f       	mov	r28, r22
    3418:	d0 e0       	ldi	r29, 0x00	; 0
    341a:	de 01       	movw	r26, r28
    341c:	02 2e       	mov	r0, r18
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <ioport_configure_port_pin+0x18>
    3420:	b5 95       	asr	r27
    3422:	a7 95       	ror	r26
    3424:	0a 94       	dec	r0
    3426:	e2 f7       	brpl	.-8      	; 0x3420 <ioport_configure_port_pin+0x14>
    3428:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    342a:	50 8b       	std	Z+16, r21	; 0x10
    342c:	2f 5f       	subi	r18, 0xFF	; 255
    342e:	3f 4f       	sbci	r19, 0xFF	; 255
    3430:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3432:	28 30       	cpi	r18, 0x08	; 8
    3434:	31 05       	cpc	r19, r1
    3436:	89 f7       	brne	.-30     	; 0x341a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    3438:	40 ff       	sbrs	r20, 0
    343a:	0a c0       	rjmp	.+20     	; 0x3450 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    343c:	41 ff       	sbrs	r20, 1
    343e:	03 c0       	rjmp	.+6      	; 0x3446 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    3440:	fc 01       	movw	r30, r24
    3442:	65 83       	std	Z+5, r22	; 0x05
    3444:	02 c0       	rjmp	.+4      	; 0x344a <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3446:	fc 01       	movw	r30, r24
    3448:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    344a:	fc 01       	movw	r30, r24
    344c:	61 83       	std	Z+1, r22	; 0x01
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    3450:	fc 01       	movw	r30, r24
    3452:	62 83       	std	Z+2, r22	; 0x02
	}
}
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	08 95       	ret

0000345a <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    345a:	80 3a       	cpi	r24, 0xA0	; 160
    345c:	28 e0       	ldi	r18, 0x08	; 8
    345e:	92 07       	cpc	r25, r18
    3460:	29 f4       	brne	.+10     	; 0x346c <usart_spi_init+0x12>
    3462:	60 e1       	ldi	r22, 0x10	; 16
    3464:	83 e0       	ldi	r24, 0x03	; 3
    3466:	0c 94 94 10 	jmp	0x2128	; 0x2128 <sysclk_enable_module>
    346a:	08 95       	ret
    346c:	80 3b       	cpi	r24, 0xB0	; 176
    346e:	28 e0       	ldi	r18, 0x08	; 8
    3470:	92 07       	cpc	r25, r18
    3472:	29 f4       	brne	.+10     	; 0x347e <usart_spi_init+0x24>
    3474:	60 e2       	ldi	r22, 0x20	; 32
    3476:	83 e0       	ldi	r24, 0x03	; 3
    3478:	0c 94 94 10 	jmp	0x2128	; 0x2128 <sysclk_enable_module>
    347c:	08 95       	ret
    347e:	80 3a       	cpi	r24, 0xA0	; 160
    3480:	29 e0       	ldi	r18, 0x09	; 9
    3482:	92 07       	cpc	r25, r18
    3484:	29 f4       	brne	.+10     	; 0x3490 <usart_spi_init+0x36>
    3486:	60 e1       	ldi	r22, 0x10	; 16
    3488:	84 e0       	ldi	r24, 0x04	; 4
    348a:	0c 94 94 10 	jmp	0x2128	; 0x2128 <sysclk_enable_module>
    348e:	08 95       	ret
    3490:	80 3b       	cpi	r24, 0xB0	; 176
    3492:	29 e0       	ldi	r18, 0x09	; 9
    3494:	92 07       	cpc	r25, r18
    3496:	29 f4       	brne	.+10     	; 0x34a2 <usart_spi_init+0x48>
    3498:	60 e2       	ldi	r22, 0x20	; 32
    349a:	84 e0       	ldi	r24, 0x04	; 4
    349c:	0c 94 94 10 	jmp	0x2128	; 0x2128 <sysclk_enable_module>
    34a0:	08 95       	ret
    34a2:	80 3a       	cpi	r24, 0xA0	; 160
    34a4:	2a e0       	ldi	r18, 0x0A	; 10
    34a6:	92 07       	cpc	r25, r18
    34a8:	29 f4       	brne	.+10     	; 0x34b4 <usart_spi_init+0x5a>
    34aa:	60 e1       	ldi	r22, 0x10	; 16
    34ac:	85 e0       	ldi	r24, 0x05	; 5
    34ae:	0c 94 94 10 	jmp	0x2128	; 0x2128 <sysclk_enable_module>
    34b2:	08 95       	ret
    34b4:	80 3a       	cpi	r24, 0xA0	; 160
    34b6:	9b 40       	sbci	r25, 0x0B	; 11
    34b8:	21 f4       	brne	.+8      	; 0x34c2 <usart_spi_init+0x68>
    34ba:	60 e1       	ldi	r22, 0x10	; 16
    34bc:	86 e0       	ldi	r24, 0x06	; 6
    34be:	0c 94 94 10 	jmp	0x2128	; 0x2128 <sysclk_enable_module>
    34c2:	08 95       	ret

000034c4 <usart_spi_setup_device>:
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <usart_spi_setup_device+0xa>
    34ce:	00 d0       	rcall	.+0      	; 0x34d0 <usart_spi_setup_device+0xc>
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	09 83       	std	Y+1, r16	; 0x01
    34d6:	1a 83       	std	Y+2, r17	; 0x02
    34d8:	2b 83       	std	Y+3, r18	; 0x03
    34da:	3c 83       	std	Y+4, r19	; 0x04
    34dc:	4d 83       	std	Y+5, r20	; 0x05
    34de:	1e 82       	std	Y+6, r1	; 0x06
    34e0:	be 01       	movw	r22, r28
    34e2:	6f 5f       	subi	r22, 0xFF	; 255
    34e4:	7f 4f       	sbci	r23, 0xFF	; 255
    34e6:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <usart_init_spi>
    34ea:	26 96       	adiw	r28, 0x06	; 6
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	08 95       	ret

000034fa <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    34fa:	fb 01       	movw	r30, r22
    34fc:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    34fe:	e8 2f       	mov	r30, r24
    3500:	e6 95       	lsr	r30
    3502:	e6 95       	lsr	r30
    3504:	e6 95       	lsr	r30
    3506:	40 e2       	ldi	r20, 0x20	; 32
    3508:	e4 9f       	mul	r30, r20
    350a:	f0 01       	movw	r30, r0
    350c:	11 24       	eor	r1, r1
    350e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    3510:	87 70       	andi	r24, 0x07	; 7
    3512:	21 e0       	ldi	r18, 0x01	; 1
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	a9 01       	movw	r20, r18
    3518:	02 c0       	rjmp	.+4      	; 0x351e <usart_spi_select_device+0x24>
    351a:	44 0f       	add	r20, r20
    351c:	55 1f       	adc	r21, r21
    351e:	8a 95       	dec	r24
    3520:	e2 f7       	brpl	.-8      	; 0x351a <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3522:	46 83       	std	Z+6, r20	; 0x06
    3524:	08 95       	ret

00003526 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    3526:	fb 01       	movw	r30, r22
    3528:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    352a:	e8 2f       	mov	r30, r24
    352c:	e6 95       	lsr	r30
    352e:	e6 95       	lsr	r30
    3530:	e6 95       	lsr	r30
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	e4 9f       	mul	r30, r20
    3536:	f0 01       	movw	r30, r0
    3538:	11 24       	eor	r1, r1
    353a:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    353c:	87 70       	andi	r24, 0x07	; 7
    353e:	21 e0       	ldi	r18, 0x01	; 1
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	a9 01       	movw	r20, r18
    3544:	02 c0       	rjmp	.+4      	; 0x354a <usart_spi_deselect_device+0x24>
    3546:	44 0f       	add	r20, r20
    3548:	55 1f       	adc	r21, r21
    354a:	8a 95       	dec	r24
    354c:	e2 f7       	brpl	.-8      	; 0x3546 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    354e:	45 83       	std	Z+5, r20	; 0x05
    3550:	08 95       	ret

00003552 <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
    3552:	10 92 d4 29 	sts	0x29D4, r1	; 0x8029d4 <udi_cdc_nb_comm_enabled>
    3556:	10 92 e0 29 	sts	0x29E0, r1	; 0x8029e0 <udi_cdc_state>
    355a:	10 92 e1 29 	sts	0x29E1, r1	; 0x8029e1 <udi_cdc_state+0x1>
    355e:	e6 ed       	ldi	r30, 0xD6	; 214
    3560:	f9 e2       	ldi	r31, 0x29	; 41
    3562:	81 ea       	ldi	r24, 0xA1	; 161
    3564:	80 83       	st	Z, r24
    3566:	80 e2       	ldi	r24, 0x20	; 32
    3568:	81 83       	std	Z+1, r24	; 0x01
    356a:	12 82       	std	Z+2, r1	; 0x02
    356c:	13 82       	std	Z+3, r1	; 0x03
    356e:	14 82       	std	Z+4, r1	; 0x04
    3570:	15 82       	std	Z+5, r1	; 0x05
    3572:	82 e0       	ldi	r24, 0x02	; 2
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	86 83       	std	Z+6, r24	; 0x06
    3578:	97 83       	std	Z+7, r25	; 0x07
    357a:	10 86       	std	Z+8, r1	; 0x08
    357c:	11 86       	std	Z+9, r1	; 0x09
    357e:	e2 ee       	ldi	r30, 0xE2	; 226
    3580:	f9 e2       	ldi	r31, 0x29	; 41
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	92 ec       	ldi	r25, 0xC2	; 194
    3586:	a1 e0       	ldi	r26, 0x01	; 1
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	80 83       	st	Z, r24
    358c:	91 83       	std	Z+1, r25	; 0x01
    358e:	a2 83       	std	Z+2, r26	; 0x02
    3590:	b3 83       	std	Z+3, r27	; 0x03
    3592:	14 82       	std	Z+4, r1	; 0x04
    3594:	15 82       	std	Z+5, r1	; 0x05
    3596:	88 e0       	ldi	r24, 0x08	; 8
    3598:	86 83       	std	Z+6, r24	; 0x06
    359a:	80 91 d4 29 	lds	r24, 0x29D4	; 0x8029d4 <udi_cdc_nb_comm_enabled>
    359e:	8f 5f       	subi	r24, 0xFF	; 255
    35a0:	80 93 d4 29 	sts	0x29D4, r24	; 0x8029d4 <udi_cdc_nb_comm_enabled>
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	08 95       	ret

000035a8 <udi_cdc_comm_disable>:
    35a8:	80 91 d4 29 	lds	r24, 0x29D4	; 0x8029d4 <udi_cdc_nb_comm_enabled>
    35ac:	81 50       	subi	r24, 0x01	; 1
    35ae:	80 93 d4 29 	sts	0x29D4, r24	; 0x8029d4 <udi_cdc_nb_comm_enabled>
    35b2:	08 95       	ret

000035b4 <udi_cdc_data_disable>:
    35b4:	80 91 d3 29 	lds	r24, 0x29D3	; 0x8029d3 <udi_cdc_nb_data_enabled>
    35b8:	81 50       	subi	r24, 0x01	; 1
    35ba:	80 93 d3 29 	sts	0x29D3, r24	; 0x8029d3 <udi_cdc_nb_data_enabled>
    35be:	80 91 d3 29 	lds	r24, 0x29D3	; 0x8029d3 <udi_cdc_nb_data_enabled>
    35c2:	10 92 d2 29 	sts	0x29D2, r1	; 0x8029d2 <udi_cdc_data_running>
    35c6:	08 95       	ret

000035c8 <udi_cdc_data_setup>:
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	08 95       	ret

000035cc <udi_cdc_getsetting>:
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	08 95       	ret

000035d0 <udi_cdc_line_coding_received>:
    35d0:	08 95       	ret

000035d2 <udi_cdc_tx_send>:
    35d2:	ff 92       	push	r15
    35d4:	0f 93       	push	r16
    35d6:	1f 93       	push	r17
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
    35dc:	1f 92       	push	r1
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	80 91 c2 24 	lds	r24, 0x24C2	; 0x8024c2 <udi_cdc_tx_trans_ongoing>
    35e6:	81 11       	cpse	r24, r1
    35e8:	9f c0       	rjmp	.+318    	; 0x3728 <udi_cdc_tx_send+0x156>
    35ea:	0e 94 a3 33 	call	0x6746	; 0x6746 <udd_is_high_speed>
    35ee:	88 23       	and	r24, r24
    35f0:	51 f0       	breq	.+20     	; 0x3606 <udi_cdc_tx_send+0x34>
    35f2:	00 91 c3 24 	lds	r16, 0x24C3	; 0x8024c3 <udi_cdc_tx_sof_num>
    35f6:	10 91 c4 24 	lds	r17, 0x24C4	; 0x8024c4 <udi_cdc_tx_sof_num+0x1>
    35fa:	0e 94 b0 33 	call	0x6760	; 0x6760 <udd_get_micro_frame_number>
    35fe:	08 17       	cp	r16, r24
    3600:	19 07       	cpc	r17, r25
    3602:	59 f4       	brne	.+22     	; 0x361a <udi_cdc_tx_send+0x48>
    3604:	91 c0       	rjmp	.+290    	; 0x3728 <udi_cdc_tx_send+0x156>
    3606:	00 91 c3 24 	lds	r16, 0x24C3	; 0x8024c3 <udi_cdc_tx_sof_num>
    360a:	10 91 c4 24 	lds	r17, 0x24C4	; 0x8024c4 <udi_cdc_tx_sof_num+0x1>
    360e:	0e 94 ab 33 	call	0x6756	; 0x6756 <udd_get_frame_number>
    3612:	08 17       	cp	r16, r24
    3614:	19 07       	cpc	r17, r25
    3616:	09 f4       	brne	.+2      	; 0x361a <udi_cdc_tx_send+0x48>
    3618:	87 c0       	rjmp	.+270    	; 0x3728 <udi_cdc_tx_send+0x156>
    361a:	8f b7       	in	r24, 0x3f	; 63
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	f8 94       	cli
    3620:	19 81       	ldd	r17, Y+1	; 0x01
    3622:	00 91 c5 24 	lds	r16, 0x24C5	; 0x8024c5 <udi_cdc_tx_buf_sel>
    3626:	e0 2f       	mov	r30, r16
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	ee 0f       	add	r30, r30
    362c:	ff 1f       	adc	r31, r31
    362e:	ea 53       	subi	r30, 0x3A	; 58
    3630:	fb 4d       	sbci	r31, 0xDB	; 219
    3632:	80 81       	ld	r24, Z
    3634:	91 81       	ldd	r25, Z+1	; 0x01
    3636:	89 2b       	or	r24, r25
    3638:	09 f5       	brne	.+66     	; 0x367c <udi_cdc_tx_send+0xaa>
    363a:	80 91 bf 24 	lds	r24, 0x24BF	; 0x8024bf <sof_zlp_counter.5341>
    363e:	90 91 c0 24 	lds	r25, 0x24C0	; 0x8024c0 <sof_zlp_counter.5341+0x1>
    3642:	01 96       	adiw	r24, 0x01	; 1
    3644:	80 93 bf 24 	sts	0x24BF, r24	; 0x8024bf <sof_zlp_counter.5341>
    3648:	90 93 c0 24 	sts	0x24C0, r25	; 0x8024c0 <sof_zlp_counter.5341+0x1>
    364c:	0e 94 a3 33 	call	0x6746	; 0x6746 <udd_is_high_speed>
    3650:	81 11       	cpse	r24, r1
    3652:	07 c0       	rjmp	.+14     	; 0x3662 <udi_cdc_tx_send+0x90>
    3654:	80 91 bf 24 	lds	r24, 0x24BF	; 0x8024bf <sof_zlp_counter.5341>
    3658:	90 91 c0 24 	lds	r25, 0x24C0	; 0x8024c0 <sof_zlp_counter.5341+0x1>
    365c:	84 36       	cpi	r24, 0x64	; 100
    365e:	91 05       	cpc	r25, r1
    3660:	58 f0       	brcs	.+22     	; 0x3678 <udi_cdc_tx_send+0xa6>
    3662:	0e 94 a3 33 	call	0x6746	; 0x6746 <udd_is_high_speed>
    3666:	88 23       	and	r24, r24
    3668:	49 f0       	breq	.+18     	; 0x367c <udi_cdc_tx_send+0xaa>
    366a:	80 91 bf 24 	lds	r24, 0x24BF	; 0x8024bf <sof_zlp_counter.5341>
    366e:	90 91 c0 24 	lds	r25, 0x24C0	; 0x8024c0 <sof_zlp_counter.5341+0x1>
    3672:	80 32       	cpi	r24, 0x20	; 32
    3674:	93 40       	sbci	r25, 0x03	; 3
    3676:	10 f4       	brcc	.+4      	; 0x367c <udi_cdc_tx_send+0xaa>
    3678:	1f bf       	out	0x3f, r17	; 63
    367a:	56 c0       	rjmp	.+172    	; 0x3728 <udi_cdc_tx_send+0x156>
    367c:	10 92 bf 24 	sts	0x24BF, r1	; 0x8024bf <sof_zlp_counter.5341>
    3680:	10 92 c0 24 	sts	0x24C0, r1	; 0x8024c0 <sof_zlp_counter.5341+0x1>
    3684:	80 91 c1 24 	lds	r24, 0x24C1	; 0x8024c1 <udi_cdc_tx_both_buf_to_send>
    3688:	81 11       	cpse	r24, r1
    368a:	06 c0       	rjmp	.+12     	; 0x3698 <udi_cdc_tx_send+0xc6>
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	01 11       	cpse	r16, r1
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	80 93 c5 24 	sts	0x24C5, r24	; 0x8024c5 <udi_cdc_tx_buf_sel>
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <udi_cdc_tx_send+0xce>
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	01 11       	cpse	r16, r1
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	08 2f       	mov	r16, r24
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	80 93 c2 24 	sts	0x24C2, r24	; 0x8024c2 <udi_cdc_tx_trans_ongoing>
    36a6:	1f bf       	out	0x3f, r17	; 63
    36a8:	10 e0       	ldi	r17, 0x00	; 0
    36aa:	f8 01       	movw	r30, r16
    36ac:	ee 0f       	add	r30, r30
    36ae:	ff 1f       	adc	r31, r31
    36b0:	ea 53       	subi	r30, 0x3A	; 58
    36b2:	fb 4d       	sbci	r31, 0xDB	; 219
    36b4:	80 81       	ld	r24, Z
    36b6:	91 81       	ldd	r25, Z+1	; 0x01
    36b8:	ff 24       	eor	r15, r15
    36ba:	f3 94       	inc	r15
    36bc:	80 34       	cpi	r24, 0x40	; 64
    36be:	21 e0       	ldi	r18, 0x01	; 1
    36c0:	92 07       	cpc	r25, r18
    36c2:	09 f4       	brne	.+2      	; 0x36c6 <udi_cdc_tx_send+0xf4>
    36c4:	f1 2c       	mov	r15, r1
    36c6:	80 34       	cpi	r24, 0x40	; 64
    36c8:	91 40       	sbci	r25, 0x01	; 1
    36ca:	91 f0       	breq	.+36     	; 0x36f0 <udi_cdc_tx_send+0x11e>
    36cc:	0e 94 a3 33 	call	0x6746	; 0x6746 <udd_is_high_speed>
    36d0:	88 23       	and	r24, r24
    36d2:	39 f0       	breq	.+14     	; 0x36e2 <udi_cdc_tx_send+0x110>
    36d4:	0e 94 b0 33 	call	0x6760	; 0x6760 <udd_get_micro_frame_number>
    36d8:	80 93 c3 24 	sts	0x24C3, r24	; 0x8024c3 <udi_cdc_tx_sof_num>
    36dc:	90 93 c4 24 	sts	0x24C4, r25	; 0x8024c4 <udi_cdc_tx_sof_num+0x1>
    36e0:	0b c0       	rjmp	.+22     	; 0x36f8 <udi_cdc_tx_send+0x126>
    36e2:	0e 94 ab 33 	call	0x6756	; 0x6756 <udd_get_frame_number>
    36e6:	80 93 c3 24 	sts	0x24C3, r24	; 0x8024c3 <udi_cdc_tx_sof_num>
    36ea:	90 93 c4 24 	sts	0x24C4, r25	; 0x8024c4 <udi_cdc_tx_sof_num+0x1>
    36ee:	04 c0       	rjmp	.+8      	; 0x36f8 <udi_cdc_tx_send+0x126>
    36f0:	10 92 c3 24 	sts	0x24C3, r1	; 0x8024c3 <udi_cdc_tx_sof_num>
    36f4:	10 92 c4 24 	sts	0x24C4, r1	; 0x8024c4 <udi_cdc_tx_sof_num+0x1>
    36f8:	f8 01       	movw	r30, r16
    36fa:	ee 0f       	add	r30, r30
    36fc:	ff 1f       	adc	r31, r31
    36fe:	ea 53       	subi	r30, 0x3A	; 58
    3700:	fb 4d       	sbci	r31, 0xDB	; 219
    3702:	20 81       	ld	r18, Z
    3704:	31 81       	ldd	r19, Z+1	; 0x01
    3706:	80 e4       	ldi	r24, 0x40	; 64
    3708:	91 e0       	ldi	r25, 0x01	; 1
    370a:	08 9f       	mul	r16, r24
    370c:	a0 01       	movw	r20, r0
    370e:	09 9f       	mul	r16, r25
    3710:	50 0d       	add	r21, r0
    3712:	18 9f       	mul	r17, r24
    3714:	50 0d       	add	r21, r0
    3716:	11 24       	eor	r1, r1
    3718:	46 53       	subi	r20, 0x36	; 54
    371a:	5b 4d       	sbci	r21, 0xDB	; 219
    371c:	0b e9       	ldi	r16, 0x9B	; 155
    371e:	1b e1       	ldi	r17, 0x1B	; 27
    3720:	6f 2d       	mov	r22, r15
    3722:	81 e8       	ldi	r24, 0x81	; 129
    3724:	0e 94 94 34 	call	0x6928	; 0x6928 <udd_ep_run>
    3728:	0f 90       	pop	r0
    372a:	df 91       	pop	r29
    372c:	cf 91       	pop	r28
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
    3732:	ff 90       	pop	r15
    3734:	08 95       	ret

00003736 <udi_cdc_data_sent>:
    3736:	81 11       	cpse	r24, r1
    3738:	15 c0       	rjmp	.+42     	; 0x3764 <udi_cdc_data_sent+0x2e>
    373a:	20 91 c5 24 	lds	r18, 0x24C5	; 0x8024c5 <udi_cdc_tx_buf_sel>
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	22 23       	and	r18, r18
    3744:	11 f0       	breq	.+4      	; 0x374a <udi_cdc_data_sent+0x14>
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	fc 01       	movw	r30, r24
    3750:	ea 53       	subi	r30, 0x3A	; 58
    3752:	fb 4d       	sbci	r31, 0xDB	; 219
    3754:	10 82       	st	Z, r1
    3756:	11 82       	std	Z+1, r1	; 0x01
    3758:	10 92 c1 24 	sts	0x24C1, r1	; 0x8024c1 <udi_cdc_tx_both_buf_to_send>
    375c:	10 92 c2 24 	sts	0x24C2, r1	; 0x8024c2 <udi_cdc_tx_trans_ongoing>
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	37 cf       	rjmp	.-402    	; 0x35d2 <udi_cdc_tx_send>
    3764:	08 95       	ret

00003766 <udi_cdc_data_sof_notify>:
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	34 cf       	rjmp	.-408    	; 0x35d2 <udi_cdc_tx_send>
    376a:	08 95       	ret

0000376c <udi_cdc_comm_setup>:
    376c:	80 91 81 2b 	lds	r24, 0x2B81	; 0x802b81 <udd_g_ctrlreq>
    3770:	88 23       	and	r24, r24
    3772:	cc f4       	brge	.+50     	; 0x37a6 <udi_cdc_comm_setup+0x3a>
    3774:	80 76       	andi	r24, 0x60	; 96
    3776:	80 32       	cpi	r24, 0x20	; 32
    3778:	e9 f5       	brne	.+122    	; 0x37f4 <udi_cdc_comm_setup+0x88>
    377a:	80 91 82 2b 	lds	r24, 0x2B82	; 0x802b82 <udd_g_ctrlreq+0x1>
    377e:	81 32       	cpi	r24, 0x21	; 33
    3780:	d9 f5       	brne	.+118    	; 0x37f8 <udi_cdc_comm_setup+0x8c>
    3782:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    3786:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    378a:	07 97       	sbiw	r24, 0x07	; 7
    378c:	b9 f5       	brne	.+110    	; 0x37fc <udi_cdc_comm_setup+0x90>
    378e:	e1 e8       	ldi	r30, 0x81	; 129
    3790:	fb e2       	ldi	r31, 0x2B	; 43
    3792:	82 ee       	ldi	r24, 0xE2	; 226
    3794:	99 e2       	ldi	r25, 0x29	; 41
    3796:	80 87       	std	Z+8, r24	; 0x08
    3798:	91 87       	std	Z+9, r25	; 0x09
    379a:	87 e0       	ldi	r24, 0x07	; 7
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	82 87       	std	Z+10, r24	; 0x0a
    37a0:	93 87       	std	Z+11, r25	; 0x0b
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	08 95       	ret
    37a6:	80 76       	andi	r24, 0x60	; 96
    37a8:	80 32       	cpi	r24, 0x20	; 32
    37aa:	51 f5       	brne	.+84     	; 0x3800 <udi_cdc_comm_setup+0x94>
    37ac:	80 91 82 2b 	lds	r24, 0x2B82	; 0x802b82 <udd_g_ctrlreq+0x1>
    37b0:	80 32       	cpi	r24, 0x20	; 32
    37b2:	19 f0       	breq	.+6      	; 0x37ba <udi_cdc_comm_setup+0x4e>
    37b4:	82 32       	cpi	r24, 0x22	; 34
    37b6:	b9 f0       	breq	.+46     	; 0x37e6 <udi_cdc_comm_setup+0x7a>
    37b8:	25 c0       	rjmp	.+74     	; 0x3804 <udi_cdc_comm_setup+0x98>
    37ba:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    37be:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    37c2:	07 97       	sbiw	r24, 0x07	; 7
    37c4:	09 f5       	brne	.+66     	; 0x3808 <udi_cdc_comm_setup+0x9c>
    37c6:	e1 e8       	ldi	r30, 0x81	; 129
    37c8:	fb e2       	ldi	r31, 0x2B	; 43
    37ca:	88 ee       	ldi	r24, 0xE8	; 232
    37cc:	9a e1       	ldi	r25, 0x1A	; 26
    37ce:	84 87       	std	Z+12, r24	; 0x0c
    37d0:	95 87       	std	Z+13, r25	; 0x0d
    37d2:	82 ee       	ldi	r24, 0xE2	; 226
    37d4:	99 e2       	ldi	r25, 0x29	; 41
    37d6:	80 87       	std	Z+8, r24	; 0x08
    37d8:	91 87       	std	Z+9, r25	; 0x09
    37da:	87 e0       	ldi	r24, 0x07	; 7
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	82 87       	std	Z+10, r24	; 0x0a
    37e0:	93 87       	std	Z+11, r25	; 0x0b
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	08 95       	ret
    37e6:	80 91 83 2b 	lds	r24, 0x2B83	; 0x802b83 <udd_g_ctrlreq+0x2>
    37ea:	81 70       	andi	r24, 0x01	; 1
    37ec:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <cdc_set_dtr>
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	08 95       	ret
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	08 95       	ret
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	08 95       	ret
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	08 95       	ret
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	08 95       	ret
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	08 95       	ret
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	08 95       	ret

0000380c <udi_cdc_multi_get_nb_received_data>:
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
    3810:	1f 92       	push	r1
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	8f b7       	in	r24, 0x3f	; 63
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	f8 94       	cli
    381c:	49 81       	ldd	r20, Y+1	; 0x01
    381e:	20 91 4b 27 	lds	r18, 0x274B	; 0x80274b <udi_cdc_rx_pos>
    3822:	30 91 4c 27 	lds	r19, 0x274C	; 0x80274c <udi_cdc_rx_pos+0x1>
    3826:	e0 91 4d 27 	lds	r30, 0x274D	; 0x80274d <udi_cdc_rx_buf_sel>
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	ee 0f       	add	r30, r30
    382e:	ff 1f       	adc	r31, r31
    3830:	e2 5b       	subi	r30, 0xB2	; 178
    3832:	f8 4d       	sbci	r31, 0xD8	; 216
    3834:	80 81       	ld	r24, Z
    3836:	91 81       	ldd	r25, Z+1	; 0x01
    3838:	4f bf       	out	0x3f, r20	; 63
    383a:	82 1b       	sub	r24, r18
    383c:	93 0b       	sbc	r25, r19
    383e:	0f 90       	pop	r0
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <udi_cdc_multi_is_rx_ready>:
    3846:	e2 df       	rcall	.-60     	; 0x380c <udi_cdc_multi_get_nb_received_data>
    3848:	21 e0       	ldi	r18, 0x01	; 1
    384a:	89 2b       	or	r24, r25
    384c:	09 f4       	brne	.+2      	; 0x3850 <udi_cdc_multi_is_rx_ready+0xa>
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	82 2f       	mov	r24, r18
    3852:	08 95       	ret

00003854 <udi_cdc_rx_start>:
    3854:	0f 93       	push	r16
    3856:	1f 93       	push	r17
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    385c:	1f 92       	push	r1
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
    3862:	8f b7       	in	r24, 0x3f	; 63
    3864:	89 83       	std	Y+1, r24	; 0x01
    3866:	f8 94       	cli
    3868:	99 81       	ldd	r25, Y+1	; 0x01
    386a:	20 91 4d 27 	lds	r18, 0x274D	; 0x80274d <udi_cdc_rx_buf_sel>
    386e:	80 91 4a 27 	lds	r24, 0x274A	; 0x80274a <udi_cdc_rx_trans_ongoing>
    3872:	81 11       	cpse	r24, r1
    3874:	10 c0       	rjmp	.+32     	; 0x3896 <udi_cdc_rx_start+0x42>
    3876:	60 91 4b 27 	lds	r22, 0x274B	; 0x80274b <udi_cdc_rx_pos>
    387a:	70 91 4c 27 	lds	r23, 0x274C	; 0x80274c <udi_cdc_rx_pos+0x1>
    387e:	02 2f       	mov	r16, r18
    3880:	10 e0       	ldi	r17, 0x00	; 0
    3882:	f8 01       	movw	r30, r16
    3884:	ee 0f       	add	r30, r30
    3886:	ff 1f       	adc	r31, r31
    3888:	e2 5b       	subi	r30, 0xB2	; 178
    388a:	f8 4d       	sbci	r31, 0xD8	; 216
    388c:	40 81       	ld	r20, Z
    388e:	51 81       	ldd	r21, Z+1	; 0x01
    3890:	64 17       	cp	r22, r20
    3892:	75 07       	cpc	r23, r21
    3894:	18 f4       	brcc	.+6      	; 0x389c <udi_cdc_rx_start+0x48>
    3896:	9f bf       	out	0x3f, r25	; 63
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	22 c0       	rjmp	.+68     	; 0x38e0 <udi_cdc_rx_start+0x8c>
    389c:	10 92 4b 27 	sts	0x274B, r1	; 0x80274b <udi_cdc_rx_pos>
    38a0:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <udi_cdc_rx_pos+0x1>
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	21 11       	cpse	r18, r1
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <udi_cdc_rx_buf_sel>
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	80 93 4a 27 	sts	0x274A, r24	; 0x80274a <udi_cdc_rx_trans_ongoing>
    38b4:	9f bf       	out	0x3f, r25	; 63
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	c6 df       	rcall	.-116    	; 0x3846 <udi_cdc_multi_is_rx_ready>
    38ba:	80 e4       	ldi	r24, 0x40	; 64
    38bc:	91 e0       	ldi	r25, 0x01	; 1
    38be:	08 9f       	mul	r16, r24
    38c0:	a0 01       	movw	r20, r0
    38c2:	09 9f       	mul	r16, r25
    38c4:	50 0d       	add	r21, r0
    38c6:	18 9f       	mul	r17, r24
    38c8:	50 0d       	add	r21, r0
    38ca:	11 24       	eor	r1, r1
    38cc:	4e 5a       	subi	r20, 0xAE	; 174
    38ce:	58 4d       	sbci	r21, 0xD8	; 216
    38d0:	08 ea       	ldi	r16, 0xA8	; 168
    38d2:	1c e1       	ldi	r17, 0x1C	; 28
    38d4:	20 e4       	ldi	r18, 0x40	; 64
    38d6:	31 e0       	ldi	r19, 0x01	; 1
    38d8:	61 e0       	ldi	r22, 0x01	; 1
    38da:	82 e0       	ldi	r24, 0x02	; 2
    38dc:	0e 94 94 34 	call	0x6928	; 0x6928 <udd_ep_run>
    38e0:	0f 90       	pop	r0
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	1f 91       	pop	r17
    38e8:	0f 91       	pop	r16
    38ea:	08 95       	ret

000038ec <udi_cdc_data_enable>:
    38ec:	10 92 d3 29 	sts	0x29D3, r1	; 0x8029d3 <udi_cdc_nb_data_enabled>
    38f0:	10 92 c2 24 	sts	0x24C2, r1	; 0x8024c2 <udi_cdc_tx_trans_ongoing>
    38f4:	10 92 c1 24 	sts	0x24C1, r1	; 0x8024c1 <udi_cdc_tx_both_buf_to_send>
    38f8:	10 92 c5 24 	sts	0x24C5, r1	; 0x8024c5 <udi_cdc_tx_buf_sel>
    38fc:	e6 ec       	ldi	r30, 0xC6	; 198
    38fe:	f4 e2       	ldi	r31, 0x24	; 36
    3900:	10 82       	st	Z, r1
    3902:	11 82       	std	Z+1, r1	; 0x01
    3904:	12 82       	std	Z+2, r1	; 0x02
    3906:	13 82       	std	Z+3, r1	; 0x03
    3908:	10 92 c3 24 	sts	0x24C3, r1	; 0x8024c3 <udi_cdc_tx_sof_num>
    390c:	10 92 c4 24 	sts	0x24C4, r1	; 0x8024c4 <udi_cdc_tx_sof_num+0x1>
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	5f de       	rcall	.-834    	; 0x35d2 <udi_cdc_tx_send>
    3914:	10 92 4a 27 	sts	0x274A, r1	; 0x80274a <udi_cdc_rx_trans_ongoing>
    3918:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <udi_cdc_rx_buf_sel>
    391c:	ee e4       	ldi	r30, 0x4E	; 78
    391e:	f7 e2       	ldi	r31, 0x27	; 39
    3920:	10 82       	st	Z, r1
    3922:	11 82       	std	Z+1, r1	; 0x01
    3924:	12 82       	std	Z+2, r1	; 0x02
    3926:	13 82       	std	Z+3, r1	; 0x03
    3928:	10 92 4b 27 	sts	0x274B, r1	; 0x80274b <udi_cdc_rx_pos>
    392c:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <udi_cdc_rx_pos+0x1>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 df       	rcall	.-224    	; 0x3854 <udi_cdc_rx_start>
    3934:	88 23       	and	r24, r24
    3936:	59 f0       	breq	.+22     	; 0x394e <udi_cdc_data_enable+0x62>
    3938:	90 91 d3 29 	lds	r25, 0x29D3	; 0x8029d3 <udi_cdc_nb_data_enabled>
    393c:	9f 5f       	subi	r25, 0xFF	; 255
    393e:	90 93 d3 29 	sts	0x29D3, r25	; 0x8029d3 <udi_cdc_nb_data_enabled>
    3942:	90 91 d3 29 	lds	r25, 0x29D3	; 0x8029d3 <udi_cdc_nb_data_enabled>
    3946:	91 30       	cpi	r25, 0x01	; 1
    3948:	11 f4       	brne	.+4      	; 0x394e <udi_cdc_data_enable+0x62>
    394a:	90 93 d2 29 	sts	0x29D2, r25	; 0x8029d2 <udi_cdc_data_running>
    394e:	08 95       	ret

00003950 <udi_cdc_data_received>:
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	81 11       	cpse	r24, r1
    3956:	26 c0       	rjmp	.+76     	; 0x39a4 <udi_cdc_data_received+0x54>
    3958:	80 91 4d 27 	lds	r24, 0x274D	; 0x80274d <udi_cdc_rx_buf_sel>
    395c:	e1 e0       	ldi	r30, 0x01	; 1
    395e:	81 11       	cpse	r24, r1
    3960:	e0 e0       	ldi	r30, 0x00	; 0
    3962:	84 2f       	mov	r24, r20
    3964:	61 15       	cp	r22, r1
    3966:	71 05       	cpc	r23, r1
    3968:	91 f4       	brne	.+36     	; 0x398e <udi_cdc_data_received+0x3e>
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	20 e4       	ldi	r18, 0x40	; 64
    396e:	31 e0       	ldi	r19, 0x01	; 1
    3970:	e2 9f       	mul	r30, r18
    3972:	a0 01       	movw	r20, r0
    3974:	e3 9f       	mul	r30, r19
    3976:	50 0d       	add	r21, r0
    3978:	f2 9f       	mul	r31, r18
    397a:	50 0d       	add	r21, r0
    397c:	11 24       	eor	r1, r1
    397e:	4e 5a       	subi	r20, 0xAE	; 174
    3980:	58 4d       	sbci	r21, 0xD8	; 216
    3982:	08 ea       	ldi	r16, 0xA8	; 168
    3984:	1c e1       	ldi	r17, 0x1C	; 28
    3986:	61 e0       	ldi	r22, 0x01	; 1
    3988:	0e 94 94 34 	call	0x6928	; 0x6928 <udd_ep_run>
    398c:	0b c0       	rjmp	.+22     	; 0x39a4 <udi_cdc_data_received+0x54>
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	ee 0f       	add	r30, r30
    3992:	ff 1f       	adc	r31, r31
    3994:	e2 5b       	subi	r30, 0xB2	; 178
    3996:	f8 4d       	sbci	r31, 0xD8	; 216
    3998:	60 83       	st	Z, r22
    399a:	71 83       	std	Z+1, r23	; 0x01
    399c:	10 92 4a 27 	sts	0x274A, r1	; 0x80274a <udi_cdc_rx_trans_ongoing>
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	58 df       	rcall	.-336    	; 0x3854 <udi_cdc_rx_start>
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	08 95       	ret

000039aa <udi_cdc_is_rx_ready>:
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	4c cf       	rjmp	.-360    	; 0x3846 <udi_cdc_multi_is_rx_ready>
    39ae:	08 95       	ret

000039b0 <udi_cdc_multi_getc>:
    39b0:	cf 92       	push	r12
    39b2:	df 92       	push	r13
    39b4:	ff 92       	push	r15
    39b6:	0f 93       	push	r16
    39b8:	1f 93       	push	r17
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	1f 92       	push	r1
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	ff 24       	eor	r15, r15
    39c6:	f3 94       	inc	r15
    39c8:	80 91 e8 29 	lds	r24, 0x29E8	; 0x8029e8 <udi_cdc_line_coding+0x6>
    39cc:	89 30       	cpi	r24, 0x09	; 9
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <udi_cdc_multi_getc+0x22>
    39d0:	f1 2c       	mov	r15, r1
    39d2:	a0 e0       	ldi	r26, 0x00	; 0
    39d4:	b0 e0       	ldi	r27, 0x00	; 0
    39d6:	00 e4       	ldi	r16, 0x40	; 64
    39d8:	11 e0       	ldi	r17, 0x01	; 1
    39da:	8f b7       	in	r24, 0x3f	; 63
    39dc:	89 83       	std	Y+1, r24	; 0x01
    39de:	f8 94       	cli
    39e0:	69 81       	ldd	r22, Y+1	; 0x01
    39e2:	20 91 4b 27 	lds	r18, 0x274B	; 0x80274b <udi_cdc_rx_pos>
    39e6:	30 91 4c 27 	lds	r19, 0x274C	; 0x80274c <udi_cdc_rx_pos+0x1>
    39ea:	80 91 4d 27 	lds	r24, 0x274D	; 0x80274d <udi_cdc_rx_buf_sel>
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	fc 01       	movw	r30, r24
    39f2:	ee 0f       	add	r30, r30
    39f4:	ff 1f       	adc	r31, r31
    39f6:	e2 5b       	subi	r30, 0xB2	; 178
    39f8:	f8 4d       	sbci	r31, 0xD8	; 216
    39fa:	40 81       	ld	r20, Z
    39fc:	51 81       	ldd	r21, Z+1	; 0x01
    39fe:	6f bf       	out	0x3f, r22	; 63
    3a00:	24 17       	cp	r18, r20
    3a02:	35 07       	cpc	r19, r21
    3a04:	30 f0       	brcs	.+12     	; 0x3a12 <udi_cdc_multi_getc+0x62>
    3a06:	80 91 d2 29 	lds	r24, 0x29D2	; 0x8029d2 <udi_cdc_data_running>
    3a0a:	81 11       	cpse	r24, r1
    3a0c:	e6 cf       	rjmp	.-52     	; 0x39da <udi_cdc_multi_getc+0x2a>
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	1e c0       	rjmp	.+60     	; 0x3a4e <udi_cdc_multi_getc+0x9e>
    3a12:	80 9f       	mul	r24, r16
    3a14:	f0 01       	movw	r30, r0
    3a16:	81 9f       	mul	r24, r17
    3a18:	f0 0d       	add	r31, r0
    3a1a:	90 9f       	mul	r25, r16
    3a1c:	f0 0d       	add	r31, r0
    3a1e:	11 24       	eor	r1, r1
    3a20:	ee 5a       	subi	r30, 0xAE	; 174
    3a22:	f8 4d       	sbci	r31, 0xD8	; 216
    3a24:	e2 0f       	add	r30, r18
    3a26:	f3 1f       	adc	r31, r19
    3a28:	80 81       	ld	r24, Z
    3a2a:	6d 01       	movw	r12, r26
    3a2c:	c8 2a       	or	r12, r24
    3a2e:	2f 5f       	subi	r18, 0xFF	; 255
    3a30:	3f 4f       	sbci	r19, 0xFF	; 255
    3a32:	20 93 4b 27 	sts	0x274B, r18	; 0x80274b <udi_cdc_rx_pos>
    3a36:	30 93 4c 27 	sts	0x274C, r19	; 0x80274c <udi_cdc_rx_pos+0x1>
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	0b df       	rcall	.-490    	; 0x3854 <udi_cdc_rx_start>
    3a3e:	ff 20       	and	r15, r15
    3a40:	21 f0       	breq	.+8      	; 0x3a4a <udi_cdc_multi_getc+0x9a>
    3a42:	bc 2d       	mov	r27, r12
    3a44:	aa 27       	eor	r26, r26
    3a46:	f1 2c       	mov	r15, r1
    3a48:	c8 cf       	rjmp	.-112    	; 0x39da <udi_cdc_multi_getc+0x2a>
    3a4a:	8c 2d       	mov	r24, r12
    3a4c:	9d 2d       	mov	r25, r13
    3a4e:	0f 90       	pop	r0
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	df 90       	pop	r13
    3a5c:	cf 90       	pop	r12
    3a5e:	08 95       	ret

00003a60 <udi_cdc_getc>:
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	a6 cf       	rjmp	.-180    	; 0x39b0 <udi_cdc_multi_getc>
    3a64:	08 95       	ret

00003a66 <udi_cdc_multi_get_free_tx_buffer>:
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	1f 92       	push	r1
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	8f b7       	in	r24, 0x3f	; 63
    3a72:	89 83       	std	Y+1, r24	; 0x01
    3a74:	f8 94       	cli
    3a76:	99 81       	ldd	r25, Y+1	; 0x01
    3a78:	80 91 c5 24 	lds	r24, 0x24C5	; 0x8024c5 <udi_cdc_tx_buf_sel>
    3a7c:	e8 2f       	mov	r30, r24
    3a7e:	f0 e0       	ldi	r31, 0x00	; 0
    3a80:	ee 0f       	add	r30, r30
    3a82:	ff 1f       	adc	r31, r31
    3a84:	ea 53       	subi	r30, 0x3A	; 58
    3a86:	fb 4d       	sbci	r31, 0xDB	; 219
    3a88:	20 81       	ld	r18, Z
    3a8a:	31 81       	ldd	r19, Z+1	; 0x01
    3a8c:	20 34       	cpi	r18, 0x40	; 64
    3a8e:	41 e0       	ldi	r20, 0x01	; 1
    3a90:	34 07       	cpc	r19, r20
    3a92:	89 f4       	brne	.+34     	; 0x3ab6 <udi_cdc_multi_get_free_tx_buffer+0x50>
    3a94:	40 91 c2 24 	lds	r20, 0x24C2	; 0x8024c2 <udi_cdc_tx_trans_ongoing>
    3a98:	41 11       	cpse	r20, r1
    3a9a:	0d c0       	rjmp	.+26     	; 0x3ab6 <udi_cdc_multi_get_free_tx_buffer+0x50>
    3a9c:	40 91 c1 24 	lds	r20, 0x24C1	; 0x8024c1 <udi_cdc_tx_both_buf_to_send>
    3aa0:	41 11       	cpse	r20, r1
    3aa2:	09 c0       	rjmp	.+18     	; 0x3ab6 <udi_cdc_multi_get_free_tx_buffer+0x50>
    3aa4:	21 e0       	ldi	r18, 0x01	; 1
    3aa6:	20 93 c1 24 	sts	0x24C1, r18	; 0x8024c1 <udi_cdc_tx_both_buf_to_send>
    3aaa:	81 11       	cpse	r24, r1
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	20 93 c5 24 	sts	0x24C5, r18	; 0x8024c5 <udi_cdc_tx_buf_sel>
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	9f bf       	out	0x3f, r25	; 63
    3ab8:	80 e4       	ldi	r24, 0x40	; 64
    3aba:	91 e0       	ldi	r25, 0x01	; 1
    3abc:	82 1b       	sub	r24, r18
    3abe:	93 0b       	sbc	r25, r19
    3ac0:	0f 90       	pop	r0
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	08 95       	ret

00003ac8 <udi_cdc_multi_is_tx_ready>:
    3ac8:	ce df       	rcall	.-100    	; 0x3a66 <udi_cdc_multi_get_free_tx_buffer>
    3aca:	21 e0       	ldi	r18, 0x01	; 1
    3acc:	89 2b       	or	r24, r25
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <udi_cdc_multi_is_tx_ready+0xa>
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	82 2f       	mov	r24, r18
    3ad4:	08 95       	ret

00003ad6 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    3ad6:	df 92       	push	r13
    3ad8:	ef 92       	push	r14
    3ada:	ff 92       	push	r15
    3adc:	0f 93       	push	r16
    3ade:	1f 93       	push	r17
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	1f 92       	push	r1
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
    3aea:	d6 2e       	mov	r13, r22
    3aec:	f7 2e       	mov	r15, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    3aee:	ee 24       	eor	r14, r14
    3af0:	e3 94       	inc	r14
    3af2:	80 91 e8 29 	lds	r24, 0x29E8	; 0x8029e8 <udi_cdc_line_coding+0x6>
    3af6:	89 30       	cpi	r24, 0x09	; 9
    3af8:	09 f0       	breq	.+2      	; 0x3afc <udi_cdc_multi_putc+0x26>
    3afa:	e1 2c       	mov	r14, r1
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    3afc:	00 e4       	ldi	r16, 0x40	; 64
    3afe:	11 e0       	ldi	r17, 0x01	; 1

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	e2 df       	rcall	.-60     	; 0x3ac8 <udi_cdc_multi_is_tx_ready>
    3b04:	81 11       	cpse	r24, r1
    3b06:	07 c0       	rjmp	.+14     	; 0x3b16 <udi_cdc_multi_putc+0x40>
		if (!udi_cdc_data_running) {
    3b08:	80 91 d2 29 	lds	r24, 0x29D2	; 0x8029d2 <udi_cdc_data_running>
    3b0c:	81 11       	cpse	r24, r1
    3b0e:	f8 cf       	rjmp	.-16     	; 0x3b00 <udi_cdc_multi_putc+0x2a>
			return false;
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	2b c0       	rjmp	.+86     	; 0x3b6c <udi_cdc_multi_putc+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b16:	8f b7       	in	r24, 0x3f	; 63
    3b18:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3b1a:	f8 94       	cli
	return flags;
    3b1c:	69 81       	ldd	r22, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3b1e:	20 91 c5 24 	lds	r18, 0x24C5	; 0x8024c5 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	f9 01       	movw	r30, r18
    3b26:	ee 0f       	add	r30, r30
    3b28:	ff 1f       	adc	r31, r31
    3b2a:	ea 53       	subi	r30, 0x3A	; 58
    3b2c:	fb 4d       	sbci	r31, 0xDB	; 219
    3b2e:	80 81       	ld	r24, Z
    3b30:	91 81       	ldd	r25, Z+1	; 0x01
    3b32:	ac 01       	movw	r20, r24
    3b34:	4f 5f       	subi	r20, 0xFF	; 255
    3b36:	5f 4f       	sbci	r21, 0xFF	; 255
    3b38:	40 83       	st	Z, r20
    3b3a:	51 83       	std	Z+1, r21	; 0x01
    3b3c:	20 9f       	mul	r18, r16
    3b3e:	a0 01       	movw	r20, r0
    3b40:	21 9f       	mul	r18, r17
    3b42:	50 0d       	add	r21, r0
    3b44:	30 9f       	mul	r19, r16
    3b46:	50 0d       	add	r21, r0
    3b48:	11 24       	eor	r1, r1
    3b4a:	9a 01       	movw	r18, r20
    3b4c:	26 53       	subi	r18, 0x36	; 54
    3b4e:	3b 4d       	sbci	r19, 0xDB	; 219
    3b50:	f9 01       	movw	r30, r18
    3b52:	e8 0f       	add	r30, r24
    3b54:	f9 1f       	adc	r31, r25
    3b56:	d0 82       	st	Z, r13
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b58:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    3b5a:	ee 20       	and	r14, r14
    3b5c:	29 f0       	breq	.+10     	; 0x3b68 <udi_cdc_multi_putc+0x92>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    3b5e:	df 2c       	mov	r13, r15
    3b60:	ff 0c       	add	r15, r15
    3b62:	ff 08       	sbc	r15, r15
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    3b64:	e1 2c       	mov	r14, r1
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    3b66:	cc cf       	rjmp	.-104    	; 0x3b00 <udi_cdc_multi_putc+0x2a>
	}
	return true;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
}
    3b6c:	0f 90       	pop	r0
    3b6e:	df 91       	pop	r29
    3b70:	cf 91       	pop	r28
    3b72:	1f 91       	pop	r17
    3b74:	0f 91       	pop	r16
    3b76:	ff 90       	pop	r15
    3b78:	ef 90       	pop	r14
    3b7a:	df 90       	pop	r13
    3b7c:	08 95       	ret

00003b7e <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    3b7e:	bc 01       	movw	r22, r24
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	a9 cf       	rjmp	.-174    	; 0x3ad6 <udi_cdc_multi_putc>
}
    3b84:	08 95       	ret

00003b86 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3b86:	e0 91 ee 29 	lds	r30, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3b8a:	f0 91 ef 29 	lds	r31, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3b8e:	01 90       	ld	r0, Z+
    3b90:	f0 81       	ld	r31, Z
    3b92:	e0 2d       	mov	r30, r0
    3b94:	22 81       	ldd	r18, Z+2	; 0x02
    3b96:	33 81       	ldd	r19, Z+3	; 0x03
    3b98:	2e 0f       	add	r18, r30
    3b9a:	3f 1f       	adc	r19, r31
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	40 81       	ld	r20, Z
    3ba0:	e4 0f       	add	r30, r20
    3ba2:	f1 1d       	adc	r31, r1
    3ba4:	e2 17       	cp	r30, r18
    3ba6:	f3 07       	cpc	r31, r19
    3ba8:	a0 f4       	brcc	.+40     	; 0x3bd2 <udc_next_desc_in_iface+0x4c>
    3baa:	81 81       	ldd	r24, Z+1	; 0x01
    3bac:	84 30       	cpi	r24, 0x04	; 4
    3bae:	a1 f0       	breq	.+40     	; 0x3bd8 <udc_next_desc_in_iface+0x52>
    3bb0:	86 13       	cpse	r24, r22
    3bb2:	06 c0       	rjmp	.+12     	; 0x3bc0 <udc_next_desc_in_iface+0x3a>
    3bb4:	14 c0       	rjmp	.+40     	; 0x3bde <udc_next_desc_in_iface+0x58>
    3bb6:	81 81       	ldd	r24, Z+1	; 0x01
    3bb8:	84 30       	cpi	r24, 0x04	; 4
    3bba:	a1 f0       	breq	.+40     	; 0x3be4 <udc_next_desc_in_iface+0x5e>
    3bbc:	86 17       	cp	r24, r22
    3bbe:	a9 f0       	breq	.+42     	; 0x3bea <udc_next_desc_in_iface+0x64>
    3bc0:	80 81       	ld	r24, Z
    3bc2:	e8 0f       	add	r30, r24
    3bc4:	f1 1d       	adc	r31, r1
    3bc6:	e2 17       	cp	r30, r18
    3bc8:	f3 07       	cpc	r31, r19
    3bca:	a8 f3       	brcs	.-22     	; 0x3bb6 <udc_next_desc_in_iface+0x30>
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	08 95       	ret
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	08 95       	ret
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	08 95       	ret
    3bde:	8e 2f       	mov	r24, r30
    3be0:	9f 2f       	mov	r25, r31
    3be2:	08 95       	ret
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	08 95       	ret
    3bea:	8e 2f       	mov	r24, r30
    3bec:	9f 2f       	mov	r25, r31
    3bee:	08 95       	ret

00003bf0 <udc_valid_address>:
    3bf0:	80 91 83 2b 	lds	r24, 0x2B83	; 0x802b83 <udd_g_ctrlreq+0x2>
    3bf4:	8f 77       	andi	r24, 0x7F	; 127
    3bf6:	0c 94 a5 33 	jmp	0x674a	; 0x674a <udd_set_address>
    3bfa:	08 95       	ret

00003bfc <udc_update_iface_desc>:
    3bfc:	90 91 f0 29 	lds	r25, 0x29F0	; 0x8029f0 <udc_num_configuration>
    3c00:	99 23       	and	r25, r25
    3c02:	81 f1       	breq	.+96     	; 0x3c64 <udc_update_iface_desc+0x68>
    3c04:	e0 91 ee 29 	lds	r30, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3c08:	f0 91 ef 29 	lds	r31, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3c0c:	01 90       	ld	r0, Z+
    3c0e:	f0 81       	ld	r31, Z
    3c10:	e0 2d       	mov	r30, r0
    3c12:	94 81       	ldd	r25, Z+4	; 0x04
    3c14:	89 17       	cp	r24, r25
    3c16:	40 f5       	brcc	.+80     	; 0x3c68 <udc_update_iface_desc+0x6c>
    3c18:	e0 93 ec 29 	sts	0x29EC, r30	; 0x8029ec <udc_ptr_iface>
    3c1c:	f0 93 ed 29 	sts	0x29ED, r31	; 0x8029ed <udc_ptr_iface+0x1>
    3c20:	22 81       	ldd	r18, Z+2	; 0x02
    3c22:	33 81       	ldd	r19, Z+3	; 0x03
    3c24:	2e 0f       	add	r18, r30
    3c26:	3f 1f       	adc	r19, r31
    3c28:	e2 17       	cp	r30, r18
    3c2a:	f3 07       	cpc	r31, r19
    3c2c:	f8 f4       	brcc	.+62     	; 0x3c6c <udc_update_iface_desc+0x70>
    3c2e:	91 81       	ldd	r25, Z+1	; 0x01
    3c30:	94 30       	cpi	r25, 0x04	; 4
    3c32:	61 f4       	brne	.+24     	; 0x3c4c <udc_update_iface_desc+0x50>
    3c34:	92 81       	ldd	r25, Z+2	; 0x02
    3c36:	89 13       	cpse	r24, r25
    3c38:	09 c0       	rjmp	.+18     	; 0x3c4c <udc_update_iface_desc+0x50>
    3c3a:	93 81       	ldd	r25, Z+3	; 0x03
    3c3c:	96 13       	cpse	r25, r22
    3c3e:	06 c0       	rjmp	.+12     	; 0x3c4c <udc_update_iface_desc+0x50>
    3c40:	e0 93 ec 29 	sts	0x29EC, r30	; 0x8029ec <udc_ptr_iface>
    3c44:	f0 93 ed 29 	sts	0x29ED, r31	; 0x8029ed <udc_ptr_iface+0x1>
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	08 95       	ret
    3c4c:	90 81       	ld	r25, Z
    3c4e:	e9 0f       	add	r30, r25
    3c50:	f1 1d       	adc	r31, r1
    3c52:	e2 17       	cp	r30, r18
    3c54:	f3 07       	cpc	r31, r19
    3c56:	58 f3       	brcs	.-42     	; 0x3c2e <udc_update_iface_desc+0x32>
    3c58:	e0 93 ec 29 	sts	0x29EC, r30	; 0x8029ec <udc_ptr_iface>
    3c5c:	f0 93 ed 29 	sts	0x29ED, r31	; 0x8029ed <udc_ptr_iface+0x1>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	08 95       	ret
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	08 95       	ret
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	08 95       	ret
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	08 95       	ret

00003c70 <udc_iface_disable>:
    3c70:	ef 92       	push	r14
    3c72:	ff 92       	push	r15
    3c74:	1f 93       	push	r17
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	c8 2f       	mov	r28, r24
    3c7c:	60 e0       	ldi	r22, 0x00	; 0
    3c7e:	be df       	rcall	.-132    	; 0x3bfc <udc_update_iface_desc>
    3c80:	18 2f       	mov	r17, r24
    3c82:	88 23       	and	r24, r24
    3c84:	81 f1       	breq	.+96     	; 0x3ce6 <udc_iface_disable+0x76>
    3c86:	a0 91 ee 29 	lds	r26, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3c8a:	b0 91 ef 29 	lds	r27, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3c8e:	ec 2f       	mov	r30, r28
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	ee 0f       	add	r30, r30
    3c94:	ff 1f       	adc	r31, r31
    3c96:	12 96       	adiw	r26, 0x02	; 2
    3c98:	8d 91       	ld	r24, X+
    3c9a:	9c 91       	ld	r25, X
    3c9c:	13 97       	sbiw	r26, 0x03	; 3
    3c9e:	e8 0f       	add	r30, r24
    3ca0:	f9 1f       	adc	r31, r25
    3ca2:	e0 80       	ld	r14, Z
    3ca4:	f1 80       	ldd	r15, Z+1	; 0x01
    3ca6:	d7 01       	movw	r26, r14
    3ca8:	16 96       	adiw	r26, 0x06	; 6
    3caa:	ed 91       	ld	r30, X+
    3cac:	fc 91       	ld	r31, X
    3cae:	17 97       	sbiw	r26, 0x07	; 7
    3cb0:	19 95       	eicall
    3cb2:	68 2f       	mov	r22, r24
    3cb4:	8c 2f       	mov	r24, r28
    3cb6:	a2 df       	rcall	.-188    	; 0x3bfc <udc_update_iface_desc>
    3cb8:	18 2f       	mov	r17, r24
    3cba:	88 23       	and	r24, r24
    3cbc:	a1 f0       	breq	.+40     	; 0x3ce6 <udc_iface_disable+0x76>
    3cbe:	c0 91 ec 29 	lds	r28, 0x29EC	; 0x8029ec <udc_ptr_iface>
    3cc2:	d0 91 ed 29 	lds	r29, 0x29ED	; 0x8029ed <udc_ptr_iface+0x1>
    3cc6:	65 e0       	ldi	r22, 0x05	; 5
    3cc8:	ce 01       	movw	r24, r28
    3cca:	5d df       	rcall	.-326    	; 0x3b86 <udc_next_desc_in_iface>
    3ccc:	ec 01       	movw	r28, r24
    3cce:	89 2b       	or	r24, r25
    3cd0:	21 f0       	breq	.+8      	; 0x3cda <udc_iface_disable+0x6a>
    3cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd4:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <udd_ep_free>
    3cd8:	f6 cf       	rjmp	.-20     	; 0x3cc6 <udc_iface_disable+0x56>
    3cda:	d7 01       	movw	r26, r14
    3cdc:	12 96       	adiw	r26, 0x02	; 2
    3cde:	ed 91       	ld	r30, X+
    3ce0:	fc 91       	ld	r31, X
    3ce2:	13 97       	sbiw	r26, 0x03	; 3
    3ce4:	19 95       	eicall
    3ce6:	81 2f       	mov	r24, r17
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
    3cee:	ff 90       	pop	r15
    3cf0:	ef 90       	pop	r14
    3cf2:	08 95       	ret

00003cf4 <udc_iface_enable>:
    3cf4:	1f 93       	push	r17
    3cf6:	cf 93       	push	r28
    3cf8:	df 93       	push	r29
    3cfa:	18 2f       	mov	r17, r24
    3cfc:	7f df       	rcall	.-258    	; 0x3bfc <udc_update_iface_desc>
    3cfe:	88 23       	and	r24, r24
    3d00:	41 f1       	breq	.+80     	; 0x3d52 <udc_iface_enable+0x5e>
    3d02:	c0 91 ec 29 	lds	r28, 0x29EC	; 0x8029ec <udc_ptr_iface>
    3d06:	d0 91 ed 29 	lds	r29, 0x29ED	; 0x8029ed <udc_ptr_iface+0x1>
    3d0a:	65 e0       	ldi	r22, 0x05	; 5
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	3b df       	rcall	.-394    	; 0x3b86 <udc_next_desc_in_iface>
    3d10:	ec 01       	movw	r28, r24
    3d12:	89 2b       	or	r24, r25
    3d14:	49 f0       	breq	.+18     	; 0x3d28 <udc_iface_enable+0x34>
    3d16:	4c 81       	ldd	r20, Y+4	; 0x04
    3d18:	5d 81       	ldd	r21, Y+5	; 0x05
    3d1a:	6b 81       	ldd	r22, Y+3	; 0x03
    3d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1e:	0e 94 ba 33 	call	0x6774	; 0x6774 <udd_ep_alloc>
    3d22:	81 11       	cpse	r24, r1
    3d24:	f2 cf       	rjmp	.-28     	; 0x3d0a <udc_iface_enable+0x16>
    3d26:	15 c0       	rjmp	.+42     	; 0x3d52 <udc_iface_enable+0x5e>
    3d28:	a0 91 ee 29 	lds	r26, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3d2c:	b0 91 ef 29 	lds	r27, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3d30:	e1 2f       	mov	r30, r17
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	ee 0f       	add	r30, r30
    3d36:	ff 1f       	adc	r31, r31
    3d38:	12 96       	adiw	r26, 0x02	; 2
    3d3a:	8d 91       	ld	r24, X+
    3d3c:	9c 91       	ld	r25, X
    3d3e:	13 97       	sbiw	r26, 0x03	; 3
    3d40:	e8 0f       	add	r30, r24
    3d42:	f9 1f       	adc	r31, r25
    3d44:	01 90       	ld	r0, Z+
    3d46:	f0 81       	ld	r31, Z
    3d48:	e0 2d       	mov	r30, r0
    3d4a:	01 90       	ld	r0, Z+
    3d4c:	f0 81       	ld	r31, Z
    3d4e:	e0 2d       	mov	r30, r0
    3d50:	19 95       	eicall
    3d52:	df 91       	pop	r29
    3d54:	cf 91       	pop	r28
    3d56:	1f 91       	pop	r17
    3d58:	08 95       	ret

00003d5a <udc_start>:
    3d5a:	0c 94 1e 33 	jmp	0x663c	; 0x663c <udd_enable>
    3d5e:	08 95       	ret

00003d60 <udc_reset>:
    3d60:	cf 93       	push	r28
    3d62:	80 91 f0 29 	lds	r24, 0x29F0	; 0x8029f0 <udc_num_configuration>
    3d66:	88 23       	and	r24, r24
    3d68:	c1 f0       	breq	.+48     	; 0x3d9a <udc_reset+0x3a>
    3d6a:	e0 91 ee 29 	lds	r30, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3d6e:	f0 91 ef 29 	lds	r31, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3d72:	01 90       	ld	r0, Z+
    3d74:	f0 81       	ld	r31, Z
    3d76:	e0 2d       	mov	r30, r0
    3d78:	84 81       	ldd	r24, Z+4	; 0x04
    3d7a:	88 23       	and	r24, r24
    3d7c:	71 f0       	breq	.+28     	; 0x3d9a <udc_reset+0x3a>
    3d7e:	c0 e0       	ldi	r28, 0x00	; 0
    3d80:	8c 2f       	mov	r24, r28
    3d82:	76 df       	rcall	.-276    	; 0x3c70 <udc_iface_disable>
    3d84:	cf 5f       	subi	r28, 0xFF	; 255
    3d86:	e0 91 ee 29 	lds	r30, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3d8a:	f0 91 ef 29 	lds	r31, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3d8e:	01 90       	ld	r0, Z+
    3d90:	f0 81       	ld	r31, Z
    3d92:	e0 2d       	mov	r30, r0
    3d94:	84 81       	ldd	r24, Z+4	; 0x04
    3d96:	c8 17       	cp	r28, r24
    3d98:	98 f3       	brcs	.-26     	; 0x3d80 <udc_reset+0x20>
    3d9a:	10 92 f0 29 	sts	0x29F0, r1	; 0x8029f0 <udc_num_configuration>
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	80 93 f4 29 	sts	0x29F4, r24	; 0x8029f4 <udc_device_status>
    3da6:	90 93 f5 29 	sts	0x29F5, r25	; 0x8029f5 <udc_device_status+0x1>
    3daa:	cf 91       	pop	r28
    3dac:	08 95       	ret

00003dae <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3dae:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3db0:	80 91 f0 29 	lds	r24, 0x29F0	; 0x8029f0 <udc_num_configuration>
    3db4:	88 23       	and	r24, r24
    3db6:	49 f1       	breq	.+82     	; 0x3e0a <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3db8:	a0 91 ee 29 	lds	r26, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3dbc:	b0 91 ef 29 	lds	r27, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3dc0:	ed 91       	ld	r30, X+
    3dc2:	fc 91       	ld	r31, X
    3dc4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3dc6:	84 81       	ldd	r24, Z+4	; 0x04
    3dc8:	88 23       	and	r24, r24
    3dca:	f9 f0       	breq	.+62     	; 0x3e0a <udc_sof_notify+0x5c>
    3dcc:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3dce:	ec 2f       	mov	r30, r28
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	ee 0f       	add	r30, r30
    3dd4:	ff 1f       	adc	r31, r31
    3dd6:	12 96       	adiw	r26, 0x02	; 2
    3dd8:	8d 91       	ld	r24, X+
    3dda:	9c 91       	ld	r25, X
    3ddc:	13 97       	sbiw	r26, 0x03	; 3
    3dde:	e8 0f       	add	r30, r24
    3de0:	f9 1f       	adc	r31, r25
    3de2:	01 90       	ld	r0, Z+
    3de4:	f0 81       	ld	r31, Z
    3de6:	e0 2d       	mov	r30, r0
    3de8:	00 84       	ldd	r0, Z+8	; 0x08
    3dea:	f1 85       	ldd	r31, Z+9	; 0x09
    3dec:	e0 2d       	mov	r30, r0
    3dee:	30 97       	sbiw	r30, 0x00	; 0
    3df0:	09 f0       	breq	.+2      	; 0x3df4 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3df2:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3df4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3df6:	a0 91 ee 29 	lds	r26, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3dfa:	b0 91 ef 29 	lds	r27, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3dfe:	ed 91       	ld	r30, X+
    3e00:	fc 91       	ld	r31, X
    3e02:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3e04:	84 81       	ldd	r24, Z+4	; 0x04
    3e06:	c8 17       	cp	r28, r24
    3e08:	10 f3       	brcs	.-60     	; 0x3dce <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    3e0a:	cf 91       	pop	r28
    3e0c:	08 95       	ret

00003e0e <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3e0e:	0f 93       	push	r16
    3e10:	1f 93       	push	r17
    3e12:	cf 93       	push	r28
    3e14:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3e16:	e1 e8       	ldi	r30, 0x81	; 129
    3e18:	fb e2       	ldi	r31, 0x2B	; 43
    3e1a:	12 86       	std	Z+10, r1	; 0x0a
    3e1c:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    3e1e:	14 86       	std	Z+12, r1	; 0x0c
    3e20:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    3e22:	16 86       	std	Z+14, r1	; 0x0e
    3e24:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    3e26:	80 81       	ld	r24, Z
    3e28:	88 23       	and	r24, r24
    3e2a:	0c f0       	brlt	.+2      	; 0x3e2e <udc_process_setup+0x20>
    3e2c:	79 c2       	rjmp	.+1266   	; 0x4320 <udc_process_setup+0x512>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3e2e:	20 91 87 2b 	lds	r18, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    3e32:	30 91 88 2b 	lds	r19, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    3e36:	21 15       	cp	r18, r1
    3e38:	31 05       	cpc	r19, r1
    3e3a:	09 f0       	breq	.+2      	; 0x3e3e <udc_process_setup+0x30>
    3e3c:	6c c2       	rjmp	.+1240   	; 0x4316 <udc_process_setup+0x508>
    3e3e:	63 c2       	rjmp	.+1222   	; 0x4306 <udc_process_setup+0x4f8>
    3e40:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3e42:	09 f0       	breq	.+2      	; 0x3e46 <udc_process_setup+0x38>
    3e44:	ab c0       	rjmp	.+342    	; 0x3f9c <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3e46:	90 91 82 2b 	lds	r25, 0x2B82	; 0x802b82 <udd_g_ctrlreq+0x1>
    3e4a:	96 30       	cpi	r25, 0x06	; 6
    3e4c:	81 f0       	breq	.+32     	; 0x3e6e <udc_process_setup+0x60>
    3e4e:	98 30       	cpi	r25, 0x08	; 8
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <udc_process_setup+0x46>
    3e52:	99 c0       	rjmp	.+306    	; 0x3f86 <udc_process_setup+0x178>
    3e54:	91 11       	cpse	r25, r1
    3e56:	a2 c0       	rjmp	.+324    	; 0x3f9c <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3e58:	22 30       	cpi	r18, 0x02	; 2
    3e5a:	31 05       	cpc	r19, r1
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <udc_process_setup+0x52>
    3e5e:	0f c2       	rjmp	.+1054   	; 0x427e <udc_process_setup+0x470>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    3e60:	62 e0       	ldi	r22, 0x02	; 2
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	84 ef       	ldi	r24, 0xF4	; 244
    3e66:	99 e2       	ldi	r25, 0x29	; 41
    3e68:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
    3e6c:	62 c2       	rjmp	.+1220   	; 0x4332 <udc_process_setup+0x524>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3e6e:	80 91 83 2b 	lds	r24, 0x2B83	; 0x802b83 <udd_g_ctrlreq+0x2>
    3e72:	90 91 84 2b 	lds	r25, 0x2B84	; 0x802b84 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3e76:	29 2f       	mov	r18, r25
    3e78:	33 27       	eor	r19, r19
    3e7a:	22 30       	cpi	r18, 0x02	; 2
    3e7c:	31 05       	cpc	r19, r1
    3e7e:	b1 f0       	breq	.+44     	; 0x3eac <udc_process_setup+0x9e>
    3e80:	20 f4       	brcc	.+8      	; 0x3e8a <udc_process_setup+0x7c>
    3e82:	21 30       	cpi	r18, 0x01	; 1
    3e84:	31 05       	cpc	r19, r1
    3e86:	41 f0       	breq	.+16     	; 0x3e98 <udc_process_setup+0x8a>
    3e88:	bc c1       	rjmp	.+888    	; 0x4202 <udc_process_setup+0x3f4>
    3e8a:	23 30       	cpi	r18, 0x03	; 3
    3e8c:	31 05       	cpc	r19, r1
    3e8e:	f1 f1       	breq	.+124    	; 0x3f0c <udc_process_setup+0xfe>
    3e90:	2f 30       	cpi	r18, 0x0F	; 15
    3e92:	31 05       	cpc	r19, r1
    3e94:	61 f1       	breq	.+88     	; 0x3eee <udc_process_setup+0xe0>
    3e96:	b5 c1       	rjmp	.+874    	; 0x4202 <udc_process_setup+0x3f4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    3e98:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <udc_config>
    3e9c:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	6c 91       	ld	r22, X
    3ea4:	70 e0       	ldi	r23, 0x00	; 0
    3ea6:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
    3eaa:	5e c0       	rjmp	.+188    	; 0x3f68 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3eac:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <udc_config>
    3eb0:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <udc_config+0x1>
    3eb4:	21 89       	ldd	r18, Z+17	; 0x11
    3eb6:	82 17       	cp	r24, r18
    3eb8:	08 f0       	brcs	.+2      	; 0x3ebc <udc_process_setup+0xae>
    3eba:	e1 c1       	rjmp	.+962    	; 0x427e <udc_process_setup+0x470>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3ebc:	99 27       	eor	r25, r25
    3ebe:	88 0f       	add	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	e0 91 2d 20 	lds	r30, 0x202D	; 0x80202d <udc_config+0x2>
    3eca:	f0 91 2e 20 	lds	r31, 0x202E	; 0x80202e <udc_config+0x3>
    3ece:	e8 0f       	add	r30, r24
    3ed0:	f9 1f       	adc	r31, r25
    3ed2:	80 81       	ld	r24, Z
    3ed4:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    3ed6:	fc 01       	movw	r30, r24
    3ed8:	62 81       	ldd	r22, Z+2	; 0x02
    3eda:	73 81       	ldd	r23, Z+3	; 0x03
    3edc:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3ee0:	e0 91 89 2b 	lds	r30, 0x2B89	; 0x802b89 <udd_g_ctrlreq+0x8>
    3ee4:	f0 91 8a 2b 	lds	r31, 0x2B8A	; 0x802b8a <udd_g_ctrlreq+0x9>
    3ee8:	82 e0       	ldi	r24, 0x02	; 2
    3eea:	81 83       	std	Z+1, r24	; 0x01
    3eec:	3d c0       	rjmp	.+122    	; 0x3f68 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3eee:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <udc_config+0x4>
    3ef2:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <udc_config+0x5>
    3ef6:	00 97       	sbiw	r24, 0x00	; 0
    3ef8:	09 f4       	brne	.+2      	; 0x3efc <udc_process_setup+0xee>
    3efa:	c1 c1       	rjmp	.+898    	; 0x427e <udc_process_setup+0x470>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3efc:	dc 01       	movw	r26, r24
    3efe:	12 96       	adiw	r26, 0x02	; 2
    3f00:	6d 91       	ld	r22, X+
    3f02:	7c 91       	ld	r23, X
    3f04:	13 97       	sbiw	r26, 0x03	; 3
    3f06:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
    3f0a:	2e c0       	rjmp	.+92     	; 0x3f68 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3f0c:	99 27       	eor	r25, r25
    3f0e:	81 30       	cpi	r24, 0x01	; 1
    3f10:	91 05       	cpc	r25, r1
    3f12:	99 f0       	breq	.+38     	; 0x3f3a <udc_process_setup+0x12c>
    3f14:	58 f0       	brcs	.+22     	; 0x3f2c <udc_process_setup+0x11e>
    3f16:	82 30       	cpi	r24, 0x02	; 2
    3f18:	91 05       	cpc	r25, r1
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <udc_process_setup+0x110>
    3f1c:	06 c2       	rjmp	.+1036   	; 0x432a <udc_process_setup+0x51c>
    3f1e:	03 97       	sbiw	r24, 0x03	; 3
    3f20:	09 f0       	breq	.+2      	; 0x3f24 <udc_process_setup+0x116>
    3f22:	78 c1       	rjmp	.+752    	; 0x4214 <udc_process_setup+0x406>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    3f24:	3c e0       	ldi	r19, 0x0C	; 12
		str = udc_get_string_serial_name();
    3f26:	e1 e9       	ldi	r30, 0x91	; 145
    3f28:	fb e2       	ldi	r31, 0x2B	; 43
    3f2a:	0a c0       	rjmp	.+20     	; 0x3f40 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    3f2c:	64 e0       	ldi	r22, 0x04	; 4
    3f2e:	70 e0       	ldi	r23, 0x00	; 0
    3f30:	8a ec       	ldi	r24, 0xCA	; 202
    3f32:	90 e2       	ldi	r25, 0x20	; 32
    3f34:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
    3f38:	17 c0       	rjmp	.+46     	; 0x3f68 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    3f3a:	e0 ec       	ldi	r30, 0xC0	; 192
    3f3c:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3f3e:	39 e0       	ldi	r19, 0x09	; 9
    3f40:	a2 e9       	ldi	r26, 0x92	; 146
    3f42:	b0 e2       	ldi	r27, 0x20	; 32
    3f44:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3f46:	81 91       	ld	r24, Z+
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	8d 93       	st	X+, r24
    3f4c:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3f4e:	2f 5f       	subi	r18, 0xFF	; 255
    3f50:	23 17       	cp	r18, r19
    3f52:	c8 f3       	brcs	.-14     	; 0x3f46 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3f54:	63 2f       	mov	r22, r19
    3f56:	66 0f       	add	r22, r22
    3f58:	6e 5f       	subi	r22, 0xFE	; 254
    3f5a:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <udc_string_desc>
		udd_set_setup_payload(
    3f5e:	70 e0       	ldi	r23, 0x00	; 0
    3f60:	80 e9       	ldi	r24, 0x90	; 144
    3f62:	90 e2       	ldi	r25, 0x20	; 32
    3f64:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3f68:	e1 e8       	ldi	r30, 0x81	; 129
    3f6a:	fb e2       	ldi	r31, 0x2B	; 43
    3f6c:	86 81       	ldd	r24, Z+6	; 0x06
    3f6e:	97 81       	ldd	r25, Z+7	; 0x07
    3f70:	22 85       	ldd	r18, Z+10	; 0x0a
    3f72:	33 85       	ldd	r19, Z+11	; 0x0b
    3f74:	82 17       	cp	r24, r18
    3f76:	93 07       	cpc	r25, r19
    3f78:	08 f0       	brcs	.+2      	; 0x3f7c <udc_process_setup+0x16e>
    3f7a:	db c1       	rjmp	.+950    	; 0x4332 <udc_process_setup+0x524>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3f7c:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <udd_g_ctrlreq+0xa>
    3f80:	90 93 8c 2b 	sts	0x2B8C, r25	; 0x802b8c <udd_g_ctrlreq+0xb>
    3f84:	d6 c1       	rjmp	.+940    	; 0x4332 <udc_process_setup+0x524>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    3f86:	21 30       	cpi	r18, 0x01	; 1
    3f88:	31 05       	cpc	r19, r1
    3f8a:	09 f0       	breq	.+2      	; 0x3f8e <udc_process_setup+0x180>
    3f8c:	78 c1       	rjmp	.+752    	; 0x427e <udc_process_setup+0x470>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3f8e:	61 e0       	ldi	r22, 0x01	; 1
    3f90:	70 e0       	ldi	r23, 0x00	; 0
    3f92:	80 ef       	ldi	r24, 0xF0	; 240
    3f94:	99 e2       	ldi	r25, 0x29	; 41
    3f96:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
    3f9a:	cb c1       	rjmp	.+918    	; 0x4332 <udc_process_setup+0x524>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3f9c:	81 30       	cpi	r24, 0x01	; 1
    3f9e:	e9 f5       	brne	.+122    	; 0x401a <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3fa0:	90 91 82 2b 	lds	r25, 0x2B82	; 0x802b82 <udd_g_ctrlreq+0x1>
    3fa4:	9a 30       	cpi	r25, 0x0A	; 10
    3fa6:	c9 f5       	brne	.+114    	; 0x401a <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    3fa8:	21 30       	cpi	r18, 0x01	; 1
    3faa:	31 05       	cpc	r19, r1
    3fac:	09 f0       	breq	.+2      	; 0x3fb0 <udc_process_setup+0x1a2>
    3fae:	37 c1       	rjmp	.+622    	; 0x421e <udc_process_setup+0x410>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3fb0:	80 91 f0 29 	lds	r24, 0x29F0	; 0x8029f0 <udc_num_configuration>
    3fb4:	88 23       	and	r24, r24
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <udc_process_setup+0x1ac>
    3fb8:	32 c1       	rjmp	.+612    	; 0x421e <udc_process_setup+0x410>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3fba:	c0 91 85 2b 	lds	r28, 0x2B85	; 0x802b85 <udd_g_ctrlreq+0x4>
    3fbe:	d0 91 86 2b 	lds	r29, 0x2B86	; 0x802b86 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3fc2:	00 91 ee 29 	lds	r16, 0x29EE	; 0x8029ee <udc_ptr_conf>
    3fc6:	10 91 ef 29 	lds	r17, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    3fca:	d8 01       	movw	r26, r16
    3fcc:	ed 91       	ld	r30, X+
    3fce:	fc 91       	ld	r31, X
    3fd0:	84 81       	ldd	r24, Z+4	; 0x04
    3fd2:	c8 17       	cp	r28, r24
    3fd4:	08 f0       	brcs	.+2      	; 0x3fd8 <udc_process_setup+0x1ca>
    3fd6:	23 c1       	rjmp	.+582    	; 0x421e <udc_process_setup+0x410>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3fd8:	60 e0       	ldi	r22, 0x00	; 0
    3fda:	8c 2f       	mov	r24, r28
    3fdc:	0f de       	rcall	.-994    	; 0x3bfc <udc_update_iface_desc>
    3fde:	88 23       	and	r24, r24
    3fe0:	09 f4       	brne	.+2      	; 0x3fe4 <udc_process_setup+0x1d6>
    3fe2:	18 c1       	rjmp	.+560    	; 0x4214 <udc_process_setup+0x406>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3fe4:	ce 01       	movw	r24, r28
    3fe6:	99 27       	eor	r25, r25
    3fe8:	88 0f       	add	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	d8 01       	movw	r26, r16
    3fee:	12 96       	adiw	r26, 0x02	; 2
    3ff0:	ed 91       	ld	r30, X+
    3ff2:	fc 91       	ld	r31, X
    3ff4:	13 97       	sbiw	r26, 0x03	; 3
    3ff6:	e8 0f       	add	r30, r24
    3ff8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    3ffa:	01 90       	ld	r0, Z+
    3ffc:	f0 81       	ld	r31, Z
    3ffe:	e0 2d       	mov	r30, r0
    4000:	86 81       	ldd	r24, Z+6	; 0x06
    4002:	97 81       	ldd	r25, Z+7	; 0x07
    4004:	fc 01       	movw	r30, r24
    4006:	19 95       	eicall
    4008:	80 93 f2 29 	sts	0x29F2, r24	; 0x8029f2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    400c:	61 e0       	ldi	r22, 0x01	; 1
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	82 ef       	ldi	r24, 0xF2	; 242
    4012:	99 e2       	ldi	r25, 0x29	; 41
    4014:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
    4018:	8c c1       	rjmp	.+792    	; 0x4332 <udc_process_setup+0x524>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    401a:	82 30       	cpi	r24, 0x02	; 2
    401c:	09 f0       	breq	.+2      	; 0x4020 <udc_process_setup+0x212>
    401e:	fa c0       	rjmp	.+500    	; 0x4214 <udc_process_setup+0x406>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4020:	80 91 82 2b 	lds	r24, 0x2B82	; 0x802b82 <udd_g_ctrlreq+0x1>
    4024:	81 11       	cpse	r24, r1
    4026:	ef c0       	rjmp	.+478    	; 0x4206 <udc_process_setup+0x3f8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    4028:	22 30       	cpi	r18, 0x02	; 2
    402a:	31 05       	cpc	r19, r1
    402c:	09 f0       	breq	.+2      	; 0x4030 <udc_process_setup+0x222>
    402e:	27 c1       	rjmp	.+590    	; 0x427e <udc_process_setup+0x470>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4030:	80 91 85 2b 	lds	r24, 0x2B85	; 0x802b85 <udd_g_ctrlreq+0x4>
    4034:	0e 94 42 34 	call	0x6884	; 0x6884 <udd_ep_is_halted>
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	80 93 ea 29 	sts	0x29EA, r24	; 0x8029ea <udc_ep_status.5118>
    403e:	90 93 eb 29 	sts	0x29EB, r25	; 0x8029eb <udc_ep_status.5118+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    4042:	62 e0       	ldi	r22, 0x02	; 2
    4044:	70 e0       	ldi	r23, 0x00	; 0
    4046:	8a ee       	ldi	r24, 0xEA	; 234
    4048:	99 e2       	ldi	r25, 0x29	; 41
    404a:	0e 94 b3 33 	call	0x6766	; 0x6766 <udd_set_setup_payload>
    404e:	71 c1       	rjmp	.+738    	; 0x4332 <udc_process_setup+0x524>
    4050:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4052:	09 f0       	breq	.+2      	; 0x4056 <udc_process_setup+0x248>
    4054:	84 c0       	rjmp	.+264    	; 0x415e <udc_process_setup+0x350>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4056:	90 91 82 2b 	lds	r25, 0x2B82	; 0x802b82 <udd_g_ctrlreq+0x1>
    405a:	93 30       	cpi	r25, 0x03	; 3
    405c:	09 f4       	brne	.+2      	; 0x4060 <udc_process_setup+0x252>
    405e:	d5 c0       	rjmp	.+426    	; 0x420a <udc_process_setup+0x3fc>
    4060:	18 f4       	brcc	.+6      	; 0x4068 <udc_process_setup+0x25a>
    4062:	91 30       	cpi	r25, 0x01	; 1
    4064:	a1 f0       	breq	.+40     	; 0x408e <udc_process_setup+0x280>
    4066:	7b c0       	rjmp	.+246    	; 0x415e <udc_process_setup+0x350>
    4068:	95 30       	cpi	r25, 0x05	; 5
    406a:	19 f0       	breq	.+6      	; 0x4072 <udc_process_setup+0x264>
    406c:	99 30       	cpi	r25, 0x09	; 9
    406e:	39 f1       	breq	.+78     	; 0x40be <udc_process_setup+0x2b0>
    4070:	76 c0       	rjmp	.+236    	; 0x415e <udc_process_setup+0x350>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4072:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    4076:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    407a:	89 2b       	or	r24, r25
    407c:	09 f0       	breq	.+2      	; 0x4080 <udc_process_setup+0x272>
    407e:	ff c0       	rjmp	.+510    	; 0x427e <udc_process_setup+0x470>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    4080:	88 ef       	ldi	r24, 0xF8	; 248
    4082:	9d e1       	ldi	r25, 0x1D	; 29
    4084:	80 93 8d 2b 	sts	0x2B8D, r24	; 0x802b8d <udd_g_ctrlreq+0xc>
    4088:	90 93 8e 2b 	sts	0x2B8E, r25	; 0x802b8e <udd_g_ctrlreq+0xd>
    408c:	52 c1       	rjmp	.+676    	; 0x4332 <udc_process_setup+0x524>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    408e:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    4092:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    4096:	89 2b       	or	r24, r25
    4098:	09 f0       	breq	.+2      	; 0x409c <udc_process_setup+0x28e>
    409a:	f1 c0       	rjmp	.+482    	; 0x427e <udc_process_setup+0x470>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    409c:	80 91 83 2b 	lds	r24, 0x2B83	; 0x802b83 <udd_g_ctrlreq+0x2>
    40a0:	90 91 84 2b 	lds	r25, 0x2B84	; 0x802b84 <udd_g_ctrlreq+0x3>
    40a4:	01 97       	sbiw	r24, 0x01	; 1
    40a6:	09 f0       	breq	.+2      	; 0x40aa <udc_process_setup+0x29c>
    40a8:	ea c0       	rjmp	.+468    	; 0x427e <udc_process_setup+0x470>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    40aa:	80 91 f4 29 	lds	r24, 0x29F4	; 0x8029f4 <udc_device_status>
    40ae:	90 91 f5 29 	lds	r25, 0x29F5	; 0x8029f5 <udc_device_status+0x1>
    40b2:	8d 7f       	andi	r24, 0xFD	; 253
    40b4:	80 93 f4 29 	sts	0x29F4, r24	; 0x8029f4 <udc_device_status>
    40b8:	90 93 f5 29 	sts	0x29F5, r25	; 0x8029f5 <udc_device_status+0x1>
    40bc:	3a c1       	rjmp	.+628    	; 0x4332 <udc_process_setup+0x524>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    40be:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    40c2:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    40c6:	89 2b       	or	r24, r25
    40c8:	09 f0       	breq	.+2      	; 0x40cc <udc_process_setup+0x2be>
    40ca:	d9 c0       	rjmp	.+434    	; 0x427e <udc_process_setup+0x470>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    40cc:	0e 94 a8 33 	call	0x6750	; 0x6750 <udd_getaddress>
    40d0:	88 23       	and	r24, r24
    40d2:	09 f4       	brne	.+2      	; 0x40d6 <udc_process_setup+0x2c8>
    40d4:	9f c0       	rjmp	.+318    	; 0x4214 <udc_process_setup+0x406>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    40d6:	20 91 83 2b 	lds	r18, 0x2B83	; 0x802b83 <udd_g_ctrlreq+0x2>
    40da:	30 91 84 2b 	lds	r19, 0x2B84	; 0x802b84 <udd_g_ctrlreq+0x3>
    40de:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    40e0:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <udc_config>
    40e4:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    40e8:	81 89       	ldd	r24, Z+17	; 0x11
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	82 17       	cp	r24, r18
    40ee:	93 07       	cpc	r25, r19
    40f0:	08 f4       	brcc	.+2      	; 0x40f4 <udc_process_setup+0x2e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    40f2:	90 c0       	rjmp	.+288    	; 0x4214 <udc_process_setup+0x406>
    40f4:	35 de       	rcall	.-918    	; 0x3d60 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    40f6:	80 91 83 2b 	lds	r24, 0x2B83	; 0x802b83 <udd_g_ctrlreq+0x2>
    40fa:	90 91 84 2b 	lds	r25, 0x2B84	; 0x802b84 <udd_g_ctrlreq+0x3>
    40fe:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    4102:	88 23       	and	r24, r24
    4104:	09 f4       	brne	.+2      	; 0x4108 <udc_process_setup+0x2fa>
    4106:	15 c1       	rjmp	.+554    	; 0x4332 <udc_process_setup+0x524>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    4108:	99 27       	eor	r25, r25
    410a:	81 50       	subi	r24, 0x01	; 1
    410c:	90 4c       	sbci	r25, 0xC0	; 192
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	88 0f       	add	r24, r24
    4114:	99 1f       	adc	r25, r25
    4116:	e0 91 2d 20 	lds	r30, 0x202D	; 0x80202d <udc_config+0x2>
    411a:	f0 91 2e 20 	lds	r31, 0x202E	; 0x80202e <udc_config+0x3>
    411e:	e8 0f       	add	r30, r24
    4120:	f9 1f       	adc	r31, r25
    4122:	e0 93 ee 29 	sts	0x29EE, r30	; 0x8029ee <udc_ptr_conf>
    4126:	f0 93 ef 29 	sts	0x29EF, r31	; 0x8029ef <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    412a:	01 90       	ld	r0, Z+
    412c:	f0 81       	ld	r31, Z
    412e:	e0 2d       	mov	r30, r0
    4130:	84 81       	ldd	r24, Z+4	; 0x04
    4132:	88 23       	and	r24, r24
    4134:	09 f4       	brne	.+2      	; 0x4138 <udc_process_setup+0x32a>
    4136:	fd c0       	rjmp	.+506    	; 0x4332 <udc_process_setup+0x524>
    4138:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    413a:	60 e0       	ldi	r22, 0x00	; 0
    413c:	8c 2f       	mov	r24, r28
    413e:	da dd       	rcall	.-1100   	; 0x3cf4 <udc_iface_enable>
    4140:	88 23       	and	r24, r24
    4142:	09 f4       	brne	.+2      	; 0x4146 <udc_process_setup+0x338>
    4144:	67 c0       	rjmp	.+206    	; 0x4214 <udc_process_setup+0x406>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    4146:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4148:	e0 91 ee 29 	lds	r30, 0x29EE	; 0x8029ee <udc_ptr_conf>
    414c:	f0 91 ef 29 	lds	r31, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    4150:	01 90       	ld	r0, Z+
    4152:	f0 81       	ld	r31, Z
    4154:	e0 2d       	mov	r30, r0
    4156:	84 81       	ldd	r24, Z+4	; 0x04
    4158:	c8 17       	cp	r28, r24
    415a:	78 f3       	brcs	.-34     	; 0x413a <udc_process_setup+0x32c>
    415c:	ea c0       	rjmp	.+468    	; 0x4332 <udc_process_setup+0x524>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    415e:	81 30       	cpi	r24, 0x01	; 1
    4160:	e9 f4       	brne	.+58     	; 0x419c <udc_process_setup+0x38e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4162:	90 91 82 2b 	lds	r25, 0x2B82	; 0x802b82 <udd_g_ctrlreq+0x1>
    4166:	9b 30       	cpi	r25, 0x0B	; 11
    4168:	c9 f4       	brne	.+50     	; 0x419c <udc_process_setup+0x38e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    416a:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    416e:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    4172:	89 2b       	or	r24, r25
    4174:	09 f0       	breq	.+2      	; 0x4178 <udc_process_setup+0x36a>
    4176:	53 c0       	rjmp	.+166    	; 0x421e <udc_process_setup+0x410>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4178:	80 91 f0 29 	lds	r24, 0x29F0	; 0x8029f0 <udc_num_configuration>
    417c:	88 23       	and	r24, r24
    417e:	09 f4       	brne	.+2      	; 0x4182 <udc_process_setup+0x374>
    4180:	4e c0       	rjmp	.+156    	; 0x421e <udc_process_setup+0x410>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4182:	e1 e8       	ldi	r30, 0x81	; 129
    4184:	fb e2       	ldi	r31, 0x2B	; 43
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    4186:	c4 81       	ldd	r28, Z+4	; 0x04

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4188:	d2 81       	ldd	r29, Z+2	; 0x02
    418a:	8c 2f       	mov	r24, r28
    418c:	71 dd       	rcall	.-1310   	; 0x3c70 <udc_iface_disable>
    418e:	88 23       	and	r24, r24
    4190:	09 f4       	brne	.+2      	; 0x4194 <udc_process_setup+0x386>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4192:	40 c0       	rjmp	.+128    	; 0x4214 <udc_process_setup+0x406>
    4194:	6d 2f       	mov	r22, r29
    4196:	8c 2f       	mov	r24, r28
    4198:	ad dd       	rcall	.-1190   	; 0x3cf4 <udc_iface_enable>
    419a:	3a c0       	rjmp	.+116    	; 0x4210 <udc_process_setup+0x402>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    419c:	82 30       	cpi	r24, 0x02	; 2
    419e:	d1 f5       	brne	.+116    	; 0x4214 <udc_process_setup+0x406>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    41a0:	80 91 82 2b 	lds	r24, 0x2B82	; 0x802b82 <udd_g_ctrlreq+0x1>
    41a4:	81 30       	cpi	r24, 0x01	; 1
    41a6:	19 f0       	breq	.+6      	; 0x41ae <udc_process_setup+0x3a0>
    41a8:	83 30       	cpi	r24, 0x03	; 3
    41aa:	a1 f0       	breq	.+40     	; 0x41d4 <udc_process_setup+0x3c6>
    41ac:	30 c0       	rjmp	.+96     	; 0x420e <udc_process_setup+0x400>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    41ae:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    41b2:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    41b6:	89 2b       	or	r24, r25
    41b8:	09 f0       	breq	.+2      	; 0x41bc <udc_process_setup+0x3ae>
    41ba:	61 c0       	rjmp	.+194    	; 0x427e <udc_process_setup+0x470>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    41bc:	80 91 83 2b 	lds	r24, 0x2B83	; 0x802b83 <udd_g_ctrlreq+0x2>
    41c0:	90 91 84 2b 	lds	r25, 0x2B84	; 0x802b84 <udd_g_ctrlreq+0x3>
    41c4:	89 2b       	or	r24, r25
    41c6:	09 f0       	breq	.+2      	; 0x41ca <udc_process_setup+0x3bc>
    41c8:	5a c0       	rjmp	.+180    	; 0x427e <udc_process_setup+0x470>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    41ca:	80 91 85 2b 	lds	r24, 0x2B85	; 0x802b85 <udd_g_ctrlreq+0x4>
    41ce:	0e 94 5d 34 	call	0x68ba	; 0x68ba <udd_ep_clear_halt>
    41d2:	1e c0       	rjmp	.+60     	; 0x4210 <udc_process_setup+0x402>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    41d4:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    41d8:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    41dc:	89 2b       	or	r24, r25
    41de:	09 f0       	breq	.+2      	; 0x41e2 <udc_process_setup+0x3d4>
    41e0:	4e c0       	rjmp	.+156    	; 0x427e <udc_process_setup+0x470>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    41e2:	80 91 83 2b 	lds	r24, 0x2B83	; 0x802b83 <udd_g_ctrlreq+0x2>
    41e6:	90 91 84 2b 	lds	r25, 0x2B84	; 0x802b84 <udd_g_ctrlreq+0x3>
    41ea:	89 2b       	or	r24, r25
    41ec:	09 f0       	breq	.+2      	; 0x41f0 <udc_process_setup+0x3e2>
    41ee:	47 c0       	rjmp	.+142    	; 0x427e <udc_process_setup+0x470>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    41f0:	c1 e8       	ldi	r28, 0x81	; 129
    41f2:	db e2       	ldi	r29, 0x2B	; 43
    41f4:	8c 81       	ldd	r24, Y+4	; 0x04
    41f6:	0e 94 5f 35 	call	0x6abe	; 0x6abe <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    41fa:	8c 81       	ldd	r24, Y+4	; 0x04
    41fc:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <udd_ep_set_halt>
    4200:	07 c0       	rjmp	.+14     	; 0x4210 <udc_process_setup+0x402>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	05 c0       	rjmp	.+10     	; 0x4210 <udc_process_setup+0x402>
				break;
			}
		}
#endif
	}
	return false;
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	03 c0       	rjmp	.+6      	; 0x4210 <udc_process_setup+0x402>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	01 c0       	rjmp	.+2      	; 0x4210 <udc_process_setup+0x402>
				break;
			}
		}
#endif
	}
	return false;
    420e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    4210:	81 11       	cpse	r24, r1
    4212:	90 c0       	rjmp	.+288    	; 0x4334 <udc_process_setup+0x526>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4214:	80 91 81 2b 	lds	r24, 0x2B81	; 0x802b81 <udd_g_ctrlreq>
    4218:	8f 71       	andi	r24, 0x1F	; 31
    421a:	81 30       	cpi	r24, 0x01	; 1
    421c:	81 f5       	brne	.+96     	; 0x427e <udc_process_setup+0x470>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    421e:	80 91 f0 29 	lds	r24, 0x29F0	; 0x8029f0 <udc_num_configuration>
    4222:	88 23       	and	r24, r24
    4224:	09 f4       	brne	.+2      	; 0x4228 <udc_process_setup+0x41a>
    4226:	71 c0       	rjmp	.+226    	; 0x430a <udc_process_setup+0x4fc>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4228:	00 91 85 2b 	lds	r16, 0x2B85	; 0x802b85 <udd_g_ctrlreq+0x4>
    422c:	10 91 86 2b 	lds	r17, 0x2B86	; 0x802b86 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4230:	c0 91 ee 29 	lds	r28, 0x29EE	; 0x8029ee <udc_ptr_conf>
    4234:	d0 91 ef 29 	lds	r29, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    4238:	e8 81       	ld	r30, Y
    423a:	f9 81       	ldd	r31, Y+1	; 0x01
    423c:	84 81       	ldd	r24, Z+4	; 0x04
    423e:	08 17       	cp	r16, r24
    4240:	08 f0       	brcs	.+2      	; 0x4244 <udc_process_setup+0x436>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4242:	65 c0       	rjmp	.+202    	; 0x430e <udc_process_setup+0x500>
    4244:	60 e0       	ldi	r22, 0x00	; 0
    4246:	80 2f       	mov	r24, r16
    4248:	d9 dc       	rcall	.-1614   	; 0x3bfc <udc_update_iface_desc>
    424a:	88 23       	and	r24, r24
    424c:	c1 f0       	breq	.+48     	; 0x427e <udc_process_setup+0x470>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    424e:	f8 01       	movw	r30, r16
    4250:	ff 27       	eor	r31, r31
    4252:	cf 01       	movw	r24, r30
    4254:	88 0f       	add	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	ea 81       	ldd	r30, Y+2	; 0x02
    425a:	fb 81       	ldd	r31, Y+3	; 0x03
    425c:	e8 0f       	add	r30, r24
    425e:	f9 1f       	adc	r31, r25
    4260:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4262:	d1 81       	ldd	r29, Z+1	; 0x01
    4264:	ee 81       	ldd	r30, Y+6	; 0x06
    4266:	ff 81       	ldd	r31, Y+7	; 0x07
    4268:	19 95       	eicall
    426a:	68 2f       	mov	r22, r24
    426c:	80 2f       	mov	r24, r16
    426e:	c6 dc       	rcall	.-1652   	; 0x3bfc <udc_update_iface_desc>
    4270:	88 23       	and	r24, r24
    4272:	29 f0       	breq	.+10     	; 0x427e <udc_process_setup+0x470>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4274:	ec 81       	ldd	r30, Y+4	; 0x04
    4276:	fd 81       	ldd	r31, Y+5	; 0x05
    4278:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    427a:	81 11       	cpse	r24, r1
    427c:	5b c0       	rjmp	.+182    	; 0x4334 <udc_process_setup+0x526>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    427e:	80 91 81 2b 	lds	r24, 0x2B81	; 0x802b81 <udd_g_ctrlreq>
    4282:	8f 71       	andi	r24, 0x1F	; 31
    4284:	82 30       	cpi	r24, 0x02	; 2
    4286:	09 f0       	breq	.+2      	; 0x428a <udc_process_setup+0x47c>
    4288:	44 c0       	rjmp	.+136    	; 0x4312 <udc_process_setup+0x504>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    428a:	80 91 f0 29 	lds	r24, 0x29F0	; 0x8029f0 <udc_num_configuration>
    428e:	88 23       	and	r24, r24
    4290:	b1 f1       	breq	.+108    	; 0x42fe <udc_process_setup+0x4f0>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4292:	a0 91 ee 29 	lds	r26, 0x29EE	; 0x8029ee <udc_ptr_conf>
    4296:	b0 91 ef 29 	lds	r27, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    429a:	ed 91       	ld	r30, X+
    429c:	fc 91       	ld	r31, X
    429e:	11 97       	sbiw	r26, 0x01	; 1
    42a0:	84 81       	ldd	r24, Z+4	; 0x04
    42a2:	88 23       	and	r24, r24
    42a4:	71 f1       	breq	.+92     	; 0x4302 <udc_process_setup+0x4f4>
    42a6:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    42a8:	ec 2f       	mov	r30, r28
    42aa:	f0 e0       	ldi	r31, 0x00	; 0
    42ac:	ee 0f       	add	r30, r30
    42ae:	ff 1f       	adc	r31, r31
    42b0:	12 96       	adiw	r26, 0x02	; 2
    42b2:	8d 91       	ld	r24, X+
    42b4:	9c 91       	ld	r25, X
    42b6:	13 97       	sbiw	r26, 0x03	; 3
    42b8:	e8 0f       	add	r30, r24
    42ba:	f9 1f       	adc	r31, r25
    42bc:	00 81       	ld	r16, Z
    42be:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    42c0:	d8 01       	movw	r26, r16
    42c2:	16 96       	adiw	r26, 0x06	; 6
    42c4:	ed 91       	ld	r30, X+
    42c6:	fc 91       	ld	r31, X
    42c8:	17 97       	sbiw	r26, 0x07	; 7
    42ca:	19 95       	eicall
    42cc:	68 2f       	mov	r22, r24
    42ce:	8c 2f       	mov	r24, r28
    42d0:	95 dc       	rcall	.-1750   	; 0x3bfc <udc_update_iface_desc>
    42d2:	88 23       	and	r24, r24
    42d4:	79 f1       	breq	.+94     	; 0x4334 <udc_process_setup+0x526>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    42d6:	d8 01       	movw	r26, r16
    42d8:	14 96       	adiw	r26, 0x04	; 4
    42da:	ed 91       	ld	r30, X+
    42dc:	fc 91       	ld	r31, X
    42de:	15 97       	sbiw	r26, 0x05	; 5
    42e0:	19 95       	eicall
    42e2:	81 11       	cpse	r24, r1
    42e4:	27 c0       	rjmp	.+78     	; 0x4334 <udc_process_setup+0x526>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    42e6:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    42e8:	a0 91 ee 29 	lds	r26, 0x29EE	; 0x8029ee <udc_ptr_conf>
    42ec:	b0 91 ef 29 	lds	r27, 0x29EF	; 0x8029ef <udc_ptr_conf+0x1>
    42f0:	ed 91       	ld	r30, X+
    42f2:	fc 91       	ld	r31, X
    42f4:	11 97       	sbiw	r26, 0x01	; 1
    42f6:	94 81       	ldd	r25, Z+4	; 0x04
    42f8:	c9 17       	cp	r28, r25
    42fa:	b0 f2       	brcs	.-84     	; 0x42a8 <udc_process_setup+0x49a>
    42fc:	1b c0       	rjmp	.+54     	; 0x4334 <udc_process_setup+0x526>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	19 c0       	rjmp	.+50     	; 0x4334 <udc_process_setup+0x526>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	17 c0       	rjmp	.+46     	; 0x4334 <udc_process_setup+0x526>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    4306:	80 e0       	ldi	r24, 0x00	; 0
    4308:	15 c0       	rjmp	.+42     	; 0x4334 <udc_process_setup+0x526>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	13 c0       	rjmp	.+38     	; 0x4334 <udc_process_setup+0x526>
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	11 c0       	rjmp	.+34     	; 0x4334 <udc_process_setup+0x526>
    4312:	80 e0       	ldi	r24, 0x00	; 0
    4314:	0f c0       	rjmp	.+30     	; 0x4334 <udc_process_setup+0x526>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    4316:	98 2f       	mov	r25, r24
    4318:	90 76       	andi	r25, 0x60	; 96
    431a:	09 f0       	breq	.+2      	; 0x431e <udc_process_setup+0x510>
    431c:	7b cf       	rjmp	.-266    	; 0x4214 <udc_process_setup+0x406>
    431e:	90 cd       	rjmp	.-1248   	; 0x3e40 <udc_process_setup+0x32>
    4320:	98 2f       	mov	r25, r24
    4322:	90 76       	andi	r25, 0x60	; 96
    4324:	09 f0       	breq	.+2      	; 0x4328 <udc_process_setup+0x51a>
    4326:	76 cf       	rjmp	.-276    	; 0x4214 <udc_process_setup+0x406>
    4328:	93 ce       	rjmp	.-730    	; 0x4050 <udc_process_setup+0x242>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    432a:	3f e0       	ldi	r19, 0x0F	; 15
		str = udc_string_product_name;
    432c:	e0 eb       	ldi	r30, 0xB0	; 176
    432e:	f0 e2       	ldi	r31, 0x20	; 32
    4330:	07 ce       	rjmp	.-1010   	; 0x3f40 <udc_process_setup+0x132>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    4332:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    4334:	df 91       	pop	r29
    4336:	cf 91       	pop	r28
    4338:	1f 91       	pop	r17
    433a:	0f 91       	pop	r16
    433c:	08 95       	ret

0000433e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    433e:	43 e0       	ldi	r20, 0x03	; 3
    4340:	50 e0       	ldi	r21, 0x00	; 0
    4342:	61 e0       	ldi	r22, 0x01	; 1
    4344:	80 ee       	ldi	r24, 0xE0	; 224
    4346:	97 e0       	ldi	r25, 0x07	; 7
    4348:	61 d8       	rcall	.-3902   	; 0x340c <ioport_configure_port_pin>
    434a:	43 e0       	ldi	r20, 0x03	; 3
    434c:	50 e0       	ldi	r21, 0x00	; 0
    434e:	62 e0       	ldi	r22, 0x02	; 2
    4350:	80 ee       	ldi	r24, 0xE0	; 224
    4352:	97 e0       	ldi	r25, 0x07	; 7
    4354:	5b d8       	rcall	.-3914   	; 0x340c <ioport_configure_port_pin>
    4356:	43 e0       	ldi	r20, 0x03	; 3
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	60 e1       	ldi	r22, 0x10	; 16
    435c:	80 e6       	ldi	r24, 0x60	; 96
    435e:	96 e0       	ldi	r25, 0x06	; 6
    4360:	55 d8       	rcall	.-3926   	; 0x340c <ioport_configure_port_pin>
    4362:	41 e0       	ldi	r20, 0x01	; 1
    4364:	50 e4       	ldi	r21, 0x40	; 64
    4366:	60 e2       	ldi	r22, 0x20	; 32
    4368:	80 e6       	ldi	r24, 0x60	; 96
    436a:	96 e0       	ldi	r25, 0x06	; 6
    436c:	4f d8       	rcall	.-3938   	; 0x340c <ioport_configure_port_pin>
    436e:	40 e0       	ldi	r20, 0x00	; 0
    4370:	5b e1       	ldi	r21, 0x1B	; 27
    4372:	60 e2       	ldi	r22, 0x20	; 32
    4374:	80 e8       	ldi	r24, 0x80	; 128
    4376:	96 e0       	ldi	r25, 0x06	; 6
    4378:	49 d8       	rcall	.-3950   	; 0x340c <ioport_configure_port_pin>
    437a:	40 e0       	ldi	r20, 0x00	; 0
    437c:	5b e1       	ldi	r21, 0x1B	; 27
    437e:	62 e0       	ldi	r22, 0x02	; 2
    4380:	80 ea       	ldi	r24, 0xA0	; 160
    4382:	96 e0       	ldi	r25, 0x06	; 6
    4384:	43 d8       	rcall	.-3962   	; 0x340c <ioport_configure_port_pin>
    4386:	40 e0       	ldi	r20, 0x00	; 0
    4388:	5b e1       	ldi	r21, 0x1B	; 27
    438a:	64 e0       	ldi	r22, 0x04	; 4
    438c:	80 ea       	ldi	r24, 0xA0	; 160
    438e:	96 e0       	ldi	r25, 0x06	; 6
    4390:	3d d8       	rcall	.-3974   	; 0x340c <ioport_configure_port_pin>
    4392:	43 e0       	ldi	r20, 0x03	; 3
    4394:	50 e0       	ldi	r21, 0x00	; 0
    4396:	62 e0       	ldi	r22, 0x02	; 2
    4398:	80 e6       	ldi	r24, 0x60	; 96
    439a:	96 e0       	ldi	r25, 0x06	; 6
    439c:	37 d8       	rcall	.-3986   	; 0x340c <ioport_configure_port_pin>
    439e:	43 e0       	ldi	r20, 0x03	; 3
    43a0:	50 e0       	ldi	r21, 0x00	; 0
    43a2:	68 e0       	ldi	r22, 0x08	; 8
    43a4:	80 e6       	ldi	r24, 0x60	; 96
    43a6:	96 e0       	ldi	r25, 0x06	; 6
    43a8:	31 d8       	rcall	.-3998   	; 0x340c <ioport_configure_port_pin>
    43aa:	43 e0       	ldi	r20, 0x03	; 3
    43ac:	50 e0       	ldi	r21, 0x00	; 0
    43ae:	68 e0       	ldi	r22, 0x08	; 8
    43b0:	80 ea       	ldi	r24, 0xA0	; 160
    43b2:	96 e0       	ldi	r25, 0x06	; 6
    43b4:	2b d8       	rcall	.-4010   	; 0x340c <ioport_configure_port_pin>
    43b6:	43 e0       	ldi	r20, 0x03	; 3
    43b8:	50 e0       	ldi	r21, 0x00	; 0
    43ba:	61 e0       	ldi	r22, 0x01	; 1
    43bc:	80 e6       	ldi	r24, 0x60	; 96
    43be:	96 e0       	ldi	r25, 0x06	; 6
    43c0:	25 d8       	rcall	.-4022   	; 0x340c <ioport_configure_port_pin>
    43c2:	43 e0       	ldi	r20, 0x03	; 3
    43c4:	50 e0       	ldi	r21, 0x00	; 0
    43c6:	68 e0       	ldi	r22, 0x08	; 8
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	96 e0       	ldi	r25, 0x06	; 6
    43cc:	1f d8       	rcall	.-4034   	; 0x340c <ioport_configure_port_pin>
    43ce:	41 e0       	ldi	r20, 0x01	; 1
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	60 e1       	ldi	r22, 0x10	; 16
    43d4:	80 e8       	ldi	r24, 0x80	; 128
    43d6:	96 e0       	ldi	r25, 0x06	; 6
    43d8:	19 d8       	rcall	.-4046   	; 0x340c <ioport_configure_port_pin>
    43da:	43 e0       	ldi	r20, 0x03	; 3
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	62 e0       	ldi	r22, 0x02	; 2
    43e0:	80 e6       	ldi	r24, 0x60	; 96
    43e2:	96 e0       	ldi	r25, 0x06	; 6
    43e4:	13 d8       	rcall	.-4058   	; 0x340c <ioport_configure_port_pin>
    43e6:	43 e0       	ldi	r20, 0x03	; 3
    43e8:	50 e0       	ldi	r21, 0x00	; 0
    43ea:	68 e0       	ldi	r22, 0x08	; 8
    43ec:	80 e6       	ldi	r24, 0x60	; 96
    43ee:	96 e0       	ldi	r25, 0x06	; 6
    43f0:	0d d8       	rcall	.-4070   	; 0x340c <ioport_configure_port_pin>
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	50 e0       	ldi	r21, 0x00	; 0
    43f6:	64 e0       	ldi	r22, 0x04	; 4
    43f8:	80 e6       	ldi	r24, 0x60	; 96
    43fa:	96 e0       	ldi	r25, 0x06	; 6
    43fc:	07 d8       	rcall	.-4082   	; 0x340c <ioport_configure_port_pin>
    43fe:	43 e0       	ldi	r20, 0x03	; 3
    4400:	50 e0       	ldi	r21, 0x00	; 0
    4402:	60 e1       	ldi	r22, 0x10	; 16
    4404:	80 ea       	ldi	r24, 0xA0	; 160
    4406:	96 e0       	ldi	r25, 0x06	; 6
    4408:	01 c8       	rjmp	.-4094   	; 0x340c <ioport_configure_port_pin>
    440a:	08 95       	ret

0000440c <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    440c:	cf 93       	push	r28
    440e:	df 93       	push	r29
    4410:	1f 92       	push	r1
    4412:	cd b7       	in	r28, 0x3d	; 61
    4414:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4416:	2f b7       	in	r18, 0x3f	; 63
    4418:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    441a:	f8 94       	cli
	return flags;
    441c:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    441e:	28 2f       	mov	r18, r24
    4420:	39 2f       	mov	r19, r25
    4422:	21 15       	cp	r18, r1
    4424:	82 e0       	ldi	r24, 0x02	; 2
    4426:	38 07       	cpc	r19, r24
    4428:	29 f4       	brne	.+10     	; 0x4434 <adc_set_callback+0x28>
		adca_callback = callback;
    442a:	60 93 7d 2b 	sts	0x2B7D, r22	; 0x802b7d <adca_callback>
    442e:	70 93 7e 2b 	sts	0x2B7E, r23	; 0x802b7e <adca_callback+0x1>
    4432:	07 c0       	rjmp	.+14     	; 0x4442 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    4434:	20 34       	cpi	r18, 0x40	; 64
    4436:	32 40       	sbci	r19, 0x02	; 2
    4438:	21 f4       	brne	.+8      	; 0x4442 <adc_set_callback+0x36>
		adcb_callback = callback;
    443a:	60 93 7b 2b 	sts	0x2B7B, r22	; 0x802b7b <adcb_callback>
    443e:	70 93 7c 2b 	sts	0x2B7C, r23	; 0x802b7c <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4442:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    4444:	0f 90       	pop	r0
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	08 95       	ret

0000444c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    444c:	81 15       	cp	r24, r1
    444e:	22 e0       	ldi	r18, 0x02	; 2
    4450:	92 07       	cpc	r25, r18
    4452:	69 f4       	brne	.+26     	; 0x446e <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    4454:	80 91 f7 29 	lds	r24, 0x29F7	; 0x8029f7 <adca_enable_count>
    4458:	91 e0       	ldi	r25, 0x01	; 1
    445a:	98 0f       	add	r25, r24
    445c:	90 93 f7 29 	sts	0x29F7, r25	; 0x8029f7 <adca_enable_count>
    4460:	81 11       	cpse	r24, r1
    4462:	14 c0       	rjmp	.+40     	; 0x448c <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4464:	62 e0       	ldi	r22, 0x02	; 2
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	0c 94 94 10 	jmp	0x2128	; 0x2128 <sysclk_enable_module>
    446c:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    446e:	80 34       	cpi	r24, 0x40	; 64
    4470:	92 40       	sbci	r25, 0x02	; 2
    4472:	61 f4       	brne	.+24     	; 0x448c <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    4474:	80 91 f6 29 	lds	r24, 0x29F6	; 0x8029f6 <adcb_enable_count>
    4478:	91 e0       	ldi	r25, 0x01	; 1
    447a:	98 0f       	add	r25, r24
    447c:	90 93 f6 29 	sts	0x29F6, r25	; 0x8029f6 <adcb_enable_count>
    4480:	81 11       	cpse	r24, r1
    4482:	04 c0       	rjmp	.+8      	; 0x448c <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    4484:	62 e0       	ldi	r22, 0x02	; 2
    4486:	82 e0       	ldi	r24, 0x02	; 2
    4488:	0c 94 94 10 	jmp	0x2128	; 0x2128 <sysclk_enable_module>
    448c:	08 95       	ret

0000448e <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    448e:	81 15       	cp	r24, r1
    4490:	22 e0       	ldi	r18, 0x02	; 2
    4492:	92 07       	cpc	r25, r18
    4494:	61 f4       	brne	.+24     	; 0x44ae <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    4496:	80 91 f7 29 	lds	r24, 0x29F7	; 0x8029f7 <adca_enable_count>
    449a:	81 50       	subi	r24, 0x01	; 1
    449c:	80 93 f7 29 	sts	0x29F7, r24	; 0x8029f7 <adca_enable_count>
    44a0:	81 11       	cpse	r24, r1
    44a2:	13 c0       	rjmp	.+38     	; 0x44ca <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    44a4:	62 e0       	ldi	r22, 0x02	; 2
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <sysclk_disable_module>
    44ac:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    44ae:	80 34       	cpi	r24, 0x40	; 64
    44b0:	92 40       	sbci	r25, 0x02	; 2
    44b2:	59 f4       	brne	.+22     	; 0x44ca <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    44b4:	80 91 f6 29 	lds	r24, 0x29F6	; 0x8029f6 <adcb_enable_count>
    44b8:	81 50       	subi	r24, 0x01	; 1
    44ba:	80 93 f6 29 	sts	0x29F6, r24	; 0x8029f6 <adcb_enable_count>
    44be:	81 11       	cpse	r24, r1
    44c0:	04 c0       	rjmp	.+8      	; 0x44ca <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    44c2:	62 e0       	ldi	r22, 0x02	; 2
    44c4:	82 e0       	ldi	r24, 0x02	; 2
    44c6:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <sysclk_disable_module>
    44ca:	08 95       	ret

000044cc <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    44cc:	ef 92       	push	r14
    44ce:	ff 92       	push	r15
    44d0:	1f 93       	push	r17
    44d2:	cf 93       	push	r28
    44d4:	df 93       	push	r29
    44d6:	1f 92       	push	r1
    44d8:	1f 92       	push	r1
    44da:	cd b7       	in	r28, 0x3d	; 61
    44dc:	de b7       	in	r29, 0x3e	; 62
    44de:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    44e0:	8f b7       	in	r24, 0x3f	; 63
    44e2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    44e4:	f8 94       	cli
	return flags;
    44e6:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    44e8:	c7 01       	movw	r24, r14
    44ea:	b0 df       	rcall	.-160    	; 0x444c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    44ec:	f7 01       	movw	r30, r14
    44ee:	80 81       	ld	r24, Z
    44f0:	81 60       	ori	r24, 0x01	; 1
    44f2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    44f4:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    44f6:	80 91 76 2b 	lds	r24, 0x2B76	; 0x802b76 <sleepmgr_locks+0x1>
    44fa:	8f 3f       	cpi	r24, 0xFF	; 255
    44fc:	09 f4       	brne	.+2      	; 0x4500 <adc_enable+0x34>
    44fe:	ff cf       	rjmp	.-2      	; 0x44fe <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4500:	8f b7       	in	r24, 0x3f	; 63
    4502:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4504:	f8 94       	cli
	return flags;
    4506:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4508:	e5 e7       	ldi	r30, 0x75	; 117
    450a:	fb e2       	ldi	r31, 0x2B	; 43
    450c:	81 81       	ldd	r24, Z+1	; 0x01
    450e:	8f 5f       	subi	r24, 0xFF	; 255
    4510:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4512:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    4514:	0f 90       	pop	r0
    4516:	0f 90       	pop	r0
    4518:	df 91       	pop	r29
    451a:	cf 91       	pop	r28
    451c:	1f 91       	pop	r17
    451e:	ff 90       	pop	r15
    4520:	ef 90       	pop	r14
    4522:	08 95       	ret

00004524 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    4524:	1f 92       	push	r1
    4526:	0f 92       	push	r0
    4528:	0f b6       	in	r0, 0x3f	; 63
    452a:	0f 92       	push	r0
    452c:	11 24       	eor	r1, r1
    452e:	0b b6       	in	r0, 0x3b	; 59
    4530:	0f 92       	push	r0
    4532:	2f 93       	push	r18
    4534:	3f 93       	push	r19
    4536:	4f 93       	push	r20
    4538:	5f 93       	push	r21
    453a:	6f 93       	push	r22
    453c:	7f 93       	push	r23
    453e:	8f 93       	push	r24
    4540:	9f 93       	push	r25
    4542:	af 93       	push	r26
    4544:	bf 93       	push	r27
    4546:	ef 93       	push	r30
    4548:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    454a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    454e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    4552:	e0 91 7d 2b 	lds	r30, 0x2B7D	; 0x802b7d <adca_callback>
    4556:	f0 91 7e 2b 	lds	r31, 0x2B7E	; 0x802b7e <adca_callback+0x1>
    455a:	61 e0       	ldi	r22, 0x01	; 1
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	92 e0       	ldi	r25, 0x02	; 2
    4560:	19 95       	eicall
}
    4562:	ff 91       	pop	r31
    4564:	ef 91       	pop	r30
    4566:	bf 91       	pop	r27
    4568:	af 91       	pop	r26
    456a:	9f 91       	pop	r25
    456c:	8f 91       	pop	r24
    456e:	7f 91       	pop	r23
    4570:	6f 91       	pop	r22
    4572:	5f 91       	pop	r21
    4574:	4f 91       	pop	r20
    4576:	3f 91       	pop	r19
    4578:	2f 91       	pop	r18
    457a:	0f 90       	pop	r0
    457c:	0b be       	out	0x3b, r0	; 59
    457e:	0f 90       	pop	r0
    4580:	0f be       	out	0x3f, r0	; 63
    4582:	0f 90       	pop	r0
    4584:	1f 90       	pop	r1
    4586:	18 95       	reti

00004588 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    4588:	1f 92       	push	r1
    458a:	0f 92       	push	r0
    458c:	0f b6       	in	r0, 0x3f	; 63
    458e:	0f 92       	push	r0
    4590:	11 24       	eor	r1, r1
    4592:	0b b6       	in	r0, 0x3b	; 59
    4594:	0f 92       	push	r0
    4596:	2f 93       	push	r18
    4598:	3f 93       	push	r19
    459a:	4f 93       	push	r20
    459c:	5f 93       	push	r21
    459e:	6f 93       	push	r22
    45a0:	7f 93       	push	r23
    45a2:	8f 93       	push	r24
    45a4:	9f 93       	push	r25
    45a6:	af 93       	push	r26
    45a8:	bf 93       	push	r27
    45aa:	ef 93       	push	r30
    45ac:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    45ae:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    45b2:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    45b6:	e0 91 7d 2b 	lds	r30, 0x2B7D	; 0x802b7d <adca_callback>
    45ba:	f0 91 7e 2b 	lds	r31, 0x2B7E	; 0x802b7e <adca_callback+0x1>
    45be:	62 e0       	ldi	r22, 0x02	; 2
    45c0:	80 e0       	ldi	r24, 0x00	; 0
    45c2:	92 e0       	ldi	r25, 0x02	; 2
    45c4:	19 95       	eicall
}
    45c6:	ff 91       	pop	r31
    45c8:	ef 91       	pop	r30
    45ca:	bf 91       	pop	r27
    45cc:	af 91       	pop	r26
    45ce:	9f 91       	pop	r25
    45d0:	8f 91       	pop	r24
    45d2:	7f 91       	pop	r23
    45d4:	6f 91       	pop	r22
    45d6:	5f 91       	pop	r21
    45d8:	4f 91       	pop	r20
    45da:	3f 91       	pop	r19
    45dc:	2f 91       	pop	r18
    45de:	0f 90       	pop	r0
    45e0:	0b be       	out	0x3b, r0	; 59
    45e2:	0f 90       	pop	r0
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	0f 90       	pop	r0
    45e8:	1f 90       	pop	r1
    45ea:	18 95       	reti

000045ec <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    45ec:	1f 92       	push	r1
    45ee:	0f 92       	push	r0
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	0f 92       	push	r0
    45f4:	11 24       	eor	r1, r1
    45f6:	0b b6       	in	r0, 0x3b	; 59
    45f8:	0f 92       	push	r0
    45fa:	2f 93       	push	r18
    45fc:	3f 93       	push	r19
    45fe:	4f 93       	push	r20
    4600:	5f 93       	push	r21
    4602:	6f 93       	push	r22
    4604:	7f 93       	push	r23
    4606:	8f 93       	push	r24
    4608:	9f 93       	push	r25
    460a:	af 93       	push	r26
    460c:	bf 93       	push	r27
    460e:	ef 93       	push	r30
    4610:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    4612:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    4616:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    461a:	e0 91 7d 2b 	lds	r30, 0x2B7D	; 0x802b7d <adca_callback>
    461e:	f0 91 7e 2b 	lds	r31, 0x2B7E	; 0x802b7e <adca_callback+0x1>
    4622:	64 e0       	ldi	r22, 0x04	; 4
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	92 e0       	ldi	r25, 0x02	; 2
    4628:	19 95       	eicall
}
    462a:	ff 91       	pop	r31
    462c:	ef 91       	pop	r30
    462e:	bf 91       	pop	r27
    4630:	af 91       	pop	r26
    4632:	9f 91       	pop	r25
    4634:	8f 91       	pop	r24
    4636:	7f 91       	pop	r23
    4638:	6f 91       	pop	r22
    463a:	5f 91       	pop	r21
    463c:	4f 91       	pop	r20
    463e:	3f 91       	pop	r19
    4640:	2f 91       	pop	r18
    4642:	0f 90       	pop	r0
    4644:	0b be       	out	0x3b, r0	; 59
    4646:	0f 90       	pop	r0
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	0f 90       	pop	r0
    464c:	1f 90       	pop	r1
    464e:	18 95       	reti

00004650 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    4650:	1f 92       	push	r1
    4652:	0f 92       	push	r0
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	0f 92       	push	r0
    4658:	11 24       	eor	r1, r1
    465a:	0b b6       	in	r0, 0x3b	; 59
    465c:	0f 92       	push	r0
    465e:	2f 93       	push	r18
    4660:	3f 93       	push	r19
    4662:	4f 93       	push	r20
    4664:	5f 93       	push	r21
    4666:	6f 93       	push	r22
    4668:	7f 93       	push	r23
    466a:	8f 93       	push	r24
    466c:	9f 93       	push	r25
    466e:	af 93       	push	r26
    4670:	bf 93       	push	r27
    4672:	ef 93       	push	r30
    4674:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    4676:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    467a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    467e:	e0 91 7d 2b 	lds	r30, 0x2B7D	; 0x802b7d <adca_callback>
    4682:	f0 91 7e 2b 	lds	r31, 0x2B7E	; 0x802b7e <adca_callback+0x1>
    4686:	68 e0       	ldi	r22, 0x08	; 8
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	92 e0       	ldi	r25, 0x02	; 2
    468c:	19 95       	eicall
}
    468e:	ff 91       	pop	r31
    4690:	ef 91       	pop	r30
    4692:	bf 91       	pop	r27
    4694:	af 91       	pop	r26
    4696:	9f 91       	pop	r25
    4698:	8f 91       	pop	r24
    469a:	7f 91       	pop	r23
    469c:	6f 91       	pop	r22
    469e:	5f 91       	pop	r21
    46a0:	4f 91       	pop	r20
    46a2:	3f 91       	pop	r19
    46a4:	2f 91       	pop	r18
    46a6:	0f 90       	pop	r0
    46a8:	0b be       	out	0x3b, r0	; 59
    46aa:	0f 90       	pop	r0
    46ac:	0f be       	out	0x3f, r0	; 63
    46ae:	0f 90       	pop	r0
    46b0:	1f 90       	pop	r1
    46b2:	18 95       	reti

000046b4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    46b4:	1f 92       	push	r1
    46b6:	0f 92       	push	r0
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	0f 92       	push	r0
    46bc:	11 24       	eor	r1, r1
    46be:	0b b6       	in	r0, 0x3b	; 59
    46c0:	0f 92       	push	r0
    46c2:	2f 93       	push	r18
    46c4:	3f 93       	push	r19
    46c6:	4f 93       	push	r20
    46c8:	5f 93       	push	r21
    46ca:	6f 93       	push	r22
    46cc:	7f 93       	push	r23
    46ce:	8f 93       	push	r24
    46d0:	9f 93       	push	r25
    46d2:	af 93       	push	r26
    46d4:	bf 93       	push	r27
    46d6:	ef 93       	push	r30
    46d8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    46da:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    46de:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    46e2:	e0 91 7b 2b 	lds	r30, 0x2B7B	; 0x802b7b <adcb_callback>
    46e6:	f0 91 7c 2b 	lds	r31, 0x2B7C	; 0x802b7c <adcb_callback+0x1>
    46ea:	61 e0       	ldi	r22, 0x01	; 1
    46ec:	80 e4       	ldi	r24, 0x40	; 64
    46ee:	92 e0       	ldi	r25, 0x02	; 2
    46f0:	19 95       	eicall
}
    46f2:	ff 91       	pop	r31
    46f4:	ef 91       	pop	r30
    46f6:	bf 91       	pop	r27
    46f8:	af 91       	pop	r26
    46fa:	9f 91       	pop	r25
    46fc:	8f 91       	pop	r24
    46fe:	7f 91       	pop	r23
    4700:	6f 91       	pop	r22
    4702:	5f 91       	pop	r21
    4704:	4f 91       	pop	r20
    4706:	3f 91       	pop	r19
    4708:	2f 91       	pop	r18
    470a:	0f 90       	pop	r0
    470c:	0b be       	out	0x3b, r0	; 59
    470e:	0f 90       	pop	r0
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	0f 90       	pop	r0
    4714:	1f 90       	pop	r1
    4716:	18 95       	reti

00004718 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    4718:	1f 92       	push	r1
    471a:	0f 92       	push	r0
    471c:	0f b6       	in	r0, 0x3f	; 63
    471e:	0f 92       	push	r0
    4720:	11 24       	eor	r1, r1
    4722:	0b b6       	in	r0, 0x3b	; 59
    4724:	0f 92       	push	r0
    4726:	2f 93       	push	r18
    4728:	3f 93       	push	r19
    472a:	4f 93       	push	r20
    472c:	5f 93       	push	r21
    472e:	6f 93       	push	r22
    4730:	7f 93       	push	r23
    4732:	8f 93       	push	r24
    4734:	9f 93       	push	r25
    4736:	af 93       	push	r26
    4738:	bf 93       	push	r27
    473a:	ef 93       	push	r30
    473c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    473e:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    4742:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    4746:	e0 91 7b 2b 	lds	r30, 0x2B7B	; 0x802b7b <adcb_callback>
    474a:	f0 91 7c 2b 	lds	r31, 0x2B7C	; 0x802b7c <adcb_callback+0x1>
    474e:	62 e0       	ldi	r22, 0x02	; 2
    4750:	80 e4       	ldi	r24, 0x40	; 64
    4752:	92 e0       	ldi	r25, 0x02	; 2
    4754:	19 95       	eicall
}
    4756:	ff 91       	pop	r31
    4758:	ef 91       	pop	r30
    475a:	bf 91       	pop	r27
    475c:	af 91       	pop	r26
    475e:	9f 91       	pop	r25
    4760:	8f 91       	pop	r24
    4762:	7f 91       	pop	r23
    4764:	6f 91       	pop	r22
    4766:	5f 91       	pop	r21
    4768:	4f 91       	pop	r20
    476a:	3f 91       	pop	r19
    476c:	2f 91       	pop	r18
    476e:	0f 90       	pop	r0
    4770:	0b be       	out	0x3b, r0	; 59
    4772:	0f 90       	pop	r0
    4774:	0f be       	out	0x3f, r0	; 63
    4776:	0f 90       	pop	r0
    4778:	1f 90       	pop	r1
    477a:	18 95       	reti

0000477c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    477c:	1f 92       	push	r1
    477e:	0f 92       	push	r0
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	0f 92       	push	r0
    4784:	11 24       	eor	r1, r1
    4786:	0b b6       	in	r0, 0x3b	; 59
    4788:	0f 92       	push	r0
    478a:	2f 93       	push	r18
    478c:	3f 93       	push	r19
    478e:	4f 93       	push	r20
    4790:	5f 93       	push	r21
    4792:	6f 93       	push	r22
    4794:	7f 93       	push	r23
    4796:	8f 93       	push	r24
    4798:	9f 93       	push	r25
    479a:	af 93       	push	r26
    479c:	bf 93       	push	r27
    479e:	ef 93       	push	r30
    47a0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    47a2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    47a6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    47aa:	e0 91 7b 2b 	lds	r30, 0x2B7B	; 0x802b7b <adcb_callback>
    47ae:	f0 91 7c 2b 	lds	r31, 0x2B7C	; 0x802b7c <adcb_callback+0x1>
    47b2:	64 e0       	ldi	r22, 0x04	; 4
    47b4:	80 e4       	ldi	r24, 0x40	; 64
    47b6:	92 e0       	ldi	r25, 0x02	; 2
    47b8:	19 95       	eicall
}
    47ba:	ff 91       	pop	r31
    47bc:	ef 91       	pop	r30
    47be:	bf 91       	pop	r27
    47c0:	af 91       	pop	r26
    47c2:	9f 91       	pop	r25
    47c4:	8f 91       	pop	r24
    47c6:	7f 91       	pop	r23
    47c8:	6f 91       	pop	r22
    47ca:	5f 91       	pop	r21
    47cc:	4f 91       	pop	r20
    47ce:	3f 91       	pop	r19
    47d0:	2f 91       	pop	r18
    47d2:	0f 90       	pop	r0
    47d4:	0b be       	out	0x3b, r0	; 59
    47d6:	0f 90       	pop	r0
    47d8:	0f be       	out	0x3f, r0	; 63
    47da:	0f 90       	pop	r0
    47dc:	1f 90       	pop	r1
    47de:	18 95       	reti

000047e0 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    47e0:	1f 92       	push	r1
    47e2:	0f 92       	push	r0
    47e4:	0f b6       	in	r0, 0x3f	; 63
    47e6:	0f 92       	push	r0
    47e8:	11 24       	eor	r1, r1
    47ea:	0b b6       	in	r0, 0x3b	; 59
    47ec:	0f 92       	push	r0
    47ee:	2f 93       	push	r18
    47f0:	3f 93       	push	r19
    47f2:	4f 93       	push	r20
    47f4:	5f 93       	push	r21
    47f6:	6f 93       	push	r22
    47f8:	7f 93       	push	r23
    47fa:	8f 93       	push	r24
    47fc:	9f 93       	push	r25
    47fe:	af 93       	push	r26
    4800:	bf 93       	push	r27
    4802:	ef 93       	push	r30
    4804:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    4806:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    480a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    480e:	e0 91 7b 2b 	lds	r30, 0x2B7B	; 0x802b7b <adcb_callback>
    4812:	f0 91 7c 2b 	lds	r31, 0x2B7C	; 0x802b7c <adcb_callback+0x1>
    4816:	68 e0       	ldi	r22, 0x08	; 8
    4818:	80 e4       	ldi	r24, 0x40	; 64
    481a:	92 e0       	ldi	r25, 0x02	; 2
    481c:	19 95       	eicall
}
    481e:	ff 91       	pop	r31
    4820:	ef 91       	pop	r30
    4822:	bf 91       	pop	r27
    4824:	af 91       	pop	r26
    4826:	9f 91       	pop	r25
    4828:	8f 91       	pop	r24
    482a:	7f 91       	pop	r23
    482c:	6f 91       	pop	r22
    482e:	5f 91       	pop	r21
    4830:	4f 91       	pop	r20
    4832:	3f 91       	pop	r19
    4834:	2f 91       	pop	r18
    4836:	0f 90       	pop	r0
    4838:	0b be       	out	0x3b, r0	; 59
    483a:	0f 90       	pop	r0
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	0f 90       	pop	r0
    4840:	1f 90       	pop	r1
    4842:	18 95       	reti

00004844 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    4844:	bf 92       	push	r11
    4846:	cf 92       	push	r12
    4848:	df 92       	push	r13
    484a:	ef 92       	push	r14
    484c:	ff 92       	push	r15
    484e:	0f 93       	push	r16
    4850:	1f 93       	push	r17
    4852:	cf 93       	push	r28
    4854:	df 93       	push	r29
    4856:	1f 92       	push	r1
    4858:	cd b7       	in	r28, 0x3d	; 61
    485a:	de b7       	in	r29, 0x3e	; 62
    485c:	8c 01       	movw	r16, r24
    485e:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    4860:	81 15       	cp	r24, r1
    4862:	22 e0       	ldi	r18, 0x02	; 2
    4864:	92 07       	cpc	r25, r18
    4866:	71 f4       	brne	.+28     	; 0x4884 <adc_write_configuration+0x40>
    4868:	61 e2       	ldi	r22, 0x21	; 33
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	82 e0       	ldi	r24, 0x02	; 2
    486e:	7e d1       	rcall	.+764    	; 0x4b6c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    4870:	c8 2e       	mov	r12, r24
    4872:	d1 2c       	mov	r13, r1
    4874:	60 e2       	ldi	r22, 0x20	; 32
    4876:	70 e0       	ldi	r23, 0x00	; 0
    4878:	82 e0       	ldi	r24, 0x02	; 2
    487a:	78 d1       	rcall	.+752    	; 0x4b6c <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    487c:	dc 2c       	mov	r13, r12
    487e:	cc 24       	eor	r12, r12
    4880:	c8 2a       	or	r12, r24
    4882:	10 c0       	rjmp	.+32     	; 0x48a4 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    4884:	80 34       	cpi	r24, 0x40	; 64
    4886:	92 40       	sbci	r25, 0x02	; 2
    4888:	c1 f5       	brne	.+112    	; 0x48fa <adc_write_configuration+0xb6>
    488a:	65 e2       	ldi	r22, 0x25	; 37
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	82 e0       	ldi	r24, 0x02	; 2
    4890:	6d d1       	rcall	.+730    	; 0x4b6c <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    4892:	c8 2e       	mov	r12, r24
    4894:	d1 2c       	mov	r13, r1
    4896:	64 e2       	ldi	r22, 0x24	; 36
    4898:	70 e0       	ldi	r23, 0x00	; 0
    489a:	82 e0       	ldi	r24, 0x02	; 2
    489c:	67 d1       	rcall	.+718    	; 0x4b6c <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    489e:	dc 2c       	mov	r13, r12
    48a0:	cc 24       	eor	r12, r12
    48a2:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    48a4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    48a6:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    48a8:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    48aa:	b9 80       	ldd	r11, Y+1	; 0x01
    48ac:	c8 01       	movw	r24, r16
    48ae:	ce dd       	rcall	.-1124   	; 0x444c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    48b0:	f8 01       	movw	r30, r16
    48b2:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    48b4:	92 e0       	ldi	r25, 0x02	; 2
    48b6:	90 83       	st	Z, r25
	adc->CAL = cal;
    48b8:	c4 86       	std	Z+12, r12	; 0x0c
    48ba:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    48bc:	f7 01       	movw	r30, r14
    48be:	25 81       	ldd	r18, Z+5	; 0x05
    48c0:	36 81       	ldd	r19, Z+6	; 0x06
    48c2:	f8 01       	movw	r30, r16
    48c4:	20 8f       	std	Z+24, r18	; 0x18
    48c6:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    48c8:	f7 01       	movw	r30, r14
    48ca:	92 81       	ldd	r25, Z+2	; 0x02
    48cc:	f8 01       	movw	r30, r16
    48ce:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    48d0:	f7 01       	movw	r30, r14
    48d2:	94 81       	ldd	r25, Z+4	; 0x04
    48d4:	f8 01       	movw	r30, r16
    48d6:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    48d8:	f7 01       	movw	r30, r14
    48da:	93 81       	ldd	r25, Z+3	; 0x03
    48dc:	f8 01       	movw	r30, r16
    48de:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    48e0:	f7 01       	movw	r30, r14
    48e2:	91 81       	ldd	r25, Z+1	; 0x01
    48e4:	f8 01       	movw	r30, r16
    48e6:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    48e8:	81 70       	andi	r24, 0x01	; 1
    48ea:	f7 01       	movw	r30, r14
    48ec:	90 81       	ld	r25, Z
    48ee:	89 2b       	or	r24, r25
    48f0:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    48f2:	80 83       	st	Z, r24
    48f4:	c8 01       	movw	r24, r16
    48f6:	cb dd       	rcall	.-1130   	; 0x448e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    48f8:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    48fa:	0f 90       	pop	r0
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	1f 91       	pop	r17
    4902:	0f 91       	pop	r16
    4904:	ff 90       	pop	r15
    4906:	ef 90       	pop	r14
    4908:	df 90       	pop	r13
    490a:	cf 90       	pop	r12
    490c:	bf 90       	pop	r11
    490e:	08 95       	ret

00004910 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    4910:	df 92       	push	r13
    4912:	ef 92       	push	r14
    4914:	ff 92       	push	r15
    4916:	0f 93       	push	r16
    4918:	1f 93       	push	r17
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29
    491e:	1f 92       	push	r1
    4920:	cd b7       	in	r28, 0x3d	; 61
    4922:	de b7       	in	r29, 0x3e	; 62
    4924:	8c 01       	movw	r16, r24
    4926:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4928:	8f b7       	in	r24, 0x3f	; 63
    492a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    492c:	f8 94       	cli
	return flags;
    492e:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    4930:	c8 01       	movw	r24, r16
    4932:	8c dd       	rcall	.-1256   	; 0x444c <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    4934:	f8 01       	movw	r30, r16
    4936:	80 81       	ld	r24, Z
    4938:	80 7c       	andi	r24, 0xC0	; 192
    493a:	f7 01       	movw	r30, r14
    493c:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    493e:	f8 01       	movw	r30, r16
    4940:	80 8d       	ldd	r24, Z+24	; 0x18
    4942:	91 8d       	ldd	r25, Z+25	; 0x19
    4944:	f7 01       	movw	r30, r14
    4946:	85 83       	std	Z+5, r24	; 0x05
    4948:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    494a:	f8 01       	movw	r30, r16
    494c:	82 81       	ldd	r24, Z+2	; 0x02
    494e:	f7 01       	movw	r30, r14
    4950:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    4952:	f8 01       	movw	r30, r16
    4954:	84 81       	ldd	r24, Z+4	; 0x04
    4956:	f7 01       	movw	r30, r14
    4958:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    495a:	f8 01       	movw	r30, r16
    495c:	83 81       	ldd	r24, Z+3	; 0x03
    495e:	f7 01       	movw	r30, r14
    4960:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    4962:	f8 01       	movw	r30, r16
    4964:	81 81       	ldd	r24, Z+1	; 0x01
    4966:	f7 01       	movw	r30, r14
    4968:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    496a:	c8 01       	movw	r24, r16
    496c:	90 dd       	rcall	.-1248   	; 0x448e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    496e:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    4970:	0f 90       	pop	r0
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	ff 90       	pop	r15
    497c:	ef 90       	pop	r14
    497e:	df 90       	pop	r13
    4980:	08 95       	ret

00004982 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    4982:	af 92       	push	r10
    4984:	bf 92       	push	r11
    4986:	cf 92       	push	r12
    4988:	df 92       	push	r13
    498a:	ef 92       	push	r14
    498c:	ff 92       	push	r15
    498e:	0f 93       	push	r16
    4990:	1f 93       	push	r17
    4992:	cf 93       	push	r28
    4994:	df 93       	push	r29
    4996:	1f 92       	push	r1
    4998:	cd b7       	in	r28, 0x3d	; 61
    499a:	de b7       	in	r29, 0x3e	; 62
    499c:	6c 01       	movw	r12, r24
    499e:	b6 2e       	mov	r11, r22
    49a0:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    49a2:	86 2f       	mov	r24, r22
    49a4:	83 70       	andi	r24, 0x03	; 3
    49a6:	29 f4       	brne	.+10     	; 0x49b2 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    49a8:	96 2f       	mov	r25, r22
    49aa:	96 95       	lsr	r25
    49ac:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    49ae:	82 e0       	ldi	r24, 0x02	; 2
    49b0:	02 c0       	rjmp	.+4      	; 0x49b6 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    49b2:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    49b4:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    49b6:	90 ff       	sbrs	r25, 0
		index++;
    49b8:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    49ba:	86 01       	movw	r16, r12
    49bc:	00 5e       	subi	r16, 0xE0	; 224
    49be:	1f 4f       	sbci	r17, 0xFF	; 255
    49c0:	98 e0       	ldi	r25, 0x08	; 8
    49c2:	89 9f       	mul	r24, r25
    49c4:	00 0d       	add	r16, r0
    49c6:	11 1d       	adc	r17, r1
    49c8:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    49ca:	8f b7       	in	r24, 0x3f	; 63
    49cc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    49ce:	f8 94       	cli
	return flags;
    49d0:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    49d2:	c6 01       	movw	r24, r12
    49d4:	3b dd       	rcall	.-1418   	; 0x444c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    49d6:	f7 01       	movw	r30, r14
    49d8:	80 81       	ld	r24, Z
    49da:	f8 01       	movw	r30, r16
    49dc:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    49de:	f7 01       	movw	r30, r14
    49e0:	82 81       	ldd	r24, Z+2	; 0x02
    49e2:	f8 01       	movw	r30, r16
    49e4:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    49e6:	f7 01       	movw	r30, r14
    49e8:	81 81       	ldd	r24, Z+1	; 0x01
    49ea:	f8 01       	movw	r30, r16
    49ec:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    49ee:	b0 fe       	sbrs	r11, 0
    49f0:	04 c0       	rjmp	.+8      	; 0x49fa <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    49f2:	f7 01       	movw	r30, r14
    49f4:	83 81       	ldd	r24, Z+3	; 0x03
    49f6:	f8 01       	movw	r30, r16
    49f8:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    49fa:	c6 01       	movw	r24, r12
    49fc:	48 dd       	rcall	.-1392   	; 0x448e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    49fe:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    4a00:	0f 90       	pop	r0
    4a02:	df 91       	pop	r29
    4a04:	cf 91       	pop	r28
    4a06:	1f 91       	pop	r17
    4a08:	0f 91       	pop	r16
    4a0a:	ff 90       	pop	r15
    4a0c:	ef 90       	pop	r14
    4a0e:	df 90       	pop	r13
    4a10:	cf 90       	pop	r12
    4a12:	bf 90       	pop	r11
    4a14:	af 90       	pop	r10
    4a16:	08 95       	ret

00004a18 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    4a18:	af 92       	push	r10
    4a1a:	bf 92       	push	r11
    4a1c:	cf 92       	push	r12
    4a1e:	df 92       	push	r13
    4a20:	ef 92       	push	r14
    4a22:	ff 92       	push	r15
    4a24:	0f 93       	push	r16
    4a26:	1f 93       	push	r17
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	1f 92       	push	r1
    4a2e:	cd b7       	in	r28, 0x3d	; 61
    4a30:	de b7       	in	r29, 0x3e	; 62
    4a32:	6c 01       	movw	r12, r24
    4a34:	b6 2e       	mov	r11, r22
    4a36:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4a38:	86 2f       	mov	r24, r22
    4a3a:	83 70       	andi	r24, 0x03	; 3
    4a3c:	29 f4       	brne	.+10     	; 0x4a48 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    4a3e:	96 2f       	mov	r25, r22
    4a40:	96 95       	lsr	r25
    4a42:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    4a44:	82 e0       	ldi	r24, 0x02	; 2
    4a46:	02 c0       	rjmp	.+4      	; 0x4a4c <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4a48:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    4a4a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    4a4c:	90 ff       	sbrs	r25, 0
		index++;
    4a4e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    4a50:	86 01       	movw	r16, r12
    4a52:	00 5e       	subi	r16, 0xE0	; 224
    4a54:	1f 4f       	sbci	r17, 0xFF	; 255
    4a56:	98 e0       	ldi	r25, 0x08	; 8
    4a58:	89 9f       	mul	r24, r25
    4a5a:	00 0d       	add	r16, r0
    4a5c:	11 1d       	adc	r17, r1
    4a5e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4a60:	8f b7       	in	r24, 0x3f	; 63
    4a62:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4a64:	f8 94       	cli
	return flags;
    4a66:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    4a68:	c6 01       	movw	r24, r12
    4a6a:	f0 dc       	rcall	.-1568   	; 0x444c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    4a6c:	f8 01       	movw	r30, r16
    4a6e:	80 81       	ld	r24, Z
    4a70:	f7 01       	movw	r30, r14
    4a72:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    4a74:	f8 01       	movw	r30, r16
    4a76:	82 81       	ldd	r24, Z+2	; 0x02
    4a78:	f7 01       	movw	r30, r14
    4a7a:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    4a7c:	f8 01       	movw	r30, r16
    4a7e:	81 81       	ldd	r24, Z+1	; 0x01
    4a80:	f7 01       	movw	r30, r14
    4a82:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    4a84:	b0 fe       	sbrs	r11, 0
    4a86:	04 c0       	rjmp	.+8      	; 0x4a90 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    4a88:	f8 01       	movw	r30, r16
    4a8a:	86 81       	ldd	r24, Z+6	; 0x06
    4a8c:	f7 01       	movw	r30, r14
    4a8e:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    4a90:	c6 01       	movw	r24, r12
    4a92:	fd dc       	rcall	.-1542   	; 0x448e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4a94:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    4a96:	0f 90       	pop	r0
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	1f 91       	pop	r17
    4a9e:	0f 91       	pop	r16
    4aa0:	ff 90       	pop	r15
    4aa2:	ef 90       	pop	r14
    4aa4:	df 90       	pop	r13
    4aa6:	cf 90       	pop	r12
    4aa8:	bf 90       	pop	r11
    4aaa:	af 90       	pop	r10
    4aac:	08 95       	ret

00004aae <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    4aae:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4ab0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4ab2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    4ab4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    4ab6:	60 83       	st	Z, r22
	ret                             // Return to caller
    4ab8:	08 95       	ret

00004aba <nvm_eeprom_read_byte>:
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
	eeprom_disable_mapping();
}
    4aba:	dc 01       	movw	r26, r24
    4abc:	e0 ec       	ldi	r30, 0xC0	; 192
    4abe:	f1 e0       	ldi	r31, 0x01	; 1
    4ac0:	97 85       	ldd	r25, Z+15	; 0x0f
    4ac2:	99 23       	and	r25, r25
    4ac4:	ec f3       	brlt	.-6      	; 0x4ac0 <nvm_eeprom_read_byte+0x6>
    4ac6:	ec ec       	ldi	r30, 0xCC	; 204
    4ac8:	f1 e0       	ldi	r31, 0x01	; 1
    4aca:	80 81       	ld	r24, Z
    4acc:	88 60       	ori	r24, 0x08	; 8
    4ace:	80 83       	st	Z, r24
    4ad0:	b0 5f       	subi	r27, 0xF0	; 240
    4ad2:	8c 91       	ld	r24, X
    4ad4:	90 81       	ld	r25, Z
    4ad6:	97 7f       	andi	r25, 0xF7	; 247
    4ad8:	90 83       	st	Z, r25
    4ada:	08 95       	ret

00004adc <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4adc:	e0 ec       	ldi	r30, 0xC0	; 192
    4ade:	f1 e0       	ldi	r31, 0x01	; 1
    4ae0:	87 85       	ldd	r24, Z+15	; 0x0f
    4ae2:	88 23       	and	r24, r24
    4ae4:	ec f3       	brlt	.-6      	; 0x4ae0 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    4ae6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    4aea:	81 ff       	sbrs	r24, 1
    4aec:	07 c0       	rjmp	.+14     	; 0x4afc <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    4aee:	86 e3       	ldi	r24, 0x36	; 54
    4af0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    4af4:	61 e0       	ldi	r22, 0x01	; 1
    4af6:	8b ec       	ldi	r24, 0xCB	; 203
    4af8:	91 e0       	ldi	r25, 0x01	; 1
    4afa:	d9 cf       	rjmp	.-78     	; 0x4aae <ccp_write_io>
    4afc:	08 95       	ret

00004afe <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4afe:	e0 ec       	ldi	r30, 0xC0	; 192
    4b00:	f1 e0       	ldi	r31, 0x01	; 1
    4b02:	97 85       	ldd	r25, Z+15	; 0x0f
    4b04:	99 23       	and	r25, r25
    4b06:	ec f3       	brlt	.-6      	; 0x4b02 <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    4b08:	ac ec       	ldi	r26, 0xCC	; 204
    4b0a:	b1 e0       	ldi	r27, 0x01	; 1
    4b0c:	9c 91       	ld	r25, X
    4b0e:	98 60       	ori	r25, 0x08	; 8
    4b10:	9c 93       	st	X, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    4b12:	e8 2f       	mov	r30, r24
    4b14:	f0 e0       	ldi	r31, 0x00	; 0
    4b16:	f0 5f       	subi	r31, 0xF0	; 240
    4b18:	60 83       	st	Z, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    4b1a:	8c 91       	ld	r24, X
    4b1c:	87 7f       	andi	r24, 0xF7	; 247
    4b1e:	8c 93       	st	X, r24
    4b20:	08 95       	ret

00004b22 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    4b22:	ff 92       	push	r15
    4b24:	0f 93       	push	r16
    4b26:	1f 93       	push	r17
    4b28:	cf 93       	push	r28
    4b2a:	df 93       	push	r29
    4b2c:	18 2f       	mov	r17, r24
    4b2e:	f9 2e       	mov	r15, r25
    4b30:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    4b32:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	nvm_eeprom_flush_buffer();
    4b36:	d2 df       	rcall	.-92     	; 0x4adc <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4b38:	e0 ec       	ldi	r30, 0xC0	; 192
    4b3a:	f1 e0       	ldi	r31, 0x01	; 1
    4b3c:	87 85       	ldd	r24, Z+15	; 0x0f
    4b3e:	88 23       	and	r24, r24
    4b40:	ec f3       	brlt	.-6      	; 0x4b3c <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    4b42:	6c 2f       	mov	r22, r28
    4b44:	81 2f       	mov	r24, r17
    4b46:	db df       	rcall	.-74     	; 0x4afe <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    4b48:	c0 ec       	ldi	r28, 0xC0	; 192
    4b4a:	d1 e0       	ldi	r29, 0x01	; 1
    4b4c:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    4b4e:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    4b50:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    4b52:	85 e3       	ldi	r24, 0x35	; 53
    4b54:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    4b56:	61 e0       	ldi	r22, 0x01	; 1
    4b58:	8b ec       	ldi	r24, 0xCB	; 203
    4b5a:	91 e0       	ldi	r25, 0x01	; 1
    4b5c:	a8 df       	rcall	.-176    	; 0x4aae <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    4b5e:	0a 87       	std	Y+10, r16	; 0x0a
}
    4b60:	df 91       	pop	r29
    4b62:	cf 91       	pop	r28
    4b64:	1f 91       	pop	r17
    4b66:	0f 91       	pop	r16
    4b68:	ff 90       	pop	r15
    4b6a:	08 95       	ret

00004b6c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    4b6c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    4b70:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    4b72:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    4b74:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    4b78:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    4b7a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    4b7e:	08 95       	ret

00004b80 <__portable_avr_delay_cycles>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    4b80:	04 c0       	rjmp	.+8      	; 0x4b8a <__portable_avr_delay_cycles+0xa>
    4b82:	61 50       	subi	r22, 0x01	; 1
    4b84:	71 09       	sbc	r23, r1
    4b86:	81 09       	sbc	r24, r1
    4b88:	91 09       	sbc	r25, r1
    4b8a:	61 15       	cp	r22, r1
    4b8c:	71 05       	cpc	r23, r1
    4b8e:	81 05       	cpc	r24, r1
    4b90:	91 05       	cpc	r25, r1
    4b92:	b9 f7       	brne	.-18     	; 0x4b82 <__portable_avr_delay_cycles+0x2>
    4b94:	08 95       	ret

00004b96 <rtc_set_time>:
    4b96:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    4b9a:	e0 e2       	ldi	r30, 0x20	; 32
    4b9c:	f4 e0       	ldi	r31, 0x04	; 4
    4b9e:	21 81       	ldd	r18, Z+1	; 0x01
    4ba0:	20 fd       	sbrc	r18, 0
    4ba2:	fd cf       	rjmp	.-6      	; 0x4b9e <rtc_set_time+0x8>
    4ba4:	e0 e2       	ldi	r30, 0x20	; 32
    4ba6:	f4 e0       	ldi	r31, 0x04	; 4
    4ba8:	64 83       	std	Z+4, r22	; 0x04
    4baa:	75 83       	std	Z+5, r23	; 0x05
    4bac:	86 83       	std	Z+6, r24	; 0x06
    4bae:	97 83       	std	Z+7, r25	; 0x07
    4bb0:	81 e0       	ldi	r24, 0x01	; 1
    4bb2:	80 83       	st	Z, r24
    4bb4:	08 95       	ret

00004bb6 <rtc_get_time>:
    4bb6:	80 e1       	ldi	r24, 0x10	; 16
    4bb8:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    4bbc:	e0 e2       	ldi	r30, 0x20	; 32
    4bbe:	f4 e0       	ldi	r31, 0x04	; 4
    4bc0:	81 81       	ldd	r24, Z+1	; 0x01
    4bc2:	84 fd       	sbrc	r24, 4
    4bc4:	fd cf       	rjmp	.-6      	; 0x4bc0 <rtc_get_time+0xa>
    4bc6:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    4bca:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    4bce:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    4bd2:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    4bd6:	08 95       	ret

00004bd8 <rtc_vbat_system_check>:
 * when main system power is lost.
 *
 * \returns Battery backup system status.
 */
enum vbat_status_code rtc_vbat_system_check(bool first_time_startup)
{
    4bd8:	cf 93       	push	r28
    4bda:	df 93       	push	r29
    4bdc:	d8 2f       	mov	r29, r24
	enum vbat_status_code vbat_status;
	uint8_t flags = VBAT.STATUS;
    4bde:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7000f1>

	/* Ensure the module is clocked to be able to check the registers */
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4be2:	64 e0       	ldi	r22, 0x04	; 4
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
	/*
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
    4bea:	cc 23       	and	r28, r28
    4bec:	7c f0       	brlt	.+30     	; 0x4c0c <rtc_vbat_system_check+0x34>
		/*
		 * We have sufficient power, now we check if a power-on-reset
		 * (BBPOR) was detected on VBAT. This is visible from the BBPORF
		 * flag which is also only updated once when the device starts.
		 */
		if (flags & VBAT_BBPORF_bm) {
    4bee:	c0 ff       	sbrs	r28, 0
    4bf0:	04 c0       	rjmp	.+8      	; 0x4bfa <rtc_vbat_system_check+0x22>
			if (first_time_startup) {
    4bf2:	d1 11       	cpse	r29, r1
    4bf4:	0d c0       	rjmp	.+26     	; 0x4c10 <rtc_vbat_system_check+0x38>
				vbat_status = VBAT_STATUS_INIT;
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
    4bf6:	83 e0       	ldi	r24, 0x03	; 3
    4bf8:	10 c0       	rjmp	.+32     	; 0x4c1a <rtc_vbat_system_check+0x42>
			}
		} else if (flags & VBAT_BBBORF_bm) {
    4bfa:	c1 fd       	sbrc	r28, 1
    4bfc:	0b c0       	rjmp	.+22     	; 0x4c14 <rtc_vbat_system_check+0x3c>
			vbat_status = VBAT_STATUS_BBBOD;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
    4bfe:	82 e0       	ldi	r24, 0x02	; 2
    4c00:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7000f0>
			if (flags & VBAT_XOSCFAIL_bm) {
    4c04:	c2 fd       	sbrc	r28, 2
    4c06:	08 c0       	rjmp	.+16     	; 0x4c18 <rtc_vbat_system_check+0x40>
				vbat_status = VBAT_STATUS_XOSCFAIL;
			} else {
				vbat_status = VBAT_STATUS_OK;
    4c08:	80 e0       	ldi	r24, 0x00	; 0
    4c0a:	07 c0       	rjmp	.+14     	; 0x4c1a <rtc_vbat_system_check+0x42>
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
		vbat_status = VBAT_STATUS_NO_POWER;
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	05 c0       	rjmp	.+10     	; 0x4c1a <rtc_vbat_system_check+0x42>
		 * (BBPOR) was detected on VBAT. This is visible from the BBPORF
		 * flag which is also only updated once when the device starts.
		 */
		if (flags & VBAT_BBPORF_bm) {
			if (first_time_startup) {
				vbat_status = VBAT_STATUS_INIT;
    4c10:	82 e0       	ldi	r24, 0x02	; 2
    4c12:	03 c0       	rjmp	.+6      	; 0x4c1a <rtc_vbat_system_check+0x42>
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
			}
		} else if (flags & VBAT_BBBORF_bm) {
			vbat_status = VBAT_STATUS_BBBOD;
    4c14:	84 e0       	ldi	r24, 0x04	; 4
    4c16:	01 c0       	rjmp	.+2      	; 0x4c1a <rtc_vbat_system_check+0x42>
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
			if (flags & VBAT_XOSCFAIL_bm) {
				vbat_status = VBAT_STATUS_XOSCFAIL;
    4c18:	85 e0       	ldi	r24, 0x05	; 5
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    4c1a:	df 91       	pop	r29
    4c1c:	cf 91       	pop	r28
    4c1e:	08 95       	ret

00004c20 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    4c20:	cf 93       	push	r28
    4c22:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4c24:	64 e0       	ldi	r22, 0x04	; 4
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    4c2c:	c0 ef       	ldi	r28, 0xF0	; 240
    4c2e:	d0 e0       	ldi	r29, 0x00	; 0
    4c30:	88 81       	ld	r24, Y
    4c32:	82 60       	ori	r24, 0x02	; 2
    4c34:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    4c36:	61 e0       	ldi	r22, 0x01	; 1
    4c38:	80 ef       	ldi	r24, 0xF0	; 240
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	38 df       	rcall	.-400    	; 0x4aae <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    4c3e:	88 81       	ld	r24, Y
    4c40:	84 60       	ori	r24, 0x04	; 4
    4c42:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    4c44:	61 e2       	ldi	r22, 0x21	; 33
    4c46:	73 e0       	ldi	r23, 0x03	; 3
    4c48:	80 e0       	ldi	r24, 0x00	; 0
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	99 df       	rcall	.-206    	; 0x4b80 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK;
    4c4e:	88 81       	ld	r24, Y
    4c50:	88 60       	ori	r24, 0x08	; 8
    4c52:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    4c54:	e0 ef       	ldi	r30, 0xF0	; 240
    4c56:	f0 e0       	ldi	r31, 0x00	; 0
    4c58:	81 81       	ldd	r24, Z+1	; 0x01
    4c5a:	83 ff       	sbrs	r24, 3
    4c5c:	fd cf       	rjmp	.-6      	; 0x4c58 <rtc_init+0x38>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    4c5e:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4c62:	e0 e2       	ldi	r30, 0x20	; 32
    4c64:	f4 e0       	ldi	r31, 0x04	; 4
    4c66:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    4c68:	80 fd       	sbrc	r24, 0
    4c6a:	fd cf       	rjmp	.-6      	; 0x4c66 <rtc_init+0x46>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    4c6c:	e0 e2       	ldi	r30, 0x20	; 32
    4c6e:	f4 e0       	ldi	r31, 0x04	; 4
    4c70:	8f ef       	ldi	r24, 0xFF	; 255
    4c72:	9f ef       	ldi	r25, 0xFF	; 255
    4c74:	dc 01       	movw	r26, r24
    4c76:	80 87       	std	Z+8, r24	; 0x08
    4c78:	91 87       	std	Z+9, r25	; 0x09
    4c7a:	a2 87       	std	Z+10, r26	; 0x0a
    4c7c:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    4c7e:	14 82       	std	Z+4, r1	; 0x04
    4c80:	15 82       	std	Z+5, r1	; 0x05
    4c82:	16 82       	std	Z+6, r1	; 0x06
    4c84:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4c86:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    4c88:	80 fd       	sbrc	r24, 0
    4c8a:	fd cf       	rjmp	.-6      	; 0x4c86 <rtc_init+0x66>

	RTC32.INTCTRL = 0;
    4c8c:	e0 e2       	ldi	r30, 0x20	; 32
    4c8e:	f4 e0       	ldi	r31, 0x04	; 4
    4c90:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    4c92:	81 e0       	ldi	r24, 0x01	; 1
    4c94:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4c96:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    4c98:	80 fd       	sbrc	r24, 0
    4c9a:	fd cf       	rjmp	.-6      	; 0x4c96 <rtc_init+0x76>
}
    4c9c:	df 91       	pop	r29
    4c9e:	cf 91       	pop	r28
    4ca0:	08 95       	ret

00004ca2 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    4ca2:	1f 92       	push	r1
    4ca4:	0f 92       	push	r0
    4ca6:	0f b6       	in	r0, 0x3f	; 63
    4ca8:	0f 92       	push	r0
    4caa:	11 24       	eor	r1, r1
    4cac:	0b b6       	in	r0, 0x3b	; 59
    4cae:	0f 92       	push	r0
    4cb0:	2f 93       	push	r18
    4cb2:	3f 93       	push	r19
    4cb4:	4f 93       	push	r20
    4cb6:	5f 93       	push	r21
    4cb8:	6f 93       	push	r22
    4cba:	7f 93       	push	r23
    4cbc:	8f 93       	push	r24
    4cbe:	9f 93       	push	r25
    4cc0:	af 93       	push	r26
    4cc2:	bf 93       	push	r27
    4cc4:	cf 93       	push	r28
    4cc6:	df 93       	push	r29
    4cc8:	ef 93       	push	r30
    4cca:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    4ccc:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    4cd0:	c0 91 7f 2b 	lds	r28, 0x2B7F	; 0x802b7f <rtc_data>
    4cd4:	d0 91 80 2b 	lds	r29, 0x2B80	; 0x802b80 <rtc_data+0x1>
    4cd8:	20 97       	sbiw	r28, 0x00	; 0
    4cda:	19 f0       	breq	.+6      	; 0x4ce2 <__vector_11+0x40>
		rtc_data.callback(rtc_get_time());
    4cdc:	6c df       	rcall	.-296    	; 0x4bb6 <rtc_get_time>
    4cde:	fe 01       	movw	r30, r28
    4ce0:	19 95       	eicall
}
    4ce2:	ff 91       	pop	r31
    4ce4:	ef 91       	pop	r30
    4ce6:	df 91       	pop	r29
    4ce8:	cf 91       	pop	r28
    4cea:	bf 91       	pop	r27
    4cec:	af 91       	pop	r26
    4cee:	9f 91       	pop	r25
    4cf0:	8f 91       	pop	r24
    4cf2:	7f 91       	pop	r23
    4cf4:	6f 91       	pop	r22
    4cf6:	5f 91       	pop	r21
    4cf8:	4f 91       	pop	r20
    4cfa:	3f 91       	pop	r19
    4cfc:	2f 91       	pop	r18
    4cfe:	0f 90       	pop	r0
    4d00:	0b be       	out	0x3b, r0	; 59
    4d02:	0f 90       	pop	r0
    4d04:	0f be       	out	0x3f, r0	; 63
    4d06:	0f 90       	pop	r0
    4d08:	1f 90       	pop	r1
    4d0a:	18 95       	reti

00004d0c <__vector_14>:
		tc_tce1_err_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
		tc_tcf0_err_callback = callback;
    4d0c:	1f 92       	push	r1
    4d0e:	0f 92       	push	r0
    4d10:	0f b6       	in	r0, 0x3f	; 63
    4d12:	0f 92       	push	r0
    4d14:	11 24       	eor	r1, r1
    4d16:	0b b6       	in	r0, 0x3b	; 59
    4d18:	0f 92       	push	r0
    4d1a:	2f 93       	push	r18
    4d1c:	3f 93       	push	r19
    4d1e:	4f 93       	push	r20
    4d20:	5f 93       	push	r21
    4d22:	6f 93       	push	r22
    4d24:	7f 93       	push	r23
    4d26:	8f 93       	push	r24
    4d28:	9f 93       	push	r25
    4d2a:	af 93       	push	r26
    4d2c:	bf 93       	push	r27
    4d2e:	ef 93       	push	r30
    4d30:	ff 93       	push	r31
    4d32:	e0 91 3e 2a 	lds	r30, 0x2A3E	; 0x802a3e <tc_tcc0_ovf_callback>
    4d36:	f0 91 3f 2a 	lds	r31, 0x2A3F	; 0x802a3f <tc_tcc0_ovf_callback+0x1>
    4d3a:	30 97       	sbiw	r30, 0x00	; 0
    4d3c:	09 f0       	breq	.+2      	; 0x4d40 <__vector_14+0x34>
    4d3e:	19 95       	eicall
    4d40:	ff 91       	pop	r31
    4d42:	ef 91       	pop	r30
    4d44:	bf 91       	pop	r27
    4d46:	af 91       	pop	r26
    4d48:	9f 91       	pop	r25
    4d4a:	8f 91       	pop	r24
    4d4c:	7f 91       	pop	r23
    4d4e:	6f 91       	pop	r22
    4d50:	5f 91       	pop	r21
    4d52:	4f 91       	pop	r20
    4d54:	3f 91       	pop	r19
    4d56:	2f 91       	pop	r18
    4d58:	0f 90       	pop	r0
    4d5a:	0b be       	out	0x3b, r0	; 59
    4d5c:	0f 90       	pop	r0
    4d5e:	0f be       	out	0x3f, r0	; 63
    4d60:	0f 90       	pop	r0
    4d62:	1f 90       	pop	r1
    4d64:	18 95       	reti

00004d66 <__vector_15>:
    4d66:	1f 92       	push	r1
    4d68:	0f 92       	push	r0
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	0f 92       	push	r0
    4d6e:	11 24       	eor	r1, r1
    4d70:	0b b6       	in	r0, 0x3b	; 59
    4d72:	0f 92       	push	r0
    4d74:	2f 93       	push	r18
    4d76:	3f 93       	push	r19
    4d78:	4f 93       	push	r20
    4d7a:	5f 93       	push	r21
    4d7c:	6f 93       	push	r22
    4d7e:	7f 93       	push	r23
    4d80:	8f 93       	push	r24
    4d82:	9f 93       	push	r25
    4d84:	af 93       	push	r26
    4d86:	bf 93       	push	r27
    4d88:	ef 93       	push	r30
    4d8a:	ff 93       	push	r31
    4d8c:	e0 91 3c 2a 	lds	r30, 0x2A3C	; 0x802a3c <tc_tcc0_err_callback>
    4d90:	f0 91 3d 2a 	lds	r31, 0x2A3D	; 0x802a3d <tc_tcc0_err_callback+0x1>
    4d94:	30 97       	sbiw	r30, 0x00	; 0
    4d96:	09 f0       	breq	.+2      	; 0x4d9a <__vector_15+0x34>
    4d98:	19 95       	eicall
    4d9a:	ff 91       	pop	r31
    4d9c:	ef 91       	pop	r30
    4d9e:	bf 91       	pop	r27
    4da0:	af 91       	pop	r26
    4da2:	9f 91       	pop	r25
    4da4:	8f 91       	pop	r24
    4da6:	7f 91       	pop	r23
    4da8:	6f 91       	pop	r22
    4daa:	5f 91       	pop	r21
    4dac:	4f 91       	pop	r20
    4dae:	3f 91       	pop	r19
    4db0:	2f 91       	pop	r18
    4db2:	0f 90       	pop	r0
    4db4:	0b be       	out	0x3b, r0	; 59
    4db6:	0f 90       	pop	r0
    4db8:	0f be       	out	0x3f, r0	; 63
    4dba:	0f 90       	pop	r0
    4dbc:	1f 90       	pop	r1
    4dbe:	18 95       	reti

00004dc0 <__vector_16>:
    4dc0:	1f 92       	push	r1
    4dc2:	0f 92       	push	r0
    4dc4:	0f b6       	in	r0, 0x3f	; 63
    4dc6:	0f 92       	push	r0
    4dc8:	11 24       	eor	r1, r1
    4dca:	0b b6       	in	r0, 0x3b	; 59
    4dcc:	0f 92       	push	r0
    4dce:	2f 93       	push	r18
    4dd0:	3f 93       	push	r19
    4dd2:	4f 93       	push	r20
    4dd4:	5f 93       	push	r21
    4dd6:	6f 93       	push	r22
    4dd8:	7f 93       	push	r23
    4dda:	8f 93       	push	r24
    4ddc:	9f 93       	push	r25
    4dde:	af 93       	push	r26
    4de0:	bf 93       	push	r27
    4de2:	ef 93       	push	r30
    4de4:	ff 93       	push	r31
    4de6:	e0 91 3a 2a 	lds	r30, 0x2A3A	; 0x802a3a <tc_tcc0_cca_callback>
    4dea:	f0 91 3b 2a 	lds	r31, 0x2A3B	; 0x802a3b <tc_tcc0_cca_callback+0x1>
    4dee:	30 97       	sbiw	r30, 0x00	; 0
    4df0:	09 f0       	breq	.+2      	; 0x4df4 <__vector_16+0x34>
    4df2:	19 95       	eicall
    4df4:	ff 91       	pop	r31
    4df6:	ef 91       	pop	r30
    4df8:	bf 91       	pop	r27
    4dfa:	af 91       	pop	r26
    4dfc:	9f 91       	pop	r25
    4dfe:	8f 91       	pop	r24
    4e00:	7f 91       	pop	r23
    4e02:	6f 91       	pop	r22
    4e04:	5f 91       	pop	r21
    4e06:	4f 91       	pop	r20
    4e08:	3f 91       	pop	r19
    4e0a:	2f 91       	pop	r18
    4e0c:	0f 90       	pop	r0
    4e0e:	0b be       	out	0x3b, r0	; 59
    4e10:	0f 90       	pop	r0
    4e12:	0f be       	out	0x3f, r0	; 63
    4e14:	0f 90       	pop	r0
    4e16:	1f 90       	pop	r1
    4e18:	18 95       	reti

00004e1a <__vector_17>:
    4e1a:	1f 92       	push	r1
    4e1c:	0f 92       	push	r0
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	0f 92       	push	r0
    4e22:	11 24       	eor	r1, r1
    4e24:	0b b6       	in	r0, 0x3b	; 59
    4e26:	0f 92       	push	r0
    4e28:	2f 93       	push	r18
    4e2a:	3f 93       	push	r19
    4e2c:	4f 93       	push	r20
    4e2e:	5f 93       	push	r21
    4e30:	6f 93       	push	r22
    4e32:	7f 93       	push	r23
    4e34:	8f 93       	push	r24
    4e36:	9f 93       	push	r25
    4e38:	af 93       	push	r26
    4e3a:	bf 93       	push	r27
    4e3c:	ef 93       	push	r30
    4e3e:	ff 93       	push	r31
    4e40:	e0 91 38 2a 	lds	r30, 0x2A38	; 0x802a38 <tc_tcc0_ccb_callback>
    4e44:	f0 91 39 2a 	lds	r31, 0x2A39	; 0x802a39 <tc_tcc0_ccb_callback+0x1>
    4e48:	30 97       	sbiw	r30, 0x00	; 0
    4e4a:	09 f0       	breq	.+2      	; 0x4e4e <__vector_17+0x34>
    4e4c:	19 95       	eicall
    4e4e:	ff 91       	pop	r31
    4e50:	ef 91       	pop	r30
    4e52:	bf 91       	pop	r27
    4e54:	af 91       	pop	r26
    4e56:	9f 91       	pop	r25
    4e58:	8f 91       	pop	r24
    4e5a:	7f 91       	pop	r23
    4e5c:	6f 91       	pop	r22
    4e5e:	5f 91       	pop	r21
    4e60:	4f 91       	pop	r20
    4e62:	3f 91       	pop	r19
    4e64:	2f 91       	pop	r18
    4e66:	0f 90       	pop	r0
    4e68:	0b be       	out	0x3b, r0	; 59
    4e6a:	0f 90       	pop	r0
    4e6c:	0f be       	out	0x3f, r0	; 63
    4e6e:	0f 90       	pop	r0
    4e70:	1f 90       	pop	r1
    4e72:	18 95       	reti

00004e74 <__vector_18>:
    4e74:	1f 92       	push	r1
    4e76:	0f 92       	push	r0
    4e78:	0f b6       	in	r0, 0x3f	; 63
    4e7a:	0f 92       	push	r0
    4e7c:	11 24       	eor	r1, r1
    4e7e:	0b b6       	in	r0, 0x3b	; 59
    4e80:	0f 92       	push	r0
    4e82:	2f 93       	push	r18
    4e84:	3f 93       	push	r19
    4e86:	4f 93       	push	r20
    4e88:	5f 93       	push	r21
    4e8a:	6f 93       	push	r22
    4e8c:	7f 93       	push	r23
    4e8e:	8f 93       	push	r24
    4e90:	9f 93       	push	r25
    4e92:	af 93       	push	r26
    4e94:	bf 93       	push	r27
    4e96:	ef 93       	push	r30
    4e98:	ff 93       	push	r31
    4e9a:	e0 91 36 2a 	lds	r30, 0x2A36	; 0x802a36 <tc_tcc0_ccc_callback>
    4e9e:	f0 91 37 2a 	lds	r31, 0x2A37	; 0x802a37 <tc_tcc0_ccc_callback+0x1>
    4ea2:	30 97       	sbiw	r30, 0x00	; 0
    4ea4:	09 f0       	breq	.+2      	; 0x4ea8 <__vector_18+0x34>
    4ea6:	19 95       	eicall
    4ea8:	ff 91       	pop	r31
    4eaa:	ef 91       	pop	r30
    4eac:	bf 91       	pop	r27
    4eae:	af 91       	pop	r26
    4eb0:	9f 91       	pop	r25
    4eb2:	8f 91       	pop	r24
    4eb4:	7f 91       	pop	r23
    4eb6:	6f 91       	pop	r22
    4eb8:	5f 91       	pop	r21
    4eba:	4f 91       	pop	r20
    4ebc:	3f 91       	pop	r19
    4ebe:	2f 91       	pop	r18
    4ec0:	0f 90       	pop	r0
    4ec2:	0b be       	out	0x3b, r0	; 59
    4ec4:	0f 90       	pop	r0
    4ec6:	0f be       	out	0x3f, r0	; 63
    4ec8:	0f 90       	pop	r0
    4eca:	1f 90       	pop	r1
    4ecc:	18 95       	reti

00004ece <__vector_19>:
    4ece:	1f 92       	push	r1
    4ed0:	0f 92       	push	r0
    4ed2:	0f b6       	in	r0, 0x3f	; 63
    4ed4:	0f 92       	push	r0
    4ed6:	11 24       	eor	r1, r1
    4ed8:	0b b6       	in	r0, 0x3b	; 59
    4eda:	0f 92       	push	r0
    4edc:	2f 93       	push	r18
    4ede:	3f 93       	push	r19
    4ee0:	4f 93       	push	r20
    4ee2:	5f 93       	push	r21
    4ee4:	6f 93       	push	r22
    4ee6:	7f 93       	push	r23
    4ee8:	8f 93       	push	r24
    4eea:	9f 93       	push	r25
    4eec:	af 93       	push	r26
    4eee:	bf 93       	push	r27
    4ef0:	ef 93       	push	r30
    4ef2:	ff 93       	push	r31
    4ef4:	e0 91 34 2a 	lds	r30, 0x2A34	; 0x802a34 <tc_tcc0_ccd_callback>
    4ef8:	f0 91 35 2a 	lds	r31, 0x2A35	; 0x802a35 <tc_tcc0_ccd_callback+0x1>
    4efc:	30 97       	sbiw	r30, 0x00	; 0
    4efe:	09 f0       	breq	.+2      	; 0x4f02 <__vector_19+0x34>
    4f00:	19 95       	eicall
    4f02:	ff 91       	pop	r31
    4f04:	ef 91       	pop	r30
    4f06:	bf 91       	pop	r27
    4f08:	af 91       	pop	r26
    4f0a:	9f 91       	pop	r25
    4f0c:	8f 91       	pop	r24
    4f0e:	7f 91       	pop	r23
    4f10:	6f 91       	pop	r22
    4f12:	5f 91       	pop	r21
    4f14:	4f 91       	pop	r20
    4f16:	3f 91       	pop	r19
    4f18:	2f 91       	pop	r18
    4f1a:	0f 90       	pop	r0
    4f1c:	0b be       	out	0x3b, r0	; 59
    4f1e:	0f 90       	pop	r0
    4f20:	0f be       	out	0x3f, r0	; 63
    4f22:	0f 90       	pop	r0
    4f24:	1f 90       	pop	r1
    4f26:	18 95       	reti

00004f28 <__vector_20>:
    4f28:	1f 92       	push	r1
    4f2a:	0f 92       	push	r0
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	0f 92       	push	r0
    4f30:	11 24       	eor	r1, r1
    4f32:	0b b6       	in	r0, 0x3b	; 59
    4f34:	0f 92       	push	r0
    4f36:	2f 93       	push	r18
    4f38:	3f 93       	push	r19
    4f3a:	4f 93       	push	r20
    4f3c:	5f 93       	push	r21
    4f3e:	6f 93       	push	r22
    4f40:	7f 93       	push	r23
    4f42:	8f 93       	push	r24
    4f44:	9f 93       	push	r25
    4f46:	af 93       	push	r26
    4f48:	bf 93       	push	r27
    4f4a:	ef 93       	push	r30
    4f4c:	ff 93       	push	r31
    4f4e:	e0 91 32 2a 	lds	r30, 0x2A32	; 0x802a32 <tc_tcc1_ovf_callback>
    4f52:	f0 91 33 2a 	lds	r31, 0x2A33	; 0x802a33 <tc_tcc1_ovf_callback+0x1>
    4f56:	30 97       	sbiw	r30, 0x00	; 0
    4f58:	09 f0       	breq	.+2      	; 0x4f5c <__vector_20+0x34>
    4f5a:	19 95       	eicall
    4f5c:	ff 91       	pop	r31
    4f5e:	ef 91       	pop	r30
    4f60:	bf 91       	pop	r27
    4f62:	af 91       	pop	r26
    4f64:	9f 91       	pop	r25
    4f66:	8f 91       	pop	r24
    4f68:	7f 91       	pop	r23
    4f6a:	6f 91       	pop	r22
    4f6c:	5f 91       	pop	r21
    4f6e:	4f 91       	pop	r20
    4f70:	3f 91       	pop	r19
    4f72:	2f 91       	pop	r18
    4f74:	0f 90       	pop	r0
    4f76:	0b be       	out	0x3b, r0	; 59
    4f78:	0f 90       	pop	r0
    4f7a:	0f be       	out	0x3f, r0	; 63
    4f7c:	0f 90       	pop	r0
    4f7e:	1f 90       	pop	r1
    4f80:	18 95       	reti

00004f82 <__vector_21>:
    4f82:	1f 92       	push	r1
    4f84:	0f 92       	push	r0
    4f86:	0f b6       	in	r0, 0x3f	; 63
    4f88:	0f 92       	push	r0
    4f8a:	11 24       	eor	r1, r1
    4f8c:	0b b6       	in	r0, 0x3b	; 59
    4f8e:	0f 92       	push	r0
    4f90:	2f 93       	push	r18
    4f92:	3f 93       	push	r19
    4f94:	4f 93       	push	r20
    4f96:	5f 93       	push	r21
    4f98:	6f 93       	push	r22
    4f9a:	7f 93       	push	r23
    4f9c:	8f 93       	push	r24
    4f9e:	9f 93       	push	r25
    4fa0:	af 93       	push	r26
    4fa2:	bf 93       	push	r27
    4fa4:	ef 93       	push	r30
    4fa6:	ff 93       	push	r31
    4fa8:	e0 91 30 2a 	lds	r30, 0x2A30	; 0x802a30 <tc_tcc1_err_callback>
    4fac:	f0 91 31 2a 	lds	r31, 0x2A31	; 0x802a31 <tc_tcc1_err_callback+0x1>
    4fb0:	30 97       	sbiw	r30, 0x00	; 0
    4fb2:	09 f0       	breq	.+2      	; 0x4fb6 <__vector_21+0x34>
    4fb4:	19 95       	eicall
    4fb6:	ff 91       	pop	r31
    4fb8:	ef 91       	pop	r30
    4fba:	bf 91       	pop	r27
    4fbc:	af 91       	pop	r26
    4fbe:	9f 91       	pop	r25
    4fc0:	8f 91       	pop	r24
    4fc2:	7f 91       	pop	r23
    4fc4:	6f 91       	pop	r22
    4fc6:	5f 91       	pop	r21
    4fc8:	4f 91       	pop	r20
    4fca:	3f 91       	pop	r19
    4fcc:	2f 91       	pop	r18
    4fce:	0f 90       	pop	r0
    4fd0:	0b be       	out	0x3b, r0	; 59
    4fd2:	0f 90       	pop	r0
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	0f 90       	pop	r0
    4fd8:	1f 90       	pop	r1
    4fda:	18 95       	reti

00004fdc <__vector_22>:
    4fdc:	1f 92       	push	r1
    4fde:	0f 92       	push	r0
    4fe0:	0f b6       	in	r0, 0x3f	; 63
    4fe2:	0f 92       	push	r0
    4fe4:	11 24       	eor	r1, r1
    4fe6:	0b b6       	in	r0, 0x3b	; 59
    4fe8:	0f 92       	push	r0
    4fea:	2f 93       	push	r18
    4fec:	3f 93       	push	r19
    4fee:	4f 93       	push	r20
    4ff0:	5f 93       	push	r21
    4ff2:	6f 93       	push	r22
    4ff4:	7f 93       	push	r23
    4ff6:	8f 93       	push	r24
    4ff8:	9f 93       	push	r25
    4ffa:	af 93       	push	r26
    4ffc:	bf 93       	push	r27
    4ffe:	ef 93       	push	r30
    5000:	ff 93       	push	r31
    5002:	e0 91 2e 2a 	lds	r30, 0x2A2E	; 0x802a2e <tc_tcc1_cca_callback>
    5006:	f0 91 2f 2a 	lds	r31, 0x2A2F	; 0x802a2f <tc_tcc1_cca_callback+0x1>
    500a:	30 97       	sbiw	r30, 0x00	; 0
    500c:	09 f0       	breq	.+2      	; 0x5010 <__vector_22+0x34>
    500e:	19 95       	eicall
    5010:	ff 91       	pop	r31
    5012:	ef 91       	pop	r30
    5014:	bf 91       	pop	r27
    5016:	af 91       	pop	r26
    5018:	9f 91       	pop	r25
    501a:	8f 91       	pop	r24
    501c:	7f 91       	pop	r23
    501e:	6f 91       	pop	r22
    5020:	5f 91       	pop	r21
    5022:	4f 91       	pop	r20
    5024:	3f 91       	pop	r19
    5026:	2f 91       	pop	r18
    5028:	0f 90       	pop	r0
    502a:	0b be       	out	0x3b, r0	; 59
    502c:	0f 90       	pop	r0
    502e:	0f be       	out	0x3f, r0	; 63
    5030:	0f 90       	pop	r0
    5032:	1f 90       	pop	r1
    5034:	18 95       	reti

00005036 <__vector_23>:
    5036:	1f 92       	push	r1
    5038:	0f 92       	push	r0
    503a:	0f b6       	in	r0, 0x3f	; 63
    503c:	0f 92       	push	r0
    503e:	11 24       	eor	r1, r1
    5040:	0b b6       	in	r0, 0x3b	; 59
    5042:	0f 92       	push	r0
    5044:	2f 93       	push	r18
    5046:	3f 93       	push	r19
    5048:	4f 93       	push	r20
    504a:	5f 93       	push	r21
    504c:	6f 93       	push	r22
    504e:	7f 93       	push	r23
    5050:	8f 93       	push	r24
    5052:	9f 93       	push	r25
    5054:	af 93       	push	r26
    5056:	bf 93       	push	r27
    5058:	ef 93       	push	r30
    505a:	ff 93       	push	r31
    505c:	e0 91 2c 2a 	lds	r30, 0x2A2C	; 0x802a2c <tc_tcc1_ccb_callback>
    5060:	f0 91 2d 2a 	lds	r31, 0x2A2D	; 0x802a2d <tc_tcc1_ccb_callback+0x1>
    5064:	30 97       	sbiw	r30, 0x00	; 0
    5066:	09 f0       	breq	.+2      	; 0x506a <__vector_23+0x34>
    5068:	19 95       	eicall
    506a:	ff 91       	pop	r31
    506c:	ef 91       	pop	r30
    506e:	bf 91       	pop	r27
    5070:	af 91       	pop	r26
    5072:	9f 91       	pop	r25
    5074:	8f 91       	pop	r24
    5076:	7f 91       	pop	r23
    5078:	6f 91       	pop	r22
    507a:	5f 91       	pop	r21
    507c:	4f 91       	pop	r20
    507e:	3f 91       	pop	r19
    5080:	2f 91       	pop	r18
    5082:	0f 90       	pop	r0
    5084:	0b be       	out	0x3b, r0	; 59
    5086:	0f 90       	pop	r0
    5088:	0f be       	out	0x3f, r0	; 63
    508a:	0f 90       	pop	r0
    508c:	1f 90       	pop	r1
    508e:	18 95       	reti

00005090 <__vector_77>:
    5090:	1f 92       	push	r1
    5092:	0f 92       	push	r0
    5094:	0f b6       	in	r0, 0x3f	; 63
    5096:	0f 92       	push	r0
    5098:	11 24       	eor	r1, r1
    509a:	0b b6       	in	r0, 0x3b	; 59
    509c:	0f 92       	push	r0
    509e:	2f 93       	push	r18
    50a0:	3f 93       	push	r19
    50a2:	4f 93       	push	r20
    50a4:	5f 93       	push	r21
    50a6:	6f 93       	push	r22
    50a8:	7f 93       	push	r23
    50aa:	8f 93       	push	r24
    50ac:	9f 93       	push	r25
    50ae:	af 93       	push	r26
    50b0:	bf 93       	push	r27
    50b2:	ef 93       	push	r30
    50b4:	ff 93       	push	r31
    50b6:	e0 91 2a 2a 	lds	r30, 0x2A2A	; 0x802a2a <tc_tcd0_ovf_callback>
    50ba:	f0 91 2b 2a 	lds	r31, 0x2A2B	; 0x802a2b <tc_tcd0_ovf_callback+0x1>
    50be:	30 97       	sbiw	r30, 0x00	; 0
    50c0:	09 f0       	breq	.+2      	; 0x50c4 <__vector_77+0x34>
    50c2:	19 95       	eicall
    50c4:	ff 91       	pop	r31
    50c6:	ef 91       	pop	r30
    50c8:	bf 91       	pop	r27
    50ca:	af 91       	pop	r26
    50cc:	9f 91       	pop	r25
    50ce:	8f 91       	pop	r24
    50d0:	7f 91       	pop	r23
    50d2:	6f 91       	pop	r22
    50d4:	5f 91       	pop	r21
    50d6:	4f 91       	pop	r20
    50d8:	3f 91       	pop	r19
    50da:	2f 91       	pop	r18
    50dc:	0f 90       	pop	r0
    50de:	0b be       	out	0x3b, r0	; 59
    50e0:	0f 90       	pop	r0
    50e2:	0f be       	out	0x3f, r0	; 63
    50e4:	0f 90       	pop	r0
    50e6:	1f 90       	pop	r1
    50e8:	18 95       	reti

000050ea <__vector_78>:
    50ea:	1f 92       	push	r1
    50ec:	0f 92       	push	r0
    50ee:	0f b6       	in	r0, 0x3f	; 63
    50f0:	0f 92       	push	r0
    50f2:	11 24       	eor	r1, r1
    50f4:	0b b6       	in	r0, 0x3b	; 59
    50f6:	0f 92       	push	r0
    50f8:	2f 93       	push	r18
    50fa:	3f 93       	push	r19
    50fc:	4f 93       	push	r20
    50fe:	5f 93       	push	r21
    5100:	6f 93       	push	r22
    5102:	7f 93       	push	r23
    5104:	8f 93       	push	r24
    5106:	9f 93       	push	r25
    5108:	af 93       	push	r26
    510a:	bf 93       	push	r27
    510c:	ef 93       	push	r30
    510e:	ff 93       	push	r31
    5110:	e0 91 28 2a 	lds	r30, 0x2A28	; 0x802a28 <tc_tcd0_err_callback>
    5114:	f0 91 29 2a 	lds	r31, 0x2A29	; 0x802a29 <tc_tcd0_err_callback+0x1>
    5118:	30 97       	sbiw	r30, 0x00	; 0
    511a:	09 f0       	breq	.+2      	; 0x511e <__vector_78+0x34>
    511c:	19 95       	eicall
    511e:	ff 91       	pop	r31
    5120:	ef 91       	pop	r30
    5122:	bf 91       	pop	r27
    5124:	af 91       	pop	r26
    5126:	9f 91       	pop	r25
    5128:	8f 91       	pop	r24
    512a:	7f 91       	pop	r23
    512c:	6f 91       	pop	r22
    512e:	5f 91       	pop	r21
    5130:	4f 91       	pop	r20
    5132:	3f 91       	pop	r19
    5134:	2f 91       	pop	r18
    5136:	0f 90       	pop	r0
    5138:	0b be       	out	0x3b, r0	; 59
    513a:	0f 90       	pop	r0
    513c:	0f be       	out	0x3f, r0	; 63
    513e:	0f 90       	pop	r0
    5140:	1f 90       	pop	r1
    5142:	18 95       	reti

00005144 <__vector_79>:
    5144:	1f 92       	push	r1
    5146:	0f 92       	push	r0
    5148:	0f b6       	in	r0, 0x3f	; 63
    514a:	0f 92       	push	r0
    514c:	11 24       	eor	r1, r1
    514e:	0b b6       	in	r0, 0x3b	; 59
    5150:	0f 92       	push	r0
    5152:	2f 93       	push	r18
    5154:	3f 93       	push	r19
    5156:	4f 93       	push	r20
    5158:	5f 93       	push	r21
    515a:	6f 93       	push	r22
    515c:	7f 93       	push	r23
    515e:	8f 93       	push	r24
    5160:	9f 93       	push	r25
    5162:	af 93       	push	r26
    5164:	bf 93       	push	r27
    5166:	ef 93       	push	r30
    5168:	ff 93       	push	r31
    516a:	e0 91 26 2a 	lds	r30, 0x2A26	; 0x802a26 <tc_tcd0_cca_callback>
    516e:	f0 91 27 2a 	lds	r31, 0x2A27	; 0x802a27 <tc_tcd0_cca_callback+0x1>
    5172:	30 97       	sbiw	r30, 0x00	; 0
    5174:	09 f0       	breq	.+2      	; 0x5178 <__vector_79+0x34>
    5176:	19 95       	eicall
    5178:	ff 91       	pop	r31
    517a:	ef 91       	pop	r30
    517c:	bf 91       	pop	r27
    517e:	af 91       	pop	r26
    5180:	9f 91       	pop	r25
    5182:	8f 91       	pop	r24
    5184:	7f 91       	pop	r23
    5186:	6f 91       	pop	r22
    5188:	5f 91       	pop	r21
    518a:	4f 91       	pop	r20
    518c:	3f 91       	pop	r19
    518e:	2f 91       	pop	r18
    5190:	0f 90       	pop	r0
    5192:	0b be       	out	0x3b, r0	; 59
    5194:	0f 90       	pop	r0
    5196:	0f be       	out	0x3f, r0	; 63
    5198:	0f 90       	pop	r0
    519a:	1f 90       	pop	r1
    519c:	18 95       	reti

0000519e <__vector_80>:
    519e:	1f 92       	push	r1
    51a0:	0f 92       	push	r0
    51a2:	0f b6       	in	r0, 0x3f	; 63
    51a4:	0f 92       	push	r0
    51a6:	11 24       	eor	r1, r1
    51a8:	0b b6       	in	r0, 0x3b	; 59
    51aa:	0f 92       	push	r0
    51ac:	2f 93       	push	r18
    51ae:	3f 93       	push	r19
    51b0:	4f 93       	push	r20
    51b2:	5f 93       	push	r21
    51b4:	6f 93       	push	r22
    51b6:	7f 93       	push	r23
    51b8:	8f 93       	push	r24
    51ba:	9f 93       	push	r25
    51bc:	af 93       	push	r26
    51be:	bf 93       	push	r27
    51c0:	ef 93       	push	r30
    51c2:	ff 93       	push	r31
    51c4:	e0 91 24 2a 	lds	r30, 0x2A24	; 0x802a24 <tc_tcd0_ccb_callback>
    51c8:	f0 91 25 2a 	lds	r31, 0x2A25	; 0x802a25 <tc_tcd0_ccb_callback+0x1>
    51cc:	30 97       	sbiw	r30, 0x00	; 0
    51ce:	09 f0       	breq	.+2      	; 0x51d2 <__vector_80+0x34>
    51d0:	19 95       	eicall
    51d2:	ff 91       	pop	r31
    51d4:	ef 91       	pop	r30
    51d6:	bf 91       	pop	r27
    51d8:	af 91       	pop	r26
    51da:	9f 91       	pop	r25
    51dc:	8f 91       	pop	r24
    51de:	7f 91       	pop	r23
    51e0:	6f 91       	pop	r22
    51e2:	5f 91       	pop	r21
    51e4:	4f 91       	pop	r20
    51e6:	3f 91       	pop	r19
    51e8:	2f 91       	pop	r18
    51ea:	0f 90       	pop	r0
    51ec:	0b be       	out	0x3b, r0	; 59
    51ee:	0f 90       	pop	r0
    51f0:	0f be       	out	0x3f, r0	; 63
    51f2:	0f 90       	pop	r0
    51f4:	1f 90       	pop	r1
    51f6:	18 95       	reti

000051f8 <__vector_81>:
    51f8:	1f 92       	push	r1
    51fa:	0f 92       	push	r0
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	0f 92       	push	r0
    5200:	11 24       	eor	r1, r1
    5202:	0b b6       	in	r0, 0x3b	; 59
    5204:	0f 92       	push	r0
    5206:	2f 93       	push	r18
    5208:	3f 93       	push	r19
    520a:	4f 93       	push	r20
    520c:	5f 93       	push	r21
    520e:	6f 93       	push	r22
    5210:	7f 93       	push	r23
    5212:	8f 93       	push	r24
    5214:	9f 93       	push	r25
    5216:	af 93       	push	r26
    5218:	bf 93       	push	r27
    521a:	ef 93       	push	r30
    521c:	ff 93       	push	r31
    521e:	e0 91 22 2a 	lds	r30, 0x2A22	; 0x802a22 <tc_tcd0_ccc_callback>
    5222:	f0 91 23 2a 	lds	r31, 0x2A23	; 0x802a23 <tc_tcd0_ccc_callback+0x1>
    5226:	30 97       	sbiw	r30, 0x00	; 0
    5228:	09 f0       	breq	.+2      	; 0x522c <__vector_81+0x34>
    522a:	19 95       	eicall
    522c:	ff 91       	pop	r31
    522e:	ef 91       	pop	r30
    5230:	bf 91       	pop	r27
    5232:	af 91       	pop	r26
    5234:	9f 91       	pop	r25
    5236:	8f 91       	pop	r24
    5238:	7f 91       	pop	r23
    523a:	6f 91       	pop	r22
    523c:	5f 91       	pop	r21
    523e:	4f 91       	pop	r20
    5240:	3f 91       	pop	r19
    5242:	2f 91       	pop	r18
    5244:	0f 90       	pop	r0
    5246:	0b be       	out	0x3b, r0	; 59
    5248:	0f 90       	pop	r0
    524a:	0f be       	out	0x3f, r0	; 63
    524c:	0f 90       	pop	r0
    524e:	1f 90       	pop	r1
    5250:	18 95       	reti

00005252 <__vector_82>:
    5252:	1f 92       	push	r1
    5254:	0f 92       	push	r0
    5256:	0f b6       	in	r0, 0x3f	; 63
    5258:	0f 92       	push	r0
    525a:	11 24       	eor	r1, r1
    525c:	0b b6       	in	r0, 0x3b	; 59
    525e:	0f 92       	push	r0
    5260:	2f 93       	push	r18
    5262:	3f 93       	push	r19
    5264:	4f 93       	push	r20
    5266:	5f 93       	push	r21
    5268:	6f 93       	push	r22
    526a:	7f 93       	push	r23
    526c:	8f 93       	push	r24
    526e:	9f 93       	push	r25
    5270:	af 93       	push	r26
    5272:	bf 93       	push	r27
    5274:	ef 93       	push	r30
    5276:	ff 93       	push	r31
    5278:	e0 91 20 2a 	lds	r30, 0x2A20	; 0x802a20 <tc_tcd0_ccd_callback>
    527c:	f0 91 21 2a 	lds	r31, 0x2A21	; 0x802a21 <tc_tcd0_ccd_callback+0x1>
    5280:	30 97       	sbiw	r30, 0x00	; 0
    5282:	09 f0       	breq	.+2      	; 0x5286 <__vector_82+0x34>
    5284:	19 95       	eicall
    5286:	ff 91       	pop	r31
    5288:	ef 91       	pop	r30
    528a:	bf 91       	pop	r27
    528c:	af 91       	pop	r26
    528e:	9f 91       	pop	r25
    5290:	8f 91       	pop	r24
    5292:	7f 91       	pop	r23
    5294:	6f 91       	pop	r22
    5296:	5f 91       	pop	r21
    5298:	4f 91       	pop	r20
    529a:	3f 91       	pop	r19
    529c:	2f 91       	pop	r18
    529e:	0f 90       	pop	r0
    52a0:	0b be       	out	0x3b, r0	; 59
    52a2:	0f 90       	pop	r0
    52a4:	0f be       	out	0x3f, r0	; 63
    52a6:	0f 90       	pop	r0
    52a8:	1f 90       	pop	r1
    52aa:	18 95       	reti

000052ac <__vector_83>:
    52ac:	1f 92       	push	r1
    52ae:	0f 92       	push	r0
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	0f 92       	push	r0
    52b4:	11 24       	eor	r1, r1
    52b6:	0b b6       	in	r0, 0x3b	; 59
    52b8:	0f 92       	push	r0
    52ba:	2f 93       	push	r18
    52bc:	3f 93       	push	r19
    52be:	4f 93       	push	r20
    52c0:	5f 93       	push	r21
    52c2:	6f 93       	push	r22
    52c4:	7f 93       	push	r23
    52c6:	8f 93       	push	r24
    52c8:	9f 93       	push	r25
    52ca:	af 93       	push	r26
    52cc:	bf 93       	push	r27
    52ce:	ef 93       	push	r30
    52d0:	ff 93       	push	r31
    52d2:	e0 91 1e 2a 	lds	r30, 0x2A1E	; 0x802a1e <tc_tcd1_ovf_callback>
    52d6:	f0 91 1f 2a 	lds	r31, 0x2A1F	; 0x802a1f <tc_tcd1_ovf_callback+0x1>
    52da:	30 97       	sbiw	r30, 0x00	; 0
    52dc:	09 f0       	breq	.+2      	; 0x52e0 <__vector_83+0x34>
    52de:	19 95       	eicall
    52e0:	ff 91       	pop	r31
    52e2:	ef 91       	pop	r30
    52e4:	bf 91       	pop	r27
    52e6:	af 91       	pop	r26
    52e8:	9f 91       	pop	r25
    52ea:	8f 91       	pop	r24
    52ec:	7f 91       	pop	r23
    52ee:	6f 91       	pop	r22
    52f0:	5f 91       	pop	r21
    52f2:	4f 91       	pop	r20
    52f4:	3f 91       	pop	r19
    52f6:	2f 91       	pop	r18
    52f8:	0f 90       	pop	r0
    52fa:	0b be       	out	0x3b, r0	; 59
    52fc:	0f 90       	pop	r0
    52fe:	0f be       	out	0x3f, r0	; 63
    5300:	0f 90       	pop	r0
    5302:	1f 90       	pop	r1
    5304:	18 95       	reti

00005306 <__vector_84>:
    5306:	1f 92       	push	r1
    5308:	0f 92       	push	r0
    530a:	0f b6       	in	r0, 0x3f	; 63
    530c:	0f 92       	push	r0
    530e:	11 24       	eor	r1, r1
    5310:	0b b6       	in	r0, 0x3b	; 59
    5312:	0f 92       	push	r0
    5314:	2f 93       	push	r18
    5316:	3f 93       	push	r19
    5318:	4f 93       	push	r20
    531a:	5f 93       	push	r21
    531c:	6f 93       	push	r22
    531e:	7f 93       	push	r23
    5320:	8f 93       	push	r24
    5322:	9f 93       	push	r25
    5324:	af 93       	push	r26
    5326:	bf 93       	push	r27
    5328:	ef 93       	push	r30
    532a:	ff 93       	push	r31
    532c:	e0 91 1c 2a 	lds	r30, 0x2A1C	; 0x802a1c <tc_tcd1_err_callback>
    5330:	f0 91 1d 2a 	lds	r31, 0x2A1D	; 0x802a1d <tc_tcd1_err_callback+0x1>
    5334:	30 97       	sbiw	r30, 0x00	; 0
    5336:	09 f0       	breq	.+2      	; 0x533a <__vector_84+0x34>
    5338:	19 95       	eicall
    533a:	ff 91       	pop	r31
    533c:	ef 91       	pop	r30
    533e:	bf 91       	pop	r27
    5340:	af 91       	pop	r26
    5342:	9f 91       	pop	r25
    5344:	8f 91       	pop	r24
    5346:	7f 91       	pop	r23
    5348:	6f 91       	pop	r22
    534a:	5f 91       	pop	r21
    534c:	4f 91       	pop	r20
    534e:	3f 91       	pop	r19
    5350:	2f 91       	pop	r18
    5352:	0f 90       	pop	r0
    5354:	0b be       	out	0x3b, r0	; 59
    5356:	0f 90       	pop	r0
    5358:	0f be       	out	0x3f, r0	; 63
    535a:	0f 90       	pop	r0
    535c:	1f 90       	pop	r1
    535e:	18 95       	reti

00005360 <__vector_85>:
    5360:	1f 92       	push	r1
    5362:	0f 92       	push	r0
    5364:	0f b6       	in	r0, 0x3f	; 63
    5366:	0f 92       	push	r0
    5368:	11 24       	eor	r1, r1
    536a:	0b b6       	in	r0, 0x3b	; 59
    536c:	0f 92       	push	r0
    536e:	2f 93       	push	r18
    5370:	3f 93       	push	r19
    5372:	4f 93       	push	r20
    5374:	5f 93       	push	r21
    5376:	6f 93       	push	r22
    5378:	7f 93       	push	r23
    537a:	8f 93       	push	r24
    537c:	9f 93       	push	r25
    537e:	af 93       	push	r26
    5380:	bf 93       	push	r27
    5382:	ef 93       	push	r30
    5384:	ff 93       	push	r31
    5386:	e0 91 1a 2a 	lds	r30, 0x2A1A	; 0x802a1a <tc_tcd1_cca_callback>
    538a:	f0 91 1b 2a 	lds	r31, 0x2A1B	; 0x802a1b <tc_tcd1_cca_callback+0x1>
    538e:	30 97       	sbiw	r30, 0x00	; 0
    5390:	09 f0       	breq	.+2      	; 0x5394 <__vector_85+0x34>
    5392:	19 95       	eicall
    5394:	ff 91       	pop	r31
    5396:	ef 91       	pop	r30
    5398:	bf 91       	pop	r27
    539a:	af 91       	pop	r26
    539c:	9f 91       	pop	r25
    539e:	8f 91       	pop	r24
    53a0:	7f 91       	pop	r23
    53a2:	6f 91       	pop	r22
    53a4:	5f 91       	pop	r21
    53a6:	4f 91       	pop	r20
    53a8:	3f 91       	pop	r19
    53aa:	2f 91       	pop	r18
    53ac:	0f 90       	pop	r0
    53ae:	0b be       	out	0x3b, r0	; 59
    53b0:	0f 90       	pop	r0
    53b2:	0f be       	out	0x3f, r0	; 63
    53b4:	0f 90       	pop	r0
    53b6:	1f 90       	pop	r1
    53b8:	18 95       	reti

000053ba <__vector_86>:
    53ba:	1f 92       	push	r1
    53bc:	0f 92       	push	r0
    53be:	0f b6       	in	r0, 0x3f	; 63
    53c0:	0f 92       	push	r0
    53c2:	11 24       	eor	r1, r1
    53c4:	0b b6       	in	r0, 0x3b	; 59
    53c6:	0f 92       	push	r0
    53c8:	2f 93       	push	r18
    53ca:	3f 93       	push	r19
    53cc:	4f 93       	push	r20
    53ce:	5f 93       	push	r21
    53d0:	6f 93       	push	r22
    53d2:	7f 93       	push	r23
    53d4:	8f 93       	push	r24
    53d6:	9f 93       	push	r25
    53d8:	af 93       	push	r26
    53da:	bf 93       	push	r27
    53dc:	ef 93       	push	r30
    53de:	ff 93       	push	r31
    53e0:	e0 91 18 2a 	lds	r30, 0x2A18	; 0x802a18 <tc_tcd1_ccb_callback>
    53e4:	f0 91 19 2a 	lds	r31, 0x2A19	; 0x802a19 <tc_tcd1_ccb_callback+0x1>
    53e8:	30 97       	sbiw	r30, 0x00	; 0
    53ea:	09 f0       	breq	.+2      	; 0x53ee <__vector_86+0x34>
    53ec:	19 95       	eicall
    53ee:	ff 91       	pop	r31
    53f0:	ef 91       	pop	r30
    53f2:	bf 91       	pop	r27
    53f4:	af 91       	pop	r26
    53f6:	9f 91       	pop	r25
    53f8:	8f 91       	pop	r24
    53fa:	7f 91       	pop	r23
    53fc:	6f 91       	pop	r22
    53fe:	5f 91       	pop	r21
    5400:	4f 91       	pop	r20
    5402:	3f 91       	pop	r19
    5404:	2f 91       	pop	r18
    5406:	0f 90       	pop	r0
    5408:	0b be       	out	0x3b, r0	; 59
    540a:	0f 90       	pop	r0
    540c:	0f be       	out	0x3f, r0	; 63
    540e:	0f 90       	pop	r0
    5410:	1f 90       	pop	r1
    5412:	18 95       	reti

00005414 <__vector_47>:
    5414:	1f 92       	push	r1
    5416:	0f 92       	push	r0
    5418:	0f b6       	in	r0, 0x3f	; 63
    541a:	0f 92       	push	r0
    541c:	11 24       	eor	r1, r1
    541e:	0b b6       	in	r0, 0x3b	; 59
    5420:	0f 92       	push	r0
    5422:	2f 93       	push	r18
    5424:	3f 93       	push	r19
    5426:	4f 93       	push	r20
    5428:	5f 93       	push	r21
    542a:	6f 93       	push	r22
    542c:	7f 93       	push	r23
    542e:	8f 93       	push	r24
    5430:	9f 93       	push	r25
    5432:	af 93       	push	r26
    5434:	bf 93       	push	r27
    5436:	ef 93       	push	r30
    5438:	ff 93       	push	r31
    543a:	e0 91 16 2a 	lds	r30, 0x2A16	; 0x802a16 <tc_tce0_ovf_callback>
    543e:	f0 91 17 2a 	lds	r31, 0x2A17	; 0x802a17 <tc_tce0_ovf_callback+0x1>
    5442:	30 97       	sbiw	r30, 0x00	; 0
    5444:	09 f0       	breq	.+2      	; 0x5448 <__vector_47+0x34>
    5446:	19 95       	eicall
    5448:	ff 91       	pop	r31
    544a:	ef 91       	pop	r30
    544c:	bf 91       	pop	r27
    544e:	af 91       	pop	r26
    5450:	9f 91       	pop	r25
    5452:	8f 91       	pop	r24
    5454:	7f 91       	pop	r23
    5456:	6f 91       	pop	r22
    5458:	5f 91       	pop	r21
    545a:	4f 91       	pop	r20
    545c:	3f 91       	pop	r19
    545e:	2f 91       	pop	r18
    5460:	0f 90       	pop	r0
    5462:	0b be       	out	0x3b, r0	; 59
    5464:	0f 90       	pop	r0
    5466:	0f be       	out	0x3f, r0	; 63
    5468:	0f 90       	pop	r0
    546a:	1f 90       	pop	r1
    546c:	18 95       	reti

0000546e <__vector_48>:
    546e:	1f 92       	push	r1
    5470:	0f 92       	push	r0
    5472:	0f b6       	in	r0, 0x3f	; 63
    5474:	0f 92       	push	r0
    5476:	11 24       	eor	r1, r1
    5478:	0b b6       	in	r0, 0x3b	; 59
    547a:	0f 92       	push	r0
    547c:	2f 93       	push	r18
    547e:	3f 93       	push	r19
    5480:	4f 93       	push	r20
    5482:	5f 93       	push	r21
    5484:	6f 93       	push	r22
    5486:	7f 93       	push	r23
    5488:	8f 93       	push	r24
    548a:	9f 93       	push	r25
    548c:	af 93       	push	r26
    548e:	bf 93       	push	r27
    5490:	ef 93       	push	r30
    5492:	ff 93       	push	r31
    5494:	e0 91 14 2a 	lds	r30, 0x2A14	; 0x802a14 <tc_tce0_err_callback>
    5498:	f0 91 15 2a 	lds	r31, 0x2A15	; 0x802a15 <tc_tce0_err_callback+0x1>
    549c:	30 97       	sbiw	r30, 0x00	; 0
    549e:	09 f0       	breq	.+2      	; 0x54a2 <__vector_48+0x34>
    54a0:	19 95       	eicall
    54a2:	ff 91       	pop	r31
    54a4:	ef 91       	pop	r30
    54a6:	bf 91       	pop	r27
    54a8:	af 91       	pop	r26
    54aa:	9f 91       	pop	r25
    54ac:	8f 91       	pop	r24
    54ae:	7f 91       	pop	r23
    54b0:	6f 91       	pop	r22
    54b2:	5f 91       	pop	r21
    54b4:	4f 91       	pop	r20
    54b6:	3f 91       	pop	r19
    54b8:	2f 91       	pop	r18
    54ba:	0f 90       	pop	r0
    54bc:	0b be       	out	0x3b, r0	; 59
    54be:	0f 90       	pop	r0
    54c0:	0f be       	out	0x3f, r0	; 63
    54c2:	0f 90       	pop	r0
    54c4:	1f 90       	pop	r1
    54c6:	18 95       	reti

000054c8 <__vector_49>:
    54c8:	1f 92       	push	r1
    54ca:	0f 92       	push	r0
    54cc:	0f b6       	in	r0, 0x3f	; 63
    54ce:	0f 92       	push	r0
    54d0:	11 24       	eor	r1, r1
    54d2:	0b b6       	in	r0, 0x3b	; 59
    54d4:	0f 92       	push	r0
    54d6:	2f 93       	push	r18
    54d8:	3f 93       	push	r19
    54da:	4f 93       	push	r20
    54dc:	5f 93       	push	r21
    54de:	6f 93       	push	r22
    54e0:	7f 93       	push	r23
    54e2:	8f 93       	push	r24
    54e4:	9f 93       	push	r25
    54e6:	af 93       	push	r26
    54e8:	bf 93       	push	r27
    54ea:	ef 93       	push	r30
    54ec:	ff 93       	push	r31
    54ee:	e0 91 12 2a 	lds	r30, 0x2A12	; 0x802a12 <tc_tce0_cca_callback>
    54f2:	f0 91 13 2a 	lds	r31, 0x2A13	; 0x802a13 <tc_tce0_cca_callback+0x1>
    54f6:	30 97       	sbiw	r30, 0x00	; 0
    54f8:	09 f0       	breq	.+2      	; 0x54fc <__vector_49+0x34>
    54fa:	19 95       	eicall
    54fc:	ff 91       	pop	r31
    54fe:	ef 91       	pop	r30
    5500:	bf 91       	pop	r27
    5502:	af 91       	pop	r26
    5504:	9f 91       	pop	r25
    5506:	8f 91       	pop	r24
    5508:	7f 91       	pop	r23
    550a:	6f 91       	pop	r22
    550c:	5f 91       	pop	r21
    550e:	4f 91       	pop	r20
    5510:	3f 91       	pop	r19
    5512:	2f 91       	pop	r18
    5514:	0f 90       	pop	r0
    5516:	0b be       	out	0x3b, r0	; 59
    5518:	0f 90       	pop	r0
    551a:	0f be       	out	0x3f, r0	; 63
    551c:	0f 90       	pop	r0
    551e:	1f 90       	pop	r1
    5520:	18 95       	reti

00005522 <__vector_50>:
    5522:	1f 92       	push	r1
    5524:	0f 92       	push	r0
    5526:	0f b6       	in	r0, 0x3f	; 63
    5528:	0f 92       	push	r0
    552a:	11 24       	eor	r1, r1
    552c:	0b b6       	in	r0, 0x3b	; 59
    552e:	0f 92       	push	r0
    5530:	2f 93       	push	r18
    5532:	3f 93       	push	r19
    5534:	4f 93       	push	r20
    5536:	5f 93       	push	r21
    5538:	6f 93       	push	r22
    553a:	7f 93       	push	r23
    553c:	8f 93       	push	r24
    553e:	9f 93       	push	r25
    5540:	af 93       	push	r26
    5542:	bf 93       	push	r27
    5544:	ef 93       	push	r30
    5546:	ff 93       	push	r31
    5548:	e0 91 10 2a 	lds	r30, 0x2A10	; 0x802a10 <tc_tce0_ccb_callback>
    554c:	f0 91 11 2a 	lds	r31, 0x2A11	; 0x802a11 <tc_tce0_ccb_callback+0x1>
    5550:	30 97       	sbiw	r30, 0x00	; 0
    5552:	09 f0       	breq	.+2      	; 0x5556 <__vector_50+0x34>
    5554:	19 95       	eicall
    5556:	ff 91       	pop	r31
    5558:	ef 91       	pop	r30
    555a:	bf 91       	pop	r27
    555c:	af 91       	pop	r26
    555e:	9f 91       	pop	r25
    5560:	8f 91       	pop	r24
    5562:	7f 91       	pop	r23
    5564:	6f 91       	pop	r22
    5566:	5f 91       	pop	r21
    5568:	4f 91       	pop	r20
    556a:	3f 91       	pop	r19
    556c:	2f 91       	pop	r18
    556e:	0f 90       	pop	r0
    5570:	0b be       	out	0x3b, r0	; 59
    5572:	0f 90       	pop	r0
    5574:	0f be       	out	0x3f, r0	; 63
    5576:	0f 90       	pop	r0
    5578:	1f 90       	pop	r1
    557a:	18 95       	reti

0000557c <__vector_51>:
    557c:	1f 92       	push	r1
    557e:	0f 92       	push	r0
    5580:	0f b6       	in	r0, 0x3f	; 63
    5582:	0f 92       	push	r0
    5584:	11 24       	eor	r1, r1
    5586:	0b b6       	in	r0, 0x3b	; 59
    5588:	0f 92       	push	r0
    558a:	2f 93       	push	r18
    558c:	3f 93       	push	r19
    558e:	4f 93       	push	r20
    5590:	5f 93       	push	r21
    5592:	6f 93       	push	r22
    5594:	7f 93       	push	r23
    5596:	8f 93       	push	r24
    5598:	9f 93       	push	r25
    559a:	af 93       	push	r26
    559c:	bf 93       	push	r27
    559e:	ef 93       	push	r30
    55a0:	ff 93       	push	r31
    55a2:	e0 91 0e 2a 	lds	r30, 0x2A0E	; 0x802a0e <tc_tce0_ccc_callback>
    55a6:	f0 91 0f 2a 	lds	r31, 0x2A0F	; 0x802a0f <tc_tce0_ccc_callback+0x1>
    55aa:	30 97       	sbiw	r30, 0x00	; 0
    55ac:	09 f0       	breq	.+2      	; 0x55b0 <__vector_51+0x34>
    55ae:	19 95       	eicall
    55b0:	ff 91       	pop	r31
    55b2:	ef 91       	pop	r30
    55b4:	bf 91       	pop	r27
    55b6:	af 91       	pop	r26
    55b8:	9f 91       	pop	r25
    55ba:	8f 91       	pop	r24
    55bc:	7f 91       	pop	r23
    55be:	6f 91       	pop	r22
    55c0:	5f 91       	pop	r21
    55c2:	4f 91       	pop	r20
    55c4:	3f 91       	pop	r19
    55c6:	2f 91       	pop	r18
    55c8:	0f 90       	pop	r0
    55ca:	0b be       	out	0x3b, r0	; 59
    55cc:	0f 90       	pop	r0
    55ce:	0f be       	out	0x3f, r0	; 63
    55d0:	0f 90       	pop	r0
    55d2:	1f 90       	pop	r1
    55d4:	18 95       	reti

000055d6 <__vector_52>:
    55d6:	1f 92       	push	r1
    55d8:	0f 92       	push	r0
    55da:	0f b6       	in	r0, 0x3f	; 63
    55dc:	0f 92       	push	r0
    55de:	11 24       	eor	r1, r1
    55e0:	0b b6       	in	r0, 0x3b	; 59
    55e2:	0f 92       	push	r0
    55e4:	2f 93       	push	r18
    55e6:	3f 93       	push	r19
    55e8:	4f 93       	push	r20
    55ea:	5f 93       	push	r21
    55ec:	6f 93       	push	r22
    55ee:	7f 93       	push	r23
    55f0:	8f 93       	push	r24
    55f2:	9f 93       	push	r25
    55f4:	af 93       	push	r26
    55f6:	bf 93       	push	r27
    55f8:	ef 93       	push	r30
    55fa:	ff 93       	push	r31
    55fc:	e0 91 0c 2a 	lds	r30, 0x2A0C	; 0x802a0c <tc_tce0_ccd_callback>
    5600:	f0 91 0d 2a 	lds	r31, 0x2A0D	; 0x802a0d <tc_tce0_ccd_callback+0x1>
    5604:	30 97       	sbiw	r30, 0x00	; 0
    5606:	09 f0       	breq	.+2      	; 0x560a <__vector_52+0x34>
    5608:	19 95       	eicall
    560a:	ff 91       	pop	r31
    560c:	ef 91       	pop	r30
    560e:	bf 91       	pop	r27
    5610:	af 91       	pop	r26
    5612:	9f 91       	pop	r25
    5614:	8f 91       	pop	r24
    5616:	7f 91       	pop	r23
    5618:	6f 91       	pop	r22
    561a:	5f 91       	pop	r21
    561c:	4f 91       	pop	r20
    561e:	3f 91       	pop	r19
    5620:	2f 91       	pop	r18
    5622:	0f 90       	pop	r0
    5624:	0b be       	out	0x3b, r0	; 59
    5626:	0f 90       	pop	r0
    5628:	0f be       	out	0x3f, r0	; 63
    562a:	0f 90       	pop	r0
    562c:	1f 90       	pop	r1
    562e:	18 95       	reti

00005630 <__vector_53>:
    5630:	1f 92       	push	r1
    5632:	0f 92       	push	r0
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	0f 92       	push	r0
    5638:	11 24       	eor	r1, r1
    563a:	0b b6       	in	r0, 0x3b	; 59
    563c:	0f 92       	push	r0
    563e:	2f 93       	push	r18
    5640:	3f 93       	push	r19
    5642:	4f 93       	push	r20
    5644:	5f 93       	push	r21
    5646:	6f 93       	push	r22
    5648:	7f 93       	push	r23
    564a:	8f 93       	push	r24
    564c:	9f 93       	push	r25
    564e:	af 93       	push	r26
    5650:	bf 93       	push	r27
    5652:	ef 93       	push	r30
    5654:	ff 93       	push	r31
    5656:	e0 91 0a 2a 	lds	r30, 0x2A0A	; 0x802a0a <tc_tce1_ovf_callback>
    565a:	f0 91 0b 2a 	lds	r31, 0x2A0B	; 0x802a0b <tc_tce1_ovf_callback+0x1>
    565e:	30 97       	sbiw	r30, 0x00	; 0
    5660:	09 f0       	breq	.+2      	; 0x5664 <__vector_53+0x34>
    5662:	19 95       	eicall
    5664:	ff 91       	pop	r31
    5666:	ef 91       	pop	r30
    5668:	bf 91       	pop	r27
    566a:	af 91       	pop	r26
    566c:	9f 91       	pop	r25
    566e:	8f 91       	pop	r24
    5670:	7f 91       	pop	r23
    5672:	6f 91       	pop	r22
    5674:	5f 91       	pop	r21
    5676:	4f 91       	pop	r20
    5678:	3f 91       	pop	r19
    567a:	2f 91       	pop	r18
    567c:	0f 90       	pop	r0
    567e:	0b be       	out	0x3b, r0	; 59
    5680:	0f 90       	pop	r0
    5682:	0f be       	out	0x3f, r0	; 63
    5684:	0f 90       	pop	r0
    5686:	1f 90       	pop	r1
    5688:	18 95       	reti

0000568a <__vector_54>:
    568a:	1f 92       	push	r1
    568c:	0f 92       	push	r0
    568e:	0f b6       	in	r0, 0x3f	; 63
    5690:	0f 92       	push	r0
    5692:	11 24       	eor	r1, r1
    5694:	0b b6       	in	r0, 0x3b	; 59
    5696:	0f 92       	push	r0
    5698:	2f 93       	push	r18
    569a:	3f 93       	push	r19
    569c:	4f 93       	push	r20
    569e:	5f 93       	push	r21
    56a0:	6f 93       	push	r22
    56a2:	7f 93       	push	r23
    56a4:	8f 93       	push	r24
    56a6:	9f 93       	push	r25
    56a8:	af 93       	push	r26
    56aa:	bf 93       	push	r27
    56ac:	ef 93       	push	r30
    56ae:	ff 93       	push	r31
    56b0:	e0 91 08 2a 	lds	r30, 0x2A08	; 0x802a08 <tc_tce1_err_callback>
    56b4:	f0 91 09 2a 	lds	r31, 0x2A09	; 0x802a09 <tc_tce1_err_callback+0x1>
    56b8:	30 97       	sbiw	r30, 0x00	; 0
    56ba:	09 f0       	breq	.+2      	; 0x56be <__vector_54+0x34>
    56bc:	19 95       	eicall
    56be:	ff 91       	pop	r31
    56c0:	ef 91       	pop	r30
    56c2:	bf 91       	pop	r27
    56c4:	af 91       	pop	r26
    56c6:	9f 91       	pop	r25
    56c8:	8f 91       	pop	r24
    56ca:	7f 91       	pop	r23
    56cc:	6f 91       	pop	r22
    56ce:	5f 91       	pop	r21
    56d0:	4f 91       	pop	r20
    56d2:	3f 91       	pop	r19
    56d4:	2f 91       	pop	r18
    56d6:	0f 90       	pop	r0
    56d8:	0b be       	out	0x3b, r0	; 59
    56da:	0f 90       	pop	r0
    56dc:	0f be       	out	0x3f, r0	; 63
    56de:	0f 90       	pop	r0
    56e0:	1f 90       	pop	r1
    56e2:	18 95       	reti

000056e4 <__vector_55>:
    56e4:	1f 92       	push	r1
    56e6:	0f 92       	push	r0
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	0f 92       	push	r0
    56ec:	11 24       	eor	r1, r1
    56ee:	0b b6       	in	r0, 0x3b	; 59
    56f0:	0f 92       	push	r0
    56f2:	2f 93       	push	r18
    56f4:	3f 93       	push	r19
    56f6:	4f 93       	push	r20
    56f8:	5f 93       	push	r21
    56fa:	6f 93       	push	r22
    56fc:	7f 93       	push	r23
    56fe:	8f 93       	push	r24
    5700:	9f 93       	push	r25
    5702:	af 93       	push	r26
    5704:	bf 93       	push	r27
    5706:	ef 93       	push	r30
    5708:	ff 93       	push	r31
    570a:	e0 91 06 2a 	lds	r30, 0x2A06	; 0x802a06 <tc_tce1_cca_callback>
    570e:	f0 91 07 2a 	lds	r31, 0x2A07	; 0x802a07 <tc_tce1_cca_callback+0x1>
    5712:	30 97       	sbiw	r30, 0x00	; 0
    5714:	09 f0       	breq	.+2      	; 0x5718 <__vector_55+0x34>
    5716:	19 95       	eicall
    5718:	ff 91       	pop	r31
    571a:	ef 91       	pop	r30
    571c:	bf 91       	pop	r27
    571e:	af 91       	pop	r26
    5720:	9f 91       	pop	r25
    5722:	8f 91       	pop	r24
    5724:	7f 91       	pop	r23
    5726:	6f 91       	pop	r22
    5728:	5f 91       	pop	r21
    572a:	4f 91       	pop	r20
    572c:	3f 91       	pop	r19
    572e:	2f 91       	pop	r18
    5730:	0f 90       	pop	r0
    5732:	0b be       	out	0x3b, r0	; 59
    5734:	0f 90       	pop	r0
    5736:	0f be       	out	0x3f, r0	; 63
    5738:	0f 90       	pop	r0
    573a:	1f 90       	pop	r1
    573c:	18 95       	reti

0000573e <__vector_56>:
    573e:	1f 92       	push	r1
    5740:	0f 92       	push	r0
    5742:	0f b6       	in	r0, 0x3f	; 63
    5744:	0f 92       	push	r0
    5746:	11 24       	eor	r1, r1
    5748:	0b b6       	in	r0, 0x3b	; 59
    574a:	0f 92       	push	r0
    574c:	2f 93       	push	r18
    574e:	3f 93       	push	r19
    5750:	4f 93       	push	r20
    5752:	5f 93       	push	r21
    5754:	6f 93       	push	r22
    5756:	7f 93       	push	r23
    5758:	8f 93       	push	r24
    575a:	9f 93       	push	r25
    575c:	af 93       	push	r26
    575e:	bf 93       	push	r27
    5760:	ef 93       	push	r30
    5762:	ff 93       	push	r31
    5764:	e0 91 04 2a 	lds	r30, 0x2A04	; 0x802a04 <tc_tce1_ccb_callback>
    5768:	f0 91 05 2a 	lds	r31, 0x2A05	; 0x802a05 <tc_tce1_ccb_callback+0x1>
    576c:	30 97       	sbiw	r30, 0x00	; 0
    576e:	09 f0       	breq	.+2      	; 0x5772 <__vector_56+0x34>
    5770:	19 95       	eicall
    5772:	ff 91       	pop	r31
    5774:	ef 91       	pop	r30
    5776:	bf 91       	pop	r27
    5778:	af 91       	pop	r26
    577a:	9f 91       	pop	r25
    577c:	8f 91       	pop	r24
    577e:	7f 91       	pop	r23
    5780:	6f 91       	pop	r22
    5782:	5f 91       	pop	r21
    5784:	4f 91       	pop	r20
    5786:	3f 91       	pop	r19
    5788:	2f 91       	pop	r18
    578a:	0f 90       	pop	r0
    578c:	0b be       	out	0x3b, r0	; 59
    578e:	0f 90       	pop	r0
    5790:	0f be       	out	0x3f, r0	; 63
    5792:	0f 90       	pop	r0
    5794:	1f 90       	pop	r1
    5796:	18 95       	reti

00005798 <__vector_108>:
    5798:	1f 92       	push	r1
    579a:	0f 92       	push	r0
    579c:	0f b6       	in	r0, 0x3f	; 63
    579e:	0f 92       	push	r0
    57a0:	11 24       	eor	r1, r1
    57a2:	0b b6       	in	r0, 0x3b	; 59
    57a4:	0f 92       	push	r0
    57a6:	2f 93       	push	r18
    57a8:	3f 93       	push	r19
    57aa:	4f 93       	push	r20
    57ac:	5f 93       	push	r21
    57ae:	6f 93       	push	r22
    57b0:	7f 93       	push	r23
    57b2:	8f 93       	push	r24
    57b4:	9f 93       	push	r25
    57b6:	af 93       	push	r26
    57b8:	bf 93       	push	r27
    57ba:	ef 93       	push	r30
    57bc:	ff 93       	push	r31
    57be:	e0 91 02 2a 	lds	r30, 0x2A02	; 0x802a02 <tc_tcf0_ovf_callback>
    57c2:	f0 91 03 2a 	lds	r31, 0x2A03	; 0x802a03 <tc_tcf0_ovf_callback+0x1>
    57c6:	30 97       	sbiw	r30, 0x00	; 0
    57c8:	09 f0       	breq	.+2      	; 0x57cc <__vector_108+0x34>
    57ca:	19 95       	eicall
    57cc:	ff 91       	pop	r31
    57ce:	ef 91       	pop	r30
    57d0:	bf 91       	pop	r27
    57d2:	af 91       	pop	r26
    57d4:	9f 91       	pop	r25
    57d6:	8f 91       	pop	r24
    57d8:	7f 91       	pop	r23
    57da:	6f 91       	pop	r22
    57dc:	5f 91       	pop	r21
    57de:	4f 91       	pop	r20
    57e0:	3f 91       	pop	r19
    57e2:	2f 91       	pop	r18
    57e4:	0f 90       	pop	r0
    57e6:	0b be       	out	0x3b, r0	; 59
    57e8:	0f 90       	pop	r0
    57ea:	0f be       	out	0x3f, r0	; 63
    57ec:	0f 90       	pop	r0
    57ee:	1f 90       	pop	r1
    57f0:	18 95       	reti

000057f2 <__vector_109>:
    57f2:	1f 92       	push	r1
    57f4:	0f 92       	push	r0
    57f6:	0f b6       	in	r0, 0x3f	; 63
    57f8:	0f 92       	push	r0
    57fa:	11 24       	eor	r1, r1
    57fc:	0b b6       	in	r0, 0x3b	; 59
    57fe:	0f 92       	push	r0
    5800:	2f 93       	push	r18
    5802:	3f 93       	push	r19
    5804:	4f 93       	push	r20
    5806:	5f 93       	push	r21
    5808:	6f 93       	push	r22
    580a:	7f 93       	push	r23
    580c:	8f 93       	push	r24
    580e:	9f 93       	push	r25
    5810:	af 93       	push	r26
    5812:	bf 93       	push	r27
    5814:	ef 93       	push	r30
    5816:	ff 93       	push	r31
    5818:	e0 91 00 2a 	lds	r30, 0x2A00	; 0x802a00 <tc_tcf0_err_callback>
    581c:	f0 91 01 2a 	lds	r31, 0x2A01	; 0x802a01 <tc_tcf0_err_callback+0x1>
    5820:	30 97       	sbiw	r30, 0x00	; 0
    5822:	09 f0       	breq	.+2      	; 0x5826 <__vector_109+0x34>
    5824:	19 95       	eicall
    5826:	ff 91       	pop	r31
    5828:	ef 91       	pop	r30
    582a:	bf 91       	pop	r27
    582c:	af 91       	pop	r26
    582e:	9f 91       	pop	r25
    5830:	8f 91       	pop	r24
    5832:	7f 91       	pop	r23
    5834:	6f 91       	pop	r22
    5836:	5f 91       	pop	r21
    5838:	4f 91       	pop	r20
    583a:	3f 91       	pop	r19
    583c:	2f 91       	pop	r18
    583e:	0f 90       	pop	r0
    5840:	0b be       	out	0x3b, r0	; 59
    5842:	0f 90       	pop	r0
    5844:	0f be       	out	0x3f, r0	; 63
    5846:	0f 90       	pop	r0
    5848:	1f 90       	pop	r1
    584a:	18 95       	reti

0000584c <__vector_110>:
    584c:	1f 92       	push	r1
    584e:	0f 92       	push	r0
    5850:	0f b6       	in	r0, 0x3f	; 63
    5852:	0f 92       	push	r0
    5854:	11 24       	eor	r1, r1
    5856:	0b b6       	in	r0, 0x3b	; 59
    5858:	0f 92       	push	r0
    585a:	2f 93       	push	r18
    585c:	3f 93       	push	r19
    585e:	4f 93       	push	r20
    5860:	5f 93       	push	r21
    5862:	6f 93       	push	r22
    5864:	7f 93       	push	r23
    5866:	8f 93       	push	r24
    5868:	9f 93       	push	r25
    586a:	af 93       	push	r26
    586c:	bf 93       	push	r27
    586e:	ef 93       	push	r30
    5870:	ff 93       	push	r31
    5872:	e0 91 fe 29 	lds	r30, 0x29FE	; 0x8029fe <tc_tcf0_cca_callback>
    5876:	f0 91 ff 29 	lds	r31, 0x29FF	; 0x8029ff <tc_tcf0_cca_callback+0x1>
    587a:	30 97       	sbiw	r30, 0x00	; 0
    587c:	09 f0       	breq	.+2      	; 0x5880 <__vector_110+0x34>
    587e:	19 95       	eicall
    5880:	ff 91       	pop	r31
    5882:	ef 91       	pop	r30
    5884:	bf 91       	pop	r27
    5886:	af 91       	pop	r26
    5888:	9f 91       	pop	r25
    588a:	8f 91       	pop	r24
    588c:	7f 91       	pop	r23
    588e:	6f 91       	pop	r22
    5890:	5f 91       	pop	r21
    5892:	4f 91       	pop	r20
    5894:	3f 91       	pop	r19
    5896:	2f 91       	pop	r18
    5898:	0f 90       	pop	r0
    589a:	0b be       	out	0x3b, r0	; 59
    589c:	0f 90       	pop	r0
    589e:	0f be       	out	0x3f, r0	; 63
    58a0:	0f 90       	pop	r0
    58a2:	1f 90       	pop	r1
    58a4:	18 95       	reti

000058a6 <__vector_111>:
    58a6:	1f 92       	push	r1
    58a8:	0f 92       	push	r0
    58aa:	0f b6       	in	r0, 0x3f	; 63
    58ac:	0f 92       	push	r0
    58ae:	11 24       	eor	r1, r1
    58b0:	0b b6       	in	r0, 0x3b	; 59
    58b2:	0f 92       	push	r0
    58b4:	2f 93       	push	r18
    58b6:	3f 93       	push	r19
    58b8:	4f 93       	push	r20
    58ba:	5f 93       	push	r21
    58bc:	6f 93       	push	r22
    58be:	7f 93       	push	r23
    58c0:	8f 93       	push	r24
    58c2:	9f 93       	push	r25
    58c4:	af 93       	push	r26
    58c6:	bf 93       	push	r27
    58c8:	ef 93       	push	r30
    58ca:	ff 93       	push	r31
    58cc:	e0 91 fc 29 	lds	r30, 0x29FC	; 0x8029fc <tc_tcf0_ccb_callback>
    58d0:	f0 91 fd 29 	lds	r31, 0x29FD	; 0x8029fd <tc_tcf0_ccb_callback+0x1>
    58d4:	30 97       	sbiw	r30, 0x00	; 0
    58d6:	09 f0       	breq	.+2      	; 0x58da <__vector_111+0x34>
    58d8:	19 95       	eicall
    58da:	ff 91       	pop	r31
    58dc:	ef 91       	pop	r30
    58de:	bf 91       	pop	r27
    58e0:	af 91       	pop	r26
    58e2:	9f 91       	pop	r25
    58e4:	8f 91       	pop	r24
    58e6:	7f 91       	pop	r23
    58e8:	6f 91       	pop	r22
    58ea:	5f 91       	pop	r21
    58ec:	4f 91       	pop	r20
    58ee:	3f 91       	pop	r19
    58f0:	2f 91       	pop	r18
    58f2:	0f 90       	pop	r0
    58f4:	0b be       	out	0x3b, r0	; 59
    58f6:	0f 90       	pop	r0
    58f8:	0f be       	out	0x3f, r0	; 63
    58fa:	0f 90       	pop	r0
    58fc:	1f 90       	pop	r1
    58fe:	18 95       	reti

00005900 <__vector_112>:
    5900:	1f 92       	push	r1
    5902:	0f 92       	push	r0
    5904:	0f b6       	in	r0, 0x3f	; 63
    5906:	0f 92       	push	r0
    5908:	11 24       	eor	r1, r1
    590a:	0b b6       	in	r0, 0x3b	; 59
    590c:	0f 92       	push	r0
    590e:	2f 93       	push	r18
    5910:	3f 93       	push	r19
    5912:	4f 93       	push	r20
    5914:	5f 93       	push	r21
    5916:	6f 93       	push	r22
    5918:	7f 93       	push	r23
    591a:	8f 93       	push	r24
    591c:	9f 93       	push	r25
    591e:	af 93       	push	r26
    5920:	bf 93       	push	r27
    5922:	ef 93       	push	r30
    5924:	ff 93       	push	r31
    5926:	e0 91 fa 29 	lds	r30, 0x29FA	; 0x8029fa <tc_tcf0_ccc_callback>
    592a:	f0 91 fb 29 	lds	r31, 0x29FB	; 0x8029fb <tc_tcf0_ccc_callback+0x1>
    592e:	30 97       	sbiw	r30, 0x00	; 0
    5930:	09 f0       	breq	.+2      	; 0x5934 <__vector_112+0x34>
    5932:	19 95       	eicall
    5934:	ff 91       	pop	r31
    5936:	ef 91       	pop	r30
    5938:	bf 91       	pop	r27
    593a:	af 91       	pop	r26
    593c:	9f 91       	pop	r25
    593e:	8f 91       	pop	r24
    5940:	7f 91       	pop	r23
    5942:	6f 91       	pop	r22
    5944:	5f 91       	pop	r21
    5946:	4f 91       	pop	r20
    5948:	3f 91       	pop	r19
    594a:	2f 91       	pop	r18
    594c:	0f 90       	pop	r0
    594e:	0b be       	out	0x3b, r0	; 59
    5950:	0f 90       	pop	r0
    5952:	0f be       	out	0x3f, r0	; 63
    5954:	0f 90       	pop	r0
    5956:	1f 90       	pop	r1
    5958:	18 95       	reti

0000595a <__vector_113>:
    595a:	1f 92       	push	r1
    595c:	0f 92       	push	r0
    595e:	0f b6       	in	r0, 0x3f	; 63
    5960:	0f 92       	push	r0
    5962:	11 24       	eor	r1, r1
    5964:	0b b6       	in	r0, 0x3b	; 59
    5966:	0f 92       	push	r0
    5968:	2f 93       	push	r18
    596a:	3f 93       	push	r19
    596c:	4f 93       	push	r20
    596e:	5f 93       	push	r21
    5970:	6f 93       	push	r22
    5972:	7f 93       	push	r23
    5974:	8f 93       	push	r24
    5976:	9f 93       	push	r25
    5978:	af 93       	push	r26
    597a:	bf 93       	push	r27
    597c:	ef 93       	push	r30
    597e:	ff 93       	push	r31
    5980:	e0 91 f8 29 	lds	r30, 0x29F8	; 0x8029f8 <tc_tcf0_ccd_callback>
    5984:	f0 91 f9 29 	lds	r31, 0x29F9	; 0x8029f9 <tc_tcf0_ccd_callback+0x1>
    5988:	30 97       	sbiw	r30, 0x00	; 0
    598a:	09 f0       	breq	.+2      	; 0x598e <__vector_113+0x34>
    598c:	19 95       	eicall
    598e:	ff 91       	pop	r31
    5990:	ef 91       	pop	r30
    5992:	bf 91       	pop	r27
    5994:	af 91       	pop	r26
    5996:	9f 91       	pop	r25
    5998:	8f 91       	pop	r24
    599a:	7f 91       	pop	r23
    599c:	6f 91       	pop	r22
    599e:	5f 91       	pop	r21
    59a0:	4f 91       	pop	r20
    59a2:	3f 91       	pop	r19
    59a4:	2f 91       	pop	r18
    59a6:	0f 90       	pop	r0
    59a8:	0b be       	out	0x3b, r0	; 59
    59aa:	0f 90       	pop	r0
    59ac:	0f be       	out	0x3f, r0	; 63
    59ae:	0f 90       	pop	r0
    59b0:	1f 90       	pop	r1
    59b2:	18 95       	reti

000059b4 <tc_enable>:
    59b4:	1f 93       	push	r17
    59b6:	cf 93       	push	r28
    59b8:	df 93       	push	r29
    59ba:	1f 92       	push	r1
    59bc:	1f 92       	push	r1
    59be:	cd b7       	in	r28, 0x3d	; 61
    59c0:	de b7       	in	r29, 0x3e	; 62
    59c2:	2f b7       	in	r18, 0x3f	; 63
    59c4:	2a 83       	std	Y+2, r18	; 0x02
    59c6:	f8 94       	cli
    59c8:	1a 81       	ldd	r17, Y+2	; 0x02
    59ca:	28 2f       	mov	r18, r24
    59cc:	39 2f       	mov	r19, r25
    59ce:	21 15       	cp	r18, r1
    59d0:	88 e0       	ldi	r24, 0x08	; 8
    59d2:	38 07       	cpc	r19, r24
    59d4:	49 f4       	brne	.+18     	; 0x59e8 <tc_enable+0x34>
    59d6:	61 e0       	ldi	r22, 0x01	; 1
    59d8:	83 e0       	ldi	r24, 0x03	; 3
    59da:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    59de:	64 e0       	ldi	r22, 0x04	; 4
    59e0:	83 e0       	ldi	r24, 0x03	; 3
    59e2:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    59e6:	4f c0       	rjmp	.+158    	; 0x5a86 <tc_enable+0xd2>
    59e8:	20 34       	cpi	r18, 0x40	; 64
    59ea:	88 e0       	ldi	r24, 0x08	; 8
    59ec:	38 07       	cpc	r19, r24
    59ee:	49 f4       	brne	.+18     	; 0x5a02 <tc_enable+0x4e>
    59f0:	62 e0       	ldi	r22, 0x02	; 2
    59f2:	83 e0       	ldi	r24, 0x03	; 3
    59f4:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    59f8:	64 e0       	ldi	r22, 0x04	; 4
    59fa:	83 e0       	ldi	r24, 0x03	; 3
    59fc:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a00:	42 c0       	rjmp	.+132    	; 0x5a86 <tc_enable+0xd2>
    5a02:	21 15       	cp	r18, r1
    5a04:	89 e0       	ldi	r24, 0x09	; 9
    5a06:	38 07       	cpc	r19, r24
    5a08:	49 f4       	brne	.+18     	; 0x5a1c <tc_enable+0x68>
    5a0a:	61 e0       	ldi	r22, 0x01	; 1
    5a0c:	84 e0       	ldi	r24, 0x04	; 4
    5a0e:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a12:	64 e0       	ldi	r22, 0x04	; 4
    5a14:	84 e0       	ldi	r24, 0x04	; 4
    5a16:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a1a:	35 c0       	rjmp	.+106    	; 0x5a86 <tc_enable+0xd2>
    5a1c:	20 34       	cpi	r18, 0x40	; 64
    5a1e:	89 e0       	ldi	r24, 0x09	; 9
    5a20:	38 07       	cpc	r19, r24
    5a22:	49 f4       	brne	.+18     	; 0x5a36 <tc_enable+0x82>
    5a24:	62 e0       	ldi	r22, 0x02	; 2
    5a26:	84 e0       	ldi	r24, 0x04	; 4
    5a28:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a2c:	64 e0       	ldi	r22, 0x04	; 4
    5a2e:	84 e0       	ldi	r24, 0x04	; 4
    5a30:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a34:	28 c0       	rjmp	.+80     	; 0x5a86 <tc_enable+0xd2>
    5a36:	21 15       	cp	r18, r1
    5a38:	8a e0       	ldi	r24, 0x0A	; 10
    5a3a:	38 07       	cpc	r19, r24
    5a3c:	49 f4       	brne	.+18     	; 0x5a50 <tc_enable+0x9c>
    5a3e:	61 e0       	ldi	r22, 0x01	; 1
    5a40:	85 e0       	ldi	r24, 0x05	; 5
    5a42:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a46:	64 e0       	ldi	r22, 0x04	; 4
    5a48:	85 e0       	ldi	r24, 0x05	; 5
    5a4a:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a4e:	1b c0       	rjmp	.+54     	; 0x5a86 <tc_enable+0xd2>
    5a50:	20 34       	cpi	r18, 0x40	; 64
    5a52:	8a e0       	ldi	r24, 0x0A	; 10
    5a54:	38 07       	cpc	r19, r24
    5a56:	49 f4       	brne	.+18     	; 0x5a6a <tc_enable+0xb6>
    5a58:	62 e0       	ldi	r22, 0x02	; 2
    5a5a:	85 e0       	ldi	r24, 0x05	; 5
    5a5c:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a60:	64 e0       	ldi	r22, 0x04	; 4
    5a62:	85 e0       	ldi	r24, 0x05	; 5
    5a64:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a68:	0e c0       	rjmp	.+28     	; 0x5a86 <tc_enable+0xd2>
    5a6a:	21 15       	cp	r18, r1
    5a6c:	3b 40       	sbci	r19, 0x0B	; 11
    5a6e:	49 f4       	brne	.+18     	; 0x5a82 <tc_enable+0xce>
    5a70:	61 e0       	ldi	r22, 0x01	; 1
    5a72:	86 e0       	ldi	r24, 0x06	; 6
    5a74:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a78:	64 e0       	ldi	r22, 0x04	; 4
    5a7a:	86 e0       	ldi	r24, 0x06	; 6
    5a7c:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5a80:	02 c0       	rjmp	.+4      	; 0x5a86 <tc_enable+0xd2>
    5a82:	1f bf       	out	0x3f, r17	; 63
    5a84:	10 c0       	rjmp	.+32     	; 0x5aa6 <tc_enable+0xf2>
    5a86:	80 91 76 2b 	lds	r24, 0x2B76	; 0x802b76 <sleepmgr_locks+0x1>
    5a8a:	8f 3f       	cpi	r24, 0xFF	; 255
    5a8c:	09 f4       	brne	.+2      	; 0x5a90 <tc_enable+0xdc>
    5a8e:	ff cf       	rjmp	.-2      	; 0x5a8e <tc_enable+0xda>
    5a90:	8f b7       	in	r24, 0x3f	; 63
    5a92:	89 83       	std	Y+1, r24	; 0x01
    5a94:	f8 94       	cli
    5a96:	99 81       	ldd	r25, Y+1	; 0x01
    5a98:	e5 e7       	ldi	r30, 0x75	; 117
    5a9a:	fb e2       	ldi	r31, 0x2B	; 43
    5a9c:	81 81       	ldd	r24, Z+1	; 0x01
    5a9e:	8f 5f       	subi	r24, 0xFF	; 255
    5aa0:	81 83       	std	Z+1, r24	; 0x01
    5aa2:	9f bf       	out	0x3f, r25	; 63
    5aa4:	1f bf       	out	0x3f, r17	; 63
    5aa6:	0f 90       	pop	r0
    5aa8:	0f 90       	pop	r0
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	1f 91       	pop	r17
    5ab0:	08 95       	ret

00005ab2 <tc_set_cca_interrupt_callback>:
}

void tc_set_cca_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    5ab2:	81 15       	cp	r24, r1
    5ab4:	28 e0       	ldi	r18, 0x08	; 8
    5ab6:	92 07       	cpc	r25, r18
    5ab8:	29 f4       	brne	.+10     	; 0x5ac4 <tc_set_cca_interrupt_callback+0x12>
		tc_tcc0_cca_callback = callback;
    5aba:	60 93 3a 2a 	sts	0x2A3A, r22	; 0x802a3a <tc_tcc0_cca_callback>
    5abe:	70 93 3b 2a 	sts	0x2A3B, r23	; 0x802a3b <tc_tcc0_cca_callback+0x1>
    5ac2:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    5ac4:	80 34       	cpi	r24, 0x40	; 64
    5ac6:	28 e0       	ldi	r18, 0x08	; 8
    5ac8:	92 07       	cpc	r25, r18
    5aca:	29 f4       	brne	.+10     	; 0x5ad6 <tc_set_cca_interrupt_callback+0x24>
		tc_tcc1_cca_callback = callback;
    5acc:	60 93 2e 2a 	sts	0x2A2E, r22	; 0x802a2e <tc_tcc1_cca_callback>
    5ad0:	70 93 2f 2a 	sts	0x2A2F, r23	; 0x802a2f <tc_tcc1_cca_callback+0x1>
    5ad4:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    5ad6:	81 15       	cp	r24, r1
    5ad8:	29 e0       	ldi	r18, 0x09	; 9
    5ada:	92 07       	cpc	r25, r18
    5adc:	29 f4       	brne	.+10     	; 0x5ae8 <tc_set_cca_interrupt_callback+0x36>
		tc_tcd0_cca_callback = callback;
    5ade:	60 93 26 2a 	sts	0x2A26, r22	; 0x802a26 <tc_tcd0_cca_callback>
    5ae2:	70 93 27 2a 	sts	0x2A27, r23	; 0x802a27 <tc_tcd0_cca_callback+0x1>
    5ae6:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    5ae8:	80 34       	cpi	r24, 0x40	; 64
    5aea:	29 e0       	ldi	r18, 0x09	; 9
    5aec:	92 07       	cpc	r25, r18
    5aee:	29 f4       	brne	.+10     	; 0x5afa <tc_set_cca_interrupt_callback+0x48>
		tc_tcd1_cca_callback = callback;
    5af0:	60 93 1a 2a 	sts	0x2A1A, r22	; 0x802a1a <tc_tcd1_cca_callback>
    5af4:	70 93 1b 2a 	sts	0x2A1B, r23	; 0x802a1b <tc_tcd1_cca_callback+0x1>
    5af8:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    5afa:	81 15       	cp	r24, r1
    5afc:	2a e0       	ldi	r18, 0x0A	; 10
    5afe:	92 07       	cpc	r25, r18
    5b00:	29 f4       	brne	.+10     	; 0x5b0c <tc_set_cca_interrupt_callback+0x5a>
		tc_tce0_cca_callback = callback;
    5b02:	60 93 12 2a 	sts	0x2A12, r22	; 0x802a12 <tc_tce0_cca_callback>
    5b06:	70 93 13 2a 	sts	0x2A13, r23	; 0x802a13 <tc_tce0_cca_callback+0x1>
    5b0a:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    5b0c:	80 34       	cpi	r24, 0x40	; 64
    5b0e:	2a e0       	ldi	r18, 0x0A	; 10
    5b10:	92 07       	cpc	r25, r18
    5b12:	29 f4       	brne	.+10     	; 0x5b1e <tc_set_cca_interrupt_callback+0x6c>
		tc_tce1_cca_callback = callback;
    5b14:	60 93 06 2a 	sts	0x2A06, r22	; 0x802a06 <tc_tce1_cca_callback>
    5b18:	70 93 07 2a 	sts	0x2A07, r23	; 0x802a07 <tc_tce1_cca_callback+0x1>
    5b1c:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    5b1e:	81 15       	cp	r24, r1
    5b20:	9b 40       	sbci	r25, 0x0B	; 11
    5b22:	21 f4       	brne	.+8      	; 0x5b2c <tc_set_cca_interrupt_callback+0x7a>
		tc_tcf0_cca_callback = callback;
    5b24:	60 93 fe 29 	sts	0x29FE, r22	; 0x8029fe <tc_tcf0_cca_callback>
    5b28:	70 93 ff 29 	sts	0x29FF, r23	; 0x8029ff <tc_tcf0_cca_callback+0x1>
    5b2c:	08 95       	ret

00005b2e <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    5b2e:	cf 92       	push	r12
    5b30:	df 92       	push	r13
    5b32:	ef 92       	push	r14
    5b34:	ff 92       	push	r15
    5b36:	0f 93       	push	r16
    5b38:	1f 93       	push	r17
    5b3a:	cf 93       	push	r28
    5b3c:	df 93       	push	r29
    5b3e:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    5b40:	d9 01       	movw	r26, r18
    5b42:	c8 01       	movw	r24, r16
    5b44:	b6 95       	lsr	r27
    5b46:	a7 95       	ror	r26
    5b48:	97 95       	ror	r25
    5b4a:	87 95       	ror	r24
    5b4c:	48 17       	cp	r20, r24
    5b4e:	59 07       	cpc	r21, r25
    5b50:	6a 07       	cpc	r22, r26
    5b52:	7b 07       	cpc	r23, r27
    5b54:	78 f4       	brcc	.+30     	; 0x5b74 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    5b56:	6a 01       	movw	r12, r20
    5b58:	7b 01       	movw	r14, r22
    5b5a:	cc 0c       	add	r12, r12
    5b5c:	dd 1c       	adc	r13, r13
    5b5e:	ee 1c       	adc	r14, r14
    5b60:	ff 1c       	adc	r15, r15
    5b62:	c9 01       	movw	r24, r18
    5b64:	b8 01       	movw	r22, r16
    5b66:	a7 01       	movw	r20, r14
    5b68:	96 01       	movw	r18, r12
    5b6a:	0e 94 f5 41 	call	0x83ea	; 0x83ea <__udivmodsi4>
    5b6e:	21 50       	subi	r18, 0x01	; 1
    5b70:	31 09       	sbc	r19, r1
    5b72:	02 c0       	rjmp	.+4      	; 0x5b78 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    5b74:	20 e0       	ldi	r18, 0x00	; 0
    5b76:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    5b78:	83 2f       	mov	r24, r19
    5b7a:	8f 70       	andi	r24, 0x0F	; 15
    5b7c:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    5b7e:	2e 83       	std	Y+6, r18	; 0x06
}
    5b80:	df 91       	pop	r29
    5b82:	cf 91       	pop	r28
    5b84:	1f 91       	pop	r17
    5b86:	0f 91       	pop	r16
    5b88:	ff 90       	pop	r15
    5b8a:	ef 90       	pop	r14
    5b8c:	df 90       	pop	r13
    5b8e:	cf 90       	pop	r12
    5b90:	08 95       	ret

00005b92 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    5b92:	df 92       	push	r13
    5b94:	ef 92       	push	r14
    5b96:	ff 92       	push	r15
    5b98:	0f 93       	push	r16
    5b9a:	1f 93       	push	r17
    5b9c:	cf 93       	push	r28
    5b9e:	df 93       	push	r29
    5ba0:	1f 92       	push	r1
    5ba2:	cd b7       	in	r28, 0x3d	; 61
    5ba4:	de b7       	in	r29, 0x3e	; 62
    5ba6:	7c 01       	movw	r14, r24
    5ba8:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    5baa:	00 97       	sbiw	r24, 0x00	; 0
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <usart_init_spi+0x1e>
    5bae:	cf c1       	rjmp	.+926    	; 0x5f4e <usart_init_spi+0x3bc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    5bb0:	80 3c       	cpi	r24, 0xC0	; 192
    5bb2:	91 05       	cpc	r25, r1
    5bb4:	29 f4       	brne	.+10     	; 0x5bc0 <usart_init_spi+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    5bb6:	60 e1       	ldi	r22, 0x10	; 16
    5bb8:	80 e0       	ldi	r24, 0x00	; 0
    5bba:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5bbe:	c7 c1       	rjmp	.+910    	; 0x5f4e <usart_init_spi+0x3bc>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    5bc0:	80 e8       	ldi	r24, 0x80	; 128
    5bc2:	e8 16       	cp	r14, r24
    5bc4:	81 e0       	ldi	r24, 0x01	; 1
    5bc6:	f8 06       	cpc	r15, r24
    5bc8:	29 f4       	brne	.+10     	; 0x5bd4 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    5bca:	62 e0       	ldi	r22, 0x02	; 2
    5bcc:	80 e0       	ldi	r24, 0x00	; 0
    5bce:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5bd2:	bd c1       	rjmp	.+890    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    5bd4:	e1 14       	cp	r14, r1
    5bd6:	e1 e0       	ldi	r30, 0x01	; 1
    5bd8:	fe 06       	cpc	r15, r30
    5bda:	29 f4       	brne	.+10     	; 0x5be6 <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    5bdc:	61 e0       	ldi	r22, 0x01	; 1
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5be4:	b4 c1       	rjmp	.+872    	; 0x5f4e <usart_init_spi+0x3bc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    5be6:	f0 e8       	ldi	r31, 0x80	; 128
    5be8:	ef 16       	cp	r14, r31
    5bea:	f3 e0       	ldi	r31, 0x03	; 3
    5bec:	ff 06       	cpc	r15, r31
    5bee:	29 f4       	brne	.+10     	; 0x5bfa <usart_init_spi+0x68>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    5bf0:	61 e0       	ldi	r22, 0x01	; 1
    5bf2:	81 e0       	ldi	r24, 0x01	; 1
    5bf4:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5bf8:	aa c1       	rjmp	.+852    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    5bfa:	30 e9       	ldi	r19, 0x90	; 144
    5bfc:	e3 16       	cp	r14, r19
    5bfe:	33 e0       	ldi	r19, 0x03	; 3
    5c00:	f3 06       	cpc	r15, r19
    5c02:	29 f4       	brne	.+10     	; 0x5c0e <usart_init_spi+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    5c04:	61 e0       	ldi	r22, 0x01	; 1
    5c06:	82 e0       	ldi	r24, 0x02	; 2
    5c08:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5c0c:	a0 c1       	rjmp	.+832    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    5c0e:	e1 14       	cp	r14, r1
    5c10:	82 e0       	ldi	r24, 0x02	; 2
    5c12:	f8 06       	cpc	r15, r24
    5c14:	29 f4       	brne	.+10     	; 0x5c20 <usart_init_spi+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    5c16:	62 e0       	ldi	r22, 0x02	; 2
    5c18:	81 e0       	ldi	r24, 0x01	; 1
    5c1a:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5c1e:	97 c1       	rjmp	.+814    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    5c20:	e0 e4       	ldi	r30, 0x40	; 64
    5c22:	ee 16       	cp	r14, r30
    5c24:	e2 e0       	ldi	r30, 0x02	; 2
    5c26:	fe 06       	cpc	r15, r30
    5c28:	29 f4       	brne	.+10     	; 0x5c34 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    5c2a:	62 e0       	ldi	r22, 0x02	; 2
    5c2c:	82 e0       	ldi	r24, 0x02	; 2
    5c2e:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5c32:	8d c1       	rjmp	.+794    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    5c34:	f0 e2       	ldi	r31, 0x20	; 32
    5c36:	ef 16       	cp	r14, r31
    5c38:	f3 e0       	ldi	r31, 0x03	; 3
    5c3a:	ff 06       	cpc	r15, r31
    5c3c:	29 f4       	brne	.+10     	; 0x5c48 <usart_init_spi+0xb6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    5c3e:	64 e0       	ldi	r22, 0x04	; 4
    5c40:	82 e0       	ldi	r24, 0x02	; 2
    5c42:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5c46:	83 c1       	rjmp	.+774    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    5c48:	e1 14       	cp	r14, r1
    5c4a:	38 e0       	ldi	r19, 0x08	; 8
    5c4c:	f3 06       	cpc	r15, r19
    5c4e:	29 f4       	brne	.+10     	; 0x5c5a <usart_init_spi+0xc8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    5c50:	61 e0       	ldi	r22, 0x01	; 1
    5c52:	83 e0       	ldi	r24, 0x03	; 3
    5c54:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5c58:	7a c1       	rjmp	.+756    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    5c5a:	e1 14       	cp	r14, r1
    5c5c:	89 e0       	ldi	r24, 0x09	; 9
    5c5e:	f8 06       	cpc	r15, r24
    5c60:	29 f4       	brne	.+10     	; 0x5c6c <usart_init_spi+0xda>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    5c62:	61 e0       	ldi	r22, 0x01	; 1
    5c64:	84 e0       	ldi	r24, 0x04	; 4
    5c66:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5c6a:	71 c1       	rjmp	.+738    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    5c6c:	e1 14       	cp	r14, r1
    5c6e:	ea e0       	ldi	r30, 0x0A	; 10
    5c70:	fe 06       	cpc	r15, r30
    5c72:	29 f4       	brne	.+10     	; 0x5c7e <usart_init_spi+0xec>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    5c74:	61 e0       	ldi	r22, 0x01	; 1
    5c76:	85 e0       	ldi	r24, 0x05	; 5
    5c78:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5c7c:	68 c1       	rjmp	.+720    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    5c7e:	e1 14       	cp	r14, r1
    5c80:	fb e0       	ldi	r31, 0x0B	; 11
    5c82:	ff 06       	cpc	r15, r31
    5c84:	29 f4       	brne	.+10     	; 0x5c90 <usart_init_spi+0xfe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    5c86:	61 e0       	ldi	r22, 0x01	; 1
    5c88:	86 e0       	ldi	r24, 0x06	; 6
    5c8a:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5c8e:	5f c1       	rjmp	.+702    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    5c90:	30 e4       	ldi	r19, 0x40	; 64
    5c92:	e3 16       	cp	r14, r19
    5c94:	38 e0       	ldi	r19, 0x08	; 8
    5c96:	f3 06       	cpc	r15, r19
    5c98:	29 f4       	brne	.+10     	; 0x5ca4 <usart_init_spi+0x112>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    5c9a:	62 e0       	ldi	r22, 0x02	; 2
    5c9c:	83 e0       	ldi	r24, 0x03	; 3
    5c9e:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5ca2:	55 c1       	rjmp	.+682    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    5ca4:	80 e4       	ldi	r24, 0x40	; 64
    5ca6:	e8 16       	cp	r14, r24
    5ca8:	89 e0       	ldi	r24, 0x09	; 9
    5caa:	f8 06       	cpc	r15, r24
    5cac:	29 f4       	brne	.+10     	; 0x5cb8 <usart_init_spi+0x126>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    5cae:	62 e0       	ldi	r22, 0x02	; 2
    5cb0:	84 e0       	ldi	r24, 0x04	; 4
    5cb2:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5cb6:	4b c1       	rjmp	.+662    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    5cb8:	e0 e4       	ldi	r30, 0x40	; 64
    5cba:	ee 16       	cp	r14, r30
    5cbc:	ea e0       	ldi	r30, 0x0A	; 10
    5cbe:	fe 06       	cpc	r15, r30
    5cc0:	29 f4       	brne	.+10     	; 0x5ccc <usart_init_spi+0x13a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    5cc2:	62 e0       	ldi	r22, 0x02	; 2
    5cc4:	85 e0       	ldi	r24, 0x05	; 5
    5cc6:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5cca:	41 c1       	rjmp	.+642    	; 0x5f4e <usart_init_spi+0x3bc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    5ccc:	f0 e9       	ldi	r31, 0x90	; 144
    5cce:	ef 16       	cp	r14, r31
    5cd0:	f8 e0       	ldi	r31, 0x08	; 8
    5cd2:	ff 06       	cpc	r15, r31
    5cd4:	29 f4       	brne	.+10     	; 0x5ce0 <usart_init_spi+0x14e>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    5cd6:	64 e0       	ldi	r22, 0x04	; 4
    5cd8:	83 e0       	ldi	r24, 0x03	; 3
    5cda:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5cde:	37 c1       	rjmp	.+622    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    5ce0:	30 e9       	ldi	r19, 0x90	; 144
    5ce2:	e3 16       	cp	r14, r19
    5ce4:	39 e0       	ldi	r19, 0x09	; 9
    5ce6:	f3 06       	cpc	r15, r19
    5ce8:	29 f4       	brne	.+10     	; 0x5cf4 <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    5cea:	64 e0       	ldi	r22, 0x04	; 4
    5cec:	84 e0       	ldi	r24, 0x04	; 4
    5cee:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5cf2:	2d c1       	rjmp	.+602    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    5cf4:	80 e9       	ldi	r24, 0x90	; 144
    5cf6:	e8 16       	cp	r14, r24
    5cf8:	8a e0       	ldi	r24, 0x0A	; 10
    5cfa:	f8 06       	cpc	r15, r24
    5cfc:	29 f4       	brne	.+10     	; 0x5d08 <usart_init_spi+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    5cfe:	64 e0       	ldi	r22, 0x04	; 4
    5d00:	85 e0       	ldi	r24, 0x05	; 5
    5d02:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5d06:	23 c1       	rjmp	.+582    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    5d08:	e0 e9       	ldi	r30, 0x90	; 144
    5d0a:	ee 16       	cp	r14, r30
    5d0c:	eb e0       	ldi	r30, 0x0B	; 11
    5d0e:	fe 06       	cpc	r15, r30
    5d10:	29 f4       	brne	.+10     	; 0x5d1c <usart_init_spi+0x18a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    5d12:	64 e0       	ldi	r22, 0x04	; 4
    5d14:	86 e0       	ldi	r24, 0x06	; 6
    5d16:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5d1a:	19 c1       	rjmp	.+562    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    5d1c:	f0 ec       	ldi	r31, 0xC0	; 192
    5d1e:	ef 16       	cp	r14, r31
    5d20:	f8 e0       	ldi	r31, 0x08	; 8
    5d22:	ff 06       	cpc	r15, r31
    5d24:	29 f4       	brne	.+10     	; 0x5d30 <usart_init_spi+0x19e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    5d26:	68 e0       	ldi	r22, 0x08	; 8
    5d28:	83 e0       	ldi	r24, 0x03	; 3
    5d2a:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5d2e:	0f c1       	rjmp	.+542    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    5d30:	30 ec       	ldi	r19, 0xC0	; 192
    5d32:	e3 16       	cp	r14, r19
    5d34:	39 e0       	ldi	r19, 0x09	; 9
    5d36:	f3 06       	cpc	r15, r19
    5d38:	29 f4       	brne	.+10     	; 0x5d44 <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    5d3a:	68 e0       	ldi	r22, 0x08	; 8
    5d3c:	84 e0       	ldi	r24, 0x04	; 4
    5d3e:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5d42:	05 c1       	rjmp	.+522    	; 0x5f4e <usart_init_spi+0x3bc>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    5d44:	80 ea       	ldi	r24, 0xA0	; 160
    5d46:	e8 16       	cp	r14, r24
    5d48:	88 e0       	ldi	r24, 0x08	; 8
    5d4a:	f8 06       	cpc	r15, r24
    5d4c:	69 f4       	brne	.+26     	; 0x5d68 <usart_init_spi+0x1d6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    5d4e:	60 e1       	ldi	r22, 0x10	; 16
    5d50:	83 e0       	ldi	r24, 0x03	; 3
    5d52:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    5d56:	e0 ea       	ldi	r30, 0xA0	; 160
    5d58:	f8 e0       	ldi	r31, 0x08	; 8
    5d5a:	84 81       	ldd	r24, Z+4	; 0x04
    5d5c:	8f 7e       	andi	r24, 0xEF	; 239
    5d5e:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    5d60:	f8 01       	movw	r30, r16
    5d62:	24 81       	ldd	r18, Z+4	; 0x04
    5d64:	22 50       	subi	r18, 0x02	; 2
    5d66:	53 c0       	rjmp	.+166    	; 0x5e0e <usart_init_spi+0x27c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    5d68:	f0 ea       	ldi	r31, 0xA0	; 160
    5d6a:	ef 16       	cp	r14, r31
    5d6c:	f9 e0       	ldi	r31, 0x09	; 9
    5d6e:	ff 06       	cpc	r15, r31
    5d70:	29 f4       	brne	.+10     	; 0x5d7c <usart_init_spi+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    5d72:	60 e1       	ldi	r22, 0x10	; 16
    5d74:	84 e0       	ldi	r24, 0x04	; 4
    5d76:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5d7a:	e9 c0       	rjmp	.+466    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    5d7c:	30 ea       	ldi	r19, 0xA0	; 160
    5d7e:	e3 16       	cp	r14, r19
    5d80:	3a e0       	ldi	r19, 0x0A	; 10
    5d82:	f3 06       	cpc	r15, r19
    5d84:	29 f4       	brne	.+10     	; 0x5d90 <usart_init_spi+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    5d86:	60 e1       	ldi	r22, 0x10	; 16
    5d88:	85 e0       	ldi	r24, 0x05	; 5
    5d8a:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5d8e:	df c0       	rjmp	.+446    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    5d90:	80 ea       	ldi	r24, 0xA0	; 160
    5d92:	e8 16       	cp	r14, r24
    5d94:	8b e0       	ldi	r24, 0x0B	; 11
    5d96:	f8 06       	cpc	r15, r24
    5d98:	29 f4       	brne	.+10     	; 0x5da4 <usart_init_spi+0x212>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    5d9a:	60 e1       	ldi	r22, 0x10	; 16
    5d9c:	86 e0       	ldi	r24, 0x06	; 6
    5d9e:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5da2:	d5 c0       	rjmp	.+426    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    5da4:	e0 eb       	ldi	r30, 0xB0	; 176
    5da6:	ee 16       	cp	r14, r30
    5da8:	e8 e0       	ldi	r30, 0x08	; 8
    5daa:	fe 06       	cpc	r15, r30
    5dac:	29 f4       	brne	.+10     	; 0x5db8 <usart_init_spi+0x226>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    5dae:	60 e2       	ldi	r22, 0x20	; 32
    5db0:	83 e0       	ldi	r24, 0x03	; 3
    5db2:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5db6:	cb c0       	rjmp	.+406    	; 0x5f4e <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    5db8:	f0 eb       	ldi	r31, 0xB0	; 176
    5dba:	ef 16       	cp	r14, r31
    5dbc:	f9 e0       	ldi	r31, 0x09	; 9
    5dbe:	ff 06       	cpc	r15, r31
    5dc0:	29 f4       	brne	.+10     	; 0x5dcc <usart_init_spi+0x23a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    5dc2:	60 e2       	ldi	r22, 0x20	; 32
    5dc4:	84 e0       	ldi	r24, 0x04	; 4
    5dc6:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5dca:	c1 c0       	rjmp	.+386    	; 0x5f4e <usart_init_spi+0x3bc>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    5dcc:	30 e8       	ldi	r19, 0x80	; 128
    5dce:	e3 16       	cp	r14, r19
    5dd0:	34 e0       	ldi	r19, 0x04	; 4
    5dd2:	f3 06       	cpc	r15, r19
    5dd4:	29 f4       	brne	.+10     	; 0x5de0 <usart_init_spi+0x24e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    5dd6:	60 e4       	ldi	r22, 0x40	; 64
    5dd8:	83 e0       	ldi	r24, 0x03	; 3
    5dda:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5dde:	b7 c0       	rjmp	.+366    	; 0x5f4e <usart_init_spi+0x3bc>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    5de0:	80 ea       	ldi	r24, 0xA0	; 160
    5de2:	e8 16       	cp	r14, r24
    5de4:	84 e0       	ldi	r24, 0x04	; 4
    5de6:	f8 06       	cpc	r15, r24
    5de8:	29 f4       	brne	.+10     	; 0x5df4 <usart_init_spi+0x262>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    5dea:	60 e4       	ldi	r22, 0x40	; 64
    5dec:	85 e0       	ldi	r24, 0x05	; 5
    5dee:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
    5df2:	ad c0       	rjmp	.+346    	; 0x5f4e <usart_init_spi+0x3bc>
    5df4:	f7 01       	movw	r30, r14
    5df6:	84 81       	ldd	r24, Z+4	; 0x04
    5df8:	8f 7e       	andi	r24, 0xEF	; 239
    5dfa:	84 83       	std	Z+4, r24	; 0x04
    5dfc:	fb 01       	movw	r30, r22
    5dfe:	24 81       	ldd	r18, Z+4	; 0x04
    5e00:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    5e02:	c7 01       	movw	r24, r14
    5e04:	f0 ea       	ldi	r31, 0xA0	; 160
    5e06:	ef 16       	cp	r14, r31
    5e08:	f8 e0       	ldi	r31, 0x08	; 8
    5e0a:	ff 06       	cpc	r15, r31
    5e0c:	49 f4       	brne	.+18     	; 0x5e20 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    5e0e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    5e12:	84 fd       	sbrc	r24, 4
    5e14:	a5 c0       	rjmp	.+330    	; 0x5f60 <usart_init_spi+0x3ce>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    5e16:	0f 2e       	mov	r0, r31
    5e18:	f1 e1       	ldi	r31, 0x11	; 17
    5e1a:	df 2e       	mov	r13, r31
    5e1c:	f0 2d       	mov	r31, r0
    5e1e:	a4 c0       	rjmp	.+328    	; 0x5f68 <usart_init_spi+0x3d6>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    5e20:	80 3b       	cpi	r24, 0xB0	; 176
    5e22:	38 e0       	ldi	r19, 0x08	; 8
    5e24:	93 07       	cpc	r25, r19
    5e26:	91 f0       	breq	.+36     	; 0x5e4c <usart_init_spi+0x2ba>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    5e28:	80 3a       	cpi	r24, 0xA0	; 160
    5e2a:	e9 e0       	ldi	r30, 0x09	; 9
    5e2c:	9e 07       	cpc	r25, r30
    5e2e:	49 f4       	brne	.+18     	; 0x5e42 <usart_init_spi+0x2b0>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    5e30:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    5e34:	34 fd       	sbrc	r19, 4
    5e36:	9b c0       	rjmp	.+310    	; 0x5f6e <usart_init_spi+0x3dc>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    5e38:	0f 2e       	mov	r0, r31
    5e3a:	f9 e1       	ldi	r31, 0x19	; 25
    5e3c:	df 2e       	mov	r13, r31
    5e3e:	f0 2d       	mov	r31, r0
    5e40:	16 c0       	rjmp	.+44     	; 0x5e6e <usart_init_spi+0x2dc>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    5e42:	80 3b       	cpi	r24, 0xB0	; 176
    5e44:	f9 e0       	ldi	r31, 0x09	; 9
    5e46:	9f 07       	cpc	r25, r31
    5e48:	f1 f0       	breq	.+60     	; 0x5e86 <usart_init_spi+0x2f4>
    5e4a:	04 c0       	rjmp	.+8      	; 0x5e54 <usart_init_spi+0x2c2>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    5e4c:	0f 2e       	mov	r0, r31
    5e4e:	f5 e1       	ldi	r31, 0x15	; 21
    5e50:	df 2e       	mov	r13, r31
    5e52:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    5e54:	80 3a       	cpi	r24, 0xA0	; 160
    5e56:	3a e0       	ldi	r19, 0x0A	; 10
    5e58:	93 07       	cpc	r25, r19
    5e5a:	49 f4       	brne	.+18     	; 0x5e6e <usart_init_spi+0x2dc>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    5e5c:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    5e60:	84 fd       	sbrc	r24, 4
    5e62:	8a c0       	rjmp	.+276    	; 0x5f78 <usart_init_spi+0x3e6>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    5e64:	0f 2e       	mov	r0, r31
    5e66:	f1 e2       	ldi	r31, 0x21	; 33
    5e68:	df 2e       	mov	r13, r31
    5e6a:	f0 2d       	mov	r31, r0
    5e6c:	15 c0       	rjmp	.+42     	; 0x5e98 <usart_init_spi+0x306>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    5e6e:	80 3a       	cpi	r24, 0xA0	; 160
    5e70:	9b 40       	sbci	r25, 0x0B	; 11
    5e72:	91 f4       	brne	.+36     	; 0x5e98 <usart_init_spi+0x306>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    5e74:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    5e78:	84 fd       	sbrc	r24, 4
    5e7a:	0a c0       	rjmp	.+20     	; 0x5e90 <usart_init_spi+0x2fe>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    5e7c:	0f 2e       	mov	r0, r31
    5e7e:	f9 e2       	ldi	r31, 0x29	; 41
    5e80:	df 2e       	mov	r13, r31
    5e82:	f0 2d       	mov	r31, r0
    5e84:	09 c0       	rjmp	.+18     	; 0x5e98 <usart_init_spi+0x306>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    5e86:	0f 2e       	mov	r0, r31
    5e88:	fd e1       	ldi	r31, 0x1D	; 29
    5e8a:	df 2e       	mov	r13, r31
    5e8c:	f0 2d       	mov	r31, r0
    5e8e:	04 c0       	rjmp	.+8      	; 0x5e98 <usart_init_spi+0x306>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    5e90:	0f 2e       	mov	r0, r31
    5e92:	fd e2       	ldi	r31, 0x2D	; 45
    5e94:	df 2e       	mov	r13, r31
    5e96:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    5e98:	ed 2d       	mov	r30, r13
    5e9a:	e6 95       	lsr	r30
    5e9c:	e6 95       	lsr	r30
    5e9e:	e6 95       	lsr	r30
    5ea0:	30 e2       	ldi	r19, 0x20	; 32
    5ea2:	e3 9f       	mul	r30, r19
    5ea4:	f0 01       	movw	r30, r0
    5ea6:	11 24       	eor	r1, r1
    5ea8:	fa 5f       	subi	r31, 0xFA	; 250
    5eaa:	3d 2d       	mov	r19, r13
    5eac:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    5eae:	81 e0       	ldi	r24, 0x01	; 1
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	03 2e       	mov	r0, r19
    5eb4:	02 c0       	rjmp	.+4      	; 0x5eba <usart_init_spi+0x328>
    5eb6:	88 0f       	add	r24, r24
    5eb8:	99 1f       	adc	r25, r25
    5eba:	0a 94       	dec	r0
    5ebc:	e2 f7       	brpl	.-8      	; 0x5eb6 <usart_init_spi+0x324>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    5ebe:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    5ec0:	22 30       	cpi	r18, 0x02	; 2
    5ec2:	10 f0       	brcs	.+4      	; 0x5ec8 <usart_init_spi+0x336>
    5ec4:	40 e0       	ldi	r20, 0x00	; 0
    5ec6:	01 c0       	rjmp	.+2      	; 0x5eca <usart_init_spi+0x338>
    5ec8:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    5eca:	df 01       	movw	r26, r30
    5ecc:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    5ece:	a3 0f       	add	r26, r19
    5ed0:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5ed2:	9f b7       	in	r25, 0x3f	; 63
    5ed4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    5ed6:	f8 94       	cli
	return flags;
    5ed8:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    5eda:	2c 91       	ld	r18, X
    5edc:	27 70       	andi	r18, 0x07	; 7
    5ede:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    5ee0:	9c 91       	ld	r25, X
    5ee2:	94 2b       	or	r25, r20
    5ee4:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5ee6:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    5ee8:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    5eea:	f7 01       	movw	r30, r14
    5eec:	85 81       	ldd	r24, Z+5	; 0x05
    5eee:	80 6c       	ori	r24, 0xC0	; 192
    5ef0:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    5ef2:	f8 01       	movw	r30, r16
    5ef4:	84 81       	ldd	r24, Z+4	; 0x04
    5ef6:	8d 7f       	andi	r24, 0xFD	; 253
    5ef8:	81 30       	cpi	r24, 0x01	; 1
    5efa:	29 f4       	brne	.+10     	; 0x5f06 <usart_init_spi+0x374>
		usart->CTRLC |= USART_UCPHA_bm;
    5efc:	f7 01       	movw	r30, r14
    5efe:	85 81       	ldd	r24, Z+5	; 0x05
    5f00:	82 60       	ori	r24, 0x02	; 2
    5f02:	85 83       	std	Z+5, r24	; 0x05
    5f04:	04 c0       	rjmp	.+8      	; 0x5f0e <usart_init_spi+0x37c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    5f06:	f7 01       	movw	r30, r14
    5f08:	85 81       	ldd	r24, Z+5	; 0x05
    5f0a:	8d 7f       	andi	r24, 0xFD	; 253
    5f0c:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    5f0e:	f8 01       	movw	r30, r16
    5f10:	85 81       	ldd	r24, Z+5	; 0x05
    5f12:	88 23       	and	r24, r24
    5f14:	29 f0       	breq	.+10     	; 0x5f20 <usart_init_spi+0x38e>
		(usart)->CTRLC |= USART_DORD_bm;
    5f16:	f7 01       	movw	r30, r14
    5f18:	85 81       	ldd	r24, Z+5	; 0x05
    5f1a:	84 60       	ori	r24, 0x04	; 4
    5f1c:	85 83       	std	Z+5, r24	; 0x05
    5f1e:	04 c0       	rjmp	.+8      	; 0x5f28 <usart_init_spi+0x396>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    5f20:	f7 01       	movw	r30, r14
    5f22:	85 81       	ldd	r24, Z+5	; 0x05
    5f24:	8b 7f       	andi	r24, 0xFB	; 251
    5f26:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    5f28:	f8 01       	movw	r30, r16
    5f2a:	40 81       	ld	r20, Z
    5f2c:	51 81       	ldd	r21, Z+1	; 0x01
    5f2e:	62 81       	ldd	r22, Z+2	; 0x02
    5f30:	73 81       	ldd	r23, Z+3	; 0x03
    5f32:	00 e0       	ldi	r16, 0x00	; 0
    5f34:	16 e3       	ldi	r17, 0x36	; 54
    5f36:	2e e6       	ldi	r18, 0x6E	; 110
    5f38:	31 e0       	ldi	r19, 0x01	; 1
    5f3a:	c7 01       	movw	r24, r14
    5f3c:	f8 dd       	rcall	.-1040   	; 0x5b2e <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    5f3e:	f7 01       	movw	r30, r14
    5f40:	84 81       	ldd	r24, Z+4	; 0x04
    5f42:	88 60       	ori	r24, 0x08	; 8
    5f44:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    5f46:	84 81       	ldd	r24, Z+4	; 0x04
    5f48:	80 61       	ori	r24, 0x10	; 16
    5f4a:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    5f4c:	1a c0       	rjmp	.+52     	; 0x5f82 <usart_init_spi+0x3f0>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    5f4e:	f7 01       	movw	r30, r14
    5f50:	84 81       	ldd	r24, Z+4	; 0x04
    5f52:	8f 7e       	andi	r24, 0xEF	; 239
    5f54:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    5f56:	f8 01       	movw	r30, r16
    5f58:	24 81       	ldd	r18, Z+4	; 0x04
    5f5a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    5f5c:	c7 01       	movw	r24, r14
    5f5e:	60 cf       	rjmp	.-320    	; 0x5e20 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    5f60:	0f 2e       	mov	r0, r31
    5f62:	f5 e1       	ldi	r31, 0x15	; 21
    5f64:	df 2e       	mov	r13, r31
    5f66:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    5f68:	80 ea       	ldi	r24, 0xA0	; 160
    5f6a:	98 e0       	ldi	r25, 0x08	; 8
    5f6c:	6a cf       	rjmp	.-300    	; 0x5e42 <usart_init_spi+0x2b0>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    5f6e:	0f 2e       	mov	r0, r31
    5f70:	fd e1       	ldi	r31, 0x1D	; 29
    5f72:	df 2e       	mov	r13, r31
    5f74:	f0 2d       	mov	r31, r0
    5f76:	7b cf       	rjmp	.-266    	; 0x5e6e <usart_init_spi+0x2dc>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    5f78:	0f 2e       	mov	r0, r31
    5f7a:	f5 e2       	ldi	r31, 0x25	; 37
    5f7c:	df 2e       	mov	r13, r31
    5f7e:	f0 2d       	mov	r31, r0
    5f80:	8b cf       	rjmp	.-234    	; 0x5e98 <usart_init_spi+0x306>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    5f82:	0f 90       	pop	r0
    5f84:	df 91       	pop	r29
    5f86:	cf 91       	pop	r28
    5f88:	1f 91       	pop	r17
    5f8a:	0f 91       	pop	r16
    5f8c:	ff 90       	pop	r15
    5f8e:	ef 90       	pop	r14
    5f90:	df 90       	pop	r13
    5f92:	08 95       	ret

00005f94 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
    5f98:	1f 92       	push	r1
    5f9a:	1f 92       	push	r1
    5f9c:	cd b7       	in	r28, 0x3d	; 61
    5f9e:	de b7       	in	r29, 0x3e	; 62
    5fa0:	81 11       	cpse	r24, r1
    5fa2:	26 c0       	rjmp	.+76     	; 0x5ff0 <udd_sleep_mode+0x5c>
    5fa4:	90 91 6c 2b 	lds	r25, 0x2B6C	; 0x802b6c <udd_b_idle>
    5fa8:	99 23       	and	r25, r25
    5faa:	f9 f0       	breq	.+62     	; 0x5fea <udd_sleep_mode+0x56>
    5fac:	90 91 76 2b 	lds	r25, 0x2B76	; 0x802b76 <sleepmgr_locks+0x1>
    5fb0:	91 11       	cpse	r25, r1
    5fb2:	01 c0       	rjmp	.+2      	; 0x5fb6 <udd_sleep_mode+0x22>
    5fb4:	ff cf       	rjmp	.-2      	; 0x5fb4 <udd_sleep_mode+0x20>
    5fb6:	9f b7       	in	r25, 0x3f	; 63
    5fb8:	9a 83       	std	Y+2, r25	; 0x02
    5fba:	f8 94       	cli
    5fbc:	2a 81       	ldd	r18, Y+2	; 0x02
    5fbe:	e5 e7       	ldi	r30, 0x75	; 117
    5fc0:	fb e2       	ldi	r31, 0x2B	; 43
    5fc2:	91 81       	ldd	r25, Z+1	; 0x01
    5fc4:	91 50       	subi	r25, 0x01	; 1
    5fc6:	91 83       	std	Z+1, r25	; 0x01
    5fc8:	2f bf       	out	0x3f, r18	; 63
    5fca:	0f c0       	rjmp	.+30     	; 0x5fea <udd_sleep_mode+0x56>
    5fcc:	90 91 76 2b 	lds	r25, 0x2B76	; 0x802b76 <sleepmgr_locks+0x1>
    5fd0:	9f 3f       	cpi	r25, 0xFF	; 255
    5fd2:	09 f4       	brne	.+2      	; 0x5fd6 <udd_sleep_mode+0x42>
    5fd4:	ff cf       	rjmp	.-2      	; 0x5fd4 <udd_sleep_mode+0x40>
    5fd6:	9f b7       	in	r25, 0x3f	; 63
    5fd8:	99 83       	std	Y+1, r25	; 0x01
    5fda:	f8 94       	cli
    5fdc:	29 81       	ldd	r18, Y+1	; 0x01
    5fde:	e5 e7       	ldi	r30, 0x75	; 117
    5fe0:	fb e2       	ldi	r31, 0x2B	; 43
    5fe2:	91 81       	ldd	r25, Z+1	; 0x01
    5fe4:	9f 5f       	subi	r25, 0xFF	; 255
    5fe6:	91 83       	std	Z+1, r25	; 0x01
    5fe8:	2f bf       	out	0x3f, r18	; 63
    5fea:	80 93 6c 2b 	sts	0x2B6C, r24	; 0x802b6c <udd_b_idle>
    5fee:	05 c0       	rjmp	.+10     	; 0x5ffa <udd_sleep_mode+0x66>
    5ff0:	90 91 6c 2b 	lds	r25, 0x2B6C	; 0x802b6c <udd_b_idle>
    5ff4:	99 23       	and	r25, r25
    5ff6:	51 f3       	breq	.-44     	; 0x5fcc <udd_sleep_mode+0x38>
    5ff8:	f8 cf       	rjmp	.-16     	; 0x5fea <udd_sleep_mode+0x56>
    5ffa:	0f 90       	pop	r0
    5ffc:	0f 90       	pop	r0
    5ffe:	df 91       	pop	r29
    6000:	cf 91       	pop	r28
    6002:	08 95       	ret

00006004 <udd_ctrl_init>:
    6004:	0f 93       	push	r16
    6006:	e8 ec       	ldi	r30, 0xC8	; 200
    6008:	f4 e0       	ldi	r31, 0x04	; 4
    600a:	80 81       	ld	r24, Z
    600c:	8f 7d       	andi	r24, 0xDF	; 223
    600e:	80 83       	st	Z, r24
    6010:	80 81       	ld	r24, Z
    6012:	8f 7d       	andi	r24, 0xDF	; 223
    6014:	80 83       	st	Z, r24
    6016:	e0 e4       	ldi	r30, 0x40	; 64
    6018:	fb e2       	ldi	r31, 0x2B	; 43
    601a:	02 e0       	ldi	r16, 0x02	; 2
    601c:	05 93       	las	Z, r16
    601e:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <udd_sram+0x16>
    6022:	10 92 43 2b 	sts	0x2B43, r1	; 0x802b43 <udd_sram+0x17>
    6026:	00 e2       	ldi	r16, 0x20	; 32
    6028:	06 93       	lac	Z, r16
    602a:	00 e4       	ldi	r16, 0x40	; 64
    602c:	06 93       	lac	Z, r16
    602e:	e8 e3       	ldi	r30, 0x38	; 56
    6030:	fb e2       	ldi	r31, 0x2B	; 43
    6032:	00 e4       	ldi	r16, 0x40	; 64
    6034:	06 93       	lac	Z, r16
    6036:	e1 e8       	ldi	r30, 0x81	; 129
    6038:	fb e2       	ldi	r31, 0x2B	; 43
    603a:	14 86       	std	Z+12, r1	; 0x0c
    603c:	15 86       	std	Z+13, r1	; 0x0d
    603e:	16 86       	std	Z+14, r1	; 0x0e
    6040:	17 86       	std	Z+15, r1	; 0x0f
    6042:	12 86       	std	Z+10, r1	; 0x0a
    6044:	13 86       	std	Z+11, r1	; 0x0b
    6046:	10 92 29 2b 	sts	0x2B29, r1	; 0x802b29 <udd_ep_control_state>
    604a:	0f 91       	pop	r16
    604c:	08 95       	ret

0000604e <udd_ctrl_stall_data>:
    604e:	0f 93       	push	r16
    6050:	85 e0       	ldi	r24, 0x05	; 5
    6052:	80 93 29 2b 	sts	0x2B29, r24	; 0x802b29 <udd_ep_control_state>
    6056:	e1 e4       	ldi	r30, 0x41	; 65
    6058:	fb e2       	ldi	r31, 0x2B	; 43
    605a:	04 e0       	ldi	r16, 0x04	; 4
    605c:	05 93       	las	Z, r16
    605e:	e9 e3       	ldi	r30, 0x39	; 57
    6060:	fb e2       	ldi	r31, 0x2B	; 43
    6062:	04 e0       	ldi	r16, 0x04	; 4
    6064:	05 93       	las	Z, r16
    6066:	0f 91       	pop	r16
    6068:	08 95       	ret

0000606a <udd_ctrl_send_zlp_in>:
    606a:	0f 93       	push	r16
    606c:	83 e0       	ldi	r24, 0x03	; 3
    606e:	80 93 29 2b 	sts	0x2B29, r24	; 0x802b29 <udd_ep_control_state>
    6072:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <udd_sram+0x16>
    6076:	10 92 43 2b 	sts	0x2B43, r1	; 0x802b43 <udd_sram+0x17>
    607a:	e0 e4       	ldi	r30, 0x40	; 64
    607c:	fb e2       	ldi	r31, 0x2B	; 43
    607e:	02 e0       	ldi	r16, 0x02	; 2
    6080:	06 93       	lac	Z, r16
    6082:	0f 91       	pop	r16
    6084:	08 95       	ret

00006086 <udd_ctrl_endofrequest>:
    6086:	e0 91 8d 2b 	lds	r30, 0x2B8D	; 0x802b8d <udd_g_ctrlreq+0xc>
    608a:	f0 91 8e 2b 	lds	r31, 0x2B8E	; 0x802b8e <udd_g_ctrlreq+0xd>
    608e:	30 97       	sbiw	r30, 0x00	; 0
    6090:	09 f0       	breq	.+2      	; 0x6094 <udd_ctrl_endofrequest+0xe>
    6092:	19 95       	eicall
    6094:	08 95       	ret

00006096 <udd_ctrl_in_sent>:
    6096:	0f 93       	push	r16
    6098:	cf 93       	push	r28
    609a:	df 93       	push	r29
    609c:	80 91 29 2b 	lds	r24, 0x2B29	; 0x802b29 <udd_ep_control_state>
    60a0:	83 30       	cpi	r24, 0x03	; 3
    60a2:	19 f4       	brne	.+6      	; 0x60aa <udd_ctrl_in_sent+0x14>
    60a4:	f0 df       	rcall	.-32     	; 0x6086 <udd_ctrl_endofrequest>
    60a6:	ae df       	rcall	.-164    	; 0x6004 <udd_ctrl_init>
    60a8:	5e c0       	rjmp	.+188    	; 0x6166 <udd_ctrl_in_sent+0xd0>
    60aa:	80 91 25 2b 	lds	r24, 0x2B25	; 0x802b25 <udd_ctrl_payload_nb_trans>
    60ae:	90 91 26 2b 	lds	r25, 0x2B26	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    60b2:	c0 91 8b 2b 	lds	r28, 0x2B8B	; 0x802b8b <udd_g_ctrlreq+0xa>
    60b6:	d0 91 8c 2b 	lds	r29, 0x2B8C	; 0x802b8c <udd_g_ctrlreq+0xb>
    60ba:	c8 1b       	sub	r28, r24
    60bc:	d9 0b       	sbc	r29, r25
    60be:	71 f5       	brne	.+92     	; 0x611c <udd_ctrl_in_sent+0x86>
    60c0:	20 91 27 2b 	lds	r18, 0x2B27	; 0x802b27 <udd_ctrl_prev_payload_nb_trans>
    60c4:	30 91 28 2b 	lds	r19, 0x2B28	; 0x802b28 <udd_ctrl_prev_payload_nb_trans+0x1>
    60c8:	82 0f       	add	r24, r18
    60ca:	93 1f       	adc	r25, r19
    60cc:	80 93 27 2b 	sts	0x2B27, r24	; 0x802b27 <udd_ctrl_prev_payload_nb_trans>
    60d0:	90 93 28 2b 	sts	0x2B28, r25	; 0x802b28 <udd_ctrl_prev_payload_nb_trans+0x1>
    60d4:	20 91 87 2b 	lds	r18, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    60d8:	30 91 88 2b 	lds	r19, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    60dc:	82 17       	cp	r24, r18
    60de:	93 07       	cpc	r25, r19
    60e0:	21 f0       	breq	.+8      	; 0x60ea <udd_ctrl_in_sent+0x54>
    60e2:	80 91 40 2a 	lds	r24, 0x2A40	; 0x802a40 <b_shortpacket.5849>
    60e6:	88 23       	and	r24, r24
    60e8:	41 f0       	breq	.+16     	; 0x60fa <udd_ctrl_in_sent+0x64>
    60ea:	84 e0       	ldi	r24, 0x04	; 4
    60ec:	80 93 29 2b 	sts	0x2B29, r24	; 0x802b29 <udd_ep_control_state>
    60f0:	e8 e3       	ldi	r30, 0x38	; 56
    60f2:	fb e2       	ldi	r31, 0x2B	; 43
    60f4:	02 e0       	ldi	r16, 0x02	; 2
    60f6:	06 93       	lac	Z, r16
    60f8:	36 c0       	rjmp	.+108    	; 0x6166 <udd_ctrl_in_sent+0xd0>
    60fa:	e0 91 8f 2b 	lds	r30, 0x2B8F	; 0x802b8f <udd_g_ctrlreq+0xe>
    60fe:	f0 91 90 2b 	lds	r31, 0x2B90	; 0x802b90 <udd_g_ctrlreq+0xf>
    6102:	30 97       	sbiw	r30, 0x00	; 0
    6104:	99 f0       	breq	.+38     	; 0x612c <udd_ctrl_in_sent+0x96>
    6106:	19 95       	eicall
    6108:	88 23       	and	r24, r24
    610a:	81 f0       	breq	.+32     	; 0x612c <udd_ctrl_in_sent+0x96>
    610c:	10 92 25 2b 	sts	0x2B25, r1	; 0x802b25 <udd_ctrl_payload_nb_trans>
    6110:	10 92 26 2b 	sts	0x2B26, r1	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    6114:	c0 91 8b 2b 	lds	r28, 0x2B8B	; 0x802b8b <udd_g_ctrlreq+0xa>
    6118:	d0 91 8c 2b 	lds	r29, 0x2B8C	; 0x802b8c <udd_g_ctrlreq+0xb>
    611c:	c0 34       	cpi	r28, 0x40	; 64
    611e:	d1 05       	cpc	r29, r1
    6120:	28 f0       	brcs	.+10     	; 0x612c <udd_ctrl_in_sent+0x96>
    6122:	10 92 40 2a 	sts	0x2A40, r1	; 0x802a40 <b_shortpacket.5849>
    6126:	c0 e4       	ldi	r28, 0x40	; 64
    6128:	d0 e0       	ldi	r29, 0x00	; 0
    612a:	03 c0       	rjmp	.+6      	; 0x6132 <udd_ctrl_in_sent+0x9c>
    612c:	81 e0       	ldi	r24, 0x01	; 1
    612e:	80 93 40 2a 	sts	0x2A40, r24	; 0x802a40 <b_shortpacket.5849>
    6132:	ec e2       	ldi	r30, 0x2C	; 44
    6134:	fb e2       	ldi	r31, 0x2B	; 43
    6136:	c6 8b       	std	Z+22, r28	; 0x16
    6138:	d7 8b       	std	Z+23, r29	; 0x17
    613a:	80 91 25 2b 	lds	r24, 0x2B25	; 0x802b25 <udd_ctrl_payload_nb_trans>
    613e:	90 91 26 2b 	lds	r25, 0x2B26	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    6142:	20 91 89 2b 	lds	r18, 0x2B89	; 0x802b89 <udd_g_ctrlreq+0x8>
    6146:	30 91 8a 2b 	lds	r19, 0x2B8A	; 0x802b8a <udd_g_ctrlreq+0x9>
    614a:	28 0f       	add	r18, r24
    614c:	39 1f       	adc	r19, r25
    614e:	20 8f       	std	Z+24, r18	; 0x18
    6150:	31 8f       	std	Z+25, r19	; 0x19
    6152:	c8 0f       	add	r28, r24
    6154:	d9 1f       	adc	r29, r25
    6156:	c0 93 25 2b 	sts	0x2B25, r28	; 0x802b25 <udd_ctrl_payload_nb_trans>
    615a:	d0 93 26 2b 	sts	0x2B26, r29	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    615e:	e0 e4       	ldi	r30, 0x40	; 64
    6160:	fb e2       	ldi	r31, 0x2B	; 43
    6162:	02 e0       	ldi	r16, 0x02	; 2
    6164:	06 93       	lac	Z, r16
    6166:	df 91       	pop	r29
    6168:	cf 91       	pop	r28
    616a:	0f 91       	pop	r16
    616c:	08 95       	ret

0000616e <udd_ep_get_size>:
    616e:	fc 01       	movw	r30, r24
    6170:	81 81       	ldd	r24, Z+1	; 0x01
    6172:	e8 2f       	mov	r30, r24
    6174:	e7 70       	andi	r30, 0x07	; 7
    6176:	8e 2f       	mov	r24, r30
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	fc 01       	movw	r30, r24
    617c:	31 97       	sbiw	r30, 0x01	; 1
    617e:	e7 30       	cpi	r30, 0x07	; 7
    6180:	f1 05       	cpc	r31, r1
    6182:	d8 f4       	brcc	.+54     	; 0x61ba <udd_ep_get_size+0x4c>
    6184:	88 27       	eor	r24, r24
    6186:	e2 50       	subi	r30, 0x02	; 2
    6188:	ff 4f       	sbci	r31, 0xFF	; 255
    618a:	8f 4f       	sbci	r24, 0xFF	; 255
    618c:	0c 94 17 42 	jmp	0x842e	; 0x842e <__tablejump2__>
    6190:	80 e1       	ldi	r24, 0x10	; 16
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	08 95       	ret
    6196:	80 e2       	ldi	r24, 0x20	; 32
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	08 95       	ret
    619c:	80 e4       	ldi	r24, 0x40	; 64
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	08 95       	ret
    61a2:	80 e8       	ldi	r24, 0x80	; 128
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	08 95       	ret
    61a8:	80 e0       	ldi	r24, 0x00	; 0
    61aa:	91 e0       	ldi	r25, 0x01	; 1
    61ac:	08 95       	ret
    61ae:	80 e0       	ldi	r24, 0x00	; 0
    61b0:	92 e0       	ldi	r25, 0x02	; 2
    61b2:	08 95       	ret
    61b4:	8f ef       	ldi	r24, 0xFF	; 255
    61b6:	93 e0       	ldi	r25, 0x03	; 3
    61b8:	08 95       	ret
    61ba:	88 e0       	ldi	r24, 0x08	; 8
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	08 95       	ret

000061c0 <udd_ep_get_job>:
    61c0:	28 2f       	mov	r18, r24
    61c2:	2f 70       	andi	r18, 0x0F	; 15
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	22 0f       	add	r18, r18
    61c8:	33 1f       	adc	r19, r19
    61ca:	08 2e       	mov	r0, r24
    61cc:	00 0c       	add	r0, r0
    61ce:	99 0b       	sbc	r25, r25
    61d0:	88 27       	eor	r24, r24
    61d2:	99 0f       	add	r25, r25
    61d4:	88 1f       	adc	r24, r24
    61d6:	99 27       	eor	r25, r25
    61d8:	82 0f       	add	r24, r18
    61da:	93 1f       	adc	r25, r19
    61dc:	02 97       	sbiw	r24, 0x02	; 2
    61de:	9c 01       	movw	r18, r24
    61e0:	22 0f       	add	r18, r18
    61e2:	33 1f       	adc	r19, r19
    61e4:	22 0f       	add	r18, r18
    61e6:	33 1f       	adc	r19, r19
    61e8:	22 0f       	add	r18, r18
    61ea:	33 1f       	adc	r19, r19
    61ec:	82 0f       	add	r24, r18
    61ee:	93 1f       	adc	r25, r19
    61f0:	8f 53       	subi	r24, 0x3F	; 63
    61f2:	95 4d       	sbci	r25, 0xD5	; 213
    61f4:	08 95       	ret

000061f6 <udd_ctrl_interrupt_tc_setup>:
    61f6:	0f 93       	push	r16
    61f8:	cf 93       	push	r28
    61fa:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    61fe:	80 ff       	sbrs	r24, 0
    6200:	65 c0       	rjmp	.+202    	; 0x62cc <udd_ctrl_interrupt_tc_setup+0xd6>
    6202:	81 e0       	ldi	r24, 0x01	; 1
    6204:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6208:	e8 e3       	ldi	r30, 0x38	; 56
    620a:	fb e2       	ldi	r31, 0x2B	; 43
    620c:	00 e8       	ldi	r16, 0x80	; 128
    620e:	06 93       	lac	Z, r16
    6210:	e0 e4       	ldi	r30, 0x40	; 64
    6212:	fb e2       	ldi	r31, 0x2B	; 43
    6214:	00 e8       	ldi	r16, 0x80	; 128
    6216:	06 93       	lac	Z, r16
    6218:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    621c:	e8 e3       	ldi	r30, 0x38	; 56
    621e:	fb e2       	ldi	r31, 0x2B	; 43
    6220:	00 e1       	ldi	r16, 0x10	; 16
    6222:	06 93       	lac	Z, r16
    6224:	80 91 29 2b 	lds	r24, 0x2B29	; 0x802b29 <udd_ep_control_state>
    6228:	88 23       	and	r24, r24
    622a:	29 f0       	breq	.+10     	; 0x6236 <udd_ctrl_interrupt_tc_setup+0x40>
    622c:	83 50       	subi	r24, 0x03	; 3
    622e:	82 30       	cpi	r24, 0x02	; 2
    6230:	08 f4       	brcc	.+2      	; 0x6234 <udd_ctrl_interrupt_tc_setup+0x3e>
    6232:	29 df       	rcall	.-430    	; 0x6086 <udd_ctrl_endofrequest>
    6234:	e7 de       	rcall	.-562    	; 0x6004 <udd_ctrl_init>
    6236:	80 91 3a 2b 	lds	r24, 0x2B3A	; 0x802b3a <udd_sram+0xe>
    623a:	90 91 3b 2b 	lds	r25, 0x2B3B	; 0x802b3b <udd_sram+0xf>
    623e:	08 97       	sbiw	r24, 0x08	; 8
    6240:	09 f0       	breq	.+2      	; 0x6244 <udd_ctrl_interrupt_tc_setup+0x4e>
    6242:	46 c0       	rjmp	.+140    	; 0x62d0 <udd_ctrl_interrupt_tc_setup+0xda>
    6244:	88 e0       	ldi	r24, 0x08	; 8
    6246:	e5 ee       	ldi	r30, 0xE5	; 229
    6248:	fa e2       	ldi	r31, 0x2A	; 42
    624a:	a1 e8       	ldi	r26, 0x81	; 129
    624c:	bb e2       	ldi	r27, 0x2B	; 43
    624e:	01 90       	ld	r0, Z+
    6250:	0d 92       	st	X+, r0
    6252:	8a 95       	dec	r24
    6254:	e1 f7       	brne	.-8      	; 0x624e <udd_ctrl_interrupt_tc_setup+0x58>
    6256:	e8 ec       	ldi	r30, 0xC8	; 200
    6258:	f4 e0       	ldi	r31, 0x04	; 4
    625a:	80 81       	ld	r24, Z
    625c:	80 62       	ori	r24, 0x20	; 32
    625e:	80 83       	st	Z, r24
    6260:	80 81       	ld	r24, Z
    6262:	80 62       	ori	r24, 0x20	; 32
    6264:	80 83       	st	Z, r24
    6266:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <udc_process_setup>
    626a:	c8 2f       	mov	r28, r24
    626c:	81 11       	cpse	r24, r1
    626e:	03 c0       	rjmp	.+6      	; 0x6276 <udd_ctrl_interrupt_tc_setup+0x80>
    6270:	ee de       	rcall	.-548    	; 0x604e <udd_ctrl_stall_data>
    6272:	c1 e0       	ldi	r28, 0x01	; 1
    6274:	2e c0       	rjmp	.+92     	; 0x62d2 <udd_ctrl_interrupt_tc_setup+0xdc>
    6276:	80 91 81 2b 	lds	r24, 0x2B81	; 0x802b81 <udd_g_ctrlreq>
    627a:	88 23       	and	r24, r24
    627c:	6c f4       	brge	.+26     	; 0x6298 <udd_ctrl_interrupt_tc_setup+0xa2>
    627e:	10 92 27 2b 	sts	0x2B27, r1	; 0x802b27 <udd_ctrl_prev_payload_nb_trans>
    6282:	10 92 28 2b 	sts	0x2B28, r1	; 0x802b28 <udd_ctrl_prev_payload_nb_trans+0x1>
    6286:	10 92 25 2b 	sts	0x2B25, r1	; 0x802b25 <udd_ctrl_payload_nb_trans>
    628a:	10 92 26 2b 	sts	0x2B26, r1	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    628e:	82 e0       	ldi	r24, 0x02	; 2
    6290:	80 93 29 2b 	sts	0x2B29, r24	; 0x802b29 <udd_ep_control_state>
    6294:	00 df       	rcall	.-512    	; 0x6096 <udd_ctrl_in_sent>
    6296:	1d c0       	rjmp	.+58     	; 0x62d2 <udd_ctrl_interrupt_tc_setup+0xdc>
    6298:	80 91 87 2b 	lds	r24, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    629c:	90 91 88 2b 	lds	r25, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    62a0:	89 2b       	or	r24, r25
    62a2:	11 f4       	brne	.+4      	; 0x62a8 <udd_ctrl_interrupt_tc_setup+0xb2>
    62a4:	e2 de       	rcall	.-572    	; 0x606a <udd_ctrl_send_zlp_in>
    62a6:	15 c0       	rjmp	.+42     	; 0x62d2 <udd_ctrl_interrupt_tc_setup+0xdc>
    62a8:	10 92 27 2b 	sts	0x2B27, r1	; 0x802b27 <udd_ctrl_prev_payload_nb_trans>
    62ac:	10 92 28 2b 	sts	0x2B28, r1	; 0x802b28 <udd_ctrl_prev_payload_nb_trans+0x1>
    62b0:	10 92 25 2b 	sts	0x2B25, r1	; 0x802b25 <udd_ctrl_payload_nb_trans>
    62b4:	10 92 26 2b 	sts	0x2B26, r1	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    62b8:	81 e0       	ldi	r24, 0x01	; 1
    62ba:	80 93 29 2b 	sts	0x2B29, r24	; 0x802b29 <udd_ep_control_state>
    62be:	e8 e3       	ldi	r30, 0x38	; 56
    62c0:	fb e2       	ldi	r31, 0x2B	; 43
    62c2:	02 e0       	ldi	r16, 0x02	; 2
    62c4:	06 93       	lac	Z, r16
    62c6:	00 e2       	ldi	r16, 0x20	; 32
    62c8:	06 93       	lac	Z, r16
    62ca:	03 c0       	rjmp	.+6      	; 0x62d2 <udd_ctrl_interrupt_tc_setup+0xdc>
    62cc:	c0 e0       	ldi	r28, 0x00	; 0
    62ce:	01 c0       	rjmp	.+2      	; 0x62d2 <udd_ctrl_interrupt_tc_setup+0xdc>
    62d0:	c1 e0       	ldi	r28, 0x01	; 1
    62d2:	8c 2f       	mov	r24, r28
    62d4:	cf 91       	pop	r28
    62d6:	0f 91       	pop	r16
    62d8:	08 95       	ret

000062da <udd_ep_trans_complet>:
    62da:	8f 92       	push	r8
    62dc:	9f 92       	push	r9
    62de:	af 92       	push	r10
    62e0:	bf 92       	push	r11
    62e2:	df 92       	push	r13
    62e4:	ef 92       	push	r14
    62e6:	ff 92       	push	r15
    62e8:	0f 93       	push	r16
    62ea:	1f 93       	push	r17
    62ec:	cf 93       	push	r28
    62ee:	df 93       	push	r29
    62f0:	d8 2e       	mov	r13, r24
    62f2:	66 df       	rcall	.-308    	; 0x61c0 <udd_ep_get_job>
    62f4:	8c 01       	movw	r16, r24
    62f6:	cd 2d       	mov	r28, r13
    62f8:	cf 70       	andi	r28, 0x0F	; 15
    62fa:	d0 e0       	ldi	r29, 0x00	; 0
    62fc:	ce 01       	movw	r24, r28
    62fe:	88 0f       	add	r24, r24
    6300:	99 1f       	adc	r25, r25
    6302:	cd 2d       	mov	r28, r13
    6304:	0d 2c       	mov	r0, r13
    6306:	00 0c       	add	r0, r0
    6308:	dd 0b       	sbc	r29, r29
    630a:	cc 27       	eor	r28, r28
    630c:	dd 0f       	add	r29, r29
    630e:	cc 1f       	adc	r28, r28
    6310:	dd 27       	eor	r29, r29
    6312:	c8 0f       	add	r28, r24
    6314:	d9 1f       	adc	r29, r25
    6316:	ce 01       	movw	r24, r28
    6318:	88 0f       	add	r24, r24
    631a:	99 1f       	adc	r25, r25
    631c:	88 0f       	add	r24, r24
    631e:	99 1f       	adc	r25, r25
    6320:	88 0f       	add	r24, r24
    6322:	99 1f       	adc	r25, r25
    6324:	9c 01       	movw	r18, r24
    6326:	28 5c       	subi	r18, 0xC8	; 200
    6328:	34 4d       	sbci	r19, 0xD4	; 212
    632a:	79 01       	movw	r14, r18
    632c:	c9 01       	movw	r24, r18
    632e:	1f df       	rcall	.-450    	; 0x616e <udd_ep_get_size>
    6330:	4c 01       	movw	r8, r24
    6332:	dd 20       	and	r13, r13
    6334:	0c f0       	brlt	.+2      	; 0x6338 <udd_ep_trans_complet+0x5e>
    6336:	7b c0       	rjmp	.+246    	; 0x642e <udd_ep_trans_complet+0x154>
    6338:	fe 01       	movw	r30, r28
    633a:	ee 0f       	add	r30, r30
    633c:	ff 1f       	adc	r31, r31
    633e:	ee 0f       	add	r30, r30
    6340:	ff 1f       	adc	r31, r31
    6342:	ee 0f       	add	r30, r30
    6344:	ff 1f       	adc	r31, r31
    6346:	e4 5d       	subi	r30, 0xD4	; 212
    6348:	f4 4d       	sbci	r31, 0xD4	; 212
    634a:	22 89       	ldd	r18, Z+18	; 0x12
    634c:	33 89       	ldd	r19, Z+19	; 0x13
    634e:	d8 01       	movw	r26, r16
    6350:	15 96       	adiw	r26, 0x05	; 5
    6352:	8d 91       	ld	r24, X+
    6354:	9c 91       	ld	r25, X
    6356:	16 97       	sbiw	r26, 0x06	; 6
    6358:	82 0f       	add	r24, r18
    635a:	93 1f       	adc	r25, r19
    635c:	15 96       	adiw	r26, 0x05	; 5
    635e:	8d 93       	st	X+, r24
    6360:	9c 93       	st	X, r25
    6362:	16 97       	sbiw	r26, 0x06	; 6
    6364:	13 96       	adiw	r26, 0x03	; 3
    6366:	2d 91       	ld	r18, X+
    6368:	3c 91       	ld	r19, X
    636a:	14 97       	sbiw	r26, 0x04	; 4
    636c:	82 17       	cp	r24, r18
    636e:	93 07       	cpc	r25, r19
    6370:	09 f4       	brne	.+2      	; 0x6374 <udd_ep_trans_complet+0x9a>
    6372:	47 c0       	rjmp	.+142    	; 0x6402 <udd_ep_trans_complet+0x128>
    6374:	28 1b       	sub	r18, r24
    6376:	39 0b       	sbc	r19, r25
    6378:	21 15       	cp	r18, r1
    637a:	b4 e0       	ldi	r27, 0x04	; 4
    637c:	3b 07       	cpc	r19, r27
    637e:	40 f0       	brcs	.+16     	; 0x6390 <udd_ep_trans_complet+0xb6>
    6380:	2f ef       	ldi	r18, 0xFF	; 255
    6382:	33 e0       	ldi	r19, 0x03	; 3
    6384:	c9 01       	movw	r24, r18
    6386:	b4 01       	movw	r22, r8
    6388:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <__udivmodhi4>
    638c:	28 1b       	sub	r18, r24
    638e:	39 0b       	sbc	r19, r25
    6390:	f8 01       	movw	r30, r16
    6392:	80 81       	ld	r24, Z
    6394:	81 ff       	sbrs	r24, 1
    6396:	0a c0       	rjmp	.+20     	; 0x63ac <udd_ep_trans_complet+0xd2>
    6398:	c9 01       	movw	r24, r18
    639a:	b4 01       	movw	r22, r8
    639c:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <__udivmodhi4>
    63a0:	41 e0       	ldi	r20, 0x01	; 1
    63a2:	89 2b       	or	r24, r25
    63a4:	09 f0       	breq	.+2      	; 0x63a8 <udd_ep_trans_complet+0xce>
    63a6:	40 e0       	ldi	r20, 0x00	; 0
    63a8:	84 2f       	mov	r24, r20
    63aa:	01 c0       	rjmp	.+2      	; 0x63ae <udd_ep_trans_complet+0xd4>
    63ac:	80 e0       	ldi	r24, 0x00	; 0
    63ae:	d8 01       	movw	r26, r16
    63b0:	9c 91       	ld	r25, X
    63b2:	80 fb       	bst	r24, 0
    63b4:	91 f9       	bld	r25, 1
    63b6:	9c 93       	st	X, r25
    63b8:	fe 01       	movw	r30, r28
    63ba:	ee 0f       	add	r30, r30
    63bc:	ff 1f       	adc	r31, r31
    63be:	ee 0f       	add	r30, r30
    63c0:	ff 1f       	adc	r31, r31
    63c2:	ee 0f       	add	r30, r30
    63c4:	ff 1f       	adc	r31, r31
    63c6:	e4 5d       	subi	r30, 0xD4	; 212
    63c8:	f4 4d       	sbci	r31, 0xD4	; 212
    63ca:	12 8a       	std	Z+18, r1	; 0x12
    63cc:	13 8a       	std	Z+19, r1	; 0x13
    63ce:	26 87       	std	Z+14, r18	; 0x0e
    63d0:	37 87       	std	Z+15, r19	; 0x0f
    63d2:	11 96       	adiw	r26, 0x01	; 1
    63d4:	2d 91       	ld	r18, X+
    63d6:	3c 91       	ld	r19, X
    63d8:	12 97       	sbiw	r26, 0x02	; 2
    63da:	15 96       	adiw	r26, 0x05	; 5
    63dc:	8d 91       	ld	r24, X+
    63de:	9c 91       	ld	r25, X
    63e0:	16 97       	sbiw	r26, 0x06	; 6
    63e2:	82 0f       	add	r24, r18
    63e4:	93 1f       	adc	r25, r19
    63e6:	cc 0f       	add	r28, r28
    63e8:	dd 1f       	adc	r29, r29
    63ea:	cc 0f       	add	r28, r28
    63ec:	dd 1f       	adc	r29, r29
    63ee:	cc 0f       	add	r28, r28
    63f0:	dd 1f       	adc	r29, r29
    63f2:	c4 5c       	subi	r28, 0xC4	; 196
    63f4:	d4 4d       	sbci	r29, 0xD4	; 212
    63f6:	88 83       	st	Y, r24
    63f8:	99 83       	std	Y+1, r25	; 0x01
    63fa:	f7 01       	movw	r30, r14
    63fc:	02 e0       	ldi	r16, 0x02	; 2
    63fe:	06 93       	lac	Z, r16
    6400:	e4 c0       	rjmp	.+456    	; 0x65ca <udd_ep_trans_complet+0x2f0>
    6402:	d8 01       	movw	r26, r16
    6404:	8c 91       	ld	r24, X
    6406:	81 ff       	sbrs	r24, 1
    6408:	cd c0       	rjmp	.+410    	; 0x65a4 <udd_ep_trans_complet+0x2ca>
    640a:	8d 7f       	andi	r24, 0xFD	; 253
    640c:	8c 93       	st	X, r24
    640e:	cc 0f       	add	r28, r28
    6410:	dd 1f       	adc	r29, r29
    6412:	cc 0f       	add	r28, r28
    6414:	dd 1f       	adc	r29, r29
    6416:	cc 0f       	add	r28, r28
    6418:	dd 1f       	adc	r29, r29
    641a:	c4 5d       	subi	r28, 0xD4	; 212
    641c:	d4 4d       	sbci	r29, 0xD4	; 212
    641e:	1a 8a       	std	Y+18, r1	; 0x12
    6420:	1b 8a       	std	Y+19, r1	; 0x13
    6422:	1e 86       	std	Y+14, r1	; 0x0e
    6424:	1f 86       	std	Y+15, r1	; 0x0f
    6426:	f7 01       	movw	r30, r14
    6428:	02 e0       	ldi	r16, 0x02	; 2
    642a:	06 93       	lac	Z, r16
    642c:	ce c0       	rjmp	.+412    	; 0x65ca <udd_ep_trans_complet+0x2f0>
    642e:	fe 01       	movw	r30, r28
    6430:	ee 0f       	add	r30, r30
    6432:	ff 1f       	adc	r31, r31
    6434:	ee 0f       	add	r30, r30
    6436:	ff 1f       	adc	r31, r31
    6438:	ee 0f       	add	r30, r30
    643a:	ff 1f       	adc	r31, r31
    643c:	e4 5d       	subi	r30, 0xD4	; 212
    643e:	f4 4d       	sbci	r31, 0xD4	; 212
    6440:	a6 84       	ldd	r10, Z+14	; 0x0e
    6442:	b7 84       	ldd	r11, Z+15	; 0x0f
    6444:	d8 01       	movw	r26, r16
    6446:	8c 91       	ld	r24, X
    6448:	82 ff       	sbrs	r24, 2
    644a:	1b c0       	rjmp	.+54     	; 0x6482 <udd_ep_trans_complet+0x1a8>
    644c:	11 96       	adiw	r26, 0x01	; 1
    644e:	ed 91       	ld	r30, X+
    6450:	fc 91       	ld	r31, X
    6452:	12 97       	sbiw	r26, 0x02	; 2
    6454:	15 96       	adiw	r26, 0x05	; 5
    6456:	2d 91       	ld	r18, X+
    6458:	3c 91       	ld	r19, X
    645a:	16 97       	sbiw	r26, 0x06	; 6
    645c:	13 96       	adiw	r26, 0x03	; 3
    645e:	8d 91       	ld	r24, X+
    6460:	9c 91       	ld	r25, X
    6462:	14 97       	sbiw	r26, 0x04	; 4
    6464:	b4 01       	movw	r22, r8
    6466:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <__udivmodhi4>
    646a:	b0 e4       	ldi	r27, 0x40	; 64
    646c:	db 9e       	mul	r13, r27
    646e:	b0 01       	movw	r22, r0
    6470:	11 24       	eor	r1, r1
    6472:	6f 5f       	subi	r22, 0xFF	; 255
    6474:	75 4d       	sbci	r23, 0xD5	; 213
    6476:	ac 01       	movw	r20, r24
    6478:	cf 01       	movw	r24, r30
    647a:	82 0f       	add	r24, r18
    647c:	93 1f       	adc	r25, r19
    647e:	0e 94 6f 42 	call	0x84de	; 0x84de <memcpy>
    6482:	f8 01       	movw	r30, r16
    6484:	25 81       	ldd	r18, Z+5	; 0x05
    6486:	36 81       	ldd	r19, Z+6	; 0x06
    6488:	2a 0d       	add	r18, r10
    648a:	3b 1d       	adc	r19, r11
    648c:	25 83       	std	Z+5, r18	; 0x05
    648e:	36 83       	std	Z+6, r19	; 0x06
    6490:	83 81       	ldd	r24, Z+3	; 0x03
    6492:	94 81       	ldd	r25, Z+4	; 0x04
    6494:	82 17       	cp	r24, r18
    6496:	93 07       	cpc	r25, r19
    6498:	68 f4       	brcc	.+26     	; 0x64b4 <udd_ep_trans_complet+0x1da>
    649a:	85 83       	std	Z+5, r24	; 0x05
    649c:	96 83       	std	Z+6, r25	; 0x06
    649e:	cc 0f       	add	r28, r28
    64a0:	dd 1f       	adc	r29, r29
    64a2:	cc 0f       	add	r28, r28
    64a4:	dd 1f       	adc	r29, r29
    64a6:	cc 0f       	add	r28, r28
    64a8:	dd 1f       	adc	r29, r29
    64aa:	c4 5d       	subi	r28, 0xD4	; 212
    64ac:	d4 4d       	sbci	r29, 0xD4	; 212
    64ae:	8a 89       	ldd	r24, Y+18	; 0x12
    64b0:	9b 89       	ldd	r25, Y+19	; 0x13
    64b2:	78 c0       	rjmp	.+240    	; 0x65a4 <udd_ep_trans_complet+0x2ca>
    64b4:	fe 01       	movw	r30, r28
    64b6:	ee 0f       	add	r30, r30
    64b8:	ff 1f       	adc	r31, r31
    64ba:	ee 0f       	add	r30, r30
    64bc:	ff 1f       	adc	r31, r31
    64be:	ee 0f       	add	r30, r30
    64c0:	ff 1f       	adc	r31, r31
    64c2:	e4 5d       	subi	r30, 0xD4	; 212
    64c4:	f4 4d       	sbci	r31, 0xD4	; 212
    64c6:	42 89       	ldd	r20, Z+18	; 0x12
    64c8:	53 89       	ldd	r21, Z+19	; 0x13
    64ca:	a4 16       	cp	r10, r20
    64cc:	b5 06       	cpc	r11, r21
    64ce:	09 f0       	breq	.+2      	; 0x64d2 <udd_ep_trans_complet+0x1f8>
    64d0:	69 c0       	rjmp	.+210    	; 0x65a4 <udd_ep_trans_complet+0x2ca>
    64d2:	28 17       	cp	r18, r24
    64d4:	39 07       	cpc	r19, r25
    64d6:	09 f4       	brne	.+2      	; 0x64da <udd_ep_trans_complet+0x200>
    64d8:	65 c0       	rjmp	.+202    	; 0x65a4 <udd_ep_trans_complet+0x2ca>
    64da:	ac 01       	movw	r20, r24
    64dc:	42 1b       	sub	r20, r18
    64de:	53 0b       	sbc	r21, r19
    64e0:	9a 01       	movw	r18, r20
    64e2:	21 15       	cp	r18, r1
    64e4:	54 e0       	ldi	r21, 0x04	; 4
    64e6:	35 07       	cpc	r19, r21
    64e8:	48 f0       	brcs	.+18     	; 0x64fc <udd_ep_trans_complet+0x222>
    64ea:	2f ef       	ldi	r18, 0xFF	; 255
    64ec:	33 e0       	ldi	r19, 0x03	; 3
    64ee:	c9 01       	movw	r24, r18
    64f0:	b4 01       	movw	r22, r8
    64f2:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <__udivmodhi4>
    64f6:	28 1b       	sub	r18, r24
    64f8:	39 0b       	sbc	r19, r25
    64fa:	06 c0       	rjmp	.+12     	; 0x6508 <udd_ep_trans_complet+0x22e>
    64fc:	c9 01       	movw	r24, r18
    64fe:	b4 01       	movw	r22, r8
    6500:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <__udivmodhi4>
    6504:	28 1b       	sub	r18, r24
    6506:	39 0b       	sbc	r19, r25
    6508:	fe 01       	movw	r30, r28
    650a:	ee 0f       	add	r30, r30
    650c:	ff 1f       	adc	r31, r31
    650e:	ee 0f       	add	r30, r30
    6510:	ff 1f       	adc	r31, r31
    6512:	ee 0f       	add	r30, r30
    6514:	ff 1f       	adc	r31, r31
    6516:	e4 5d       	subi	r30, 0xD4	; 212
    6518:	f4 4d       	sbci	r31, 0xD4	; 212
    651a:	16 86       	std	Z+14, r1	; 0x0e
    651c:	17 86       	std	Z+15, r1	; 0x0f
    651e:	28 15       	cp	r18, r8
    6520:	39 05       	cpc	r19, r9
    6522:	00 f5       	brcc	.+64     	; 0x6564 <udd_ep_trans_complet+0x28a>
    6524:	d8 01       	movw	r26, r16
    6526:	8c 91       	ld	r24, X
    6528:	84 60       	ori	r24, 0x04	; 4
    652a:	8c 93       	st	X, r24
    652c:	b0 e4       	ldi	r27, 0x40	; 64
    652e:	db 9e       	mul	r13, r27
    6530:	c0 01       	movw	r24, r0
    6532:	11 24       	eor	r1, r1
    6534:	8f 5f       	subi	r24, 0xFF	; 255
    6536:	95 4d       	sbci	r25, 0xD5	; 213
    6538:	fe 01       	movw	r30, r28
    653a:	ee 0f       	add	r30, r30
    653c:	ff 1f       	adc	r31, r31
    653e:	ee 0f       	add	r30, r30
    6540:	ff 1f       	adc	r31, r31
    6542:	ee 0f       	add	r30, r30
    6544:	ff 1f       	adc	r31, r31
    6546:	e4 5c       	subi	r30, 0xC4	; 196
    6548:	f4 4d       	sbci	r31, 0xD4	; 212
    654a:	80 83       	st	Z, r24
    654c:	91 83       	std	Z+1, r25	; 0x01
    654e:	cc 0f       	add	r28, r28
    6550:	dd 1f       	adc	r29, r29
    6552:	cc 0f       	add	r28, r28
    6554:	dd 1f       	adc	r29, r29
    6556:	cc 0f       	add	r28, r28
    6558:	dd 1f       	adc	r29, r29
    655a:	c4 5d       	subi	r28, 0xD4	; 212
    655c:	d4 4d       	sbci	r29, 0xD4	; 212
    655e:	8a 8a       	std	Y+18, r8	; 0x12
    6560:	9b 8a       	std	Y+19, r9	; 0x13
    6562:	1c c0       	rjmp	.+56     	; 0x659c <udd_ep_trans_complet+0x2c2>
    6564:	f8 01       	movw	r30, r16
    6566:	41 81       	ldd	r20, Z+1	; 0x01
    6568:	52 81       	ldd	r21, Z+2	; 0x02
    656a:	85 81       	ldd	r24, Z+5	; 0x05
    656c:	96 81       	ldd	r25, Z+6	; 0x06
    656e:	84 0f       	add	r24, r20
    6570:	95 1f       	adc	r25, r21
    6572:	fe 01       	movw	r30, r28
    6574:	ee 0f       	add	r30, r30
    6576:	ff 1f       	adc	r31, r31
    6578:	ee 0f       	add	r30, r30
    657a:	ff 1f       	adc	r31, r31
    657c:	ee 0f       	add	r30, r30
    657e:	ff 1f       	adc	r31, r31
    6580:	e4 5c       	subi	r30, 0xC4	; 196
    6582:	f4 4d       	sbci	r31, 0xD4	; 212
    6584:	80 83       	st	Z, r24
    6586:	91 83       	std	Z+1, r25	; 0x01
    6588:	cc 0f       	add	r28, r28
    658a:	dd 1f       	adc	r29, r29
    658c:	cc 0f       	add	r28, r28
    658e:	dd 1f       	adc	r29, r29
    6590:	cc 0f       	add	r28, r28
    6592:	dd 1f       	adc	r29, r29
    6594:	c4 5d       	subi	r28, 0xD4	; 212
    6596:	d4 4d       	sbci	r29, 0xD4	; 212
    6598:	2a 8b       	std	Y+18, r18	; 0x12
    659a:	3b 8b       	std	Y+19, r19	; 0x13
    659c:	f7 01       	movw	r30, r14
    659e:	02 e0       	ldi	r16, 0x02	; 2
    65a0:	06 93       	lac	Z, r16
    65a2:	13 c0       	rjmp	.+38     	; 0x65ca <udd_ep_trans_complet+0x2f0>
    65a4:	d8 01       	movw	r26, r16
    65a6:	8c 91       	ld	r24, X
    65a8:	80 ff       	sbrs	r24, 0
    65aa:	0f c0       	rjmp	.+30     	; 0x65ca <udd_ep_trans_complet+0x2f0>
    65ac:	8e 7f       	andi	r24, 0xFE	; 254
    65ae:	8c 93       	st	X, r24
    65b0:	17 96       	adiw	r26, 0x07	; 7
    65b2:	ed 91       	ld	r30, X+
    65b4:	fc 91       	ld	r31, X
    65b6:	18 97       	sbiw	r26, 0x08	; 8
    65b8:	30 97       	sbiw	r30, 0x00	; 0
    65ba:	39 f0       	breq	.+14     	; 0x65ca <udd_ep_trans_complet+0x2f0>
    65bc:	15 96       	adiw	r26, 0x05	; 5
    65be:	6d 91       	ld	r22, X+
    65c0:	7c 91       	ld	r23, X
    65c2:	16 97       	sbiw	r26, 0x06	; 6
    65c4:	4d 2d       	mov	r20, r13
    65c6:	80 e0       	ldi	r24, 0x00	; 0
    65c8:	19 95       	eicall
    65ca:	df 91       	pop	r29
    65cc:	cf 91       	pop	r28
    65ce:	1f 91       	pop	r17
    65d0:	0f 91       	pop	r16
    65d2:	ff 90       	pop	r15
    65d4:	ef 90       	pop	r14
    65d6:	df 90       	pop	r13
    65d8:	bf 90       	pop	r11
    65da:	af 90       	pop	r10
    65dc:	9f 90       	pop	r9
    65de:	8f 90       	pop	r8
    65e0:	08 95       	ret

000065e2 <udd_attach>:
    65e2:	1f 93       	push	r17
    65e4:	cf 93       	push	r28
    65e6:	df 93       	push	r29
    65e8:	1f 92       	push	r1
    65ea:	cd b7       	in	r28, 0x3d	; 61
    65ec:	de b7       	in	r29, 0x3e	; 62
    65ee:	8f b7       	in	r24, 0x3f	; 63
    65f0:	89 83       	std	Y+1, r24	; 0x01
    65f2:	f8 94       	cli
    65f4:	19 81       	ldd	r17, Y+1	; 0x01
    65f6:	81 e0       	ldi	r24, 0x01	; 1
    65f8:	cd dc       	rcall	.-1638   	; 0x5f94 <udd_sleep_mode>
    65fa:	ea ec       	ldi	r30, 0xCA	; 202
    65fc:	f4 e0       	ldi	r31, 0x04	; 4
    65fe:	80 e4       	ldi	r24, 0x40	; 64
    6600:	80 83       	st	Z, r24
    6602:	80 e2       	ldi	r24, 0x20	; 32
    6604:	80 83       	st	Z, r24
    6606:	e1 ec       	ldi	r30, 0xC1	; 193
    6608:	f4 e0       	ldi	r31, 0x04	; 4
    660a:	80 81       	ld	r24, Z
    660c:	81 60       	ori	r24, 0x01	; 1
    660e:	80 83       	st	Z, r24
    6610:	a9 ec       	ldi	r26, 0xC9	; 201
    6612:	b4 e0       	ldi	r27, 0x04	; 4
    6614:	8c 91       	ld	r24, X
    6616:	82 60       	ori	r24, 0x02	; 2
    6618:	8c 93       	st	X, r24
    661a:	e8 ec       	ldi	r30, 0xC8	; 200
    661c:	f4 e0       	ldi	r31, 0x04	; 4
    661e:	80 81       	ld	r24, Z
    6620:	80 64       	ori	r24, 0x40	; 64
    6622:	80 83       	st	Z, r24
    6624:	8c 91       	ld	r24, X
    6626:	81 60       	ori	r24, 0x01	; 1
    6628:	8c 93       	st	X, r24
    662a:	80 81       	ld	r24, Z
    662c:	80 68       	ori	r24, 0x80	; 128
    662e:	80 83       	st	Z, r24
    6630:	1f bf       	out	0x3f, r17	; 63
    6632:	0f 90       	pop	r0
    6634:	df 91       	pop	r29
    6636:	cf 91       	pop	r28
    6638:	1f 91       	pop	r17
    663a:	08 95       	ret

0000663c <udd_enable>:
    663c:	0f 93       	push	r16
    663e:	1f 93       	push	r17
    6640:	cf 93       	push	r28
    6642:	df 93       	push	r29
    6644:	1f 92       	push	r1
    6646:	1f 92       	push	r1
    6648:	cd b7       	in	r28, 0x3d	; 61
    664a:	de b7       	in	r29, 0x3e	; 62
    664c:	00 e6       	ldi	r16, 0x60	; 96
    664e:	10 e0       	ldi	r17, 0x00	; 0
    6650:	f8 01       	movw	r30, r16
    6652:	10 82       	st	Z, r1
    6654:	80 e3       	ldi	r24, 0x30	; 48
    6656:	0e 94 bf 10 	call	0x217e	; 0x217e <sysclk_enable_usb>
    665a:	e0 ec       	ldi	r30, 0xC0	; 192
    665c:	f4 e0       	ldi	r31, 0x04	; 4
    665e:	80 81       	ld	r24, Z
    6660:	80 64       	ori	r24, 0x40	; 64
    6662:	80 83       	st	Z, r24
    6664:	81 e0       	ldi	r24, 0x01	; 1
    6666:	f8 01       	movw	r30, r16
    6668:	80 83       	st	Z, r24
    666a:	8f b7       	in	r24, 0x3f	; 63
    666c:	8a 83       	std	Y+2, r24	; 0x02
    666e:	f8 94       	cli
    6670:	1a 81       	ldd	r17, Y+2	; 0x02
    6672:	ec e2       	ldi	r30, 0x2C	; 44
    6674:	fb e2       	ldi	r31, 0x2B	; 43
    6676:	15 86       	std	Z+13, r1	; 0x0d
    6678:	15 8a       	std	Z+21, r1	; 0x15
    667a:	15 8e       	std	Z+29, r1	; 0x1d
    667c:	15 a2       	std	Z+37, r1	; 0x25
    667e:	15 a6       	std	Z+45, r1	; 0x2d
    6680:	15 aa       	std	Z+53, r1	; 0x35
    6682:	e1 ec       	ldi	r30, 0xC1	; 193
    6684:	fa e2       	ldi	r31, 0x2A	; 42
    6686:	80 81       	ld	r24, Z
    6688:	8e 7f       	andi	r24, 0xFE	; 254
    668a:	80 83       	st	Z, r24
    668c:	ea ec       	ldi	r30, 0xCA	; 202
    668e:	fa e2       	ldi	r31, 0x2A	; 42
    6690:	80 81       	ld	r24, Z
    6692:	8e 7f       	andi	r24, 0xFE	; 254
    6694:	80 83       	st	Z, r24
    6696:	e3 ed       	ldi	r30, 0xD3	; 211
    6698:	fa e2       	ldi	r31, 0x2A	; 42
    669a:	80 81       	ld	r24, Z
    669c:	8e 7f       	andi	r24, 0xFE	; 254
    669e:	80 83       	st	Z, r24
    66a0:	ec ed       	ldi	r30, 0xDC	; 220
    66a2:	fa e2       	ldi	r31, 0x2A	; 42
    66a4:	80 81       	ld	r24, Z
    66a6:	8e 7f       	andi	r24, 0xFE	; 254
    66a8:	80 83       	st	Z, r24
    66aa:	6a e1       	ldi	r22, 0x1A	; 26
    66ac:	70 e0       	ldi	r23, 0x00	; 0
    66ae:	82 e0       	ldi	r24, 0x02	; 2
    66b0:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
    66b4:	8f 3f       	cpi	r24, 0xFF	; 255
    66b6:	19 f0       	breq	.+6      	; 0x66be <udd_enable+0x82>
    66b8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    66bc:	03 c0       	rjmp	.+6      	; 0x66c4 <udd_enable+0x88>
    66be:	8f e1       	ldi	r24, 0x1F	; 31
    66c0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    66c4:	6b e1       	ldi	r22, 0x1B	; 27
    66c6:	70 e0       	ldi	r23, 0x00	; 0
    66c8:	82 e0       	ldi	r24, 0x02	; 2
    66ca:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
    66ce:	8f 3f       	cpi	r24, 0xFF	; 255
    66d0:	19 f0       	breq	.+6      	; 0x66d8 <udd_enable+0x9c>
    66d2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    66d6:	03 c0       	rjmp	.+6      	; 0x66de <udd_enable+0xa2>
    66d8:	8f e1       	ldi	r24, 0x1F	; 31
    66da:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    66de:	e0 ec       	ldi	r30, 0xC0	; 192
    66e0:	f4 e0       	ldi	r31, 0x04	; 4
    66e2:	80 81       	ld	r24, Z
    66e4:	82 60       	ori	r24, 0x02	; 2
    66e6:	80 83       	st	Z, r24
    66e8:	80 81       	ld	r24, Z
    66ea:	80 68       	ori	r24, 0x80	; 128
    66ec:	80 83       	st	Z, r24
    66ee:	80 81       	ld	r24, Z
    66f0:	80 61       	ori	r24, 0x10	; 16
    66f2:	80 83       	st	Z, r24
    66f4:	88 e3       	ldi	r24, 0x38	; 56
    66f6:	9b e2       	ldi	r25, 0x2B	; 43
    66f8:	86 83       	std	Z+6, r24	; 0x06
    66fa:	97 83       	std	Z+7, r25	; 0x07
    66fc:	80 81       	ld	r24, Z
    66fe:	80 62       	ori	r24, 0x20	; 32
    6700:	80 83       	st	Z, r24
    6702:	8f ef       	ldi	r24, 0xFF	; 255
    6704:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    6708:	e8 ec       	ldi	r30, 0xC8	; 200
    670a:	f4 e0       	ldi	r31, 0x04	; 4
    670c:	80 81       	ld	r24, Z
    670e:	81 60       	ori	r24, 0x01	; 1
    6710:	80 83       	st	Z, r24
    6712:	10 92 6c 2b 	sts	0x2B6C, r1	; 0x802b6c <udd_b_idle>
    6716:	80 91 7a 2b 	lds	r24, 0x2B7A	; 0x802b7a <sleepmgr_locks+0x5>
    671a:	8f 3f       	cpi	r24, 0xFF	; 255
    671c:	09 f4       	brne	.+2      	; 0x6720 <udd_enable+0xe4>
    671e:	ff cf       	rjmp	.-2      	; 0x671e <udd_enable+0xe2>
    6720:	8f b7       	in	r24, 0x3f	; 63
    6722:	89 83       	std	Y+1, r24	; 0x01
    6724:	f8 94       	cli
    6726:	99 81       	ldd	r25, Y+1	; 0x01
    6728:	e5 e7       	ldi	r30, 0x75	; 117
    672a:	fb e2       	ldi	r31, 0x2B	; 43
    672c:	85 81       	ldd	r24, Z+5	; 0x05
    672e:	8f 5f       	subi	r24, 0xFF	; 255
    6730:	85 83       	std	Z+5, r24	; 0x05
    6732:	9f bf       	out	0x3f, r25	; 63
    6734:	56 df       	rcall	.-340    	; 0x65e2 <udd_attach>
    6736:	1f bf       	out	0x3f, r17	; 63
    6738:	0f 90       	pop	r0
    673a:	0f 90       	pop	r0
    673c:	df 91       	pop	r29
    673e:	cf 91       	pop	r28
    6740:	1f 91       	pop	r17
    6742:	0f 91       	pop	r16
    6744:	08 95       	ret

00006746 <udd_is_high_speed>:
    6746:	80 e0       	ldi	r24, 0x00	; 0
    6748:	08 95       	ret

0000674a <udd_set_address>:
    674a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    674e:	08 95       	ret

00006750 <udd_getaddress>:
    6750:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    6754:	08 95       	ret

00006756 <udd_get_frame_number>:
    6756:	80 91 68 2b 	lds	r24, 0x2B68	; 0x802b68 <udd_sram+0x3c>
    675a:	90 91 69 2b 	lds	r25, 0x2B69	; 0x802b69 <udd_sram+0x3d>
    675e:	08 95       	ret

00006760 <udd_get_micro_frame_number>:
    6760:	80 e0       	ldi	r24, 0x00	; 0
    6762:	90 e0       	ldi	r25, 0x00	; 0
    6764:	08 95       	ret

00006766 <udd_set_setup_payload>:
    6766:	e1 e8       	ldi	r30, 0x81	; 129
    6768:	fb e2       	ldi	r31, 0x2B	; 43
    676a:	80 87       	std	Z+8, r24	; 0x08
    676c:	91 87       	std	Z+9, r25	; 0x09
    676e:	62 87       	std	Z+10, r22	; 0x0a
    6770:	73 87       	std	Z+11, r23	; 0x0b
    6772:	08 95       	ret

00006774 <udd_ep_alloc>:
    6774:	28 2f       	mov	r18, r24
    6776:	2f 70       	andi	r18, 0x0F	; 15
    6778:	30 e0       	ldi	r19, 0x00	; 0
    677a:	22 0f       	add	r18, r18
    677c:	33 1f       	adc	r19, r19
    677e:	08 2e       	mov	r0, r24
    6780:	00 0c       	add	r0, r0
    6782:	99 0b       	sbc	r25, r25
    6784:	88 27       	eor	r24, r24
    6786:	99 0f       	add	r25, r25
    6788:	88 1f       	adc	r24, r24
    678a:	99 27       	eor	r25, r25
    678c:	82 0f       	add	r24, r18
    678e:	93 1f       	adc	r25, r19
    6790:	fc 01       	movw	r30, r24
    6792:	ee 0f       	add	r30, r30
    6794:	ff 1f       	adc	r31, r31
    6796:	ee 0f       	add	r30, r30
    6798:	ff 1f       	adc	r31, r31
    679a:	ee 0f       	add	r30, r30
    679c:	ff 1f       	adc	r31, r31
    679e:	e4 5d       	subi	r30, 0xD4	; 212
    67a0:	f4 4d       	sbci	r31, 0xD4	; 212
    67a2:	25 85       	ldd	r18, Z+13	; 0x0d
    67a4:	20 7c       	andi	r18, 0xC0	; 192
    67a6:	09 f0       	breq	.+2      	; 0x67aa <udd_ep_alloc+0x36>
    67a8:	69 c0       	rjmp	.+210    	; 0x687c <udd_ep_alloc+0x108>
    67aa:	63 70       	andi	r22, 0x03	; 3
    67ac:	61 30       	cpi	r22, 0x01	; 1
    67ae:	11 f0       	breq	.+4      	; 0x67b4 <udd_ep_alloc+0x40>
    67b0:	18 f4       	brcc	.+6      	; 0x67b8 <udd_ep_alloc+0x44>
    67b2:	04 c0       	rjmp	.+8      	; 0x67bc <udd_ep_alloc+0x48>
    67b4:	60 ec       	ldi	r22, 0xC0	; 192
    67b6:	03 c0       	rjmp	.+6      	; 0x67be <udd_ep_alloc+0x4a>
    67b8:	60 e8       	ldi	r22, 0x80	; 128
    67ba:	01 c0       	rjmp	.+2      	; 0x67be <udd_ep_alloc+0x4a>
    67bc:	60 e4       	ldi	r22, 0x40	; 64
    67be:	40 38       	cpi	r20, 0x80	; 128
    67c0:	51 05       	cpc	r21, r1
    67c2:	e9 f0       	breq	.+58     	; 0x67fe <udd_ep_alloc+0x8a>
    67c4:	50 f4       	brcc	.+20     	; 0x67da <udd_ep_alloc+0x66>
    67c6:	40 32       	cpi	r20, 0x20	; 32
    67c8:	51 05       	cpc	r21, r1
    67ca:	a9 f0       	breq	.+42     	; 0x67f6 <udd_ep_alloc+0x82>
    67cc:	40 34       	cpi	r20, 0x40	; 64
    67ce:	51 05       	cpc	r21, r1
    67d0:	a1 f0       	breq	.+40     	; 0x67fa <udd_ep_alloc+0x86>
    67d2:	40 31       	cpi	r20, 0x10	; 16
    67d4:	51 05       	cpc	r21, r1
    67d6:	d9 f4       	brne	.+54     	; 0x680e <udd_ep_alloc+0x9a>
    67d8:	0c c0       	rjmp	.+24     	; 0x67f2 <udd_ep_alloc+0x7e>
    67da:	41 15       	cp	r20, r1
    67dc:	22 e0       	ldi	r18, 0x02	; 2
    67de:	52 07       	cpc	r21, r18
    67e0:	91 f0       	breq	.+36     	; 0x6806 <udd_ep_alloc+0x92>
    67e2:	4f 3f       	cpi	r20, 0xFF	; 255
    67e4:	23 e0       	ldi	r18, 0x03	; 3
    67e6:	52 07       	cpc	r21, r18
    67e8:	81 f0       	breq	.+32     	; 0x680a <udd_ep_alloc+0x96>
    67ea:	41 15       	cp	r20, r1
    67ec:	51 40       	sbci	r21, 0x01	; 1
    67ee:	79 f4       	brne	.+30     	; 0x680e <udd_ep_alloc+0x9a>
    67f0:	08 c0       	rjmp	.+16     	; 0x6802 <udd_ep_alloc+0x8e>
    67f2:	21 e0       	ldi	r18, 0x01	; 1
    67f4:	0d c0       	rjmp	.+26     	; 0x6810 <udd_ep_alloc+0x9c>
    67f6:	22 e0       	ldi	r18, 0x02	; 2
    67f8:	0b c0       	rjmp	.+22     	; 0x6810 <udd_ep_alloc+0x9c>
    67fa:	23 e0       	ldi	r18, 0x03	; 3
    67fc:	09 c0       	rjmp	.+18     	; 0x6810 <udd_ep_alloc+0x9c>
    67fe:	24 e0       	ldi	r18, 0x04	; 4
    6800:	07 c0       	rjmp	.+14     	; 0x6810 <udd_ep_alloc+0x9c>
    6802:	25 e0       	ldi	r18, 0x05	; 5
    6804:	05 c0       	rjmp	.+10     	; 0x6810 <udd_ep_alloc+0x9c>
    6806:	26 e0       	ldi	r18, 0x06	; 6
    6808:	03 c0       	rjmp	.+6      	; 0x6810 <udd_ep_alloc+0x9c>
    680a:	27 e0       	ldi	r18, 0x07	; 7
    680c:	01 c0       	rjmp	.+2      	; 0x6810 <udd_ep_alloc+0x9c>
    680e:	20 e0       	ldi	r18, 0x00	; 0
    6810:	fc 01       	movw	r30, r24
    6812:	ee 0f       	add	r30, r30
    6814:	ff 1f       	adc	r31, r31
    6816:	ee 0f       	add	r30, r30
    6818:	ff 1f       	adc	r31, r31
    681a:	ee 0f       	add	r30, r30
    681c:	ff 1f       	adc	r31, r31
    681e:	e4 5d       	subi	r30, 0xD4	; 212
    6820:	f4 4d       	sbci	r31, 0xD4	; 212
    6822:	15 86       	std	Z+13, r1	; 0x0d
    6824:	36 e0       	ldi	r19, 0x06	; 6
    6826:	34 87       	std	Z+12, r19	; 0x0c
    6828:	26 2b       	or	r18, r22
    682a:	25 87       	std	Z+13, r18	; 0x0d
    682c:	fc 01       	movw	r30, r24
    682e:	ee 0f       	add	r30, r30
    6830:	ff 1f       	adc	r31, r31
    6832:	ee 0f       	add	r30, r30
    6834:	ff 1f       	adc	r31, r31
    6836:	ee 0f       	add	r30, r30
    6838:	ff 1f       	adc	r31, r31
    683a:	e4 5d       	subi	r30, 0xD4	; 212
    683c:	f4 4d       	sbci	r31, 0xD4	; 212
    683e:	25 85       	ldd	r18, Z+13	; 0x0d
    6840:	20 7c       	andi	r18, 0xC0	; 192
    6842:	20 3c       	cpi	r18, 0xC0	; 192
    6844:	69 f4       	brne	.+26     	; 0x6860 <udd_ep_alloc+0xec>
    6846:	fc 01       	movw	r30, r24
    6848:	ee 0f       	add	r30, r30
    684a:	ff 1f       	adc	r31, r31
    684c:	ee 0f       	add	r30, r30
    684e:	ff 1f       	adc	r31, r31
    6850:	ee 0f       	add	r30, r30
    6852:	ff 1f       	adc	r31, r31
    6854:	e4 5d       	subi	r30, 0xD4	; 212
    6856:	f4 4d       	sbci	r31, 0xD4	; 212
    6858:	25 85       	ldd	r18, Z+13	; 0x0d
    685a:	27 70       	andi	r18, 0x07	; 7
    685c:	27 30       	cpi	r18, 0x07	; 7
    685e:	81 f0       	breq	.+32     	; 0x6880 <udd_ep_alloc+0x10c>
    6860:	88 0f       	add	r24, r24
    6862:	99 1f       	adc	r25, r25
    6864:	88 0f       	add	r24, r24
    6866:	99 1f       	adc	r25, r25
    6868:	88 0f       	add	r24, r24
    686a:	99 1f       	adc	r25, r25
    686c:	fc 01       	movw	r30, r24
    686e:	e4 5d       	subi	r30, 0xD4	; 212
    6870:	f4 4d       	sbci	r31, 0xD4	; 212
    6872:	85 85       	ldd	r24, Z+13	; 0x0d
    6874:	80 62       	ori	r24, 0x20	; 32
    6876:	85 87       	std	Z+13, r24	; 0x0d
    6878:	81 e0       	ldi	r24, 0x01	; 1
    687a:	08 95       	ret
    687c:	80 e0       	ldi	r24, 0x00	; 0
    687e:	08 95       	ret
    6880:	81 e0       	ldi	r24, 0x01	; 1
    6882:	08 95       	ret

00006884 <udd_ep_is_halted>:
    6884:	e8 2f       	mov	r30, r24
    6886:	ef 70       	andi	r30, 0x0F	; 15
    6888:	f0 e0       	ldi	r31, 0x00	; 0
    688a:	ee 0f       	add	r30, r30
    688c:	ff 1f       	adc	r31, r31
    688e:	08 2e       	mov	r0, r24
    6890:	00 0c       	add	r0, r0
    6892:	99 0b       	sbc	r25, r25
    6894:	88 27       	eor	r24, r24
    6896:	99 0f       	add	r25, r25
    6898:	88 1f       	adc	r24, r24
    689a:	99 27       	eor	r25, r25
    689c:	e8 0f       	add	r30, r24
    689e:	f9 1f       	adc	r31, r25
    68a0:	ee 0f       	add	r30, r30
    68a2:	ff 1f       	adc	r31, r31
    68a4:	ee 0f       	add	r30, r30
    68a6:	ff 1f       	adc	r31, r31
    68a8:	ee 0f       	add	r30, r30
    68aa:	ff 1f       	adc	r31, r31
    68ac:	e4 5d       	subi	r30, 0xD4	; 212
    68ae:	f4 4d       	sbci	r31, 0xD4	; 212
    68b0:	85 85       	ldd	r24, Z+13	; 0x0d
    68b2:	82 fb       	bst	r24, 2
    68b4:	88 27       	eor	r24, r24
    68b6:	80 f9       	bld	r24, 0
    68b8:	08 95       	ret

000068ba <udd_ep_clear_halt>:
    68ba:	0f 93       	push	r16
    68bc:	28 2f       	mov	r18, r24
    68be:	2f 70       	andi	r18, 0x0F	; 15
    68c0:	30 e0       	ldi	r19, 0x00	; 0
    68c2:	a9 01       	movw	r20, r18
    68c4:	44 0f       	add	r20, r20
    68c6:	55 1f       	adc	r21, r21
    68c8:	28 2f       	mov	r18, r24
    68ca:	08 2e       	mov	r0, r24
    68cc:	00 0c       	add	r0, r0
    68ce:	33 0b       	sbc	r19, r19
    68d0:	22 27       	eor	r18, r18
    68d2:	33 0f       	add	r19, r19
    68d4:	22 1f       	adc	r18, r18
    68d6:	33 27       	eor	r19, r19
    68d8:	24 0f       	add	r18, r20
    68da:	35 1f       	adc	r19, r21
    68dc:	a9 01       	movw	r20, r18
    68de:	44 0f       	add	r20, r20
    68e0:	55 1f       	adc	r21, r21
    68e2:	44 0f       	add	r20, r20
    68e4:	55 1f       	adc	r21, r21
    68e6:	44 0f       	add	r20, r20
    68e8:	55 1f       	adc	r21, r21
    68ea:	fa 01       	movw	r30, r20
    68ec:	e8 5c       	subi	r30, 0xC8	; 200
    68ee:	f4 4d       	sbci	r31, 0xD4	; 212
    68f0:	01 e0       	ldi	r16, 0x01	; 1
    68f2:	06 93       	lac	Z, r16
    68f4:	fa 01       	movw	r30, r20
    68f6:	e4 5d       	subi	r30, 0xD4	; 212
    68f8:	f4 4d       	sbci	r31, 0xD4	; 212
    68fa:	95 85       	ldd	r25, Z+13	; 0x0d
    68fc:	92 ff       	sbrs	r25, 2
    68fe:	11 c0       	rjmp	.+34     	; 0x6922 <udd_ep_clear_halt+0x68>
    6900:	fa 01       	movw	r30, r20
    6902:	e4 5d       	subi	r30, 0xD4	; 212
    6904:	f4 4d       	sbci	r31, 0xD4	; 212
    6906:	95 85       	ldd	r25, Z+13	; 0x0d
    6908:	9b 7f       	andi	r25, 0xFB	; 251
    690a:	95 87       	std	Z+13, r25	; 0x0d
    690c:	59 dc       	rcall	.-1870   	; 0x61c0 <udd_ep_get_job>
    690e:	fc 01       	movw	r30, r24
    6910:	80 81       	ld	r24, Z
    6912:	80 ff       	sbrs	r24, 0
    6914:	06 c0       	rjmp	.+12     	; 0x6922 <udd_ep_clear_halt+0x68>
    6916:	8e 7f       	andi	r24, 0xFE	; 254
    6918:	80 83       	st	Z, r24
    691a:	07 80       	ldd	r0, Z+7	; 0x07
    691c:	f0 85       	ldd	r31, Z+8	; 0x08
    691e:	e0 2d       	mov	r30, r0
    6920:	19 95       	eicall
    6922:	81 e0       	ldi	r24, 0x01	; 1
    6924:	0f 91       	pop	r16
    6926:	08 95       	ret

00006928 <udd_ep_run>:
    6928:	6f 92       	push	r6
    692a:	7f 92       	push	r7
    692c:	8f 92       	push	r8
    692e:	9f 92       	push	r9
    6930:	af 92       	push	r10
    6932:	bf 92       	push	r11
    6934:	cf 92       	push	r12
    6936:	df 92       	push	r13
    6938:	ef 92       	push	r14
    693a:	ff 92       	push	r15
    693c:	0f 93       	push	r16
    693e:	1f 93       	push	r17
    6940:	cf 93       	push	r28
    6942:	df 93       	push	r29
    6944:	1f 92       	push	r1
    6946:	cd b7       	in	r28, 0x3d	; 61
    6948:	de b7       	in	r29, 0x3e	; 62
    694a:	78 2e       	mov	r7, r24
    694c:	66 2e       	mov	r6, r22
    694e:	4a 01       	movw	r8, r20
    6950:	59 01       	movw	r10, r18
    6952:	36 dc       	rcall	.-1940   	; 0x61c0 <udd_ep_get_job>
    6954:	6c 01       	movw	r12, r24
    6956:	27 2d       	mov	r18, r7
    6958:	87 2d       	mov	r24, r7
    695a:	8f 70       	andi	r24, 0x0F	; 15
    695c:	e8 2e       	mov	r14, r24
    695e:	f1 2c       	mov	r15, r1
    6960:	c7 01       	movw	r24, r14
    6962:	88 0f       	add	r24, r24
    6964:	99 1f       	adc	r25, r25
    6966:	e7 2c       	mov	r14, r7
    6968:	07 2c       	mov	r0, r7
    696a:	00 0c       	add	r0, r0
    696c:	ff 08       	sbc	r15, r15
    696e:	ee 24       	eor	r14, r14
    6970:	ff 0c       	add	r15, r15
    6972:	ee 1c       	adc	r14, r14
    6974:	ff 24       	eor	r15, r15
    6976:	e8 0e       	add	r14, r24
    6978:	f9 1e       	adc	r15, r25
    697a:	f7 01       	movw	r30, r14
    697c:	ee 0f       	add	r30, r30
    697e:	ff 1f       	adc	r31, r31
    6980:	ee 0f       	add	r30, r30
    6982:	ff 1f       	adc	r31, r31
    6984:	ee 0f       	add	r30, r30
    6986:	ff 1f       	adc	r31, r31
    6988:	e4 5d       	subi	r30, 0xD4	; 212
    698a:	f4 4d       	sbci	r31, 0xD4	; 212
    698c:	85 85       	ldd	r24, Z+13	; 0x0d
    698e:	80 7c       	andi	r24, 0xC0	; 192
    6990:	09 f4       	brne	.+2      	; 0x6994 <udd_ep_run+0x6c>
    6992:	82 c0       	rjmp	.+260    	; 0x6a98 <udd_ep_run+0x170>
    6994:	f7 01       	movw	r30, r14
    6996:	ee 0f       	add	r30, r30
    6998:	ff 1f       	adc	r31, r31
    699a:	ee 0f       	add	r30, r30
    699c:	ff 1f       	adc	r31, r31
    699e:	ee 0f       	add	r30, r30
    69a0:	ff 1f       	adc	r31, r31
    69a2:	e4 5d       	subi	r30, 0xD4	; 212
    69a4:	f4 4d       	sbci	r31, 0xD4	; 212
    69a6:	85 85       	ldd	r24, Z+13	; 0x0d
    69a8:	80 7c       	andi	r24, 0xC0	; 192
    69aa:	80 3c       	cpi	r24, 0xC0	; 192
    69ac:	61 f0       	breq	.+24     	; 0x69c6 <udd_ep_run+0x9e>
    69ae:	f7 01       	movw	r30, r14
    69b0:	ee 0f       	add	r30, r30
    69b2:	ff 1f       	adc	r31, r31
    69b4:	ee 0f       	add	r30, r30
    69b6:	ff 1f       	adc	r31, r31
    69b8:	ee 0f       	add	r30, r30
    69ba:	ff 1f       	adc	r31, r31
    69bc:	e4 5d       	subi	r30, 0xD4	; 212
    69be:	f4 4d       	sbci	r31, 0xD4	; 212
    69c0:	85 85       	ldd	r24, Z+13	; 0x0d
    69c2:	82 fd       	sbrc	r24, 2
    69c4:	6b c0       	rjmp	.+214    	; 0x6a9c <udd_ep_run+0x174>
    69c6:	8f b7       	in	r24, 0x3f	; 63
    69c8:	89 83       	std	Y+1, r24	; 0x01
    69ca:	f8 94       	cli
    69cc:	89 81       	ldd	r24, Y+1	; 0x01
    69ce:	f6 01       	movw	r30, r12
    69d0:	90 81       	ld	r25, Z
    69d2:	90 ff       	sbrs	r25, 0
    69d4:	03 c0       	rjmp	.+6      	; 0x69dc <udd_ep_run+0xb4>
    69d6:	8f bf       	out	0x3f, r24	; 63
    69d8:	80 e0       	ldi	r24, 0x00	; 0
    69da:	61 c0       	rjmp	.+194    	; 0x6a9e <udd_ep_run+0x176>
    69dc:	f6 01       	movw	r30, r12
    69de:	90 81       	ld	r25, Z
    69e0:	91 60       	ori	r25, 0x01	; 1
    69e2:	90 83       	st	Z, r25
    69e4:	8f bf       	out	0x3f, r24	; 63
    69e6:	81 82       	std	Z+1, r8	; 0x01
    69e8:	92 82       	std	Z+2, r9	; 0x02
    69ea:	a3 82       	std	Z+3, r10	; 0x03
    69ec:	b4 82       	std	Z+4, r11	; 0x04
    69ee:	15 82       	std	Z+5, r1	; 0x05
    69f0:	16 82       	std	Z+6, r1	; 0x06
    69f2:	07 83       	std	Z+7, r16	; 0x07
    69f4:	10 87       	std	Z+8, r17	; 0x08
    69f6:	61 10       	cpse	r6, r1
    69f8:	06 c0       	rjmp	.+12     	; 0x6a06 <udd_ep_run+0xde>
    69fa:	91 e0       	ldi	r25, 0x01	; 1
    69fc:	a1 14       	cp	r10, r1
    69fe:	b1 04       	cpc	r11, r1
    6a00:	19 f0       	breq	.+6      	; 0x6a08 <udd_ep_run+0xe0>
    6a02:	90 e0       	ldi	r25, 0x00	; 0
    6a04:	01 c0       	rjmp	.+2      	; 0x6a08 <udd_ep_run+0xe0>
    6a06:	91 e0       	ldi	r25, 0x01	; 1
    6a08:	f6 01       	movw	r30, r12
    6a0a:	80 81       	ld	r24, Z
    6a0c:	90 fb       	bst	r25, 0
    6a0e:	81 f9       	bld	r24, 1
    6a10:	8b 7f       	andi	r24, 0xFB	; 251
    6a12:	80 83       	st	Z, r24
    6a14:	22 23       	and	r18, r18
    6a16:	64 f4       	brge	.+24     	; 0x6a30 <udd_ep_run+0x108>
    6a18:	f7 01       	movw	r30, r14
    6a1a:	ee 0f       	add	r30, r30
    6a1c:	ff 1f       	adc	r31, r31
    6a1e:	ee 0f       	add	r30, r30
    6a20:	ff 1f       	adc	r31, r31
    6a22:	ee 0f       	add	r30, r30
    6a24:	ff 1f       	adc	r31, r31
    6a26:	e4 5d       	subi	r30, 0xD4	; 212
    6a28:	f4 4d       	sbci	r31, 0xD4	; 212
    6a2a:	12 8a       	std	Z+18, r1	; 0x12
    6a2c:	13 8a       	std	Z+19, r1	; 0x13
    6a2e:	30 c0       	rjmp	.+96     	; 0x6a90 <udd_ep_run+0x168>
    6a30:	f7 01       	movw	r30, r14
    6a32:	ee 0f       	add	r30, r30
    6a34:	ff 1f       	adc	r31, r31
    6a36:	ee 0f       	add	r30, r30
    6a38:	ff 1f       	adc	r31, r31
    6a3a:	ee 0f       	add	r30, r30
    6a3c:	ff 1f       	adc	r31, r31
    6a3e:	e4 5d       	subi	r30, 0xD4	; 212
    6a40:	f4 4d       	sbci	r31, 0xD4	; 212
    6a42:	85 85       	ldd	r24, Z+13	; 0x0d
    6a44:	80 7c       	andi	r24, 0xC0	; 192
    6a46:	80 3c       	cpi	r24, 0xC0	; 192
    6a48:	b1 f4       	brne	.+44     	; 0x6a76 <udd_ep_run+0x14e>
    6a4a:	c7 01       	movw	r24, r14
    6a4c:	88 0f       	add	r24, r24
    6a4e:	99 1f       	adc	r25, r25
    6a50:	88 0f       	add	r24, r24
    6a52:	99 1f       	adc	r25, r25
    6a54:	88 0f       	add	r24, r24
    6a56:	99 1f       	adc	r25, r25
    6a58:	88 5c       	subi	r24, 0xC8	; 200
    6a5a:	94 4d       	sbci	r25, 0xD4	; 212
    6a5c:	88 db       	rcall	.-2288   	; 0x616e <udd_ep_get_size>
    6a5e:	bc 01       	movw	r22, r24
    6a60:	c5 01       	movw	r24, r10
    6a62:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <__udivmodhi4>
    6a66:	89 2b       	or	r24, r25
    6a68:	31 f0       	breq	.+12     	; 0x6a76 <udd_ep_run+0x14e>
    6a6a:	f6 01       	movw	r30, r12
    6a6c:	80 81       	ld	r24, Z
    6a6e:	8e 7f       	andi	r24, 0xFE	; 254
    6a70:	80 83       	st	Z, r24
    6a72:	80 e0       	ldi	r24, 0x00	; 0
    6a74:	14 c0       	rjmp	.+40     	; 0x6a9e <udd_ep_run+0x176>
    6a76:	f7 01       	movw	r30, r14
    6a78:	ee 0f       	add	r30, r30
    6a7a:	ff 1f       	adc	r31, r31
    6a7c:	ee 0f       	add	r30, r30
    6a7e:	ff 1f       	adc	r31, r31
    6a80:	ee 0f       	add	r30, r30
    6a82:	ff 1f       	adc	r31, r31
    6a84:	e4 5d       	subi	r30, 0xD4	; 212
    6a86:	f4 4d       	sbci	r31, 0xD4	; 212
    6a88:	16 86       	std	Z+14, r1	; 0x0e
    6a8a:	17 86       	std	Z+15, r1	; 0x0f
    6a8c:	12 8a       	std	Z+18, r1	; 0x12
    6a8e:	13 8a       	std	Z+19, r1	; 0x13
    6a90:	87 2d       	mov	r24, r7
    6a92:	23 dc       	rcall	.-1978   	; 0x62da <udd_ep_trans_complet>
    6a94:	81 e0       	ldi	r24, 0x01	; 1
    6a96:	03 c0       	rjmp	.+6      	; 0x6a9e <udd_ep_run+0x176>
    6a98:	80 e0       	ldi	r24, 0x00	; 0
    6a9a:	01 c0       	rjmp	.+2      	; 0x6a9e <udd_ep_run+0x176>
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	0f 90       	pop	r0
    6aa0:	df 91       	pop	r29
    6aa2:	cf 91       	pop	r28
    6aa4:	1f 91       	pop	r17
    6aa6:	0f 91       	pop	r16
    6aa8:	ff 90       	pop	r15
    6aaa:	ef 90       	pop	r14
    6aac:	df 90       	pop	r13
    6aae:	cf 90       	pop	r12
    6ab0:	bf 90       	pop	r11
    6ab2:	af 90       	pop	r10
    6ab4:	9f 90       	pop	r9
    6ab6:	8f 90       	pop	r8
    6ab8:	7f 90       	pop	r7
    6aba:	6f 90       	pop	r6
    6abc:	08 95       	ret

00006abe <udd_ep_abort>:
    6abe:	ff 92       	push	r15
    6ac0:	0f 93       	push	r16
    6ac2:	1f 93       	push	r17
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
    6ac8:	18 2f       	mov	r17, r24
    6aca:	c8 2f       	mov	r28, r24
    6acc:	cf 70       	andi	r28, 0x0F	; 15
    6ace:	d0 e0       	ldi	r29, 0x00	; 0
    6ad0:	ce 01       	movw	r24, r28
    6ad2:	88 0f       	add	r24, r24
    6ad4:	99 1f       	adc	r25, r25
    6ad6:	c1 2f       	mov	r28, r17
    6ad8:	01 2e       	mov	r0, r17
    6ada:	00 0c       	add	r0, r0
    6adc:	dd 0b       	sbc	r29, r29
    6ade:	cc 27       	eor	r28, r28
    6ae0:	dd 0f       	add	r29, r29
    6ae2:	cc 1f       	adc	r28, r28
    6ae4:	dd 27       	eor	r29, r29
    6ae6:	c8 0f       	add	r28, r24
    6ae8:	d9 1f       	adc	r29, r25
    6aea:	81 2f       	mov	r24, r17
    6aec:	69 db       	rcall	.-2350   	; 0x61c0 <udd_ep_get_job>
    6aee:	dc 01       	movw	r26, r24
    6af0:	fe 01       	movw	r30, r28
    6af2:	ee 0f       	add	r30, r30
    6af4:	ff 1f       	adc	r31, r31
    6af6:	ee 0f       	add	r30, r30
    6af8:	ff 1f       	adc	r31, r31
    6afa:	ee 0f       	add	r30, r30
    6afc:	ff 1f       	adc	r31, r31
    6afe:	e8 5c       	subi	r30, 0xC8	; 200
    6b00:	f4 4d       	sbci	r31, 0xD4	; 212
    6b02:	02 e0       	ldi	r16, 0x02	; 2
    6b04:	05 93       	las	Z, r16
    6b06:	8c 91       	ld	r24, X
    6b08:	80 ff       	sbrs	r24, 0
    6b0a:	22 c0       	rjmp	.+68     	; 0x6b50 <udd_ep_abort+0x92>
    6b0c:	8e 7f       	andi	r24, 0xFE	; 254
    6b0e:	8c 93       	st	X, r24
    6b10:	17 96       	adiw	r26, 0x07	; 7
    6b12:	ed 91       	ld	r30, X+
    6b14:	fc 91       	ld	r31, X
    6b16:	18 97       	sbiw	r26, 0x08	; 8
    6b18:	30 97       	sbiw	r30, 0x00	; 0
    6b1a:	d1 f0       	breq	.+52     	; 0x6b50 <udd_ep_abort+0x92>
    6b1c:	11 23       	and	r17, r17
    6b1e:	5c f4       	brge	.+22     	; 0x6b36 <udd_ep_abort+0x78>
    6b20:	cc 0f       	add	r28, r28
    6b22:	dd 1f       	adc	r29, r29
    6b24:	cc 0f       	add	r28, r28
    6b26:	dd 1f       	adc	r29, r29
    6b28:	cc 0f       	add	r28, r28
    6b2a:	dd 1f       	adc	r29, r29
    6b2c:	c4 5d       	subi	r28, 0xD4	; 212
    6b2e:	d4 4d       	sbci	r29, 0xD4	; 212
    6b30:	6a 89       	ldd	r22, Y+18	; 0x12
    6b32:	7b 89       	ldd	r23, Y+19	; 0x13
    6b34:	0a c0       	rjmp	.+20     	; 0x6b4a <udd_ep_abort+0x8c>
    6b36:	cc 0f       	add	r28, r28
    6b38:	dd 1f       	adc	r29, r29
    6b3a:	cc 0f       	add	r28, r28
    6b3c:	dd 1f       	adc	r29, r29
    6b3e:	cc 0f       	add	r28, r28
    6b40:	dd 1f       	adc	r29, r29
    6b42:	c4 5d       	subi	r28, 0xD4	; 212
    6b44:	d4 4d       	sbci	r29, 0xD4	; 212
    6b46:	6e 85       	ldd	r22, Y+14	; 0x0e
    6b48:	7f 85       	ldd	r23, Y+15	; 0x0f
    6b4a:	41 2f       	mov	r20, r17
    6b4c:	81 e0       	ldi	r24, 0x01	; 1
    6b4e:	19 95       	eicall
    6b50:	df 91       	pop	r29
    6b52:	cf 91       	pop	r28
    6b54:	1f 91       	pop	r17
    6b56:	0f 91       	pop	r16
    6b58:	ff 90       	pop	r15
    6b5a:	08 95       	ret

00006b5c <udd_ep_free>:
    6b5c:	cf 93       	push	r28
    6b5e:	c8 2f       	mov	r28, r24
    6b60:	ae df       	rcall	.-164    	; 0x6abe <udd_ep_abort>
    6b62:	ec 2f       	mov	r30, r28
    6b64:	ef 70       	andi	r30, 0x0F	; 15
    6b66:	f0 e0       	ldi	r31, 0x00	; 0
    6b68:	ee 0f       	add	r30, r30
    6b6a:	ff 1f       	adc	r31, r31
    6b6c:	8c 2f       	mov	r24, r28
    6b6e:	cc 0f       	add	r28, r28
    6b70:	99 0b       	sbc	r25, r25
    6b72:	88 27       	eor	r24, r24
    6b74:	99 0f       	add	r25, r25
    6b76:	88 1f       	adc	r24, r24
    6b78:	99 27       	eor	r25, r25
    6b7a:	e8 0f       	add	r30, r24
    6b7c:	f9 1f       	adc	r31, r25
    6b7e:	ee 0f       	add	r30, r30
    6b80:	ff 1f       	adc	r31, r31
    6b82:	ee 0f       	add	r30, r30
    6b84:	ff 1f       	adc	r31, r31
    6b86:	ee 0f       	add	r30, r30
    6b88:	ff 1f       	adc	r31, r31
    6b8a:	e4 5d       	subi	r30, 0xD4	; 212
    6b8c:	f4 4d       	sbci	r31, 0xD4	; 212
    6b8e:	15 86       	std	Z+13, r1	; 0x0d
    6b90:	cf 91       	pop	r28
    6b92:	08 95       	ret

00006b94 <udd_ep_set_halt>:
    6b94:	e8 2f       	mov	r30, r24
    6b96:	ef 70       	andi	r30, 0x0F	; 15
    6b98:	f0 e0       	ldi	r31, 0x00	; 0
    6b9a:	ee 0f       	add	r30, r30
    6b9c:	ff 1f       	adc	r31, r31
    6b9e:	28 2f       	mov	r18, r24
    6ba0:	08 2e       	mov	r0, r24
    6ba2:	00 0c       	add	r0, r0
    6ba4:	33 0b       	sbc	r19, r19
    6ba6:	22 27       	eor	r18, r18
    6ba8:	33 0f       	add	r19, r19
    6baa:	22 1f       	adc	r18, r18
    6bac:	33 27       	eor	r19, r19
    6bae:	e2 0f       	add	r30, r18
    6bb0:	f3 1f       	adc	r31, r19
    6bb2:	ee 0f       	add	r30, r30
    6bb4:	ff 1f       	adc	r31, r31
    6bb6:	ee 0f       	add	r30, r30
    6bb8:	ff 1f       	adc	r31, r31
    6bba:	ee 0f       	add	r30, r30
    6bbc:	ff 1f       	adc	r31, r31
    6bbe:	e4 5d       	subi	r30, 0xD4	; 212
    6bc0:	f4 4d       	sbci	r31, 0xD4	; 212
    6bc2:	95 85       	ldd	r25, Z+13	; 0x0d
    6bc4:	94 60       	ori	r25, 0x04	; 4
    6bc6:	95 87       	std	Z+13, r25	; 0x0d
    6bc8:	7a df       	rcall	.-268    	; 0x6abe <udd_ep_abort>
    6bca:	81 e0       	ldi	r24, 0x01	; 1
    6bcc:	08 95       	ret

00006bce <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    6bce:	1f 92       	push	r1
    6bd0:	0f 92       	push	r0
    6bd2:	0f b6       	in	r0, 0x3f	; 63
    6bd4:	0f 92       	push	r0
    6bd6:	11 24       	eor	r1, r1
    6bd8:	0b b6       	in	r0, 0x3b	; 59
    6bda:	0f 92       	push	r0
    6bdc:	0f 93       	push	r16
    6bde:	2f 93       	push	r18
    6be0:	3f 93       	push	r19
    6be2:	4f 93       	push	r20
    6be4:	5f 93       	push	r21
    6be6:	6f 93       	push	r22
    6be8:	7f 93       	push	r23
    6bea:	8f 93       	push	r24
    6bec:	9f 93       	push	r25
    6bee:	af 93       	push	r26
    6bf0:	bf 93       	push	r27
    6bf2:	ef 93       	push	r30
    6bf4:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    6bf6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6bfa:	88 23       	and	r24, r24
    6bfc:	34 f4       	brge	.+12     	; 0x6c0a <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    6bfe:	80 e8       	ldi	r24, 0x80	; 128
    6c00:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    6c04:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    6c08:	86 c0       	rjmp	.+268    	; 0x6d16 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    6c0a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6c0e:	82 ff       	sbrs	r24, 2
    6c10:	20 c0       	rjmp	.+64     	; 0x6c52 <__vector_125+0x84>
		udd_ack_underflow_event();
    6c12:	84 e0       	ldi	r24, 0x04	; 4
    6c14:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    6c18:	80 91 40 2b 	lds	r24, 0x2B40	; 0x802b40 <udd_sram+0x14>
    6c1c:	86 ff       	sbrs	r24, 6
    6c1e:	7b c0       	rjmp	.+246    	; 0x6d16 <__vector_125+0x148>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    6c20:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6c24:	81 fd       	sbrc	r24, 1
    6c26:	77 c0       	rjmp	.+238    	; 0x6d16 <__vector_125+0x148>
    6c28:	e6 da       	rcall	.-2612   	; 0x61f6 <udd_ctrl_interrupt_tc_setup>
    6c2a:	81 11       	cpse	r24, r1
    6c2c:	74 c0       	rjmp	.+232    	; 0x6d16 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    6c2e:	80 91 29 2b 	lds	r24, 0x2B29	; 0x802b29 <udd_ep_control_state>
    6c32:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    6c34:	11 f4       	brne	.+4      	; 0x6c3a <__vector_125+0x6c>
    6c36:	19 da       	rcall	.-3022   	; 0x606a <udd_ctrl_send_zlp_in>
    6c38:	6e c0       	rjmp	.+220    	; 0x6d16 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    6c3a:	84 30       	cpi	r24, 0x04	; 4
    6c3c:	09 f0       	breq	.+2      	; 0x6c40 <__vector_125+0x72>
    6c3e:	6b c0       	rjmp	.+214    	; 0x6d16 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    6c40:	e1 e4       	ldi	r30, 0x41	; 65
    6c42:	fb e2       	ldi	r31, 0x2B	; 43
    6c44:	04 e0       	ldi	r16, 0x04	; 4
    6c46:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    6c48:	e9 e3       	ldi	r30, 0x39	; 57
    6c4a:	fb e2       	ldi	r31, 0x2B	; 43
    6c4c:	04 e0       	ldi	r16, 0x04	; 4
    6c4e:	05 93       	las	Z, r16
    6c50:	62 c0       	rjmp	.+196    	; 0x6d16 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    6c52:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6c56:	81 ff       	sbrs	r24, 1
    6c58:	59 c0       	rjmp	.+178    	; 0x6d0c <__vector_125+0x13e>
		udd_ack_overflow_event();
    6c5a:	82 e0       	ldi	r24, 0x02	; 2
    6c5c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    6c60:	80 91 38 2b 	lds	r24, 0x2B38	; 0x802b38 <udd_sram+0xc>
    6c64:	86 ff       	sbrs	r24, 6
    6c66:	57 c0       	rjmp	.+174    	; 0x6d16 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    6c68:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6c6c:	81 fd       	sbrc	r24, 1
    6c6e:	53 c0       	rjmp	.+166    	; 0x6d16 <__vector_125+0x148>
    6c70:	c2 da       	rcall	.-2684   	; 0x61f6 <udd_ctrl_interrupt_tc_setup>
    6c72:	81 11       	cpse	r24, r1
    6c74:	50 c0       	rjmp	.+160    	; 0x6d16 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    6c76:	80 91 29 2b 	lds	r24, 0x2B29	; 0x802b29 <udd_ep_control_state>
    6c7a:	82 30       	cpi	r24, 0x02	; 2
    6c7c:	41 f4       	brne	.+16     	; 0x6c8e <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    6c7e:	84 e0       	ldi	r24, 0x04	; 4
    6c80:	80 93 29 2b 	sts	0x2B29, r24	; 0x802b29 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    6c84:	e8 e3       	ldi	r30, 0x38	; 56
    6c86:	fb e2       	ldi	r31, 0x2B	; 43
    6c88:	02 e0       	ldi	r16, 0x02	; 2
    6c8a:	06 93       	lac	Z, r16
    6c8c:	44 c0       	rjmp	.+136    	; 0x6d16 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    6c8e:	83 30       	cpi	r24, 0x03	; 3
    6c90:	09 f0       	breq	.+2      	; 0x6c94 <__vector_125+0xc6>
    6c92:	41 c0       	rjmp	.+130    	; 0x6d16 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    6c94:	e1 e4       	ldi	r30, 0x41	; 65
    6c96:	fb e2       	ldi	r31, 0x2B	; 43
    6c98:	04 e0       	ldi	r16, 0x04	; 4
    6c9a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    6c9c:	e9 e3       	ldi	r30, 0x39	; 57
    6c9e:	fb e2       	ldi	r31, 0x2B	; 43
    6ca0:	04 e0       	ldi	r16, 0x04	; 4
    6ca2:	05 93       	las	Z, r16
    6ca4:	38 c0       	rjmp	.+112    	; 0x6d16 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    6ca6:	80 e1       	ldi	r24, 0x10	; 16
    6ca8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    6cac:	81 e0       	ldi	r24, 0x01	; 1
			udd_ep_abort(i | USB_EP_DIR_IN);
    6cae:	07 df       	rcall	.-498    	; 0x6abe <udd_ep_abort>
    6cb0:	81 e8       	ldi	r24, 0x81	; 129
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    6cb2:	05 df       	rcall	.-502    	; 0x6abe <udd_ep_abort>
    6cb4:	82 e0       	ldi	r24, 0x02	; 2
    6cb6:	03 df       	rcall	.-506    	; 0x6abe <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    6cb8:	82 e8       	ldi	r24, 0x82	; 130
    6cba:	01 df       	rcall	.-510    	; 0x6abe <udd_ep_abort>
    6cbc:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udc_reset>
		}
#endif
		udc_reset();
    6cc0:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>

		// Reset USB address to 0
		udd_set_device_address(0);
    6cc4:	ec e2       	ldi	r30, 0x2C	; 44
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    6cc6:	fb e2       	ldi	r31, 0x2B	; 43
    6cc8:	15 86       	std	Z+13, r1	; 0x0d
    6cca:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_clear_status(ep_ctrl);
    6ccc:	94 87       	std	Z+12, r25	; 0x0c
    6cce:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    6cd0:	85 87       	std	Z+13, r24	; 0x0d
    6cd2:	15 8a       	std	Z+21, r1	; 0x15
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    6cd4:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    6cd6:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    6cd8:	85 ee       	ldi	r24, 0xE5	; 229
    6cda:	9a e2       	ldi	r25, 0x2A	; 42
    6cdc:	80 8b       	std	Z+16, r24	; 0x10
    6cde:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    6ce0:	91 d9       	rcall	.-3294   	; 0x6004 <udd_ctrl_init>
    6ce2:	19 c0       	rjmp	.+50     	; 0x6d16 <__vector_125+0x148>
		goto udd_interrupt_bus_event_end;
    6ce4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
	}

	if (udd_is_suspend_event()) {
    6ce8:	86 ff       	sbrs	r24, 6
    6cea:	06 c0       	rjmp	.+12     	; 0x6cf8 <__vector_125+0x12a>
		udd_ack_suspend_event();
    6cec:	80 e4       	ldi	r24, 0x40	; 64
    6cee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    6cf2:	80 e0       	ldi	r24, 0x00	; 0
    6cf4:	4f d9       	rcall	.-3426   	; 0x5f94 <udd_sleep_mode>
    6cf6:	0f c0       	rjmp	.+30     	; 0x6d16 <__vector_125+0x148>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    6cf8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6cfc:	85 ff       	sbrs	r24, 5
    6cfe:	0b c0       	rjmp	.+22     	; 0x6d16 <__vector_125+0x148>
		udd_ack_resume_event();
    6d00:	80 e2       	ldi	r24, 0x20	; 32
    6d02:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    6d06:	81 e0       	ldi	r24, 0x01	; 1
    6d08:	45 d9       	rcall	.-3446   	; 0x5f94 <udd_sleep_mode>
    6d0a:	05 c0       	rjmp	.+10     	; 0x6d16 <__vector_125+0x148>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    6d0c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    6d10:	84 fd       	sbrc	r24, 4
    6d12:	c9 cf       	rjmp	.-110    	; 0x6ca6 <__vector_125+0xd8>
    6d14:	e7 cf       	rjmp	.-50     	; 0x6ce4 <__vector_125+0x116>
    6d16:	ff 91       	pop	r31
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    6d18:	ef 91       	pop	r30
    6d1a:	bf 91       	pop	r27
    6d1c:	af 91       	pop	r26
    6d1e:	9f 91       	pop	r25
    6d20:	8f 91       	pop	r24
    6d22:	7f 91       	pop	r23
    6d24:	6f 91       	pop	r22
    6d26:	5f 91       	pop	r21
    6d28:	4f 91       	pop	r20
    6d2a:	3f 91       	pop	r19
    6d2c:	2f 91       	pop	r18
    6d2e:	0f 91       	pop	r16
    6d30:	0f 90       	pop	r0
    6d32:	0b be       	out	0x3b, r0	; 59
    6d34:	0f 90       	pop	r0
    6d36:	0f be       	out	0x3f, r0	; 63
    6d38:	0f 90       	pop	r0
    6d3a:	1f 90       	pop	r1
    6d3c:	18 95       	reti

00006d3e <__vector_126>:
    6d3e:	1f 92       	push	r1
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    6d40:	0f 92       	push	r0
    6d42:	0f b6       	in	r0, 0x3f	; 63
    6d44:	0f 92       	push	r0
    6d46:	11 24       	eor	r1, r1
    6d48:	0b b6       	in	r0, 0x3b	; 59
    6d4a:	0f 92       	push	r0
    6d4c:	0f 93       	push	r16
    6d4e:	1f 93       	push	r17
    6d50:	2f 93       	push	r18
    6d52:	3f 93       	push	r19
    6d54:	4f 93       	push	r20
    6d56:	5f 93       	push	r21
    6d58:	6f 93       	push	r22
    6d5a:	7f 93       	push	r23
    6d5c:	8f 93       	push	r24
    6d5e:	9f 93       	push	r25
    6d60:	af 93       	push	r26
    6d62:	bf 93       	push	r27
    6d64:	cf 93       	push	r28
    6d66:	df 93       	push	r29
    6d68:	ef 93       	push	r30
    6d6a:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    6d6c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6d70:	81 fd       	sbrc	r24, 1
    6d72:	03 c0       	rjmp	.+6      	; 0x6d7a <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    6d74:	40 da       	rcall	.-2944   	; 0x61f6 <udd_ctrl_interrupt_tc_setup>
    6d76:	81 11       	cpse	r24, r1
    6d78:	c4 c0       	rjmp	.+392    	; 0x6f02 <__vector_126+0x1c4>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    6d7a:	82 e0       	ldi	r24, 0x02	; 2
    6d7c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    6d80:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    6d84:	81 95       	neg	r24
    6d86:	88 0f       	add	r24, r24
    6d88:	e8 e3       	ldi	r30, 0x38	; 56
    6d8a:	fb e2       	ldi	r31, 0x2B	; 43
    6d8c:	e8 1b       	sub	r30, r24
    6d8e:	f1 09       	sbc	r31, r1
    6d90:	20 81       	ld	r18, Z
    6d92:	31 81       	ldd	r19, Z+1	; 0x01
    6d94:	28 53       	subi	r18, 0x38	; 56
    6d96:	3b 42       	sbci	r19, 0x2B	; 43
    6d98:	36 95       	lsr	r19
    6d9a:	27 95       	ror	r18
    6d9c:	36 95       	lsr	r19
    6d9e:	27 95       	ror	r18
    6da0:	36 95       	lsr	r19
    6da2:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    6da4:	82 2f       	mov	r24, r18
    6da6:	86 95       	lsr	r24
    6da8:	20 fd       	sbrc	r18, 0
    6daa:	02 c0       	rjmp	.+4      	; 0x6db0 <__vector_126+0x72>
    6dac:	90 e0       	ldi	r25, 0x00	; 0
    6dae:	01 c0       	rjmp	.+2      	; 0x6db2 <__vector_126+0x74>
    6db0:	90 e8       	ldi	r25, 0x80	; 128
    6db2:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    6db4:	e8 2f       	mov	r30, r24
    6db6:	ef 70       	andi	r30, 0x0F	; 15
    6db8:	f0 e0       	ldi	r31, 0x00	; 0
    6dba:	ee 0f       	add	r30, r30
    6dbc:	ff 1f       	adc	r31, r31
    6dbe:	28 2f       	mov	r18, r24
    6dc0:	08 2e       	mov	r0, r24
    6dc2:	00 0c       	add	r0, r0
    6dc4:	33 0b       	sbc	r19, r19
    6dc6:	22 27       	eor	r18, r18
    6dc8:	33 0f       	add	r19, r19
    6dca:	22 1f       	adc	r18, r18
    6dcc:	33 27       	eor	r19, r19
    6dce:	e2 0f       	add	r30, r18
    6dd0:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    6dd2:	df 01       	movw	r26, r30
    6dd4:	aa 0f       	add	r26, r26
    6dd6:	bb 1f       	adc	r27, r27
    6dd8:	aa 0f       	add	r26, r26
    6dda:	bb 1f       	adc	r27, r27
    6ddc:	aa 0f       	add	r26, r26
    6dde:	bb 1f       	adc	r27, r27
    6de0:	a4 5d       	subi	r26, 0xD4	; 212
    6de2:	b4 4d       	sbci	r27, 0xD4	; 212
    6de4:	1c 96       	adiw	r26, 0x0c	; 12
    6de6:	9c 91       	ld	r25, X
    6de8:	95 ff       	sbrs	r25, 5
    6dea:	8b c0       	rjmp	.+278    	; 0x6f02 <__vector_126+0x1c4>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    6dec:	ee 0f       	add	r30, r30
    6dee:	ff 1f       	adc	r31, r31
    6df0:	ee 0f       	add	r30, r30
    6df2:	ff 1f       	adc	r31, r31
    6df4:	ee 0f       	add	r30, r30
    6df6:	ff 1f       	adc	r31, r31
    6df8:	e8 5c       	subi	r30, 0xC8	; 200
    6dfa:	f4 4d       	sbci	r31, 0xD4	; 212
    6dfc:	00 e2       	ldi	r16, 0x20	; 32
    6dfe:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    6e00:	81 11       	cpse	r24, r1
    6e02:	7a c0       	rjmp	.+244    	; 0x6ef8 <__vector_126+0x1ba>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    6e04:	80 91 29 2b 	lds	r24, 0x2B29	; 0x802b29 <udd_ep_control_state>
    6e08:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    6e0a:	19 f4       	brne	.+6      	; 0x6e12 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    6e0c:	3c d9       	rcall	.-3464   	; 0x6086 <udd_ctrl_endofrequest>
    6e0e:	fa d8       	rcall	.-3596   	; 0x6004 <udd_ctrl_init>
    6e10:	78 c0       	rjmp	.+240    	; 0x6f02 <__vector_126+0x1c4>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    6e12:	00 91 3a 2b 	lds	r16, 0x2B3A	; 0x802b3a <udd_sram+0xe>
    6e16:	10 91 3b 2b 	lds	r17, 0x2B3B	; 0x802b3b <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    6e1a:	80 91 8b 2b 	lds	r24, 0x2B8B	; 0x802b8b <udd_g_ctrlreq+0xa>
    6e1e:	90 91 8c 2b 	lds	r25, 0x2B8C	; 0x802b8c <udd_g_ctrlreq+0xb>
    6e22:	c0 91 25 2b 	lds	r28, 0x2B25	; 0x802b25 <udd_ctrl_payload_nb_trans>
    6e26:	d0 91 26 2b 	lds	r29, 0x2B26	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    6e2a:	98 01       	movw	r18, r16
    6e2c:	2c 0f       	add	r18, r28
    6e2e:	3d 1f       	adc	r19, r29
    6e30:	82 17       	cp	r24, r18
    6e32:	93 07       	cpc	r25, r19
    6e34:	18 f4       	brcc	.+6      	; 0x6e3c <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    6e36:	8c 01       	movw	r16, r24
    6e38:	0c 1b       	sub	r16, r28
    6e3a:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    6e3c:	80 91 89 2b 	lds	r24, 0x2B89	; 0x802b89 <udd_g_ctrlreq+0x8>
    6e40:	90 91 8a 2b 	lds	r25, 0x2B8A	; 0x802b8a <udd_g_ctrlreq+0x9>
    6e44:	a8 01       	movw	r20, r16
    6e46:	65 ee       	ldi	r22, 0xE5	; 229
    6e48:	7a e2       	ldi	r23, 0x2A	; 42
    6e4a:	8c 0f       	add	r24, r28
    6e4c:	9d 1f       	adc	r25, r29
    6e4e:	0e 94 6f 42 	call	0x84de	; 0x84de <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    6e52:	c0 0f       	add	r28, r16
    6e54:	d1 1f       	adc	r29, r17
    6e56:	c0 93 25 2b 	sts	0x2B25, r28	; 0x802b25 <udd_ctrl_payload_nb_trans>
    6e5a:	d0 93 26 2b 	sts	0x2B26, r29	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    6e5e:	00 34       	cpi	r16, 0x40	; 64
    6e60:	11 05       	cpc	r17, r1
    6e62:	69 f4       	brne	.+26     	; 0x6e7e <__vector_126+0x140>
    6e64:	80 91 27 2b 	lds	r24, 0x2B27	; 0x802b27 <udd_ctrl_prev_payload_nb_trans>
    6e68:	90 91 28 2b 	lds	r25, 0x2B28	; 0x802b28 <udd_ctrl_prev_payload_nb_trans+0x1>
    6e6c:	8c 0f       	add	r24, r28
    6e6e:	9d 1f       	adc	r25, r29
    6e70:	20 91 87 2b 	lds	r18, 0x2B87	; 0x802b87 <udd_g_ctrlreq+0x6>
    6e74:	30 91 88 2b 	lds	r19, 0x2B88	; 0x802b88 <udd_g_ctrlreq+0x7>
    6e78:	82 17       	cp	r24, r18
    6e7a:	93 07       	cpc	r25, r19
    6e7c:	80 f0       	brcs	.+32     	; 0x6e9e <__vector_126+0x160>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    6e7e:	e1 e8       	ldi	r30, 0x81	; 129
    6e80:	fb e2       	ldi	r31, 0x2B	; 43
    6e82:	c2 87       	std	Z+10, r28	; 0x0a
    6e84:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    6e86:	06 84       	ldd	r0, Z+14	; 0x0e
    6e88:	f7 85       	ldd	r31, Z+15	; 0x0f
    6e8a:	e0 2d       	mov	r30, r0
    6e8c:	30 97       	sbiw	r30, 0x00	; 0
    6e8e:	29 f0       	breq	.+10     	; 0x6e9a <__vector_126+0x15c>
			if (!udd_g_ctrlreq.over_under_run()) {
    6e90:	19 95       	eicall
    6e92:	81 11       	cpse	r24, r1
				// Stall ZLP
				udd_ctrl_stall_data();
    6e94:	02 c0       	rjmp	.+4      	; 0x6e9a <__vector_126+0x15c>
    6e96:	db d8       	rcall	.-3658   	; 0x604e <udd_ctrl_stall_data>
    6e98:	34 c0       	rjmp	.+104    	; 0x6f02 <__vector_126+0x1c4>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    6e9a:	e7 d8       	rcall	.-3634   	; 0x606a <udd_ctrl_send_zlp_in>
    6e9c:	32 c0       	rjmp	.+100    	; 0x6f02 <__vector_126+0x1c4>
    6e9e:	80 91 8b 2b 	lds	r24, 0x2B8B	; 0x802b8b <udd_g_ctrlreq+0xa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    6ea2:	90 91 8c 2b 	lds	r25, 0x2B8C	; 0x802b8c <udd_g_ctrlreq+0xb>
    6ea6:	c8 17       	cp	r28, r24
    6ea8:	d9 07       	cpc	r29, r25
    6eaa:	f9 f4       	brne	.+62     	; 0x6eea <__vector_126+0x1ac>
    6eac:	e0 91 8f 2b 	lds	r30, 0x2B8F	; 0x802b8f <udd_g_ctrlreq+0xe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    6eb0:	f0 91 90 2b 	lds	r31, 0x2B90	; 0x802b90 <udd_g_ctrlreq+0xf>
    6eb4:	30 97       	sbiw	r30, 0x00	; 0
    6eb6:	11 f4       	brne	.+4      	; 0x6ebc <__vector_126+0x17e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    6eb8:	ca d8       	rcall	.-3692   	; 0x604e <udd_ctrl_stall_data>
    6eba:	23 c0       	rjmp	.+70     	; 0x6f02 <__vector_126+0x1c4>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    6ebc:	19 95       	eicall
    6ebe:	81 11       	cpse	r24, r1
    6ec0:	02 c0       	rjmp	.+4      	; 0x6ec6 <__vector_126+0x188>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    6ec2:	c5 d8       	rcall	.-3702   	; 0x604e <udd_ctrl_stall_data>
    6ec4:	1e c0       	rjmp	.+60     	; 0x6f02 <__vector_126+0x1c4>
    6ec6:	20 91 27 2b 	lds	r18, 0x2B27	; 0x802b27 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6eca:	30 91 28 2b 	lds	r19, 0x2B28	; 0x802b28 <udd_ctrl_prev_payload_nb_trans+0x1>
    6ece:	80 91 25 2b 	lds	r24, 0x2B25	; 0x802b25 <udd_ctrl_payload_nb_trans>
    6ed2:	90 91 26 2b 	lds	r25, 0x2B26	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    6ed6:	82 0f       	add	r24, r18
    6ed8:	93 1f       	adc	r25, r19
    6eda:	80 93 27 2b 	sts	0x2B27, r24	; 0x802b27 <udd_ctrl_prev_payload_nb_trans>
    6ede:	90 93 28 2b 	sts	0x2B28, r25	; 0x802b28 <udd_ctrl_prev_payload_nb_trans+0x1>
    6ee2:	10 92 25 2b 	sts	0x2B25, r1	; 0x802b25 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    6ee6:	10 92 26 2b 	sts	0x2B26, r1	; 0x802b26 <udd_ctrl_payload_nb_trans+0x1>
    6eea:	e8 e3       	ldi	r30, 0x38	; 56
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    6eec:	fb e2       	ldi	r31, 0x2B	; 43
    6eee:	02 e0       	ldi	r16, 0x02	; 2
    6ef0:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    6ef2:	00 e2       	ldi	r16, 0x20	; 32
    6ef4:	06 93       	lac	Z, r16
    6ef6:	05 c0       	rjmp	.+10     	; 0x6f02 <__vector_126+0x1c4>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    6ef8:	80 38       	cpi	r24, 0x80	; 128
    6efa:	11 f4       	brne	.+4      	; 0x6f00 <__vector_126+0x1c2>
		udd_ctrl_in_sent();
    6efc:	cc d8       	rcall	.-3688   	; 0x6096 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    6efe:	01 c0       	rjmp	.+2      	; 0x6f02 <__vector_126+0x1c4>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    6f00:	ec d9       	rcall	.-3112   	; 0x62da <udd_ep_trans_complet>
    6f02:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    6f04:	ef 91       	pop	r30
    6f06:	df 91       	pop	r29
    6f08:	cf 91       	pop	r28
    6f0a:	bf 91       	pop	r27
    6f0c:	af 91       	pop	r26
    6f0e:	9f 91       	pop	r25
    6f10:	8f 91       	pop	r24
    6f12:	7f 91       	pop	r23
    6f14:	6f 91       	pop	r22
    6f16:	5f 91       	pop	r21
    6f18:	4f 91       	pop	r20
    6f1a:	3f 91       	pop	r19
    6f1c:	2f 91       	pop	r18
    6f1e:	1f 91       	pop	r17
    6f20:	0f 91       	pop	r16
    6f22:	0f 90       	pop	r0
    6f24:	0b be       	out	0x3b, r0	; 59
    6f26:	0f 90       	pop	r0
    6f28:	0f be       	out	0x3f, r0	; 63
    6f2a:	0f 90       	pop	r0
    6f2c:	1f 90       	pop	r1
    6f2e:	18 95       	reti

00006f30 <cdc_start>:
		help++;
	}
}

void cdc_start(void)
{
    6f30:	ef 92       	push	r14
    6f32:	ff 92       	push	r15
    6f34:	0f 93       	push	r16
    6f36:	1f 93       	push	r17
    6f38:	cf 93       	push	r28
    6f3a:	df 93       	push	r29
    6f3c:	cd b7       	in	r28, 0x3d	; 61
    6f3e:	de b7       	in	r29, 0x3e	; 62
    6f40:	60 97       	sbiw	r28, 0x10	; 16
    6f42:	cd bf       	out	0x3d, r28	; 61
    6f44:	de bf       	out	0x3e, r29	; 62
	uint8_t i;
	uint8_t temp;
	uint8_t nibble_to_ascii[16] = "0123456789ABCDEF";
    6f46:	80 e1       	ldi	r24, 0x10	; 16
    6f48:	e2 e7       	ldi	r30, 0x72	; 114
    6f4a:	f1 e2       	ldi	r31, 0x21	; 33
    6f4c:	de 01       	movw	r26, r28
    6f4e:	11 96       	adiw	r26, 0x01	; 1
    6f50:	01 90       	ld	r0, Z+
    6f52:	0d 92       	st	X+, r0
    6f54:	8a 95       	dec	r24
    6f56:	e1 f7       	brne	.-8      	; 0x6f50 <cdc_start+0x20>
    6f58:	0f 2e       	mov	r0, r31
    6f5a:	f1 e9       	ldi	r31, 0x91	; 145
    6f5c:	ef 2e       	mov	r14, r31
    6f5e:	fb e2       	ldi	r31, 0x2B	; 43
    6f60:	ff 2e       	mov	r15, r31
    6f62:	f0 2d       	mov	r31, r0
    6f64:	08 e0       	ldi	r16, 0x08	; 8
    6f66:	10 e0       	ldi	r17, 0x00	; 0
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    6f68:	b8 01       	movw	r22, r16
    6f6a:	81 e0       	ldi	r24, 0x01	; 1
    6f6c:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
	 */
	for (i = 0; i < USER_SIGNATURE_USBID_SIZE / 2; i++) {
		temp = nvm_read_user_signature_row(
				i + USER_SIGNATURE_USBID_POS);
		// Upper nibble
		cdc_serial_number[i * 2] = nibble_to_ascii[(temp & 0xF0) >> 4];
    6f70:	98 2f       	mov	r25, r24
    6f72:	92 95       	swap	r25
    6f74:	9f 70       	andi	r25, 0x0F	; 15
    6f76:	e1 e0       	ldi	r30, 0x01	; 1
    6f78:	f0 e0       	ldi	r31, 0x00	; 0
    6f7a:	ec 0f       	add	r30, r28
    6f7c:	fd 1f       	adc	r31, r29
    6f7e:	e9 0f       	add	r30, r25
    6f80:	f1 1d       	adc	r31, r1
    6f82:	90 81       	ld	r25, Z
    6f84:	f7 01       	movw	r30, r14
    6f86:	90 83       	st	Z, r25
		// Lower nibble
		cdc_serial_number[(i * 2) + 1] = nibble_to_ascii[temp & 0x0F];
    6f88:	8f 70       	andi	r24, 0x0F	; 15
    6f8a:	e1 e0       	ldi	r30, 0x01	; 1
    6f8c:	f0 e0       	ldi	r31, 0x00	; 0
    6f8e:	ec 0f       	add	r30, r28
    6f90:	fd 1f       	adc	r31, r29
    6f92:	e8 0f       	add	r30, r24
    6f94:	f1 1d       	adc	r31, r1
    6f96:	80 81       	ld	r24, Z
    6f98:	f7 01       	movw	r30, r14
    6f9a:	81 83       	std	Z+1, r24	; 0x01
    6f9c:	0f 5f       	subi	r16, 0xFF	; 255
    6f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    6fa0:	f2 e0       	ldi	r31, 0x02	; 2
    6fa2:	ef 0e       	add	r14, r31
    6fa4:	f1 1c       	adc	r15, r1
	uint8_t nibble_to_ascii[16] = "0123456789ABCDEF";

	/* Copy serial number from user signature row and convert to ASCII
	 * The 6 byte id results in a 12 byte string (1 character per nibble)
	 */
	for (i = 0; i < USER_SIGNATURE_USBID_SIZE / 2; i++) {
    6fa6:	0e 30       	cpi	r16, 0x0E	; 14
    6fa8:	11 05       	cpc	r17, r1
    6faa:	f1 f6       	brne	.-68     	; 0x6f68 <cdc_start+0x38>
		cdc_serial_number[i * 2] = nibble_to_ascii[(temp & 0xF0) >> 4];
		// Lower nibble
		cdc_serial_number[(i * 2) + 1] = nibble_to_ascii[temp & 0x0F];
	}

	udc_start();
    6fac:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <udc_start>
}
    6fb0:	60 96       	adiw	r28, 0x10	; 16
    6fb2:	cd bf       	out	0x3d, r28	; 61
    6fb4:	de bf       	out	0x3e, r29	; 62
    6fb6:	df 91       	pop	r29
    6fb8:	cf 91       	pop	r28
    6fba:	1f 91       	pop	r17
    6fbc:	0f 91       	pop	r16
    6fbe:	ff 90       	pop	r15
    6fc0:	ef 90       	pop	r14
    6fc2:	08 95       	ret

00006fc4 <cdc_set_dtr>:

void cdc_set_dtr(bool enable)
{
	cdc_opened = enable;
    6fc4:	80 93 6e 2b 	sts	0x2B6E, r24	; 0x802b6e <cdc_opened>
    6fc8:	08 95       	ret

00006fca <cdc_getkey>:
}

keycode_t cdc_getkey(void)
{
    6fca:	cf 93       	push	r28
    6fcc:	df 93       	push	r29
	char key;
	static uint8_t esc_state = 0;

	// If the cdc was opened, print out the help
	if (cdc_opened) {
    6fce:	80 91 6e 2b 	lds	r24, 0x2B6E	; 0x802b6e <cdc_opened>
    6fd2:	88 23       	and	r24, r24
    6fd4:	91 f0       	breq	.+36     	; 0x6ffa <cdc_getkey+0x30>
		cdc_opened = false;
    6fd6:	10 92 6e 2b 	sts	0x2B6E, r1	; 0x802b6e <cdc_opened>
static void cdc_put_help(void)
{
	const char PROGMEM_PTR_T help = cdc_help;
	char val;

	while ((val = PROGMEM_READ_BYTE(help))) {
    6fda:	ea ec       	ldi	r30, 0xCA	; 202
    6fdc:	f4 e0       	ldi	r31, 0x04	; 4
    6fde:	84 91       	lpm	r24, Z
    6fe0:	88 23       	and	r24, r24
    6fe2:	59 f0       	breq	.+22     	; 0x6ffa <cdc_getkey+0x30>
    6fe4:	ef 01       	movw	r28, r30
		udi_cdc_putc(val);
    6fe6:	08 2e       	mov	r0, r24
    6fe8:	00 0c       	add	r0, r0
    6fea:	99 0b       	sbc	r25, r25
    6fec:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <udi_cdc_putc>
		help++;
    6ff0:	21 96       	adiw	r28, 0x01	; 1
static void cdc_put_help(void)
{
	const char PROGMEM_PTR_T help = cdc_help;
	char val;

	while ((val = PROGMEM_READ_BYTE(help))) {
    6ff2:	fe 01       	movw	r30, r28
    6ff4:	84 91       	lpm	r24, Z
    6ff6:	81 11       	cpse	r24, r1
    6ff8:	f6 cf       	rjmp	.-20     	; 0x6fe6 <cdc_getkey+0x1c>
	if (cdc_opened) {
		cdc_opened = false;
		cdc_put_help();
	}

	if (!udi_cdc_is_rx_ready()) {
    6ffa:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <udi_cdc_is_rx_ready>
    6ffe:	88 23       	and	r24, r24
    7000:	01 f1       	breq	.+64     	; 0x7042 <cdc_getkey+0x78>
		return KEYBOARD_NO_KEY;
	}

	key = udi_cdc_getc();
    7002:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <udi_cdc_getc>

	if (esc_state == 1) {
    7006:	90 91 6d 2b 	lds	r25, 0x2B6D	; 0x802b6d <esc_state.5267>
    700a:	91 30       	cpi	r25, 0x01	; 1
    700c:	49 f4       	brne	.+18     	; 0x7020 <cdc_getkey+0x56>
		if (key == 0x5b) {
    700e:	8b 35       	cpi	r24, 0x5B	; 91
    7010:	21 f4       	brne	.+8      	; 0x701a <cdc_getkey+0x50>
			esc_state = 2;
    7012:	92 e0       	ldi	r25, 0x02	; 2
    7014:	90 93 6d 2b 	sts	0x2B6D, r25	; 0x802b6d <esc_state.5267>
    7018:	17 c0       	rjmp	.+46     	; 0x7048 <cdc_getkey+0x7e>
		} else {
			esc_state = 0;
    701a:	10 92 6d 2b 	sts	0x2B6D, r1	; 0x802b6d <esc_state.5267>
    701e:	0a c0       	rjmp	.+20     	; 0x7034 <cdc_getkey+0x6a>
		}
	} else if (esc_state == 2) {
    7020:	92 30       	cpi	r25, 0x02	; 2
    7022:	41 f4       	brne	.+16     	; 0x7034 <cdc_getkey+0x6a>
		esc_state = 0;
    7024:	10 92 6d 2b 	sts	0x2B6D, r1	; 0x802b6d <esc_state.5267>
		// Translate up/down arrow keys to keycodes
		switch (key) {
    7028:	81 34       	cpi	r24, 0x41	; 65
    702a:	69 f0       	breq	.+26     	; 0x7046 <cdc_getkey+0x7c>
    702c:	82 34       	cpi	r24, 0x42	; 66
    702e:	11 f4       	brne	.+4      	; 0x7034 <cdc_getkey+0x6a>
		case 'A':
			key = KEYBOARD_UP;
			break;
		case 'B':
			key = KEYBOARD_DOWN;
    7030:	88 e2       	ldi	r24, 0x28	; 40
    7032:	0a c0       	rjmp	.+20     	; 0x7048 <cdc_getkey+0x7e>
			break;
		}
	}

	// Check for escape sequence
	if (key == 0x1b) {
    7034:	8b 31       	cpi	r24, 0x1B	; 27
    7036:	41 f4       	brne	.+16     	; 0x7048 <cdc_getkey+0x7e>
		esc_state = 1;
    7038:	81 e0       	ldi	r24, 0x01	; 1
    703a:	80 93 6d 2b 	sts	0x2B6D, r24	; 0x802b6d <esc_state.5267>
		return KEYBOARD_NO_KEY;
    703e:	80 e0       	ldi	r24, 0x00	; 0
    7040:	03 c0       	rjmp	.+6      	; 0x7048 <cdc_getkey+0x7e>
		cdc_opened = false;
		cdc_put_help();
	}

	if (!udi_cdc_is_rx_ready()) {
		return KEYBOARD_NO_KEY;
    7042:	80 e0       	ldi	r24, 0x00	; 0
    7044:	01 c0       	rjmp	.+2      	; 0x7048 <cdc_getkey+0x7e>
	} else if (esc_state == 2) {
		esc_state = 0;
		// Translate up/down arrow keys to keycodes
		switch (key) {
		case 'A':
			key = KEYBOARD_UP;
    7046:	86 e2       	ldi	r24, 0x26	; 38
		return KEYBOARD_NO_KEY;
	}

	// Just return any other key directly
	return key;
}
    7048:	df 91       	pop	r29
    704a:	cf 91       	pop	r28
    704c:	08 95       	ret

0000704e <date_time_application>:

/**
 * \brief Show a menu presenting the date and time applications
 */
void date_time_application(void)
{
    704e:	2f 92       	push	r2
    7050:	3f 92       	push	r3
    7052:	4f 92       	push	r4
    7054:	5f 92       	push	r5
    7056:	6f 92       	push	r6
    7058:	7f 92       	push	r7
    705a:	8f 92       	push	r8
    705c:	9f 92       	push	r9
    705e:	af 92       	push	r10
    7060:	bf 92       	push	r11
    7062:	cf 92       	push	r12
    7064:	df 92       	push	r13
    7066:	ef 92       	push	r14
    7068:	ff 92       	push	r15
    706a:	0f 93       	push	r16
    706c:	1f 93       	push	r17
    706e:	cf 93       	push	r28
    7070:	df 93       	push	r29
    7072:	cd b7       	in	r28, 0x3d	; 61
    7074:	de b7       	in	r29, 0x3e	; 62
    7076:	c2 57       	subi	r28, 0x72	; 114
    7078:	d1 09       	sbc	r29, r1
    707a:	cd bf       	out	0x3d, r28	; 61
    707c:	de bf       	out	0x3e, r29	; 62

	// Get current time
	current_timestamp = rtc_get_time();

	// Convert the current timestamp to a datestruct
	calendar_timestamp_to_date_tz(current_timestamp, tz_hours, tz_minutes,
    707e:	9e 01       	movw	r18, r28
    7080:	27 5a       	subi	r18, 0xA7	; 167
    7082:	3f 4f       	sbci	r19, 0xFF	; 255
    7084:	ab 96       	adiw	r28, 0x2b	; 43
    7086:	2e af       	std	Y+62, r18	; 0x3e
    7088:	3f af       	std	Y+63, r19	; 0x3f
    708a:	ab 97       	sbiw	r28, 0x2b	; 43
    708c:	aa 96       	adiw	r28, 0x2a	; 42
    708e:	3f ad       	ldd	r19, Y+63	; 0x3f
    7090:	aa 97       	sbiw	r28, 0x2a	; 42
    7092:	ae 96       	adiw	r28, 0x2e	; 46
    7094:	3f af       	std	Y+63, r19	; 0x3f
    7096:	ae 97       	sbiw	r28, 0x2e	; 46
    7098:	ab 96       	adiw	r28, 0x2b	; 43
    709a:	8f ad       	ldd	r24, Y+63	; 0x3f
    709c:	ab 97       	sbiw	r28, 0x2b	; 43
    709e:	af 96       	adiw	r28, 0x2f	; 47
    70a0:	8f af       	std	Y+63, r24	; 0x3f
    70a2:	af 97       	sbiw	r28, 0x2f	; 47
	// show the date selection spinner to get a new date
	gfx_mono_spinctrl_spincollection_show(&date_spinners);

	do {
		do {
			keyboard_get_key_state(&input);
    70a4:	1e 01       	movw	r2, r28
    70a6:	97 e6       	ldi	r25, 0x67	; 103
    70a8:	29 0e       	add	r2, r25
    70aa:	31 1c       	adc	r3, r1
    70ac:	e0 96       	adiw	r28, 0x30	; 48
    70ae:	2f ae       	std	Y+63, r2	; 0x3f
    70b0:	e0 97       	sbiw	r28, 0x30	; 48
    70b2:	e1 96       	adiw	r28, 0x31	; 49
    70b4:	3f ae       	std	Y+63, r3	; 0x3f
    70b6:	e1 97       	sbiw	r28, 0x31	; 49
			// Wait for key release
		} while (input.type != KEYBOARD_RELEASE);
		// Send key to spinnercollection
		spinner_status = gfx_mono_spinctrl_spincollection_process_key(
    70b8:	de 01       	movw	r26, r28
    70ba:	af 59       	subi	r26, 0x9F	; 159
    70bc:	bf 4f       	sbci	r27, 0xFF	; 255
    70be:	ad 96       	adiw	r28, 0x2d	; 45
    70c0:	ae af       	std	Y+62, r26	; 0x3e
    70c2:	bf af       	std	Y+63, r27	; 0x3f
    70c4:	ad 97       	sbiw	r28, 0x2d	; 45
	// show the date selection spinner to get a new date
	gfx_mono_spinctrl_spincollection_show(&date_spinners);

	do {
		do {
			keyboard_get_key_state(&input);
    70c6:	b2 2c       	mov	r11, r2
			// Wait for key release
		} while (input.type != KEYBOARD_RELEASE);
		// Send key to spinnercollection
		spinner_status = gfx_mono_spinctrl_spincollection_process_key(
    70c8:	ac 96       	adiw	r28, 0x2c	; 44
    70ca:	bf ad       	ldd	r27, Y+63	; 0x3f
    70cc:	ac 97       	sbiw	r28, 0x2c	; 44
    70ce:	e2 96       	adiw	r28, 0x32	; 50
    70d0:	bf af       	std	Y+63, r27	; 0x3f
    70d2:	e2 97       	sbiw	r28, 0x32	; 50
    70d4:	ad 96       	adiw	r28, 0x2d	; 45
    70d6:	8f ac       	ldd	r8, Y+63	; 0x3f
    70d8:	ad 97       	sbiw	r28, 0x2d	; 45

	gfx_mono_spinctrl_spincollection_show(&time_spinners);

	do {
		do {
			keyboard_get_key_state(&input);
    70da:	a3 2e       	mov	r10, r19
    70dc:	98 2e       	mov	r9, r24
    70de:	e3 96       	adiw	r28, 0x33	; 51
    70e0:	3f ae       	std	Y+63, r3	; 0x3f
    70e2:	e3 97       	sbiw	r28, 0x33	; 51
{
	uint8_t menu_status;
	struct keyboard_event input;

	while(true) {
		gfx_mono_menu_init(&datetime_menu);
    70e4:	80 ef       	ldi	r24, 0xF0	; 240
    70e6:	90 e2       	ldi	r25, 0x20	; 32
    70e8:	0e 94 d5 15 	call	0x2baa	; 0x2baa <gfx_mono_menu_init>
		do {
			do {
				keyboard_get_key_state(&input);
    70ec:	ce 01       	movw	r24, r28
    70ee:	01 96       	adiw	r24, 0x01	; 1
    70f0:	8a d2       	rcall	.+1300   	; 0x7606 <keyboard_get_key_state>
				// Wait for key release
			} while (input.type != KEYBOARD_RELEASE);
    70f2:	8a 81       	ldd	r24, Y+2	; 0x02
    70f4:	82 30       	cpi	r24, 0x02	; 2
    70f6:	d1 f7       	brne	.-12     	; 0x70ec <date_time_application+0x9e>

			// Send key to menu system
			menu_status = gfx_mono_menu_process_key(&datetime_menu,
    70f8:	69 81       	ldd	r22, Y+1	; 0x01
    70fa:	80 ef       	ldi	r24, 0xF0	; 240
    70fc:	90 e2       	ldi	r25, 0x20	; 32
    70fe:	0e 94 ed 15 	call	0x2bda	; 0x2bda <gfx_mono_menu_process_key>
					input.keycode);
			// Wait for something useful to happen in the menu system
		} while (menu_status == GFX_MONO_MENU_EVENT_IDLE);
    7102:	8f 3f       	cpi	r24, 0xFF	; 255
    7104:	99 f3       	breq	.-26     	; 0x70ec <date_time_application+0x9e>

		switch(menu_status) {
    7106:	81 30       	cpi	r24, 0x01	; 1
    7108:	09 f4       	brne	.+2      	; 0x710c <date_time_application+0xbe>
    710a:	e6 c0       	rjmp	.+460    	; 0x72d8 <date_time_application+0x28a>
    710c:	38 f0       	brcs	.+14     	; 0x711c <date_time_application+0xce>
    710e:	82 30       	cpi	r24, 0x02	; 2
    7110:	09 f4       	brne	.+2      	; 0x7114 <date_time_application+0xc6>
    7112:	e2 c1       	rjmp	.+964    	; 0x74d8 <date_time_application+0x48a>
    7114:	83 30       	cpi	r24, 0x03	; 3
    7116:	09 f4       	brne	.+2      	; 0x711a <date_time_application+0xcc>
    7118:	5d c2       	rjmp	.+1210   	; 0x75d4 <date_time_application+0x586>
    711a:	5e c2       	rjmp	.+1212   	; 0x75d8 <date_time_application+0x58a>
	uint8_t offset;
	int8_t tz_hours_temp;
	int8_t tz_minutes_temp;
	uint32_t past_timestamp = 0xFFFFFFFF;
	uint32_t rtc_timestamp = 0;
	char string_buf[32] = "Date & Time";
    711c:	8c e0       	ldi	r24, 0x0C	; 12
    711e:	e3 e8       	ldi	r30, 0x83	; 131
    7120:	f1 e2       	ldi	r31, 0x21	; 33
    7122:	de 01       	movw	r26, r28
    7124:	13 96       	adiw	r26, 0x03	; 3
    7126:	01 90       	ld	r0, Z+
    7128:	0d 92       	st	X+, r0
    712a:	8a 95       	dec	r24
    712c:	e1 f7       	brne	.-8      	; 0x7126 <date_time_application+0xd8>
    712e:	fe 01       	movw	r30, r28
    7130:	3f 96       	adiw	r30, 0x0f	; 15
    7132:	84 e1       	ldi	r24, 0x14	; 20
    7134:	df 01       	movw	r26, r30
    7136:	1d 92       	st	X+, r1
    7138:	8a 95       	dec	r24
    713a:	e9 f7       	brne	.-6      	; 0x7136 <date_time_application+0xe8>

	//clear screen
	gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    713c:	00 e0       	ldi	r16, 0x00	; 0
    713e:	20 e2       	ldi	r18, 0x20	; 32
    7140:	40 e8       	ldi	r20, 0x80	; 128
    7142:	60 e0       	ldi	r22, 0x00	; 0
    7144:	80 e0       	ldi	r24, 0x00	; 0
    7146:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>

	// Get current timestamp from the RTC32
	rtc_timestamp = rtc_get_time();
    714a:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <rtc_get_time>
    714e:	2b 01       	movw	r4, r22

	// Get timezone settings
	tz_hours_temp = timezone_get_hours();
    7150:	3c 01       	movw	r6, r24
    7152:	23 d7       	rcall	.+3654   	; 0x7f9a <timezone_get_hours>
	tz_minutes_temp = timezone_get_minutes();
    7154:	f8 2e       	mov	r15, r24
    7156:	24 d7       	rcall	.+3656   	; 0x7fa0 <timezone_get_minutes>
    7158:	e8 2e       	mov	r14, r24

	// Print "Date & Time" at first line of the display
	gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width, &height);
    715a:	9e 01       	movw	r18, r28
    715c:	29 5b       	subi	r18, 0xB9	; 185
    715e:	3f 4f       	sbci	r19, 0xFF	; 255
    7160:	ae 01       	movw	r20, r28
    7162:	4f 5a       	subi	r20, 0xAF	; 175
    7164:	5f 4f       	sbci	r21, 0xFF	; 255
    7166:	60 e1       	ldi	r22, 0x10	; 16
    7168:	70 e2       	ldi	r23, 0x20	; 32
    716a:	ce 01       	movw	r24, r28
    716c:	03 96       	adiw	r24, 0x03	; 3
    716e:	0e 94 e7 19 	call	0x33ce	; 0x33ce <gfx_mono_get_string_bounding_box>
	offset = (GFX_MONO_LCD_WIDTH - width) / 2;
	gfx_mono_draw_string(string_buf, offset, 0, &sysfont);
    7172:	62 96       	adiw	r28, 0x12	; 18
    7174:	8f ad       	ldd	r24, Y+63	; 0x3f
    7176:	62 97       	sbiw	r28, 0x12	; 18
    7178:	20 e8       	ldi	r18, 0x80	; 128
    717a:	30 e0       	ldi	r19, 0x00	; 0
    717c:	28 1b       	sub	r18, r24
    717e:	31 09       	sbc	r19, r1
    7180:	c9 01       	movw	r24, r18
    7182:	99 23       	and	r25, r25
    7184:	0c f4       	brge	.+2      	; 0x7188 <date_time_application+0x13a>
    7186:	01 96       	adiw	r24, 0x01	; 1
    7188:	bc 01       	movw	r22, r24
    718a:	75 95       	asr	r23
    718c:	67 95       	ror	r22
    718e:	20 e1       	ldi	r18, 0x10	; 16
    7190:	30 e2       	ldi	r19, 0x20	; 32
    7192:	40 e0       	ldi	r20, 0x00	; 0
    7194:	ce 01       	movw	r24, r28
    7196:	03 96       	adiw	r24, 0x03	; 3
    7198:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>

	// Convert RTC time to a date struct containing the current date and time
	calendar_timestamp_to_date_tz(rtc_timestamp, tz_hours_temp,
    719c:	8e 01       	movw	r16, r28
    719e:	0d 5d       	subi	r16, 0xDD	; 221
    71a0:	1f 4f       	sbci	r17, 0xFF	; 255
    71a2:	2e 2d       	mov	r18, r14
    71a4:	4f 2d       	mov	r20, r15
    71a6:	c3 01       	movw	r24, r6
    71a8:	b2 01       	movw	r22, r4
    71aa:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <calendar_timestamp_to_date_tz>
	uint8_t width;
	uint8_t height;
	uint8_t offset;
	int8_t tz_hours_temp;
	int8_t tz_minutes_temp;
	uint32_t past_timestamp = 0xFFFFFFFF;
    71ae:	44 24       	eor	r4, r4
    71b0:	4a 94       	dec	r4
    71b2:	54 2c       	mov	r5, r4
    71b4:	32 01       	movw	r6, r4
		// Update printed time if the time has changed
		if(rtc_timestamp != past_timestamp) {
			calendar_add_second_to_date(&date);

			// Print current date centered on line 3
			snprintf(string_buf, sizeof(string_buf),"%s %.2d.%.2d.%d",
    71b6:	00 52       	subi	r16, 0x20	; 32
	calendar_timestamp_to_date_tz(rtc_timestamp, tz_hours_temp,
			tz_minutes_temp, &date);

	while (true) {
		// Return from application if "back" key is pressed and released
		keyboard_get_key_state(&input_key);
    71b8:	11 09       	sbc	r17, r1
    71ba:	ce 01       	movw	r24, r28
    71bc:	c5 96       	adiw	r24, 0x35	; 53
    71be:	23 d2       	rcall	.+1094   	; 0x7606 <keyboard_get_key_state>
		if ((input_key.keycode == KEYBOARD_BACK) &&
    71c0:	8d a9       	ldd	r24, Y+53	; 0x35
    71c2:	88 30       	cpi	r24, 0x08	; 8
    71c4:	21 f4       	brne	.+8      	; 0x71ce <date_time_application+0x180>
    71c6:	8e a9       	ldd	r24, Y+54	; 0x36
    71c8:	82 30       	cpi	r24, 0x02	; 2
    71ca:	09 f4       	brne	.+2      	; 0x71ce <date_time_application+0x180>
    71cc:	8b cf       	rjmp	.-234    	; 0x70e4 <date_time_application+0x96>
				(input_key.type == KEYBOARD_RELEASE)) {
			break;
		}

		rtc_timestamp = rtc_get_time();
    71ce:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <rtc_get_time>
    71d2:	6b 01       	movw	r12, r22
    71d4:	7c 01       	movw	r14, r24

		// Update printed time if the time has changed
		if(rtc_timestamp != past_timestamp) {
    71d6:	64 15       	cp	r22, r4
    71d8:	75 05       	cpc	r23, r5
    71da:	86 05       	cpc	r24, r6
    71dc:	97 05       	cpc	r25, r7
    71de:	69 f3       	breq	.-38     	; 0x71ba <date_time_application+0x16c>
			calendar_add_second_to_date(&date);
    71e0:	ce 01       	movw	r24, r28
    71e2:	83 96       	adiw	r24, 0x23	; 35
    71e4:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <calendar_add_second_to_date>

			// Print current date centered on line 3
			snprintf(string_buf, sizeof(string_buf),"%s %.2d.%.2d.%d",
    71e8:	89 a5       	ldd	r24, Y+41	; 0x29
    71ea:	8f 93       	push	r24
    71ec:	88 a5       	ldd	r24, Y+40	; 0x28
    71ee:	8f 93       	push	r24
    71f0:	8f a1       	ldd	r24, Y+39	; 0x27
    71f2:	90 e0       	ldi	r25, 0x00	; 0
    71f4:	01 96       	adiw	r24, 0x01	; 1
    71f6:	9f 93       	push	r25
    71f8:	8f 93       	push	r24
    71fa:	8e a1       	ldd	r24, Y+38	; 0x26
    71fc:	90 e0       	ldi	r25, 0x00	; 0
    71fe:	01 96       	adiw	r24, 0x01	; 1
    7200:	9f 93       	push	r25
    7202:	8f 93       	push	r24
    7204:	ea a5       	ldd	r30, Y+42	; 0x2a
    7206:	f0 e0       	ldi	r31, 0x00	; 0
    7208:	ee 0f       	add	r30, r30
    720a:	ff 1f       	adc	r31, r31
    720c:	ee 51       	subi	r30, 0x1E	; 30
    720e:	ff 4d       	sbci	r31, 0xDF	; 223
    7210:	81 81       	ldd	r24, Z+1	; 0x01
    7212:	8f 93       	push	r24
    7214:	80 81       	ld	r24, Z
    7216:	8f 93       	push	r24
    7218:	eb eb       	ldi	r30, 0xBB	; 187
    721a:	f1 e2       	ldi	r31, 0x21	; 33
    721c:	ff 93       	push	r31
    721e:	ef 93       	push	r30
    7220:	1f 92       	push	r1
    7222:	30 e2       	ldi	r19, 0x20	; 32
    7224:	3f 93       	push	r19
    7226:	1f 93       	push	r17
    7228:	0f 93       	push	r16
    722a:	0e 94 78 42 	call	0x84f0	; 0x84f0 <snprintf>
					day[date.dayofweek],
			date.date + 1, date.month + 1, date.year);
			gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width,
    722e:	9e 01       	movw	r18, r28
    7230:	29 5b       	subi	r18, 0xB9	; 185
    7232:	3f 4f       	sbci	r19, 0xFF	; 255
    7234:	ae 01       	movw	r20, r28
    7236:	4f 5a       	subi	r20, 0xAF	; 175
    7238:	5f 4f       	sbci	r21, 0xFF	; 255
    723a:	60 e1       	ldi	r22, 0x10	; 16
    723c:	70 e2       	ldi	r23, 0x20	; 32
    723e:	c8 01       	movw	r24, r16
    7240:	0e 94 e7 19 	call	0x33ce	; 0x33ce <gfx_mono_get_string_bounding_box>
					&height);
			offset = (GFX_MONO_LCD_WIDTH - width) / 2;
			gfx_mono_draw_string(string_buf, offset, 12, &sysfont);
    7244:	62 96       	adiw	r28, 0x12	; 18
    7246:	8f ad       	ldd	r24, Y+63	; 0x3f
    7248:	62 97       	sbiw	r28, 0x12	; 18
    724a:	a0 e8       	ldi	r26, 0x80	; 128
    724c:	b0 e0       	ldi	r27, 0x00	; 0
    724e:	a8 1b       	sub	r26, r24
    7250:	b1 09       	sbc	r27, r1
    7252:	bd 01       	movw	r22, r26
    7254:	12 f4       	brpl	.+4      	; 0x725a <date_time_application+0x20c>
    7256:	6f 5f       	subi	r22, 0xFF	; 255
    7258:	7f 4f       	sbci	r23, 0xFF	; 255
    725a:	75 95       	asr	r23
    725c:	67 95       	ror	r22
    725e:	20 e1       	ldi	r18, 0x10	; 16
    7260:	30 e2       	ldi	r19, 0x20	; 32
    7262:	4c e0       	ldi	r20, 0x0C	; 12
    7264:	c8 01       	movw	r24, r16
    7266:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>

			snprintf(string_buf, sizeof(string_buf),
    726a:	8b a1       	ldd	r24, Y+35	; 0x23
    726c:	1f 92       	push	r1
    726e:	8f 93       	push	r24
    7270:	8c a1       	ldd	r24, Y+36	; 0x24
    7272:	1f 92       	push	r1
    7274:	8f 93       	push	r24
    7276:	8d a1       	ldd	r24, Y+37	; 0x25
    7278:	1f 92       	push	r1
    727a:	8f 93       	push	r24
    727c:	eb ec       	ldi	r30, 0xCB	; 203
    727e:	f1 e2       	ldi	r31, 0x21	; 33
    7280:	ff 93       	push	r31
    7282:	ef 93       	push	r30
    7284:	1f 92       	push	r1
    7286:	30 e2       	ldi	r19, 0x20	; 32
    7288:	3f 93       	push	r19
    728a:	1f 93       	push	r17
    728c:	0f 93       	push	r16
    728e:	0e 94 78 42 	call	0x84f0	; 0x84f0 <snprintf>
					"%.2d:%.2d:%.2d", date.hour,
					date.minute, date.second);

			// Center text
			gfx_mono_get_string_bounding_box(string_buf,
    7292:	9e 01       	movw	r18, r28
    7294:	29 5b       	subi	r18, 0xB9	; 185
    7296:	3f 4f       	sbci	r19, 0xFF	; 255
    7298:	ae 01       	movw	r20, r28
    729a:	4f 5a       	subi	r20, 0xAF	; 175
    729c:	5f 4f       	sbci	r21, 0xFF	; 255
    729e:	60 e1       	ldi	r22, 0x10	; 16
    72a0:	70 e2       	ldi	r23, 0x20	; 32
    72a2:	c8 01       	movw	r24, r16
    72a4:	0e 94 e7 19 	call	0x33ce	; 0x33ce <gfx_mono_get_string_bounding_box>
					&sysfont,&width, &height);
			offset = (GFX_MONO_LCD_WIDTH - width) / 2;
			gfx_mono_draw_string(string_buf, offset, 20, &sysfont);
    72a8:	62 96       	adiw	r28, 0x12	; 18
    72aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    72ac:	62 97       	sbiw	r28, 0x12	; 18
    72ae:	a0 e8       	ldi	r26, 0x80	; 128
    72b0:	b0 e0       	ldi	r27, 0x00	; 0
    72b2:	a8 1b       	sub	r26, r24
    72b4:	b1 09       	sbc	r27, r1
    72b6:	bd 01       	movw	r22, r26
    72b8:	12 f4       	brpl	.+4      	; 0x72be <date_time_application+0x270>
    72ba:	6f 5f       	subi	r22, 0xFF	; 255
    72bc:	7f 4f       	sbci	r23, 0xFF	; 255
    72be:	75 95       	asr	r23
    72c0:	67 95       	ror	r22
    72c2:	20 e1       	ldi	r18, 0x10	; 16
    72c4:	30 e2       	ldi	r19, 0x20	; 32
    72c6:	44 e1       	ldi	r20, 0x14	; 20
    72c8:	c8 01       	movw	r24, r16
    72ca:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>
    72ce:	cd bf       	out	0x3d, r28	; 61
    72d0:	de bf       	out	0x3e, r29	; 62
		if ((input_key.keycode == KEYBOARD_BACK) &&
				(input_key.type == KEYBOARD_RELEASE)) {
			break;
		}

		rtc_timestamp = rtc_get_time();
    72d2:	26 01       	movw	r4, r12
    72d4:	37 01       	movw	r6, r14
    72d6:	71 cf       	rjmp	.-286    	; 0x71ba <date_time_application+0x16c>
	struct gfx_mono_spinctrl_spincollection date_spinners;
	int16_t spinner_results[3];
	uint8_t spinner_status;

	// Prepare the spinner widget for date selection
	gfx_mono_spinctrl_init(&year_spinner, SPINTYPE_INTEGER,
    72d8:	c1 2c       	mov	r12, r1
    72da:	0f 2e       	mov	r0, r31
    72dc:	f9 e3       	ldi	r31, 0x39	; 57
    72de:	ef 2e       	mov	r14, r31
    72e0:	f8 e0       	ldi	r31, 0x08	; 8
    72e2:	ff 2e       	mov	r15, r31
    72e4:	f0 2d       	mov	r31, r0
    72e6:	0b ed       	ldi	r16, 0xDB	; 219
    72e8:	17 e0       	ldi	r17, 0x07	; 7
    72ea:	20 e0       	ldi	r18, 0x00	; 0
    72ec:	30 e0       	ldi	r19, 0x00	; 0
    72ee:	41 ea       	ldi	r20, 0xA1	; 161
    72f0:	55 e0       	ldi	r21, 0x05	; 5
    72f2:	61 e0       	ldi	r22, 0x01	; 1
    72f4:	ce 01       	movw	r24, r28
    72f6:	c5 96       	adiw	r24, 0x35	; 53
    72f8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <gfx_mono_spinctrl_init>
			datetime_date_spinner_string_year, NULL, 2011, 2105, 0);
	gfx_mono_spinctrl_init(&month_spinner, SPINTYPE_INTEGER,
    72fc:	0f 2e       	mov	r0, r31
    72fe:	fc e0       	ldi	r31, 0x0C	; 12
    7300:	ef 2e       	mov	r14, r31
    7302:	f1 2c       	mov	r15, r1
    7304:	f0 2d       	mov	r31, r0
    7306:	01 e0       	ldi	r16, 0x01	; 1
    7308:	10 e0       	ldi	r17, 0x00	; 0
    730a:	20 e0       	ldi	r18, 0x00	; 0
    730c:	30 e0       	ldi	r19, 0x00	; 0
    730e:	4b e9       	ldi	r20, 0x9B	; 155
    7310:	55 e0       	ldi	r21, 0x05	; 5
    7312:	61 e0       	ldi	r22, 0x01	; 1
    7314:	ce 01       	movw	r24, r28
    7316:	83 96       	adiw	r24, 0x23	; 35
    7318:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <gfx_mono_spinctrl_init>
			datetime_date_spinner_string_month, NULL, 1, 12, 0);
	gfx_mono_spinctrl_init(&day_spinner, SPINTYPE_INTEGER,
    731c:	0f 2e       	mov	r0, r31
    731e:	ff e1       	ldi	r31, 0x1F	; 31
    7320:	ef 2e       	mov	r14, r31
    7322:	f1 2c       	mov	r15, r1
    7324:	f0 2d       	mov	r31, r0
    7326:	20 e0       	ldi	r18, 0x00	; 0
    7328:	30 e0       	ldi	r19, 0x00	; 0
    732a:	47 e9       	ldi	r20, 0x97	; 151
    732c:	55 e0       	ldi	r21, 0x05	; 5
    732e:	61 e0       	ldi	r22, 0x01	; 1
    7330:	ce 01       	movw	r24, r28
    7332:	03 96       	adiw	r24, 0x03	; 3
    7334:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <gfx_mono_spinctrl_init>
			datetime_date_spinner_string_day, NULL, 1, 31, 0);

	// Create date spincollector
	gfx_mono_spinctrl_spincollection_init(&date_spinners);
    7338:	ce 01       	movw	r24, r28
    733a:	89 5b       	subi	r24, 0xB9	; 185
    733c:	9f 4f       	sbci	r25, 0xFF	; 255
    733e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <gfx_mono_spinctrl_spincollection_init>
	gfx_mono_spinctrl_spincollection_add_spinner(&year_spinner,
    7342:	be 01       	movw	r22, r28
    7344:	69 5b       	subi	r22, 0xB9	; 185
    7346:	7f 4f       	sbci	r23, 0xFF	; 255
    7348:	ce 01       	movw	r24, r28
    734a:	c5 96       	adiw	r24, 0x35	; 53
    734c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <gfx_mono_spinctrl_spincollection_add_spinner>
			&date_spinners);
	gfx_mono_spinctrl_spincollection_add_spinner(&month_spinner,
    7350:	be 01       	movw	r22, r28
    7352:	69 5b       	subi	r22, 0xB9	; 185
    7354:	7f 4f       	sbci	r23, 0xFF	; 255
    7356:	ce 01       	movw	r24, r28
    7358:	83 96       	adiw	r24, 0x23	; 35
    735a:	0e 94 41 17 	call	0x2e82	; 0x2e82 <gfx_mono_spinctrl_spincollection_add_spinner>
			&date_spinners);
	gfx_mono_spinctrl_spincollection_add_spinner(&day_spinner,
    735e:	be 01       	movw	r22, r28
    7360:	69 5b       	subi	r22, 0xB9	; 185
    7362:	7f 4f       	sbci	r23, 0xFF	; 255
    7364:	ce 01       	movw	r24, r28
    7366:	03 96       	adiw	r24, 0x03	; 3
			&date_spinners);

	// Get timezone settings
	tz_hours = timezone_get_hours();
    7368:	0e 94 41 17 	call	0x2e82	; 0x2e82 <gfx_mono_spinctrl_spincollection_add_spinner>
    736c:	16 d6       	rcall	.+3116   	; 0x7f9a <timezone_get_hours>
	tz_minutes = timezone_get_minutes();
    736e:	f8 2e       	mov	r15, r24
    7370:	17 d6       	rcall	.+3118   	; 0x7fa0 <timezone_get_minutes>
    7372:	e8 2e       	mov	r14, r24

	// Get current time
	current_timestamp = rtc_get_time();
    7374:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <rtc_get_time>

	// Convert the current timestamp to a datestruct
	calendar_timestamp_to_date_tz(current_timestamp, tz_hours, tz_minutes,
    7378:	ae 96       	adiw	r28, 0x2e	; 46
    737a:	0f ad       	ldd	r16, Y+63	; 0x3f
    737c:	ae 97       	sbiw	r28, 0x2e	; 46
    737e:	af 96       	adiw	r28, 0x2f	; 47
    7380:	1f ad       	ldd	r17, Y+63	; 0x3f
    7382:	af 97       	sbiw	r28, 0x2f	; 47
    7384:	2e 2d       	mov	r18, r14
    7386:	4f 2d       	mov	r20, r15
    7388:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <calendar_timestamp_to_date_tz>
		&date);

	// Set the spinner selection to the current date
	day_spinner.integer_data = date.date + 1;
    738c:	6d 96       	adiw	r28, 0x1d	; 29
    738e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7390:	6d 97       	sbiw	r28, 0x1d	; 29
    7392:	90 e0       	ldi	r25, 0x00	; 0
    7394:	01 96       	adiw	r24, 0x01	; 1
    7396:	8e 83       	std	Y+6, r24	; 0x06
    7398:	9f 83       	std	Y+7, r25	; 0x07
	month_spinner.integer_data = date.month + 1;
    739a:	6e 96       	adiw	r28, 0x1e	; 30
    739c:	8f ad       	ldd	r24, Y+63	; 0x3f
    739e:	6e 97       	sbiw	r28, 0x1e	; 30
    73a0:	90 e0       	ldi	r25, 0x00	; 0
    73a2:	01 96       	adiw	r24, 0x01	; 1
    73a4:	8e a3       	std	Y+38, r24	; 0x26
    73a6:	9f a3       	std	Y+39, r25	; 0x27
	year_spinner.integer_data = date.year;
    73a8:	a0 96       	adiw	r28, 0x20	; 32
    73aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    73ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    73ae:	a0 97       	sbiw	r28, 0x20	; 32
    73b0:	88 af       	std	Y+56, r24	; 0x38
    73b2:	99 af       	std	Y+57, r25	; 0x39

	// show the date selection spinner to get a new date
	gfx_mono_spinctrl_spincollection_show(&date_spinners);
    73b4:	ce 01       	movw	r24, r28
    73b6:	89 5b       	subi	r24, 0xB9	; 185
    73b8:	9f 4f       	sbci	r25, 0xFF	; 255
    73ba:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <gfx_mono_spinctrl_spincollection_show>
    73be:	e3 96       	adiw	r28, 0x33	; 51
    73c0:	1f ad       	ldd	r17, Y+63	; 0x3f
    73c2:	e3 97       	sbiw	r28, 0x33	; 51
    73c4:	e2 96       	adiw	r28, 0x32	; 50
    73c6:	0f ad       	ldd	r16, Y+63	; 0x3f

	do {
		do {
			keyboard_get_key_state(&input);
    73c8:	e2 97       	sbiw	r28, 0x32	; 50
    73ca:	8b 2d       	mov	r24, r11
    73cc:	91 2f       	mov	r25, r17
    73ce:	1b d1       	rcall	.+566    	; 0x7606 <keyboard_get_key_state>
			// Wait for key release
		} while (input.type != KEYBOARD_RELEASE);
    73d0:	d1 01       	movw	r26, r2
    73d2:	11 96       	adiw	r26, 0x01	; 1
    73d4:	8c 91       	ld	r24, X
    73d6:	11 97       	sbiw	r26, 0x01	; 1
    73d8:	82 30       	cpi	r24, 0x02	; 2
    73da:	b9 f7       	brne	.-18     	; 0x73ca <date_time_application+0x37c>
		// Send key to spinnercollection
		spinner_status = gfx_mono_spinctrl_spincollection_process_key(
    73dc:	40 2f       	mov	r20, r16
    73de:	58 2d       	mov	r21, r8
    73e0:	6c 91       	ld	r22, X
    73e2:	ce 01       	movw	r24, r28
    73e4:	89 5b       	subi	r24, 0xB9	; 185
    73e6:	9f 4f       	sbci	r25, 0xFF	; 255
    73e8:	0e 94 4b 18 	call	0x3096	; 0x3096 <gfx_mono_spinctrl_spincollection_process_key>
				&date_spinners, input.keycode, spinner_results);
	} while (spinner_status != GFX_MONO_SPINCTRL_EVENT_FINISH);
    73ec:	8d 3f       	cpi	r24, 0xFD	; 253
    73ee:	69 f7       	brne	.-38     	; 0x73ca <date_time_application+0x37c>

	/* The result are stored in the same order that they were added
	 * we subtract one from month and day, as they are indexed from 0 in the
	 * date struct but we present them as starting from 1 in the spinner.
	 */
	new_date.year = spinner_results[0];
    73f0:	a3 96       	adiw	r28, 0x23	; 35
    73f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    73f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    73f6:	a3 97       	sbiw	r28, 0x23	; 35
    73f8:	68 96       	adiw	r28, 0x18	; 24
    73fa:	8e af       	std	Y+62, r24	; 0x3e
    73fc:	9f af       	std	Y+63, r25	; 0x3f
    73fe:	68 97       	sbiw	r28, 0x18	; 24
	new_date.month = spinner_results[1] - 1;
    7400:	a4 96       	adiw	r28, 0x24	; 36
    7402:	8f ad       	ldd	r24, Y+63	; 0x3f
    7404:	a4 97       	sbiw	r28, 0x24	; 36
    7406:	81 50       	subi	r24, 0x01	; 1
    7408:	66 96       	adiw	r28, 0x16	; 22
    740a:	8f af       	std	Y+63, r24	; 0x3f
    740c:	66 97       	sbiw	r28, 0x16	; 22
	new_date.date = spinner_results[2] - 1;
    740e:	a6 96       	adiw	r28, 0x26	; 38
    7410:	8f ad       	ldd	r24, Y+63	; 0x3f
    7412:	a6 97       	sbiw	r28, 0x26	; 38
    7414:	81 50       	subi	r24, 0x01	; 1
    7416:	65 96       	adiw	r28, 0x15	; 21
    7418:	8f af       	std	Y+63, r24	; 0x3f
    741a:	65 97       	sbiw	r28, 0x15	; 21

	// Verify date set
	new_date.hour = 0;
    741c:	64 96       	adiw	r28, 0x14	; 20
    741e:	1f ae       	std	Y+63, r1	; 0x3f
    7420:	64 97       	sbiw	r28, 0x14	; 20
	new_date.minute = 0;
    7422:	63 96       	adiw	r28, 0x13	; 19
    7424:	1f ae       	std	Y+63, r1	; 0x3f
    7426:	63 97       	sbiw	r28, 0x13	; 19
	new_date.second = 0;
    7428:	62 96       	adiw	r28, 0x12	; 18
    742a:	1f ae       	std	Y+63, r1	; 0x3f
    742c:	62 97       	sbiw	r28, 0x12	; 18
	if (calendar_date_to_timestamp_tz(&new_date, tz_hours, tz_minutes) == 0) {
    742e:	4e 2d       	mov	r20, r14
    7430:	6f 2d       	mov	r22, r15
    7432:	ce 01       	movw	r24, r28
    7434:	8f 5a       	subi	r24, 0xAF	; 175
    7436:	9f 4f       	sbci	r25, 0xFF	; 255
    7438:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <calendar_date_to_timestamp_tz>
    743c:	67 2b       	or	r22, r23
    743e:	68 2b       	or	r22, r24
    7440:	69 2b       	or	r22, r25
    7442:	e9 f4       	brne	.+58     	; 0x747e <date_time_application+0x430>
		//Notify the user that the date was invalid and wait for key
		gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH,
    7444:	00 e0       	ldi	r16, 0x00	; 0
    7446:	20 e2       	ldi	r18, 0x20	; 32
    7448:	40 e8       	ldi	r20, 0x80	; 128
    744a:	60 e0       	ldi	r22, 0x00	; 0
    744c:	80 e0       	ldi	r24, 0x00	; 0
    744e:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_LCD_HEIGHT, GFX_PIXEL_CLR);
		gfx_mono_draw_progmem_string(
    7452:	20 e1       	ldi	r18, 0x10	; 16
    7454:	30 e2       	ldi	r19, 0x20	; 32
    7456:	4c e0       	ldi	r20, 0x0C	; 12
    7458:	6a e0       	ldi	r22, 0x0A	; 10
    745a:	8e e7       	ldi	r24, 0x7E	; 126
    745c:	95 e0       	ldi	r25, 0x05	; 5
    745e:	0e 94 b9 19 	call	0x3372	; 0x3372 <gfx_mono_draw_progmem_string>
    7462:	e0 96       	adiw	r28, 0x30	; 48
    7464:	1f ad       	ldd	r17, Y+63	; 0x3f
    7466:	e0 97       	sbiw	r28, 0x30	; 48
    7468:	e1 96       	adiw	r28, 0x31	; 49
    746a:	0f ad       	ldd	r16, Y+63	; 0x3f
				(char PROGMEM_PTR_T)datetime_invalid_date_string,
				10, 12, &sysfont);

		while (true) {
			keyboard_get_key_state(&input);
    746c:	e1 97       	sbiw	r28, 0x31	; 49
    746e:	81 2f       	mov	r24, r17
    7470:	90 2f       	mov	r25, r16
    7472:	c9 d0       	rcall	.+402    	; 0x7606 <keyboard_get_key_state>
			if (input.type == KEYBOARD_RELEASE) {
    7474:	f1 01       	movw	r30, r2
    7476:	81 81       	ldd	r24, Z+1	; 0x01
    7478:	82 30       	cpi	r24, 0x02	; 2
    747a:	c9 f7       	brne	.-14     	; 0x746e <date_time_application+0x420>
    747c:	33 ce       	rjmp	.-922    	; 0x70e4 <date_time_application+0x96>
	}

	// Date OK, change.

	// Get current time
	current_timestamp = rtc_get_time();
    747e:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <rtc_get_time>
	// Convert the current timestamp to a datestruct
	calendar_timestamp_to_date_tz(current_timestamp, tz_hours, tz_minutes,
    7482:	ae 96       	adiw	r28, 0x2e	; 46
    7484:	0f ad       	ldd	r16, Y+63	; 0x3f
    7486:	ae 97       	sbiw	r28, 0x2e	; 46
    7488:	af 96       	adiw	r28, 0x2f	; 47
    748a:	1f ad       	ldd	r17, Y+63	; 0x3f
    748c:	af 97       	sbiw	r28, 0x2f	; 47
    748e:	2e 2d       	mov	r18, r14
    7490:	4f 2d       	mov	r20, r15
    7492:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <calendar_timestamp_to_date_tz>
		&date);
	// Set new date in struct
	date.year = new_date.year;
    7496:	68 96       	adiw	r28, 0x18	; 24
    7498:	8e ad       	ldd	r24, Y+62	; 0x3e
    749a:	9f ad       	ldd	r25, Y+63	; 0x3f
    749c:	68 97       	sbiw	r28, 0x18	; 24
    749e:	a0 96       	adiw	r28, 0x20	; 32
    74a0:	8e af       	std	Y+62, r24	; 0x3e
    74a2:	9f af       	std	Y+63, r25	; 0x3f
    74a4:	a0 97       	sbiw	r28, 0x20	; 32
	date.month = new_date.month;
    74a6:	66 96       	adiw	r28, 0x16	; 22
    74a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    74aa:	66 97       	sbiw	r28, 0x16	; 22
    74ac:	6e 96       	adiw	r28, 0x1e	; 30
    74ae:	8f af       	std	Y+63, r24	; 0x3f
    74b0:	6e 97       	sbiw	r28, 0x1e	; 30
	date.date = new_date.date;
    74b2:	65 96       	adiw	r28, 0x15	; 21
    74b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    74b6:	65 97       	sbiw	r28, 0x15	; 21
    74b8:	6d 96       	adiw	r28, 0x1d	; 29
    74ba:	8f af       	std	Y+63, r24	; 0x3f
    74bc:	6d 97       	sbiw	r28, 0x1d	; 29

	// Convert back to timestamp
	new_timestamp =
    74be:	4e 2d       	mov	r20, r14
    74c0:	6f 2d       	mov	r22, r15
    74c2:	ae 96       	adiw	r28, 0x2e	; 46
    74c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    74c6:	ae 97       	sbiw	r28, 0x2e	; 46
    74c8:	af 96       	adiw	r28, 0x2f	; 47
    74ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    74cc:	af 97       	sbiw	r28, 0x2f	; 47
    74ce:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <calendar_date_to_timestamp_tz>
			calendar_date_to_timestamp_tz(&date, tz_hours, tz_minutes);
	// Set new timestamp
	rtc_set_time(new_timestamp);
    74d2:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <rtc_set_time>
    74d6:	06 ce       	rjmp	.-1012   	; 0x70e4 <date_time_application+0x96>
	struct gfx_mono_spinctrl_spincollection time_spinners;
	uint8_t spinner_status;
	int16_t spinner_results[2];

	// Prepare the spinner widget for time selection
	gfx_mono_spinctrl_init(&hour_spinner, SPINTYPE_INTEGER,
    74d8:	c1 2c       	mov	r12, r1
    74da:	0f 2e       	mov	r0, r31
    74dc:	f7 e1       	ldi	r31, 0x17	; 23
    74de:	ef 2e       	mov	r14, r31
    74e0:	f1 2c       	mov	r15, r1
    74e2:	f0 2d       	mov	r31, r0
    74e4:	00 e0       	ldi	r16, 0x00	; 0
    74e6:	10 e0       	ldi	r17, 0x00	; 0
    74e8:	20 e0       	ldi	r18, 0x00	; 0
    74ea:	30 e0       	ldi	r19, 0x00	; 0
    74ec:	42 e9       	ldi	r20, 0x92	; 146
    74ee:	55 e0       	ldi	r21, 0x05	; 5
    74f0:	61 e0       	ldi	r22, 0x01	; 1
    74f2:	ce 01       	movw	r24, r28
    74f4:	83 96       	adiw	r24, 0x23	; 35
    74f6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <gfx_mono_spinctrl_init>
			datetime_date_spinner_string_hour, NULL, 0, 23, 0);
	gfx_mono_spinctrl_init(&minute_spinner, SPINTYPE_INTEGER,
    74fa:	0f 2e       	mov	r0, r31
    74fc:	fb e3       	ldi	r31, 0x3B	; 59
    74fe:	ef 2e       	mov	r14, r31
    7500:	f1 2c       	mov	r15, r1
    7502:	f0 2d       	mov	r31, r0
    7504:	20 e0       	ldi	r18, 0x00	; 0
    7506:	30 e0       	ldi	r19, 0x00	; 0
    7508:	4b e8       	ldi	r20, 0x8B	; 139
    750a:	55 e0       	ldi	r21, 0x05	; 5
    750c:	61 e0       	ldi	r22, 0x01	; 1
    750e:	ce 01       	movw	r24, r28
    7510:	03 96       	adiw	r24, 0x03	; 3
    7512:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <gfx_mono_spinctrl_init>
			datetime_date_spinner_string_minute, NULL, 0, 59, 0);

	// Create time spincollector
	gfx_mono_spinctrl_spincollection_init(&time_spinners);
    7516:	ce 01       	movw	r24, r28
    7518:	c5 96       	adiw	r24, 0x35	; 53
    751a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <gfx_mono_spinctrl_spincollection_init>
	gfx_mono_spinctrl_spincollection_add_spinner(&hour_spinner,
    751e:	be 01       	movw	r22, r28
    7520:	6b 5c       	subi	r22, 0xCB	; 203
    7522:	7f 4f       	sbci	r23, 0xFF	; 255
    7524:	ce 01       	movw	r24, r28
    7526:	83 96       	adiw	r24, 0x23	; 35
    7528:	0e 94 41 17 	call	0x2e82	; 0x2e82 <gfx_mono_spinctrl_spincollection_add_spinner>
			&time_spinners);
	gfx_mono_spinctrl_spincollection_add_spinner(&minute_spinner,
    752c:	be 01       	movw	r22, r28
    752e:	6b 5c       	subi	r22, 0xCB	; 203
    7530:	7f 4f       	sbci	r23, 0xFF	; 255
    7532:	ce 01       	movw	r24, r28
    7534:	03 96       	adiw	r24, 0x03	; 3
			&time_spinners);

	// Get timezone settings
	tz_hours = timezone_get_hours();
    7536:	0e 94 41 17 	call	0x2e82	; 0x2e82 <gfx_mono_spinctrl_spincollection_add_spinner>
    753a:	2f d5       	rcall	.+2654   	; 0x7f9a <timezone_get_hours>
	tz_minutes = timezone_get_minutes();
    753c:	f8 2e       	mov	r15, r24
    753e:	30 d5       	rcall	.+2656   	; 0x7fa0 <timezone_get_minutes>
    7540:	e8 2e       	mov	r14, r24

	timestamp = rtc_get_time();
    7542:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <rtc_get_time>

	calendar_timestamp_to_date_tz(timestamp, tz_hours, tz_minutes, &date);
    7546:	8e 01       	movw	r16, r28
    7548:	09 5b       	subi	r16, 0xB9	; 185
    754a:	1f 4f       	sbci	r17, 0xFF	; 255
    754c:	2e 2d       	mov	r18, r14
    754e:	4f 2d       	mov	r20, r15
    7550:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <calendar_timestamp_to_date_tz>

	// Set spinners to current time as initial position
	hour_spinner.integer_data = date.hour;
    7554:	2a 96       	adiw	r28, 0x0a	; 10
    7556:	8f ad       	ldd	r24, Y+63	; 0x3f
    7558:	2a 97       	sbiw	r28, 0x0a	; 10
    755a:	90 e0       	ldi	r25, 0x00	; 0
    755c:	8e a3       	std	Y+38, r24	; 0x26
    755e:	9f a3       	std	Y+39, r25	; 0x27
	minute_spinner.integer_data = date.minute;
    7560:	29 96       	adiw	r28, 0x09	; 9
    7562:	8f ad       	ldd	r24, Y+63	; 0x3f
    7564:	29 97       	sbiw	r28, 0x09	; 9
    7566:	90 e0       	ldi	r25, 0x00	; 0
    7568:	8e 83       	std	Y+6, r24	; 0x06

	gfx_mono_spinctrl_spincollection_show(&time_spinners);
    756a:	9f 83       	std	Y+7, r25	; 0x07
    756c:	ce 01       	movw	r24, r28
    756e:	c5 96       	adiw	r24, 0x35	; 53
    7570:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <gfx_mono_spinctrl_spincollection_show>

	do {
		do {
			keyboard_get_key_state(&input);
    7574:	8a 2d       	mov	r24, r10
    7576:	99 2d       	mov	r25, r9
    7578:	46 d0       	rcall	.+140    	; 0x7606 <keyboard_get_key_state>
			// Wait for key release
		} while (input.type != KEYBOARD_RELEASE);
    757a:	6b 96       	adiw	r28, 0x1b	; 27
    757c:	8f ad       	ldd	r24, Y+63	; 0x3f
    757e:	6b 97       	sbiw	r28, 0x1b	; 27
    7580:	82 30       	cpi	r24, 0x02	; 2
    7582:	c1 f7       	brne	.-16     	; 0x7574 <date_time_application+0x526>
		// Send key to spinnercollection
		spinner_status = gfx_mono_spinctrl_spincollection_process_key(
    7584:	ae 01       	movw	r20, r28
    7586:	4f 5a       	subi	r20, 0xAF	; 175
    7588:	5f 4f       	sbci	r21, 0xFF	; 255
    758a:	6a 96       	adiw	r28, 0x1a	; 26
    758c:	6f ad       	ldd	r22, Y+63	; 0x3f
    758e:	6a 97       	sbiw	r28, 0x1a	; 26
    7590:	ce 01       	movw	r24, r28
    7592:	c5 96       	adiw	r24, 0x35	; 53
    7594:	0e 94 4b 18 	call	0x3096	; 0x3096 <gfx_mono_spinctrl_spincollection_process_key>
				&time_spinners, input.keycode, spinner_results);
	} while (spinner_status != GFX_MONO_SPINCTRL_EVENT_FINISH);
    7598:	8d 3f       	cpi	r24, 0xFD	; 253
    759a:	61 f7       	brne	.-40     	; 0x7574 <date_time_application+0x526>

	date.hour = spinner_results[0];
    759c:	62 96       	adiw	r28, 0x12	; 18
    759e:	8f ad       	ldd	r24, Y+63	; 0x3f
    75a0:	62 97       	sbiw	r28, 0x12	; 18
    75a2:	2a 96       	adiw	r28, 0x0a	; 10
    75a4:	8f af       	std	Y+63, r24	; 0x3f
    75a6:	2a 97       	sbiw	r28, 0x0a	; 10
	date.minute = spinner_results[1];
    75a8:	64 96       	adiw	r28, 0x14	; 20
    75aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    75ac:	64 97       	sbiw	r28, 0x14	; 20
    75ae:	29 96       	adiw	r28, 0x09	; 9
    75b0:	8f af       	std	Y+63, r24	; 0x3f
    75b2:	29 97       	sbiw	r28, 0x09	; 9

	timestamp = calendar_date_to_timestamp_tz(&date, tz_hours, tz_minutes);
    75b4:	4e 2d       	mov	r20, r14
    75b6:	6f 2d       	mov	r22, r15
    75b8:	ce 01       	movw	r24, r28
    75ba:	89 5b       	subi	r24, 0xB9	; 185
    75bc:	9f 4f       	sbci	r25, 0xFF	; 255
    75be:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <calendar_date_to_timestamp_tz>

	if(timestamp != 0) {
    75c2:	61 15       	cp	r22, r1
    75c4:	71 05       	cpc	r23, r1
    75c6:	81 05       	cpc	r24, r1
    75c8:	91 05       	cpc	r25, r1
    75ca:	09 f4       	brne	.+2      	; 0x75ce <date_time_application+0x580>
		rtc_set_time(timestamp);
    75cc:	8b cd       	rjmp	.-1258   	; 0x70e4 <date_time_application+0x96>
    75ce:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <rtc_set_time>
			break;
		case 2:
			set_time_application();
			break;
		case 3:
			timezone_select_application();
    75d2:	88 cd       	rjmp	.-1264   	; 0x70e4 <date_time_application+0x96>
    75d4:	e8 d4       	rcall	.+2512   	; 0x7fa6 <timezone_select_application>
			break;
    75d6:	86 cd       	rjmp	.-1268   	; 0x70e4 <date_time_application+0x96>
		default:
			// Return to the main menu on unknown element or back key
			return;
		}
	}
}
    75d8:	ce 58       	subi	r28, 0x8E	; 142
    75da:	df 4f       	sbci	r29, 0xFF	; 255
    75dc:	cd bf       	out	0x3d, r28	; 61
    75de:	de bf       	out	0x3e, r29	; 62
    75e0:	df 91       	pop	r29
    75e2:	cf 91       	pop	r28
    75e4:	1f 91       	pop	r17
    75e6:	0f 91       	pop	r16
    75e8:	ff 90       	pop	r15
    75ea:	ef 90       	pop	r14
    75ec:	df 90       	pop	r13
    75ee:	cf 90       	pop	r12
    75f0:	bf 90       	pop	r11
    75f2:	af 90       	pop	r10
    75f4:	9f 90       	pop	r9
    75f6:	8f 90       	pop	r8
    75f8:	7f 90       	pop	r7
    75fa:	6f 90       	pop	r6
    75fc:	5f 90       	pop	r5
    75fe:	4f 90       	pop	r4
    7600:	3f 90       	pop	r3
    7602:	2f 90       	pop	r2
    7604:	08 95       	ret

00007606 <keyboard_get_key_state>:
 * \brief Check the status of the keyboard
 *
 * \param keybuffer  a keyboard_event struct to store keyboard status
 */
void keyboard_get_key_state(struct keyboard_event *keybuffer)
{
    7606:	cf 93       	push	r28
    7608:	df 93       	push	r29

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    760a:	20 91 88 06 	lds	r18, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	// Variable to hold the key mask
	static uint8_t key_state;
	char key;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    760e:	25 fd       	sbrc	r18, 5
    7610:	0d c0       	rjmp	.+26     	; 0x762c <keyboard_get_key_state+0x26>
			!(key_state & KEYBOARD_ENTER_MASK)) {
    7612:	20 91 6f 2b 	lds	r18, 0x2B6F	; 0x802b6f <key_state.5160>
{
	// Variable to hold the key mask
	static uint8_t key_state;
	char key;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    7616:	20 fd       	sbrc	r18, 0
    7618:	87 c0       	rjmp	.+270    	; 0x7728 <keyboard_get_key_state+0x122>
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
    761a:	21 60       	ori	r18, 0x01	; 1
    761c:	20 93 6f 2b 	sts	0x2B6F, r18	; 0x802b6f <key_state.5160>
		keybuffer->keycode = KEYBOARD_ENTER;
    7620:	2d e0       	ldi	r18, 0x0D	; 13
    7622:	fc 01       	movw	r30, r24
    7624:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    7626:	21 e0       	ldi	r18, 0x01	; 1
    7628:	21 83       	std	Z+1, r18	; 0x01
    762a:	8d c0       	rjmp	.+282    	; 0x7746 <keyboard_get_key_state+0x140>
    762c:	20 91 88 06 	lds	r18, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    7630:	25 ff       	sbrs	r18, 5
    7632:	0d c0       	rjmp	.+26     	; 0x764e <keyboard_get_key_state+0x48>
			&& (key_state & KEYBOARD_ENTER_MASK)) {
    7634:	20 91 6f 2b 	lds	r18, 0x2B6F	; 0x802b6f <key_state.5160>
    7638:	20 ff       	sbrs	r18, 0
    763a:	09 c0       	rjmp	.+18     	; 0x764e <keyboard_get_key_state+0x48>
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
    763c:	2e 7f       	andi	r18, 0xFE	; 254
    763e:	20 93 6f 2b 	sts	0x2B6F, r18	; 0x802b6f <key_state.5160>
		keybuffer->keycode = KEYBOARD_ENTER;
    7642:	2d e0       	ldi	r18, 0x0D	; 13
    7644:	fc 01       	movw	r30, r24
    7646:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    7648:	22 e0       	ldi	r18, 0x02	; 2
    764a:	21 83       	std	Z+1, r18	; 0x01
    764c:	7c c0       	rjmp	.+248    	; 0x7746 <keyboard_get_key_state+0x140>
    764e:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    7652:	21 fd       	sbrc	r18, 1
    7654:	0d c0       	rjmp	.+26     	; 0x7670 <keyboard_get_key_state+0x6a>
			!(key_state & KEYBOARD_UP_MASK)) {
    7656:	20 91 6f 2b 	lds	r18, 0x2B6F	; 0x802b6f <key_state.5160>
			&& (key_state & KEYBOARD_ENTER_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    765a:	21 fd       	sbrc	r18, 1
    765c:	6a c0       	rjmp	.+212    	; 0x7732 <keyboard_get_key_state+0x12c>
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
    765e:	22 60       	ori	r18, 0x02	; 2
    7660:	20 93 6f 2b 	sts	0x2B6F, r18	; 0x802b6f <key_state.5160>
		keybuffer->keycode = KEYBOARD_UP;
    7664:	26 e2       	ldi	r18, 0x26	; 38
    7666:	fc 01       	movw	r30, r24
    7668:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    766a:	21 e0       	ldi	r18, 0x01	; 1
    766c:	21 83       	std	Z+1, r18	; 0x01
    766e:	6b c0       	rjmp	.+214    	; 0x7746 <keyboard_get_key_state+0x140>
    7670:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    7674:	21 ff       	sbrs	r18, 1
    7676:	0d c0       	rjmp	.+26     	; 0x7692 <keyboard_get_key_state+0x8c>
			&& (key_state & KEYBOARD_UP_MASK)) {
    7678:	20 91 6f 2b 	lds	r18, 0x2B6F	; 0x802b6f <key_state.5160>
    767c:	21 ff       	sbrs	r18, 1
    767e:	09 c0       	rjmp	.+18     	; 0x7692 <keyboard_get_key_state+0x8c>
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
    7680:	2d 7f       	andi	r18, 0xFD	; 253
    7682:	20 93 6f 2b 	sts	0x2B6F, r18	; 0x802b6f <key_state.5160>
		keybuffer->keycode = KEYBOARD_UP;
    7686:	26 e2       	ldi	r18, 0x26	; 38
    7688:	fc 01       	movw	r30, r24
    768a:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    768c:	22 e0       	ldi	r18, 0x02	; 2
    768e:	21 83       	std	Z+1, r18	; 0x01
    7690:	5a c0       	rjmp	.+180    	; 0x7746 <keyboard_get_key_state+0x140>
    7692:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    7696:	22 fd       	sbrc	r18, 2
    7698:	0d c0       	rjmp	.+26     	; 0x76b4 <keyboard_get_key_state+0xae>
			!(key_state & KEYBOARD_DOWN_MASK)) {
    769a:	20 91 6f 2b 	lds	r18, 0x2B6F	; 0x802b6f <key_state.5160>
			&& (key_state & KEYBOARD_UP_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    769e:	22 fd       	sbrc	r18, 2
    76a0:	4d c0       	rjmp	.+154    	; 0x773c <keyboard_get_key_state+0x136>
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
    76a2:	24 60       	ori	r18, 0x04	; 4
    76a4:	20 93 6f 2b 	sts	0x2B6F, r18	; 0x802b6f <key_state.5160>
		keybuffer->keycode = KEYBOARD_DOWN;
    76a8:	28 e2       	ldi	r18, 0x28	; 40
    76aa:	fc 01       	movw	r30, r24
    76ac:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    76ae:	21 e0       	ldi	r18, 0x01	; 1
    76b0:	21 83       	std	Z+1, r18	; 0x01
    76b2:	49 c0       	rjmp	.+146    	; 0x7746 <keyboard_get_key_state+0x140>
    76b4:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    76b8:	22 ff       	sbrs	r18, 2
    76ba:	0d c0       	rjmp	.+26     	; 0x76d6 <keyboard_get_key_state+0xd0>
			&& (key_state & KEYBOARD_DOWN_MASK)) {
    76bc:	20 91 6f 2b 	lds	r18, 0x2B6F	; 0x802b6f <key_state.5160>
    76c0:	22 ff       	sbrs	r18, 2
    76c2:	09 c0       	rjmp	.+18     	; 0x76d6 <keyboard_get_key_state+0xd0>
		// Key released
		key_state &= ~KEYBOARD_DOWN_MASK;
    76c4:	2b 7f       	andi	r18, 0xFB	; 251
    76c6:	20 93 6f 2b 	sts	0x2B6F, r18	; 0x802b6f <key_state.5160>
		keybuffer->keycode = KEYBOARD_DOWN;
    76ca:	28 e2       	ldi	r18, 0x28	; 40
    76cc:	fc 01       	movw	r30, r24
    76ce:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    76d0:	22 e0       	ldi	r18, 0x02	; 2
    76d2:	21 83       	std	Z+1, r18	; 0x01
    76d4:	38 c0       	rjmp	.+112    	; 0x7746 <keyboard_get_key_state+0x140>
    76d6:	ec 01       	movw	r28, r24

	// touch key
	} else if ((check_touch_key_pressed()) &&
    76d8:	3f d4       	rcall	.+2174   	; 0x7f58 <check_touch_key_pressed>
    76da:	88 23       	and	r24, r24
    76dc:	61 f0       	breq	.+24     	; 0x76f6 <keyboard_get_key_state+0xf0>
			!(key_state & KEYBOARD_BACK_MASK)) {
    76de:	80 91 6f 2b 	lds	r24, 0x2B6F	; 0x802b6f <key_state.5160>
		key_state &= ~KEYBOARD_DOWN_MASK;
		keybuffer->keycode = KEYBOARD_DOWN;
		keybuffer->type = KEYBOARD_RELEASE;

	// touch key
	} else if ((check_touch_key_pressed()) &&
    76e2:	83 fd       	sbrc	r24, 3
    76e4:	08 c0       	rjmp	.+16     	; 0x76f6 <keyboard_get_key_state+0xf0>
			!(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key pressed
		key_state |= KEYBOARD_BACK_MASK;
    76e6:	88 60       	ori	r24, 0x08	; 8
    76e8:	80 93 6f 2b 	sts	0x2B6F, r24	; 0x802b6f <key_state.5160>
		keybuffer->keycode = KEYBOARD_BACK;
    76ec:	88 e0       	ldi	r24, 0x08	; 8
    76ee:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    76f0:	81 e0       	ldi	r24, 0x01	; 1
    76f2:	89 83       	std	Y+1, r24	; 0x01
	} else if ((!check_touch_key_pressed()) &&
    76f4:	28 c0       	rjmp	.+80     	; 0x7746 <keyboard_get_key_state+0x140>
    76f6:	30 d4       	rcall	.+2144   	; 0x7f58 <check_touch_key_pressed>
    76f8:	81 11       	cpse	r24, r1
    76fa:	0c c0       	rjmp	.+24     	; 0x7714 <keyboard_get_key_state+0x10e>
			(key_state & KEYBOARD_BACK_MASK)) {
    76fc:	80 91 6f 2b 	lds	r24, 0x2B6F	; 0x802b6f <key_state.5160>
			!(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key pressed
		key_state |= KEYBOARD_BACK_MASK;
		keybuffer->keycode = KEYBOARD_BACK;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((!check_touch_key_pressed()) &&
    7700:	83 ff       	sbrs	r24, 3
    7702:	08 c0       	rjmp	.+16     	; 0x7714 <keyboard_get_key_state+0x10e>
			(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key released
		key_state &= ~KEYBOARD_BACK_MASK;
    7704:	87 7f       	andi	r24, 0xF7	; 247
    7706:	80 93 6f 2b 	sts	0x2B6F, r24	; 0x802b6f <key_state.5160>
		keybuffer->keycode = KEYBOARD_BACK;
    770a:	88 e0       	ldi	r24, 0x08	; 8
    770c:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    770e:	82 e0       	ldi	r24, 0x02	; 2
    7710:	89 83       	std	Y+1, r24	; 0x01
	} else if ((key = cdc_getkey()) != KEYBOARD_NO_KEY) {
    7712:	19 c0       	rjmp	.+50     	; 0x7746 <keyboard_get_key_state+0x140>
    7714:	5a dc       	rcall	.-1868   	; 0x6fca <cdc_getkey>
    7716:	88 23       	and	r24, r24
    7718:	21 f0       	breq	.+8      	; 0x7722 <keyboard_get_key_state+0x11c>
		keybuffer->keycode = key;
    771a:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    771c:	82 e0       	ldi	r24, 0x02	; 2
    771e:	89 83       	std	Y+1, r24	; 0x01
    7720:	12 c0       	rjmp	.+36     	; 0x7746 <keyboard_get_key_state+0x140>
	} else {
		keybuffer->keycode = KEYBOARD_NO_KEY;
    7722:	18 82       	st	Y, r1
		keybuffer->type = KEYBOARD_NO_EVENT;
    7724:	19 82       	std	Y+1, r1	; 0x01
	}
}
    7726:	0f c0       	rjmp	.+30     	; 0x7746 <keyboard_get_key_state+0x140>
    7728:	30 91 88 06 	lds	r19, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    772c:	35 fd       	sbrc	r19, 5
    772e:	86 cf       	rjmp	.-244    	; 0x763c <keyboard_get_key_state+0x36>
    7730:	8e cf       	rjmp	.-228    	; 0x764e <keyboard_get_key_state+0x48>
    7732:	30 91 a8 06 	lds	r19, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    7736:	31 ff       	sbrs	r19, 1
    7738:	ac cf       	rjmp	.-168    	; 0x7692 <keyboard_get_key_state+0x8c>
    773a:	a2 cf       	rjmp	.-188    	; 0x7680 <keyboard_get_key_state+0x7a>
    773c:	30 91 a8 06 	lds	r19, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
		keybuffer->keycode = KEYBOARD_DOWN;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    7740:	32 fd       	sbrc	r19, 2
    7742:	c0 cf       	rjmp	.-128    	; 0x76c4 <keyboard_get_key_state+0xbe>
    7744:	c8 cf       	rjmp	.-112    	; 0x76d6 <keyboard_get_key_state+0xd0>
		keybuffer->type = KEYBOARD_RELEASE;
	} else {
		keybuffer->keycode = KEYBOARD_NO_KEY;
		keybuffer->type = KEYBOARD_NO_EVENT;
	}
}
    7746:	df 91       	pop	r29
    7748:	cf 91       	pop	r28
    774a:	08 95       	ret

0000774c <lightsensor_application>:
 * a raw value and by drawing a bar that represent the amount of light hitting
 * the sensor.
 * The raw value is sampled 200 times and the average value is used.
 */
void lightsensor_application(void)
{
    774c:	4f 92       	push	r4
    774e:	5f 92       	push	r5
    7750:	6f 92       	push	r6
    7752:	7f 92       	push	r7
    7754:	9f 92       	push	r9
    7756:	af 92       	push	r10
    7758:	bf 92       	push	r11
    775a:	cf 92       	push	r12
    775c:	df 92       	push	r13
    775e:	ef 92       	push	r14
    7760:	ff 92       	push	r15
    7762:	0f 93       	push	r16
    7764:	1f 93       	push	r17
    7766:	cf 93       	push	r28
    7768:	df 93       	push	r29
    776a:	cd b7       	in	r28, 0x3d	; 61
    776c:	de b7       	in	r29, 0x3e	; 62
    776e:	2d 97       	sbiw	r28, 0x0d	; 13
    7770:	cd bf       	out	0x3d, r28	; 61
    7772:	de bf       	out	0x3e, r29	; 62
	uint32_t lightsensor_val = 0;
	uint8_t scaled;
	uint8_t iterations = 0;

	// Clear screen
	gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    7774:	00 e0       	ldi	r16, 0x00	; 0
    7776:	20 e2       	ldi	r18, 0x20	; 32
    7778:	40 e8       	ldi	r20, 0x80	; 128
    777a:	60 e0       	ldi	r22, 0x00	; 0
    777c:	80 e0       	ldi	r24, 0x00	; 0
    777e:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>

	// Put icons at the bottom of the screen indicating light intensity
	gfx_mono_put_bitmap(&bitmap_moon, 1, 24);    // ~1 lux
    7782:	48 e1       	ldi	r20, 0x18	; 24
    7784:	61 e0       	ldi	r22, 0x01	; 1
    7786:	83 ed       	ldi	r24, 0xD3	; 211
    7788:	90 e2       	ldi	r25, 0x20	; 32
    778a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <gfx_mono_generic_put_bitmap>
	gfx_mono_put_bitmap(&bitmap_cloud, 30, 24);  // ~200 lux
    778e:	48 e1       	ldi	r20, 0x18	; 24
    7790:	6e e1       	ldi	r22, 0x1E	; 30
    7792:	8d ed       	ldi	r24, 0xDD	; 221
    7794:	90 e2       	ldi	r25, 0x20	; 32
    7796:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <gfx_mono_generic_put_bitmap>
	gfx_mono_put_bitmap(&bitmap_indoor, 60, 24); // ~400 lux
    779a:	48 e1       	ldi	r20, 0x18	; 24
    779c:	6c e3       	ldi	r22, 0x3C	; 60
    779e:	88 ed       	ldi	r24, 0xD8	; 216
    77a0:	90 e2       	ldi	r25, 0x20	; 32
    77a2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <gfx_mono_generic_put_bitmap>
	gfx_mono_put_bitmap(&bitmap_sun, 118, 24);   // ~850 lux
    77a6:	48 e1       	ldi	r20, 0x18	; 24
    77a8:	66 e7       	ldi	r22, 0x76	; 118
    77aa:	8e ec       	ldi	r24, 0xCE	; 206
    77ac:	90 e2       	ldi	r25, 0x20	; 32
    77ae:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <gfx_mono_generic_put_bitmap>

	// Draw static strings outside the loop
	gfx_mono_draw_string("Lightsensor", 0, 0, &sysfont);
    77b2:	20 e1       	ldi	r18, 0x10	; 16
    77b4:	30 e2       	ldi	r19, 0x20	; 32
    77b6:	40 e0       	ldi	r20, 0x00	; 0
    77b8:	60 e0       	ldi	r22, 0x00	; 0
    77ba:	86 ef       	ldi	r24, 0xF6	; 246
    77bc:	91 e2       	ldi	r25, 0x21	; 33
    77be:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>
	gfx_mono_draw_string("Raw value:", 0, 8, &sysfont);
    77c2:	20 e1       	ldi	r18, 0x10	; 16
    77c4:	30 e2       	ldi	r19, 0x20	; 32
    77c6:	48 e0       	ldi	r20, 0x08	; 8
    77c8:	60 e0       	ldi	r22, 0x00	; 0
    77ca:	82 e0       	ldi	r24, 0x02	; 2
    77cc:	92 e2       	ldi	r25, 0x22	; 34
    77ce:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>
 */
void lightsensor_application(void)
{
	struct keyboard_event input_key;
	char string_buf[10];
	uint32_t lightsensor_val = 0;
    77d2:	41 2c       	mov	r4, r1
    77d4:	51 2c       	mov	r5, r1
    77d6:	32 01       	movw	r6, r4
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    77d8:	e1 2c       	mov	r14, r1
    77da:	68 94       	set
    77dc:	ff 24       	eor	r15, r15
    77de:	f1 f8       	bld	r15, 1

		// Let's average some samples to be outputted
		if (iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
			iterations = 0;
			lightsensor_val /= LIGHTSENSOR_NUM_SAMPLES;
			snprintf(string_buf, sizeof(string_buf), "%4ld", lightsensor_val);
    77e0:	0f 2e       	mov	r0, r31
    77e2:	fd e0       	ldi	r31, 0x0D	; 13
    77e4:	af 2e       	mov	r10, r31
    77e6:	f2 e2       	ldi	r31, 0x22	; 34
    77e8:	bf 2e       	mov	r11, r31
    77ea:	f0 2d       	mov	r31, r0
    77ec:	0f 2e       	mov	r0, r31
    77ee:	fa e0       	ldi	r31, 0x0A	; 10
    77f0:	9f 2e       	mov	r9, r31
    77f2:	f0 2d       	mov	r31, r0
    77f4:	6e 01       	movw	r12, r28
    77f6:	83 e0       	ldi	r24, 0x03	; 3
    77f8:	c8 0e       	add	r12, r24
    77fa:	d1 1c       	adc	r13, r1
			// Scale down to LCD width for drawing bar
			scaled = lightsensor_val >> 4;

			// Graphic bar representing the light level
			gfx_mono_draw_filled_rect(0, 17,scaled, 7, GFX_PIXEL_SET);
			gfx_mono_draw_filled_rect(scaled, 17,128 - scaled, 7,
    77fc:	10 e8       	ldi	r17, 0x80	; 128

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    77fe:	8f b7       	in	r24, 0x3f	; 63
    7800:	8d 87       	std	Y+13, r24	; 0x0d
	cpu_irq_disable();
    7802:	f8 94       	cli
	return flags;
    7804:	9d 85       	ldd	r25, Y+13	; 0x0d
    7806:	f7 01       	movw	r30, r14
    7808:	80 81       	ld	r24, Z
    780a:	84 60       	ori	r24, 0x04	; 4
    780c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    780e:	9f bf       	out	0x3f, r25	; 63

	while (true) {
		// Start an ADC conversion of the lightsensor
		lightsensor_measure();

		while (!lightsensor_data_is_ready()) {
    7810:	0e 94 f7 09 	call	0x13ee	; 0x13ee <lightsensor_data_is_ready>
    7814:	88 23       	and	r24, r24
    7816:	e1 f3       	breq	.-8      	; 0x7810 <lightsensor_application+0xc4>
			// Wait until the conversion is complete
		}

		lightsensor_val += lightsensor_get_raw_value();
    7818:	0e 94 91 0a 	call	0x1522	; 0x1522 <lightsensor_get_raw_value>
    781c:	09 2e       	mov	r0, r25
    781e:	00 0c       	add	r0, r0
    7820:	aa 0b       	sbc	r26, r26
    7822:	bb 0b       	sbc	r27, r27
    7824:	48 0e       	add	r4, r24
    7826:	59 1e       	adc	r5, r25
    7828:	6a 1e       	adc	r6, r26
    782a:	7b 1e       	adc	r7, r27

		// Let's average some samples to be outputted
		if (iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
    782c:	08 3c       	cpi	r16, 0xC8	; 200
    782e:	10 f4       	brcc	.+4      	; 0x7834 <lightsensor_application+0xe8>
    7830:	0f 5f       	subi	r16, 0xFF	; 255
    7832:	37 c0       	rjmp	.+110    	; 0x78a2 <lightsensor_application+0x156>
			iterations = 0;
			lightsensor_val /= LIGHTSENSOR_NUM_SAMPLES;
    7834:	c3 01       	movw	r24, r6
    7836:	b2 01       	movw	r22, r4
    7838:	28 ec       	ldi	r18, 0xC8	; 200
    783a:	30 e0       	ldi	r19, 0x00	; 0
    783c:	40 e0       	ldi	r20, 0x00	; 0
    783e:	50 e0       	ldi	r21, 0x00	; 0
    7840:	d4 d5       	rcall	.+2984   	; 0x83ea <__udivmodsi4>
    7842:	29 01       	movw	r4, r18
    7844:	3a 01       	movw	r6, r20
			snprintf(string_buf, sizeof(string_buf), "%4ld", lightsensor_val);
    7846:	7f 92       	push	r7
    7848:	6f 92       	push	r6
    784a:	5f 92       	push	r5
    784c:	2f 93       	push	r18
    784e:	bf 92       	push	r11
    7850:	af 92       	push	r10
    7852:	1f 92       	push	r1
    7854:	9f 92       	push	r9
    7856:	df 92       	push	r13
    7858:	cf 92       	push	r12
    785a:	4a d6       	rcall	.+3220   	; 0x84f0 <snprintf>
			gfx_mono_draw_string(string_buf, 70, 8, &sysfont);
    785c:	20 e1       	ldi	r18, 0x10	; 16
    785e:	30 e2       	ldi	r19, 0x20	; 32
    7860:	48 e0       	ldi	r20, 0x08	; 8
    7862:	66 e4       	ldi	r22, 0x46	; 70
    7864:	c6 01       	movw	r24, r12
    7866:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>
			// Scale down to LCD width for drawing bar
			scaled = lightsensor_val >> 4;
    786a:	68 94       	set
    786c:	13 f8       	bld	r1, 3
    786e:	76 94       	lsr	r7
    7870:	67 94       	ror	r6
    7872:	57 94       	ror	r5
    7874:	47 94       	ror	r4
    7876:	16 94       	lsr	r1
    7878:	d1 f7       	brne	.-12     	; 0x786e <lightsensor_application+0x122>

			// Graphic bar representing the light level
			gfx_mono_draw_filled_rect(0, 17,scaled, 7, GFX_PIXEL_SET);
    787a:	01 e0       	ldi	r16, 0x01	; 1
    787c:	27 e0       	ldi	r18, 0x07	; 7
    787e:	44 2d       	mov	r20, r4
    7880:	61 e1       	ldi	r22, 0x11	; 17
    7882:	80 e0       	ldi	r24, 0x00	; 0
    7884:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>
			gfx_mono_draw_filled_rect(scaled, 17,128 - scaled, 7,
    7888:	41 2f       	mov	r20, r17
    788a:	44 19       	sub	r20, r4
    788c:	00 e0       	ldi	r16, 0x00	; 0
    788e:	27 e0       	ldi	r18, 0x07	; 7
    7890:	61 e1       	ldi	r22, 0x11	; 17
    7892:	84 2d       	mov	r24, r4
    7894:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>
    7898:	cd bf       	out	0x3d, r28	; 61
    789a:	de bf       	out	0x3e, r29	; 62
					GFX_PIXEL_CLR);

			lightsensor_val = 0;
    789c:	41 2c       	mov	r4, r1
    789e:	51 2c       	mov	r5, r1
    78a0:	32 01       	movw	r6, r4
		}

		// exit if the "back" button has been pressed and released
		keyboard_get_key_state(&input_key);
    78a2:	ce 01       	movw	r24, r28
    78a4:	01 96       	adiw	r24, 0x01	; 1
    78a6:	af de       	rcall	.-674    	; 0x7606 <keyboard_get_key_state>
		if ((input_key.keycode == KEYBOARD_BACK) &&
    78a8:	89 81       	ldd	r24, Y+1	; 0x01
    78aa:	88 30       	cpi	r24, 0x08	; 8
    78ac:	09 f0       	breq	.+2      	; 0x78b0 <lightsensor_application+0x164>
    78ae:	a7 cf       	rjmp	.-178    	; 0x77fe <lightsensor_application+0xb2>
    78b0:	8a 81       	ldd	r24, Y+2	; 0x02
    78b2:	82 30       	cpi	r24, 0x02	; 2
    78b4:	09 f0       	breq	.+2      	; 0x78b8 <lightsensor_application+0x16c>
    78b6:	a3 cf       	rjmp	.-186    	; 0x77fe <lightsensor_application+0xb2>
				(input_key.type == KEYBOARD_RELEASE)) {
			break;
		}
	}
}
    78b8:	2d 96       	adiw	r28, 0x0d	; 13
    78ba:	cd bf       	out	0x3d, r28	; 61
    78bc:	de bf       	out	0x3e, r29	; 62
    78be:	df 91       	pop	r29
    78c0:	cf 91       	pop	r28
    78c2:	1f 91       	pop	r17
    78c4:	0f 91       	pop	r16
    78c6:	ff 90       	pop	r15
    78c8:	ef 90       	pop	r14
    78ca:	df 90       	pop	r13
    78cc:	cf 90       	pop	r12
    78ce:	bf 90       	pop	r11
    78d0:	af 90       	pop	r10
    78d2:	9f 90       	pop	r9
    78d4:	7f 90       	pop	r7
    78d6:	6f 90       	pop	r6
    78d8:	5f 90       	pop	r5
    78da:	4f 90       	pop	r4
    78dc:	08 95       	ret

000078de <button_splash>:

/**
 * \brief Show button names on display
 */
void button_splash(void)
{
    78de:	0f 93       	push	r16
    78e0:	cf 93       	push	r28
    78e2:	df 93       	push	r29
    78e4:	1f 92       	push	r1
    78e6:	1f 92       	push	r1
    78e8:	cd b7       	in	r28, 0x3d	; 61
    78ea:	de b7       	in	r29, 0x3e	; 62
	struct keyboard_event input;

	// Clear screen
	gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    78ec:	00 e0       	ldi	r16, 0x00	; 0
    78ee:	20 e2       	ldi	r18, 0x20	; 32
    78f0:	40 e8       	ldi	r20, 0x80	; 128
    78f2:	60 e0       	ldi	r22, 0x00	; 0
    78f4:	80 e0       	ldi	r24, 0x00	; 0
    78f6:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>

	gfx_mono_draw_filled_circle(10, 10, 4, GFX_PIXEL_SET, GFX_WHOLE);
    78fa:	0f ef       	ldi	r16, 0xFF	; 255
    78fc:	21 e0       	ldi	r18, 0x01	; 1
    78fe:	44 e0       	ldi	r20, 0x04	; 4
    7900:	6a e0       	ldi	r22, 0x0A	; 10
    7902:	8a e0       	ldi	r24, 0x0A	; 10
    7904:	0e 94 52 14 	call	0x28a4	; 0x28a4 <gfx_mono_generic_draw_filled_circle>
	gfx_mono_draw_filled_circle(10, 22, 4, GFX_PIXEL_SET, GFX_WHOLE);
    7908:	21 e0       	ldi	r18, 0x01	; 1
    790a:	44 e0       	ldi	r20, 0x04	; 4
    790c:	66 e1       	ldi	r22, 0x16	; 22
    790e:	8a e0       	ldi	r24, 0x0A	; 10
    7910:	0e 94 52 14 	call	0x28a4	; 0x28a4 <gfx_mono_generic_draw_filled_circle>
	gfx_mono_draw_filled_circle(117, 10, 4, GFX_PIXEL_SET, GFX_WHOLE);
    7914:	21 e0       	ldi	r18, 0x01	; 1
    7916:	44 e0       	ldi	r20, 0x04	; 4
    7918:	6a e0       	ldi	r22, 0x0A	; 10
    791a:	85 e7       	ldi	r24, 0x75	; 117
    791c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <gfx_mono_generic_draw_filled_circle>
	gfx_mono_draw_filled_circle(117, 22, 4, GFX_PIXEL_SET, GFX_WHOLE);
    7920:	21 e0       	ldi	r18, 0x01	; 1
    7922:	44 e0       	ldi	r20, 0x04	; 4
    7924:	66 e1       	ldi	r22, 0x16	; 22
    7926:	85 e7       	ldi	r24, 0x75	; 117
    7928:	0e 94 52 14 	call	0x28a4	; 0x28a4 <gfx_mono_generic_draw_filled_circle>

	gfx_mono_draw_string("Up", 90, 8, &sysfont);
    792c:	20 e1       	ldi	r18, 0x10	; 16
    792e:	30 e2       	ldi	r19, 0x20	; 32
    7930:	48 e0       	ldi	r20, 0x08	; 8
    7932:	6a e5       	ldi	r22, 0x5A	; 90
    7934:	82 e1       	ldi	r24, 0x12	; 18
    7936:	92 e2       	ldi	r25, 0x22	; 34
    7938:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>
	gfx_mono_draw_string("Down", 80, 20, &sysfont);
    793c:	20 e1       	ldi	r18, 0x10	; 16
    793e:	30 e2       	ldi	r19, 0x20	; 32
    7940:	44 e1       	ldi	r20, 0x14	; 20
    7942:	60 e5       	ldi	r22, 0x50	; 80
    7944:	85 e1       	ldi	r24, 0x15	; 21
    7946:	92 e2       	ldi	r25, 0x22	; 34
    7948:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>
	gfx_mono_draw_string("Enter", 20, 8, &sysfont);
    794c:	20 e1       	ldi	r18, 0x10	; 16
    794e:	30 e2       	ldi	r19, 0x20	; 32
    7950:	48 e0       	ldi	r20, 0x08	; 8
    7952:	64 e1       	ldi	r22, 0x14	; 20
    7954:	8a e1       	ldi	r24, 0x1A	; 26
    7956:	92 e2       	ldi	r25, 0x22	; 34
    7958:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>
	gfx_mono_draw_string("Back", 20, 20, &sysfont);
    795c:	20 e1       	ldi	r18, 0x10	; 16
    795e:	30 e2       	ldi	r19, 0x20	; 32
    7960:	44 e1       	ldi	r20, 0x14	; 20
    7962:	64 e1       	ldi	r22, 0x14	; 20
    7964:	80 e2       	ldi	r24, 0x20	; 32
    7966:	92 e2       	ldi	r25, 0x22	; 34
    7968:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>

	// Any key will exit the loop
	while (true) {
		keyboard_get_key_state(&input);
    796c:	ce 01       	movw	r24, r28
    796e:	01 96       	adiw	r24, 0x01	; 1
    7970:	4a de       	rcall	.-876    	; 0x7606 <keyboard_get_key_state>
		if (input.type == KEYBOARD_RELEASE) {
    7972:	8a 81       	ldd	r24, Y+2	; 0x02
    7974:	82 30       	cpi	r24, 0x02	; 2
    7976:	d1 f7       	brne	.-12     	; 0x796c <button_splash+0x8e>
			break;
		}
	}
}
    7978:	0f 90       	pop	r0
    797a:	0f 90       	pop	r0
    797c:	df 91       	pop	r29
    797e:	cf 91       	pop	r28
    7980:	0f 91       	pop	r16
    7982:	08 95       	ret

00007984 <main>:
 * set timezone from EEPROM if it is set. If it is not set it will open the
 * timezone selector to select the local timezone. It then runs the menu system
 * in an infinite while loop.
 */
int main(void)
{
    7984:	cf 93       	push	r28
    7986:	df 93       	push	r29
    7988:	1f 92       	push	r1
    798a:	1f 92       	push	r1
    798c:	cd b7       	in	r28, 0x3d	; 61
    798e:	de b7       	in	r29, 0x3e	; 62
	uint8_t menu_status;
	struct keyboard_event input;
	uint32_t rtc_timestamp;

	sysclk_init();
    7990:	0e 94 19 10 	call	0x2032	; 0x2032 <sysclk_init>
	board_init();
    7994:	0e 94 9f 21 	call	0x433e	; 0x433e <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    7998:	87 e0       	ldi	r24, 0x07	; 7
    799a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init();
	gfx_mono_init();
    799e:	0e 94 8f 12 	call	0x251e	; 0x251e <gfx_mono_st7565r_init>
	touch_init();
    79a2:	81 d2       	rcall	.+1282   	; 0x7ea6 <touch_init>
	adc_sensors_init();
    79a4:	0e 94 0d 0a 	call	0x141a	; 0x141a <adc_sensors_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    79a8:	80 e1       	ldi	r24, 0x10	; 16
    79aa:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	// Enable display backlight
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);

	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    79ae:	64 e0       	ldi	r22, 0x04	; 4
    79b0:	80 e0       	ldi	r24, 0x00	; 0
    79b2:	0e 94 94 10 	call	0x2128	; 0x2128 <sysclk_enable_module>
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    79b6:	e0 e2       	ldi	r30, 0x20	; 32
    79b8:	f4 e0       	ldi	r31, 0x04	; 4
    79ba:	81 81       	ldd	r24, Z+1	; 0x01
    79bc:	80 fd       	sbrc	r24, 0
    79be:	fd cf       	rjmp	.-6      	; 0x79ba <main+0x36>
		// Wait for RTC32 sysclk to become stable
	}

	// If we have battery power and RTC is running, don't initialize RTC32
	if (rtc_vbat_system_check(false) != VBAT_STATUS_OK) {
    79c0:	80 e0       	ldi	r24, 0x00	; 0
    79c2:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <rtc_vbat_system_check>
    79c6:	88 23       	and	r24, r24
    79c8:	49 f0       	breq	.+18     	; 0x79dc <main+0x58>
		rtc_init();
    79ca:	0e 94 10 26 	call	0x4c20	; 0x4c20 <rtc_init>

		// Set current time to after production date
		rtc_timestamp = production_date_get_timestamp() + 1;
    79ce:	20 d1       	rcall	.+576    	; 0x7c10 <production_date_get_timestamp>
		rtc_set_time(rtc_timestamp);
    79d0:	6f 5f       	subi	r22, 0xFF	; 255
    79d2:	7f 4f       	sbci	r23, 0xFF	; 255
    79d4:	8f 4f       	sbci	r24, 0xFF	; 255
    79d6:	9f 4f       	sbci	r25, 0xFF	; 255
    79d8:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <rtc_set_time>
	}

	// Get current time
	rtc_timestamp = rtc_get_time();
    79dc:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <rtc_get_time>
	// Make sure RTC has not been set to a too early date .
	if (rtc_timestamp < FIRST_POSSIBLE_TIMESTAMP) {
    79e0:	60 38       	cpi	r22, 0x80	; 128
    79e2:	7e 46       	sbci	r23, 0x6E	; 110
    79e4:	8e 41       	sbci	r24, 0x1E	; 30
    79e6:	9d 44       	sbci	r25, 0x4D	; 77
    79e8:	30 f4       	brcc	.+12     	; 0x79f6 <main+0x72>
		// Set time to 01.01.2011 00:00:00
		rtc_set_time(FIRST_POSSIBLE_TIMESTAMP);
    79ea:	60 e8       	ldi	r22, 0x80	; 128
    79ec:	7e e6       	ldi	r23, 0x6E	; 110
    79ee:	8e e1       	ldi	r24, 0x1E	; 30
    79f0:	9d e4       	ldi	r25, 0x4D	; 77
    79f2:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <rtc_set_time>
	}

	// Initialize USB CDC class
	cdc_start();

	cpu_irq_enable();
    79f6:	9c da       	rcall	.-2760   	; 0x6f30 <cdc_start>

	// Display a splash screen showing button functions
	button_splash();
    79f8:	78 94       	sei
    79fa:	71 df       	rcall	.-286    	; 0x78de <button_splash>

	// Set timezone from EEPROM or to a default value
	timezone_init();
    79fc:	27 d3       	rcall	.+1614   	; 0x804c <timezone_init>
    79fe:	0f 2e       	mov	r0, r31

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    7a00:	f0 e8       	ldi	r31, 0x80	; 128
    7a02:	ef 2e       	mov	r14, r31
    7a04:	f6 e0       	ldi	r31, 0x06	; 6
    7a06:	ff 2e       	mov	r15, r31
    7a08:	f0 2d       	mov	r31, r0
    7a0a:	10 e1       	ldi	r17, 0x10	; 16
    7a0c:	8f ef       	ldi	r24, 0xFF	; 255
	 * or another menu.
	 */
	while (true) {

		// (re)initialize menu system
		gfx_mono_menu_init(&main_menu);
    7a0e:	90 e2       	ldi	r25, 0x20	; 32
    7a10:	0e 94 d5 15 	call	0x2baa	; 0x2baa <gfx_mono_menu_init>

		do {
			do {
				keyboard_get_key_state(&input);
    7a14:	ce 01       	movw	r24, r28
    7a16:	01 96       	adiw	r24, 0x01	; 1
    7a18:	f6 dd       	rcall	.-1044   	; 0x7606 <keyboard_get_key_state>
    7a1a:	8a 81       	ldd	r24, Y+2	; 0x02
			// Wait for key release
			} while (input.type != KEYBOARD_RELEASE);
    7a1c:	82 30       	cpi	r24, 0x02	; 2
    7a1e:	d1 f7       	brne	.-12     	; 0x7a14 <main+0x90>
    7a20:	69 81       	ldd	r22, Y+1	; 0x01

			// Send key to menu system
			menu_status = gfx_mono_menu_process_key(&main_menu, input.keycode);
    7a22:	8f ef       	ldi	r24, 0xFF	; 255
    7a24:	90 e2       	ldi	r25, 0x20	; 32
    7a26:	0e 94 ed 15 	call	0x2bda	; 0x2bda <gfx_mono_menu_process_key>
    7a2a:	8f 3f       	cpi	r24, 0xFF	; 255
		// Wait for something useful to happen in the menu system
		} while (menu_status == GFX_MONO_MENU_EVENT_IDLE);
    7a2c:	99 f3       	breq	.-26     	; 0x7a14 <main+0x90>
    7a2e:	82 30       	cpi	r24, 0x02	; 2

		switch (menu_status) {
    7a30:	79 f0       	breq	.+30     	; 0x7a50 <main+0xcc>
    7a32:	28 f4       	brcc	.+10     	; 0x7a3e <main+0xba>
    7a34:	88 23       	and	r24, r24
    7a36:	41 f0       	breq	.+16     	; 0x7a48 <main+0xc4>
    7a38:	81 30       	cpi	r24, 0x01	; 1
    7a3a:	41 f0       	breq	.+16     	; 0x7a4c <main+0xc8>
    7a3c:	10 c0       	rjmp	.+32     	; 0x7a5e <main+0xda>
    7a3e:	83 30       	cpi	r24, 0x03	; 3
    7a40:	49 f0       	breq	.+18     	; 0x7a54 <main+0xd0>
    7a42:	84 30       	cpi	r24, 0x04	; 4
    7a44:	49 f0       	breq	.+18     	; 0x7a58 <main+0xd4>
		case 0:
			ntc_sensor_application();
    7a46:	0b c0       	rjmp	.+22     	; 0x7a5e <main+0xda>
			break;
    7a48:	0c d0       	rcall	.+24     	; 0x7a62 <ntc_sensor_application>
		case 1:
			lightsensor_application();
    7a4a:	e0 cf       	rjmp	.-64     	; 0x7a0c <main+0x88>
    7a4c:	7f de       	rcall	.-770    	; 0x774c <lightsensor_application>
			break;
		case 2:
			production_date_application();
    7a4e:	de cf       	rjmp	.-68     	; 0x7a0c <main+0x88>
    7a50:	27 d1       	rcall	.+590    	; 0x7ca0 <production_date_application>
			break;
    7a52:	dc cf       	rjmp	.-72     	; 0x7a0c <main+0x88>
		case 3:
			date_time_application();
    7a54:	fc da       	rcall	.-2568   	; 0x704e <date_time_application>
    7a56:	da cf       	rjmp	.-76     	; 0x7a0c <main+0x88>
			break;
    7a58:	f7 01       	movw	r30, r14
    7a5a:	17 83       	std	Z+7, r17	; 0x07
    7a5c:	d7 cf       	rjmp	.-82     	; 0x7a0c <main+0x88>
    7a5e:	3f df       	rcall	.-386    	; 0x78de <button_splash>
			gpio_toggle_pin(NHD_C12832A1Z_BACKLIGHT);
			break;
		case GFX_MONO_MENU_EVENT_EXIT:
			// Fall trough to default and show button splash
		default:
			button_splash();
    7a60:	d5 cf       	rjmp	.-86     	; 0x7a0c <main+0x88>

00007a62 <ntc_sensor_application>:
    7a62:	7f 92       	push	r7
			break;
    7a64:	8f 92       	push	r8

/**
 * \brief The NTC Temperature application
 */
void ntc_sensor_application(void)
{
    7a66:	9f 92       	push	r9
    7a68:	af 92       	push	r10
    7a6a:	bf 92       	push	r11
    7a6c:	cf 92       	push	r12
    7a6e:	df 92       	push	r13
    7a70:	ef 92       	push	r14
    7a72:	ff 92       	push	r15
    7a74:	0f 93       	push	r16
    7a76:	1f 93       	push	r17
    7a78:	cf 93       	push	r28
    7a7a:	df 93       	push	r29
    7a7c:	cd b7       	in	r28, 0x3d	; 61
    7a7e:	de b7       	in	r29, 0x3e	; 62
    7a80:	6c 97       	sbiw	r28, 0x1c	; 28
    7a82:	cd bf       	out	0x3d, r28	; 61
    7a84:	de bf       	out	0x3e, r29	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7a86:	8f b7       	in	r24, 0x3f	; 63
    7a88:	88 8f       	std	Y+24, r24	; 0x18
	cpu_irq_disable();
    7a8a:	f8 94       	cli
	return flags;
    7a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    7a8e:	e0 e0       	ldi	r30, 0x00	; 0
    7a90:	f2 e0       	ldi	r31, 0x02	; 2
    7a92:	80 81       	ld	r24, Z
    7a94:	88 60       	ori	r24, 0x08	; 8
    7a96:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7a98:	9f bf       	out	0x3f, r25	; 63

	// Initiate a temperature sensor reading
	ntc_measure();

	// Struct for holding the temperature scale background
	tempscale.type = GFX_MONO_BITMAP_RAM;
    7a9a:	1d 82       	std	Y+5, r1	; 0x05
	tempscale.width = 6;
    7a9c:	86 e0       	ldi	r24, 0x06	; 6
    7a9e:	8b 83       	std	Y+3, r24	; 0x03
	tempscale.height = 32;
    7aa0:	80 e2       	ldi	r24, 0x20	; 32
    7aa2:	8c 83       	std	Y+4, r24	; 0x04
	tempscale.data.pixmap = tempscale_data;
    7aa4:	80 e1       	ldi	r24, 0x10	; 16
    7aa6:	91 e2       	ldi	r25, 0x21	; 33
    7aa8:	8e 83       	std	Y+6, r24	; 0x06
    7aaa:	9f 83       	std	Y+7, r25	; 0x07

	// Screen border
	gfx_mono_draw_rect(0, 0, 128, 32, GFX_PIXEL_SET);
    7aac:	01 e0       	ldi	r16, 0x01	; 1
    7aae:	20 e2       	ldi	r18, 0x20	; 32
    7ab0:	40 e8       	ldi	r20, 0x80	; 128
    7ab2:	60 e0       	ldi	r22, 0x00	; 0
    7ab4:	80 e0       	ldi	r24, 0x00	; 0
    7ab6:	0e 94 14 14 	call	0x2828	; 0x2828 <gfx_mono_generic_draw_rect>
	// Clear screen
	gfx_mono_draw_filled_rect(1, 1, 126, 30, GFX_PIXEL_CLR);
    7aba:	00 e0       	ldi	r16, 0x00	; 0
    7abc:	2e e1       	ldi	r18, 0x1E	; 30
    7abe:	4e e7       	ldi	r20, 0x7E	; 126
    7ac0:	61 e0       	ldi	r22, 0x01	; 1
    7ac2:	81 e0       	ldi	r24, 0x01	; 1
    7ac4:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>

	// Draw the header
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)header, 27, 2, &sysfont);
    7ac8:	20 e1       	ldi	r18, 0x10	; 16
    7aca:	30 e2       	ldi	r19, 0x20	; 32
    7acc:	42 e0       	ldi	r20, 0x02	; 2
    7ace:	6b e1       	ldi	r22, 0x1B	; 27
    7ad0:	8d e2       	ldi	r24, 0x2D	; 45
    7ad2:	96 e0       	ldi	r25, 0x06	; 6
    7ad4:	0e 94 b9 19 	call	0x3372	; 0x3372 <gfx_mono_draw_progmem_string>
    7ad8:	81 2c       	mov	r8, r1
    7ada:	68 94       	set
    7adc:	99 24       	eor	r9, r9
    7ade:	91 f8       	bld	r9, 1

		// Draw the scale element on top of the background temperature image
		gfx_mono_draw_filled_rect(X_POS + 2, 3, 2, temp_scale,
				GFX_PIXEL_CLR);

		snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    7ae0:	0f 2e       	mov	r0, r31
    7ae2:	f5 e2       	ldi	r31, 0x25	; 37
    7ae4:	af 2e       	mov	r10, r31
    7ae6:	f2 e2       	ldi	r31, 0x22	; 34
    7ae8:	bf 2e       	mov	r11, r31
    7aea:	f0 2d       	mov	r31, r0
    7aec:	0f 2e       	mov	r0, r31
    7aee:	ff e0       	ldi	r31, 0x0F	; 15
    7af0:	7f 2e       	mov	r7, r31
    7af2:	f0 2d       	mov	r31, r0
    7af4:	7e 01       	movw	r14, r28
    7af6:	88 e0       	ldi	r24, 0x08	; 8
    7af8:	e8 0e       	add	r14, r24
    7afa:	f1 1c       	adc	r15, r1
		// Draw the Celsius string
		gfx_mono_draw_string(temperature_string, X_POS + 12, 13, &sysfont);

		// Convert the temperature to Fahrenheit
		temperature = temperature * 1.8 + 32;
		snprintf(temperature_string, sizeof(temperature_string),
    7afc:	0f 2e       	mov	r0, r31
    7afe:	f1 e3       	ldi	r31, 0x31	; 49
    7b00:	cf 2e       	mov	r12, r31
    7b02:	f2 e2       	ldi	r31, 0x22	; 34
    7b04:	df 2e       	mov	r13, r31
    7b06:	f0 2d       	mov	r31, r0
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)header, 27, 2, &sysfont);

	// The NTC temperature application loop
	while (1) {
		// Draw the thermometer
		gfx_mono_put_bitmap(&tempscale, X_POS, 0);
    7b08:	40 e0       	ldi	r20, 0x00	; 0
    7b0a:	6a e0       	ldi	r22, 0x0A	; 10
    7b0c:	ce 01       	movw	r24, r28
    7b0e:	03 96       	adiw	r24, 0x03	; 3
    7b10:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <gfx_mono_generic_put_bitmap>

		// wait for NTC data to ready
		while (!ntc_data_is_ready());
    7b14:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <ntc_data_is_ready>
    7b18:	88 23       	and	r24, r24
    7b1a:	e1 f3       	breq	.-8      	; 0x7b14 <ntc_sensor_application+0xb2>
		// Read the temperature once the ADC reading is done
		temperature = ntc_get_temperature();
    7b1c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ntc_get_temperature>
    7b20:	18 2f       	mov	r17, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7b22:	8f b7       	in	r24, 0x3f	; 63
    7b24:	8f 8b       	std	Y+23, r24	; 0x17
	cpu_irq_disable();
    7b26:	f8 94       	cli
	return flags;
    7b28:	9f 89       	ldd	r25, Y+23	; 0x17
    7b2a:	f4 01       	movw	r30, r8
    7b2c:	80 81       	ld	r24, Z
    7b2e:	88 60       	ori	r24, 0x08	; 8
    7b30:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7b32:	9f bf       	out	0x3f, r25	; 63

		// Call a new reading while doing the rest of the calculations
		ntc_measure();

		// Convert the temperature into the thermometer scale
		temp_scale = -0.36 * temperature + 20.25;
    7b34:	61 2f       	mov	r22, r17
    7b36:	01 2e       	mov	r0, r17
    7b38:	00 0c       	add	r0, r0
    7b3a:	77 0b       	sbc	r23, r23
    7b3c:	88 0b       	sbc	r24, r24
    7b3e:	99 0b       	sbc	r25, r25
    7b40:	51 d3       	rcall	.+1698   	; 0x81e4 <__floatsisf>
    7b42:	69 8f       	std	Y+25, r22	; 0x19
    7b44:	7a 8f       	std	Y+26, r23	; 0x1a
    7b46:	8b 8f       	std	Y+27, r24	; 0x1b
    7b48:	9c 8f       	std	Y+28, r25	; 0x1c
		if (temp_scale <= 0) {
			temp_scale = 0;
		}

		// Draw the scale element on top of the background temperature image
		gfx_mono_draw_filled_rect(X_POS + 2, 3, 2, temp_scale,
    7b4a:	2c ee       	ldi	r18, 0xEC	; 236
    7b4c:	31 e5       	ldi	r19, 0x51	; 81
    7b4e:	48 eb       	ldi	r20, 0xB8	; 184
    7b50:	5e eb       	ldi	r21, 0xBE	; 190
    7b52:	d4 d3       	rcall	.+1960   	; 0x82fc <__mulsf3>
    7b54:	20 e0       	ldi	r18, 0x00	; 0
    7b56:	30 e0       	ldi	r19, 0x00	; 0
    7b58:	42 ea       	ldi	r20, 0xA2	; 162
    7b5a:	51 e4       	ldi	r21, 0x41	; 65
    7b5c:	ac d2       	rcall	.+1368   	; 0x80b6 <__addsf3>
    7b5e:	14 d3       	rcall	.+1576   	; 0x8188 <__fixunssfsi>
    7b60:	26 2f       	mov	r18, r22
    7b62:	00 e0       	ldi	r16, 0x00	; 0
    7b64:	42 e0       	ldi	r20, 0x02	; 2
    7b66:	63 e0       	ldi	r22, 0x03	; 3
    7b68:	8c e0       	ldi	r24, 0x0C	; 12
    7b6a:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>
				GFX_PIXEL_CLR);

		snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    7b6e:	81 2f       	mov	r24, r17
    7b70:	01 2e       	mov	r0, r17
    7b72:	00 0c       	add	r0, r0
    7b74:	99 0b       	sbc	r25, r25
    7b76:	9f 93       	push	r25
    7b78:	1f 93       	push	r17
    7b7a:	bf 92       	push	r11
    7b7c:	af 92       	push	r10
    7b7e:	1f 92       	push	r1
    7b80:	7f 92       	push	r7
    7b82:	ff 92       	push	r15
    7b84:	ef 92       	push	r14
    7b86:	b4 d4       	rcall	.+2408   	; 0x84f0 <snprintf>
				temperature);

		// Draw the Celsius string
		gfx_mono_draw_string(temperature_string, X_POS + 12, 13, &sysfont);
    7b88:	20 e1       	ldi	r18, 0x10	; 16
    7b8a:	30 e2       	ldi	r19, 0x20	; 32
    7b8c:	4d e0       	ldi	r20, 0x0D	; 13
    7b8e:	66 e1       	ldi	r22, 0x16	; 22
    7b90:	c7 01       	movw	r24, r14
    7b92:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>

		// Convert the temperature to Fahrenheit
		temperature = temperature * 1.8 + 32;
		snprintf(temperature_string, sizeof(temperature_string),
    7b96:	26 e6       	ldi	r18, 0x66	; 102
    7b98:	36 e6       	ldi	r19, 0x66	; 102
    7b9a:	46 ee       	ldi	r20, 0xE6	; 230
    7b9c:	5f e3       	ldi	r21, 0x3F	; 63
    7b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    7ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7ba6:	aa d3       	rcall	.+1876   	; 0x82fc <__mulsf3>
    7ba8:	20 e0       	ldi	r18, 0x00	; 0
    7baa:	30 e0       	ldi	r19, 0x00	; 0
    7bac:	40 e0       	ldi	r20, 0x00	; 0
    7bae:	52 e4       	ldi	r21, 0x42	; 66
    7bb0:	82 d2       	rcall	.+1284   	; 0x80b6 <__addsf3>
    7bb2:	e5 d2       	rcall	.+1482   	; 0x817e <__fixsfsi>
    7bb4:	7f 93       	push	r23
    7bb6:	6f 93       	push	r22
    7bb8:	df 92       	push	r13
    7bba:	cf 92       	push	r12
    7bbc:	1f 92       	push	r1
    7bbe:	7f 92       	push	r7
    7bc0:	ff 92       	push	r15
    7bc2:	ef 92       	push	r14
    7bc4:	95 d4       	rcall	.+2346   	; 0x84f0 <snprintf>
				"%3i Fahrenheit", temperature);

		// Draw the Fahrenheit temperature string
		gfx_mono_draw_string(temperature_string, X_POS + 12, 21, &sysfont);
    7bc6:	20 e1       	ldi	r18, 0x10	; 16
    7bc8:	30 e2       	ldi	r19, 0x20	; 32
    7bca:	45 e1       	ldi	r20, 0x15	; 21
    7bcc:	66 e1       	ldi	r22, 0x16	; 22
    7bce:	c7 01       	movw	r24, r14
    7bd0:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>

		// Check if there has been any keyboard interactions
		keyboard_get_key_state(&key);
    7bd4:	ce 01       	movw	r24, r28
    7bd6:	01 96       	adiw	r24, 0x01	; 1
    7bd8:	16 dd       	rcall	.-1492   	; 0x7606 <keyboard_get_key_state>
		if ((key.keycode == KEYBOARD_BACK) &&
    7bda:	cd bf       	out	0x3d, r28	; 61
    7bdc:	de bf       	out	0x3e, r29	; 62
    7bde:	89 81       	ldd	r24, Y+1	; 0x01
    7be0:	88 30       	cpi	r24, 0x08	; 8
    7be2:	09 f0       	breq	.+2      	; 0x7be6 <ntc_sensor_application+0x184>
    7be4:	91 cf       	rjmp	.-222    	; 0x7b08 <ntc_sensor_application+0xa6>
    7be6:	8a 81       	ldd	r24, Y+2	; 0x02
    7be8:	82 30       	cpi	r24, 0x02	; 2
    7bea:	09 f0       	breq	.+2      	; 0x7bee <ntc_sensor_application+0x18c>
    7bec:	8d cf       	rjmp	.-230    	; 0x7b08 <ntc_sensor_application+0xa6>
				(key.type == KEYBOARD_RELEASE)) {
			// End the application
			break;
		}
	}
}
    7bee:	6c 96       	adiw	r28, 0x1c	; 28
    7bf0:	cd bf       	out	0x3d, r28	; 61
    7bf2:	de bf       	out	0x3e, r29	; 62
    7bf4:	df 91       	pop	r29
    7bf6:	cf 91       	pop	r28
    7bf8:	1f 91       	pop	r17
    7bfa:	0f 91       	pop	r16
    7bfc:	ff 90       	pop	r15
    7bfe:	ef 90       	pop	r14
    7c00:	df 90       	pop	r13
    7c02:	cf 90       	pop	r12
    7c04:	bf 90       	pop	r11
    7c06:	af 90       	pop	r10
    7c08:	9f 90       	pop	r9
    7c0a:	8f 90       	pop	r8
    7c0c:	7f 90       	pop	r7
    7c0e:	08 95       	ret

00007c10 <production_date_get_timestamp>:
 * UNIX time format.
 *
 * \return Production date timestamp
 */
uint32_t production_date_get_timestamp(void)
{
    7c10:	cf 92       	push	r12
    7c12:	df 92       	push	r13
    7c14:	ef 92       	push	r14
    7c16:	ff 92       	push	r15
    7c18:	cf 93       	push	r28
    7c1a:	60 e1       	ldi	r22, 0x10	; 16
    7c1c:	70 e0       	ldi	r23, 0x00	; 0
    7c1e:	81 e0       	ldi	r24, 0x01	; 1
    7c20:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
    7c24:	c8 2f       	mov	r28, r24
    7c26:	61 e1       	ldi	r22, 0x11	; 17
    7c28:	70 e0       	ldi	r23, 0x00	; 0
    7c2a:	81 e0       	ldi	r24, 0x01	; 1
    7c2c:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS)          << 24 |            \
    7c30:	c8 2e       	mov	r12, r24
    7c32:	d1 2c       	mov	r13, r1
    7c34:	e1 2c       	mov	r14, r1
    7c36:	f1 2c       	mov	r15, r1
    7c38:	76 01       	movw	r14, r12
    7c3a:	dd 24       	eor	r13, r13
    7c3c:	cc 24       	eor	r12, r12
    7c3e:	fc 2a       	or	r15, r28
    7c40:	62 e1       	ldi	r22, 0x12	; 18
    7c42:	70 e0       	ldi	r23, 0x00	; 0
    7c44:	81 e0       	ldi	r24, 0x01	; 1
    7c46:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
    7c4a:	c8 2f       	mov	r28, r24
    7c4c:	63 e1       	ldi	r22, 0x13	; 19
    7c4e:	70 e0       	ldi	r23, 0x00	; 0
    7c50:	81 e0       	ldi	r24, 0x01	; 1
    7c52:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <nvm_read_byte>
 * \return Production date timestamp
 */
uint32_t production_date_get_timestamp(void)
{
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
    7c56:	a7 01       	movw	r20, r14
    7c58:	96 01       	movw	r18, r12
    7c5a:	28 2b       	or	r18, r24
    7c5c:	da 01       	movw	r26, r20
    7c5e:	c9 01       	movw	r24, r18
    7c60:	bc 01       	movw	r22, r24
    7c62:	cd 01       	movw	r24, r26
    7c64:	7c 2b       	or	r23, r28
				PRODUCTION_DATE_ADDRESS + 2)      <<  8 |            \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS + 3);

	// Check if timestamp is invalid
	if ((production_date_timestamp == 0xFFFFFFFF) ||
    7c66:	6b 01       	movw	r12, r22
    7c68:	7c 01       	movw	r14, r24
    7c6a:	30 e8       	ldi	r19, 0x80	; 128
    7c6c:	c3 1a       	sub	r12, r19
    7c6e:	3e e6       	ldi	r19, 0x6E	; 110
    7c70:	d3 0a       	sbc	r13, r19
    7c72:	3e e1       	ldi	r19, 0x1E	; 30
    7c74:	e3 0a       	sbc	r14, r19
    7c76:	3d e4       	ldi	r19, 0x4D	; 77
    7c78:	f3 0a       	sbc	r15, r19
    7c7a:	4f e7       	ldi	r20, 0x7F	; 127
    7c7c:	c4 16       	cp	r12, r20
    7c7e:	41 e9       	ldi	r20, 0x91	; 145
    7c80:	d4 06       	cpc	r13, r20
    7c82:	41 ee       	ldi	r20, 0xE1	; 225
    7c84:	e4 06       	cpc	r14, r20
    7c86:	42 eb       	ldi	r20, 0xB2	; 178
    7c88:	f4 06       	cpc	r15, r20
    7c8a:	20 f0       	brcs	.+8      	; 0x7c94 <production_date_get_timestamp+0x84>
			(production_date_timestamp < FIRST_POSSIBLE_TIMESTAMP)) {
		production_date_timestamp = FIRST_POSSIBLE_TIMESTAMP;
    7c8c:	60 e8       	ldi	r22, 0x80	; 128
    7c8e:	7e e6       	ldi	r23, 0x6E	; 110
    7c90:	8e e1       	ldi	r24, 0x1E	; 30
    7c92:	9d e4       	ldi	r25, 0x4D	; 77
	}

	return production_date_timestamp;
}
    7c94:	cf 91       	pop	r28
    7c96:	ff 90       	pop	r15
    7c98:	ef 90       	pop	r14
    7c9a:	df 90       	pop	r13
    7c9c:	cf 90       	pop	r12
    7c9e:	08 95       	ret

00007ca0 <production_date_application>:
 *
 * \note If the EEPROM is erased and no production date can be set, it will
 * default to time 01.01.1970, the start of the UNIX time epoch.
 */
void production_date_application(void)
{
    7ca0:	3f 92       	push	r3
    7ca2:	4f 92       	push	r4
    7ca4:	5f 92       	push	r5
    7ca6:	6f 92       	push	r6
    7ca8:	7f 92       	push	r7
    7caa:	8f 92       	push	r8
    7cac:	9f 92       	push	r9
    7cae:	af 92       	push	r10
    7cb0:	bf 92       	push	r11
    7cb2:	cf 92       	push	r12
    7cb4:	df 92       	push	r13
    7cb6:	ef 92       	push	r14
    7cb8:	ff 92       	push	r15
    7cba:	0f 93       	push	r16
    7cbc:	1f 93       	push	r17
    7cbe:	cf 93       	push	r28
    7cc0:	df 93       	push	r29
    7cc2:	cd b7       	in	r28, 0x3d	; 61
    7cc4:	de b7       	in	r29, 0x3e	; 62
    7cc6:	e2 97       	sbiw	r28, 0x32	; 50
    7cc8:	cd bf       	out	0x3d, r28	; 61
    7cca:	de bf       	out	0x3e, r29	; 62
	uint8_t height;
	uint8_t offset;
	char string_buf[22];

	// Clear screen
	gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    7ccc:	00 e0       	ldi	r16, 0x00	; 0
    7cce:	20 e2       	ldi	r18, 0x20	; 32
    7cd0:	40 e8       	ldi	r20, 0x80	; 128
    7cd2:	60 e0       	ldi	r22, 0x00	; 0
    7cd4:	80 e0       	ldi	r24, 0x00	; 0
    7cd6:	0e 94 38 14 	call	0x2870	; 0x2870 <gfx_mono_generic_draw_filled_rect>

	// Draw application title
	gfx_mono_draw_string("Time since production", 0, 0, &sysfont);
    7cda:	20 e1       	ldi	r18, 0x10	; 16
    7cdc:	30 e2       	ldi	r19, 0x20	; 32
    7cde:	40 e0       	ldi	r20, 0x00	; 0
    7ce0:	60 e0       	ldi	r22, 0x00	; 0
    7ce2:	80 e4       	ldi	r24, 0x40	; 64
    7ce4:	92 e2       	ldi	r25, 0x22	; 34
    7ce6:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>

	// Get production timestamp
	production_date_timestamp = production_date_get_timestamp();
    7cea:	92 df       	rcall	.-220    	; 0x7c10 <production_date_get_timestamp>

	// Convert timestamp to date struct
	calendar_timestamp_to_date(production_date_timestamp, &production_date);
    7cec:	ae 01       	movw	r20, r28
    7cee:	4d 5e       	subi	r20, 0xED	; 237
    7cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    7cf2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <calendar_timestamp_to_date>
 * default to time 01.01.1970, the start of the UNIX time epoch.
 */
void production_date_application(void)
{
	struct keyboard_event input_key;
	uint32_t past_timestamp = 0xFFFFFFFF;
    7cf6:	44 24       	eor	r4, r4
    7cf8:	4a 94       	dec	r4
    7cfa:	54 2c       	mov	r5, r4
    7cfc:	32 01       	movw	r6, r4

		// Use months + year*12 as we are a line short to have both year and month
		months = (date_diff.year * 12) + date_diff.month;

		// Center month string on screen. Align day string with month string
		snprintf(string_buf, sizeof(string_buf), "%2d Months", months);
    7cfe:	0f 2e       	mov	r0, r31
    7d00:	f6 e1       	ldi	r31, 0x16	; 22
    7d02:	3f 2e       	mov	r3, r31
    7d04:	f0 2d       	mov	r31, r0
    7d06:	8e 01       	movw	r16, r28
    7d08:	03 5e       	subi	r16, 0xE3	; 227
    7d0a:	1f 4f       	sbci	r17, 0xFF	; 255
		gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width, &height);
		offset = (GFX_MONO_LCD_WIDTH - width) / 2;
    7d0c:	68 94       	set
    7d0e:	88 24       	eor	r8, r8
    7d10:	87 f8       	bld	r8, 7
    7d12:	91 2c       	mov	r9, r1
    7d14:	02 c0       	rjmp	.+4      	; 0x7d1a <production_date_application+0x7a>
 *
 * \note If the EEPROM is erased and no production date can be set, it will
 * default to time 01.01.1970, the start of the UNIX time epoch.
 */
void production_date_application(void)
{
    7d16:	26 01       	movw	r4, r12
    7d18:	37 01       	movw	r6, r14
	// Convert timestamp to date struct
	calendar_timestamp_to_date(production_date_timestamp, &production_date);

	// Exit the application if "back" key is pressed
	while (true) {
		keyboard_get_key_state(&input_key);
    7d1a:	ce 01       	movw	r24, r28
    7d1c:	01 96       	adiw	r24, 0x01	; 1
    7d1e:	73 dc       	rcall	.-1818   	; 0x7606 <keyboard_get_key_state>
		if ((input_key.keycode == KEYBOARD_BACK) &&
    7d20:	89 81       	ldd	r24, Y+1	; 0x01
    7d22:	88 30       	cpi	r24, 0x08	; 8
    7d24:	21 f4       	brne	.+8      	; 0x7d2e <production_date_application+0x8e>
    7d26:	8a 81       	ldd	r24, Y+2	; 0x02
    7d28:	82 30       	cpi	r24, 0x02	; 2
    7d2a:	09 f4       	brne	.+2      	; 0x7d2e <production_date_application+0x8e>
    7d2c:	95 c0       	rjmp	.+298    	; 0x7e58 <production_date_application+0x1b8>
				(input_key.type == KEYBOARD_RELEASE)) {
			break;
		}

		// Get current time from RTC32
		rtc_timestamp = rtc_get_time();
    7d2e:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <rtc_get_time>
    7d32:	6b 01       	movw	r12, r22
    7d34:	7c 01       	movw	r14, r24

		if (rtc_timestamp == past_timestamp) {
    7d36:	46 16       	cp	r4, r22
    7d38:	57 06       	cpc	r5, r23
    7d3a:	68 06       	cpc	r6, r24
    7d3c:	79 06       	cpc	r7, r25
    7d3e:	59 f3       	breq	.-42     	; 0x7d16 <production_date_application+0x76>
		}

		past_timestamp = rtc_timestamp;

		// Convert timestamp to date struct
		calendar_timestamp_to_date(rtc_timestamp, &rtc_date);
    7d40:	ae 01       	movw	r20, r28
    7d42:	4d 5f       	subi	r20, 0xFD	; 253
    7d44:	5f 4f       	sbci	r21, 0xFF	; 255
    7d46:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <calendar_timestamp_to_date>

		// Find the difference between the current date and production date
		calendar_time_between_dates(&rtc_date, &production_date, &date_diff);
    7d4a:	ae 01       	movw	r20, r28
    7d4c:	45 5f       	subi	r20, 0xF5	; 245
    7d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    7d50:	be 01       	movw	r22, r28
    7d52:	6d 5e       	subi	r22, 0xED	; 237
    7d54:	7f 4f       	sbci	r23, 0xFF	; 255
    7d56:	ce 01       	movw	r24, r28
    7d58:	03 96       	adiw	r24, 0x03	; 3
    7d5a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <calendar_time_between_dates>

		// Use months + year*12 as we are a line short to have both year and month
		months = (date_diff.year * 12) + date_diff.month;

		// Center month string on screen. Align day string with month string
		snprintf(string_buf, sizeof(string_buf), "%2d Months", months);
    7d5e:	88 89       	ldd	r24, Y+16	; 0x10
    7d60:	99 89       	ldd	r25, Y+17	; 0x11
    7d62:	9c 01       	movw	r18, r24
    7d64:	22 0f       	add	r18, r18
    7d66:	33 1f       	adc	r19, r19
    7d68:	82 0f       	add	r24, r18
    7d6a:	93 1f       	adc	r25, r19
    7d6c:	88 0f       	add	r24, r24
    7d6e:	99 1f       	adc	r25, r25
    7d70:	88 0f       	add	r24, r24
    7d72:	99 1f       	adc	r25, r25
    7d74:	2f 85       	ldd	r18, Y+15	; 0x0f
    7d76:	82 0f       	add	r24, r18
    7d78:	91 1d       	adc	r25, r1
    7d7a:	9f 93       	push	r25
    7d7c:	8f 93       	push	r24
    7d7e:	26 e5       	ldi	r18, 0x56	; 86
    7d80:	32 e2       	ldi	r19, 0x22	; 34
    7d82:	3f 93       	push	r19
    7d84:	2f 93       	push	r18
    7d86:	1f 92       	push	r1
    7d88:	3f 92       	push	r3
    7d8a:	1f 93       	push	r17
    7d8c:	0f 93       	push	r16
    7d8e:	b0 d3       	rcall	.+1888   	; 0x84f0 <snprintf>
		gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width, &height);
    7d90:	9e 01       	movw	r18, r28
    7d92:	24 5e       	subi	r18, 0xE4	; 228
    7d94:	3f 4f       	sbci	r19, 0xFF	; 255
    7d96:	ae 01       	movw	r20, r28
    7d98:	45 5e       	subi	r20, 0xE5	; 229
    7d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d9c:	60 e1       	ldi	r22, 0x10	; 16
    7d9e:	70 e2       	ldi	r23, 0x20	; 32
    7da0:	c8 01       	movw	r24, r16
    7da2:	0e 94 e7 19 	call	0x33ce	; 0x33ce <gfx_mono_get_string_bounding_box>
		offset = (GFX_MONO_LCD_WIDTH - width) / 2;
    7da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7da8:	94 01       	movw	r18, r8
    7daa:	28 1b       	sub	r18, r24
    7dac:	31 09       	sbc	r19, r1
    7dae:	c9 01       	movw	r24, r18
    7db0:	59 01       	movw	r10, r18
    7db2:	cd bf       	out	0x3d, r28	; 61
    7db4:	de bf       	out	0x3e, r29	; 62
    7db6:	99 23       	and	r25, r25
    7db8:	1c f4       	brge	.+6      	; 0x7dc0 <production_date_application+0x120>
    7dba:	3f ef       	ldi	r19, 0xFF	; 255
    7dbc:	a3 1a       	sub	r10, r19
    7dbe:	b3 0a       	sbc	r11, r19
    7dc0:	b5 94       	asr	r11
    7dc2:	a7 94       	ror	r10
		gfx_mono_draw_string(string_buf, offset, 8, &sysfont);
    7dc4:	20 e1       	ldi	r18, 0x10	; 16
    7dc6:	30 e2       	ldi	r19, 0x20	; 32
    7dc8:	48 e0       	ldi	r20, 0x08	; 8
    7dca:	6a 2d       	mov	r22, r10
    7dcc:	c8 01       	movw	r24, r16
    7dce:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>

		snprintf(string_buf, sizeof(string_buf), "%2d Days", date_diff.date);
    7dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    7dd4:	1f 92       	push	r1
    7dd6:	8f 93       	push	r24
    7dd8:	81 e6       	ldi	r24, 0x61	; 97
    7dda:	92 e2       	ldi	r25, 0x22	; 34
    7ddc:	9f 93       	push	r25
    7dde:	8f 93       	push	r24
    7de0:	1f 92       	push	r1
    7de2:	3f 92       	push	r3
    7de4:	1f 93       	push	r17
    7de6:	0f 93       	push	r16
    7de8:	83 d3       	rcall	.+1798   	; 0x84f0 <snprintf>
		gfx_mono_draw_string(string_buf, offset, 16, &sysfont);
    7dea:	20 e1       	ldi	r18, 0x10	; 16
    7dec:	30 e2       	ldi	r19, 0x20	; 32
    7dee:	40 e1       	ldi	r20, 0x10	; 16
    7df0:	6a 2d       	mov	r22, r10
    7df2:	c8 01       	movw	r24, r16
    7df4:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>

		// Display hour, minute, second
		snprintf(string_buf, sizeof(string_buf),"%.2d:%.2d:%.2d", date_diff.hour,
    7df8:	8b 85       	ldd	r24, Y+11	; 0x0b
    7dfa:	1f 92       	push	r1
    7dfc:	8f 93       	push	r24
    7dfe:	8c 85       	ldd	r24, Y+12	; 0x0c
    7e00:	1f 92       	push	r1
    7e02:	8f 93       	push	r24
    7e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e06:	1f 92       	push	r1
    7e08:	8f 93       	push	r24
    7e0a:	8b ec       	ldi	r24, 0xCB	; 203
    7e0c:	91 e2       	ldi	r25, 0x21	; 33
    7e0e:	9f 93       	push	r25
    7e10:	8f 93       	push	r24
    7e12:	1f 92       	push	r1
    7e14:	3f 92       	push	r3
    7e16:	1f 93       	push	r17
    7e18:	0f 93       	push	r16
    7e1a:	6a d3       	rcall	.+1748   	; 0x84f0 <snprintf>
				date_diff.minute, date_diff.second);
		gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width, &height);
    7e1c:	9e 01       	movw	r18, r28
    7e1e:	24 5e       	subi	r18, 0xE4	; 228
    7e20:	3f 4f       	sbci	r19, 0xFF	; 255
    7e22:	ae 01       	movw	r20, r28
    7e24:	45 5e       	subi	r20, 0xE5	; 229
    7e26:	5f 4f       	sbci	r21, 0xFF	; 255
    7e28:	60 e1       	ldi	r22, 0x10	; 16
    7e2a:	70 e2       	ldi	r23, 0x20	; 32
    7e2c:	c8 01       	movw	r24, r16
    7e2e:	0e 94 e7 19 	call	0x33ce	; 0x33ce <gfx_mono_get_string_bounding_box>
		offset = (GFX_MONO_LCD_WIDTH - width) / 2;
		gfx_mono_draw_string(string_buf, offset, 24, &sysfont);
    7e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7e34:	94 01       	movw	r18, r8
    7e36:	28 1b       	sub	r18, r24
    7e38:	31 09       	sbc	r19, r1
    7e3a:	b9 01       	movw	r22, r18
    7e3c:	12 f4       	brpl	.+4      	; 0x7e42 <production_date_application+0x1a2>
    7e3e:	6f 5f       	subi	r22, 0xFF	; 255
    7e40:	7f 4f       	sbci	r23, 0xFF	; 255
    7e42:	75 95       	asr	r23
    7e44:	67 95       	ror	r22
    7e46:	20 e1       	ldi	r18, 0x10	; 16
    7e48:	30 e2       	ldi	r19, 0x20	; 32
    7e4a:	48 e1       	ldi	r20, 0x18	; 24
    7e4c:	c8 01       	movw	r24, r16
    7e4e:	0e 94 90 19 	call	0x3320	; 0x3320 <gfx_mono_draw_string>
    7e52:	cd bf       	out	0x3d, r28	; 61
    7e54:	de bf       	out	0x3e, r29	; 62
    7e56:	5f cf       	rjmp	.-322    	; 0x7d16 <production_date_application+0x76>
	}
}
    7e58:	e2 96       	adiw	r28, 0x32	; 50
    7e5a:	cd bf       	out	0x3d, r28	; 61
    7e5c:	de bf       	out	0x3e, r29	; 62
    7e5e:	df 91       	pop	r29
    7e60:	cf 91       	pop	r28
    7e62:	1f 91       	pop	r17
    7e64:	0f 91       	pop	r16
    7e66:	ff 90       	pop	r15
    7e68:	ef 90       	pop	r14
    7e6a:	df 90       	pop	r13
    7e6c:	cf 90       	pop	r12
    7e6e:	bf 90       	pop	r11
    7e70:	af 90       	pop	r10
    7e72:	9f 90       	pop	r9
    7e74:	8f 90       	pop	r8
    7e76:	7f 90       	pop	r7
    7e78:	6f 90       	pop	r6
    7e7a:	5f 90       	pop	r5
    7e7c:	4f 90       	pop	r4
    7e7e:	3f 90       	pop	r3
    7e80:	08 95       	ret

00007e82 <touch_timer_callback>:
	qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
}

static void touch_timer_callback()
{
	time_to_measure_touch = true;
    7e82:	81 e0       	ldi	r24, 0x01	; 1
    7e84:	80 93 72 2b 	sts	0x2B72, r24	; 0x802b72 <time_to_measure_touch>
	current_time_ms_touch += qt_measurement_period_msec;
    7e88:	20 91 70 2b 	lds	r18, 0x2B70	; 0x802b70 <current_time_ms_touch>
    7e8c:	30 91 71 2b 	lds	r19, 0x2B71	; 0x802b71 <current_time_ms_touch+0x1>
    7e90:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <qt_measurement_period_msec>
    7e94:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <qt_measurement_period_msec+0x1>
    7e98:	82 0f       	add	r24, r18
    7e9a:	93 1f       	adc	r25, r19
    7e9c:	80 93 70 2b 	sts	0x2B70, r24	; 0x802b70 <current_time_ms_touch>
    7ea0:	90 93 71 2b 	sts	0x2B71, r25	; 0x802b71 <current_time_ms_touch+0x1>
    7ea4:	08 95       	ret

00007ea6 <touch_init>:
 * @pre Interrupts must be enabled in order to trigger regular measurements
 * The touch configuration requires a fixed CPU speed to work properly in this
 * case we need 2 MHz.
 */
void touch_init(void)
{
    7ea6:	cf 93       	push	r28
    7ea8:	df 93       	push	r29
#ifdef QTOUCH_STUDIO_MASKS
	SNS_array[0][0] = 0x40;
    7eaa:	ec ea       	ldi	r30, 0xAC	; 172
    7eac:	f2 e2       	ldi	r31, 0x22	; 34
    7eae:	80 e4       	ldi	r24, 0x40	; 64
    7eb0:	80 83       	st	Z, r24
	SNS_array[0][1] = 0x0;
    7eb2:	11 82       	std	Z+1, r1	; 0x01
	SNS_array[1][0] = 0x0;
    7eb4:	12 82       	std	Z+2, r1	; 0x02
	SNS_array[1][1] = 0x0;
    7eb6:	13 82       	std	Z+3, r1	; 0x03

	SNSK_array[0][0] = 0x80;
    7eb8:	e0 eb       	ldi	r30, 0xB0	; 176
    7eba:	f2 e2       	ldi	r31, 0x22	; 34
    7ebc:	80 e8       	ldi	r24, 0x80	; 128
    7ebe:	80 83       	st	Z, r24
	SNSK_array[0][1] = 0x0;
    7ec0:	11 82       	std	Z+1, r1	; 0x01
	SNSK_array[1][0] = 0x0;
    7ec2:	12 82       	std	Z+2, r1	; 0x02
	SNSK_array[1][1] = 0x0;
    7ec4:	13 82       	std	Z+3, r1	; 0x03
	 * When using "pin configurability" this will result in channel 0
	 * because it is the first and only channel that is used.
	 * For the standard qtouch library setup we would need to use
	 * channel 3 since we are using the last two pins on the port.
	 */
	qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
    7ec6:	23 e0       	ldi	r18, 0x03	; 3
    7ec8:	4a e0       	ldi	r20, 0x0A	; 10
    7eca:	60 e0       	ldi	r22, 0x00	; 0
    7ecc:	80 e0       	ldi	r24, 0x00	; 0
    7ece:	0e 94 10 05 	call	0xa20	; 0xa20 <qt_enable_key>
	SNSK_array[1][0] = 0x0;
	SNSK_array[1][1] = 0x0;
#endif

	config_sensor();
	qt_init_sensing();
    7ed2:	60 e0       	ldi	r22, 0x00	; 0
    7ed4:	70 e0       	ldi	r23, 0x00	; 0
    7ed6:	8d e2       	ldi	r24, 0x2D	; 45
    7ed8:	94 e0       	ldi	r25, 0x04	; 4
    7eda:	0e 94 21 06 	call	0xc42	; 0xc42 <qt_init_sensing_with_burst>

/** \brief Passes default parameters from config file to touch library
 */
static void qt_set_parameters( void )
{
	qt_config_data.qt_di              = DEF_QT_DI;
    7ede:	ee e6       	ldi	r30, 0x6E	; 110
    7ee0:	f2 e2       	ldi	r31, 0x22	; 34
    7ee2:	84 e0       	ldi	r24, 0x04	; 4
    7ee4:	81 83       	std	Z+1, r24	; 0x01
	qt_config_data.qt_neg_drift_rate  = DEF_QT_NEG_DRIFT_RATE;
    7ee6:	84 e1       	ldi	r24, 0x14	; 20
    7ee8:	84 83       	std	Z+4, r24	; 0x04
	qt_config_data.qt_pos_drift_rate  = DEF_QT_POS_DRIFT_RATE;
    7eea:	95 e0       	ldi	r25, 0x05	; 5
    7eec:	95 83       	std	Z+5, r25	; 0x05
	qt_config_data.qt_max_on_duration = DEF_QT_MAX_ON_DURATION;
    7eee:	13 82       	std	Z+3, r1	; 0x03
	qt_config_data.qt_drift_hold_time = DEF_QT_DRIFT_HOLD_TIME;
    7ef0:	82 83       	std	Z+2, r24	; 0x02
	qt_config_data.qt_recal_threshold = DEF_QT_RECAL_THRESHOLD;
    7ef2:	81 e0       	ldi	r24, 0x01	; 1
    7ef4:	80 83       	st	Z, r24
	qt_config_data.qt_pos_recal_delay = DEF_QT_POS_RECAL_DELAY;
    7ef6:	83 e0       	ldi	r24, 0x03	; 3
    7ef8:	86 83       	std	Z+6, r24	; 0x06
	current_time_ms_touch += qt_measurement_period_msec;
}

static void init_timer_isr( void )
{
	tc_enable(&TCD0);
    7efa:	80 e0       	ldi	r24, 0x00	; 0
    7efc:	99 e0       	ldi	r25, 0x09	; 9
    7efe:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <tc_enable>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7f02:	c0 e0       	ldi	r28, 0x00	; 0
    7f04:	d9 e0       	ldi	r29, 0x09	; 9
    7f06:	88 81       	ld	r24, Y
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7f08:	80 7f       	andi	r24, 0xF0	; 240
    7f0a:	82 60       	ori	r24, 0x02	; 2
    7f0c:	88 83       	st	Y, r24
 * \note Configures CCAINTLVL in INTCTRLB
 */
static inline void tc_set_cca_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLB = ((TC0_t *)tc)->INTCTRLB & ~TC0_CCAINTLVL_gm;
    7f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    7f10:	8c 7f       	andi	r24, 0xFC	; 252
    7f12:	8f 83       	std	Y+7, r24	; 0x07
	((TC0_t *)tc)->INTCTRLB =
			((TC0_t *)tc)->INTCTRLB | (level << TC0_CCAINTLVL_gp);
    7f14:	8f 81       	ldd	r24, Y+7	; 0x07
 */
static inline void tc_set_cca_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLB = ((TC0_t *)tc)->INTCTRLB & ~TC0_CCAINTLVL_gm;
	((TC0_t *)tc)->INTCTRLB =
    7f16:	81 60       	ori	r24, 0x01	; 1
    7f18:	8f 83       	std	Y+7, r24	; 0x07

	/* Set Compare A interrupt to low level */
	tc_set_cca_interrupt_level(&TCD0, TC_INT_LVL_LO);

	/* 1000 counts is 1ms at 1MHz input clock */
	tc_write_period (&TCD0, 1000 * qt_measurement_period_msec);
    7f1a:	40 91 28 21 	lds	r20, 0x2128	; 0x802128 <qt_measurement_period_msec>
    7f1e:	50 91 29 21 	lds	r21, 0x2129	; 0x802129 <qt_measurement_period_msec+0x1>
    7f22:	28 ee       	ldi	r18, 0xE8	; 232
    7f24:	33 e0       	ldi	r19, 0x03	; 3
    7f26:	42 9f       	mul	r20, r18
    7f28:	c0 01       	movw	r24, r0
    7f2a:	43 9f       	mul	r20, r19
    7f2c:	90 0d       	add	r25, r0
    7f2e:	52 9f       	mul	r21, r18
    7f30:	90 0d       	add	r25, r0
    7f32:	11 24       	eor	r1, r1
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    7f34:	8e a3       	std	Y+38, r24	; 0x26
    7f36:	9f a3       	std	Y+39, r25	; 0x27

	/* Handling callback */
	tc_set_cca_interrupt_callback(&TCD0, touch_timer_callback);
    7f38:	61 e4       	ldi	r22, 0x41	; 65
    7f3a:	7f e3       	ldi	r23, 0x3F	; 63
    7f3c:	80 e0       	ldi	r24, 0x00	; 0
    7f3e:	99 e0       	ldi	r25, 0x09	; 9
    7f40:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <tc_set_cca_interrupt_callback>
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
    7f44:	89 81       	ldd	r24, Y+1	; 0x01
    7f46:	80 61       	ori	r24, 0x10	; 16
    7f48:	89 83       	std	Y+1, r24	; 0x01
	/* Set up callback function. This function is called after the library
	 * has made capacitive measurements, but before it has processed them.
	 * The user can use this hook to apply filter functions to the measured
	 * signal values.(Possibly to fix sensor layout faults)
	 */
	qt_filter_callback = 0;
    7f4a:	10 92 88 22 	sts	0x2288, r1	; 0x802288 <qt_filter_callback>
    7f4e:	10 92 89 22 	sts	0x2289, r1	; 0x802289 <qt_filter_callback+0x1>

#ifdef _DEBUG_INTERFACE_
	QDebug_Init();
#endif
}
    7f52:	df 91       	pop	r29
    7f54:	cf 91       	pop	r28
    7f56:	08 95       	ret

00007f58 <check_touch_key_pressed>:
#ifdef _DEBUG_INTERFACE_
	/* Process commands from PC */
	QDebug_ProcessCommands();
#endif

	if (time_to_measure_touch) {
    7f58:	80 91 72 2b 	lds	r24, 0x2B72	; 0x802b72 <time_to_measure_touch>
    7f5c:	88 23       	and	r24, r24
    7f5e:	51 f0       	breq	.+20     	; 0x7f74 <check_touch_key_pressed+0x1c>
		time_to_measure_touch = false;
    7f60:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <time_to_measure_touch>

		do {
			status_flag = qt_measure_sensors(current_time_ms_touch);
    7f64:	80 91 70 2b 	lds	r24, 0x2B70	; 0x802b70 <current_time_ms_touch>
    7f68:	90 91 71 2b 	lds	r25, 0x2B71	; 0x802b71 <current_time_ms_touch+0x1>
    7f6c:	0e 94 80 05 	call	0xb00	; 0xb00 <qt_measure_sensors>
			/* Time-critical host application code should be placed
			 * here since
			 * a full burst cycle may delay critical task in the
			 *main application
			 */
		} while (burst_flag);
    7f70:	90 fd       	sbrc	r25, 0
    7f72:	f8 cf       	rjmp	.-16     	; 0x7f64 <check_touch_key_pressed+0xc>
    7f74:	80 91 85 22 	lds	r24, 0x2285	; 0x802285 <qt_measure_data+0x10>
    7f78:	80 95       	com	r24
	if (GET_SENSOR_STATE(0)) {
		return 0;
	} else {
		return 1;
	}
}
    7f7a:	81 70       	andi	r24, 0x01	; 1
    7f7c:	08 95       	ret

00007f7e <tz_index_to_minutes>:
 *
 * \retval actual number of minutes timezone offset
 */
int8_t tz_index_to_minutes(uint8_t tz_minutes_index)
{
	switch(tz_minutes_index) {
    7f7e:	82 30       	cpi	r24, 0x02	; 2
    7f80:	31 f0       	breq	.+12     	; 0x7f8e <tz_index_to_minutes+0x10>
    7f82:	83 30       	cpi	r24, 0x03	; 3
    7f84:	31 f0       	breq	.+12     	; 0x7f92 <tz_index_to_minutes+0x14>
    7f86:	81 30       	cpi	r24, 0x01	; 1
    7f88:	31 f4       	brne	.+12     	; 0x7f96 <tz_index_to_minutes+0x18>
		case 0:
			return 0;
		case 1:
			return 15;
    7f8a:	8f e0       	ldi	r24, 0x0F	; 15
    7f8c:	08 95       	ret
		case 2:
			return 30;
    7f8e:	8e e1       	ldi	r24, 0x1E	; 30
    7f90:	08 95       	ret
		case 3:
			return 45;
    7f92:	8d e2       	ldi	r24, 0x2D	; 45
    7f94:	08 95       	ret
 */
int8_t tz_index_to_minutes(uint8_t tz_minutes_index)
{
	switch(tz_minutes_index) {
		case 0:
			return 0;
    7f96:	80 e0       	ldi	r24, 0x00	; 0
			return 45;
		default:
			// unknown index; return 0 minutes offset
			return 0;
	}
}
    7f98:	08 95       	ret

00007f9a <timezone_get_hours>:
 * \retval timezone offset (hours)
 */
int8_t timezone_get_hours(void)
{
	return tz_hours;
}
    7f9a:	80 91 74 2b 	lds	r24, 0x2B74	; 0x802b74 <tz_hours>
    7f9e:	08 95       	ret

00007fa0 <timezone_get_minutes>:
 * \retval timezone offset (minutes)
 */
int8_t timezone_get_minutes(void)
{
	return tz_minutes;
}
    7fa0:	80 91 73 2b 	lds	r24, 0x2B73	; 0x802b73 <tz_minutes>
    7fa4:	08 95       	ret

00007fa6 <timezone_select_application>:
 * the selected timezone to be used by the date&time application. If the
 * timezone setting differs from the already stored setting in EEPROM, the
 * EEPROM value will be updated with the new selection.
 */
void timezone_select_application(void)
{
    7fa6:	1f 93       	push	r17
    7fa8:	cf 93       	push	r28
    7faa:	df 93       	push	r29
    7fac:	1f 92       	push	r1
    7fae:	1f 92       	push	r1
    7fb0:	cd b7       	in	r28, 0x3d	; 61
    7fb2:	de b7       	in	r29, 0x3e	; 62
	uint8_t readback = 0;
	uint8_t menu_status;
	struct keyboard_event input;

	// Get timezone offset (hours). Do not accept the "back" button
	gfx_mono_menu_init(&tz_hours_menu);
    7fb4:	89 e3       	ldi	r24, 0x39	; 57
    7fb6:	91 e2       	ldi	r25, 0x21	; 33
    7fb8:	0e 94 d5 15 	call	0x2baa	; 0x2baa <gfx_mono_menu_init>

	// Wait for something useful to happen in the menu system
	do {
		// Wait for key release
		do {
			keyboard_get_key_state(&input);
    7fbc:	ce 01       	movw	r24, r28
    7fbe:	01 96       	adiw	r24, 0x01	; 1
    7fc0:	22 db       	rcall	.-2492   	; 0x7606 <keyboard_get_key_state>
		} while (input.type != KEYBOARD_RELEASE);
    7fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    7fc4:	82 30       	cpi	r24, 0x02	; 2
    7fc6:	d1 f7       	brne	.-12     	; 0x7fbc <timezone_select_application+0x16>

		// Send key to menu system
		menu_status = gfx_mono_menu_process_key(&tz_hours_menu,
    7fc8:	69 81       	ldd	r22, Y+1	; 0x01
    7fca:	89 e3       	ldi	r24, 0x39	; 57
    7fcc:	91 e2       	ldi	r25, 0x21	; 33
    7fce:	0e 94 ed 15 	call	0x2bda	; 0x2bda <gfx_mono_menu_process_key>
    7fd2:	18 2f       	mov	r17, r24
				input.keycode);
	} while ((menu_status == GFX_MONO_MENU_EVENT_IDLE) ||
			(menu_status == GFX_MONO_MENU_EVENT_EXIT));
    7fd4:	82 e0       	ldi	r24, 0x02	; 2
    7fd6:	81 0f       	add	r24, r17
    7fd8:	82 30       	cpi	r24, 0x02	; 2
    7fda:	80 f3       	brcs	.-32     	; 0x7fbc <timezone_select_application+0x16>

	// convert tz_hours_menu index to actual offset
	tz_hours = menu_status - 12;
    7fdc:	84 ef       	ldi	r24, 0xF4	; 244
    7fde:	81 0f       	add	r24, r17
    7fe0:	80 93 74 2b 	sts	0x2B74, r24	; 0x802b74 <tz_hours>

	// Update EEPROM if setting differs from the one stored in EEPROM
	readback = nvm_eeprom_read_byte(TZ_HOURS_EEPROM_ADDR);
    7fe4:	84 e0       	ldi	r24, 0x04	; 4
    7fe6:	90 e0       	ldi	r25, 0x00	; 0
    7fe8:	0e 94 5d 25 	call	0x4aba	; 0x4aba <nvm_eeprom_read_byte>
	if(menu_status != readback) {
    7fec:	18 17       	cp	r17, r24
    7fee:	29 f0       	breq	.+10     	; 0x7ffa <timezone_select_application+0x54>
		nvm_eeprom_write_byte(TZ_HOURS_EEPROM_ADDR, menu_status);
    7ff0:	61 2f       	mov	r22, r17
    7ff2:	84 e0       	ldi	r24, 0x04	; 4
    7ff4:	90 e0       	ldi	r25, 0x00	; 0
    7ff6:	0e 94 91 25 	call	0x4b22	; 0x4b22 <nvm_eeprom_write_byte>
	}

	// Get timezone offset (minutes). Do not accept the "back" button
	gfx_mono_menu_init(&tz_minutes_menu);
    7ffa:	8a e2       	ldi	r24, 0x2A	; 42
    7ffc:	91 e2       	ldi	r25, 0x21	; 33
    7ffe:	0e 94 d5 15 	call	0x2baa	; 0x2baa <gfx_mono_menu_init>
	// Wait for something useful to happen in the menu system
	do {
		// wait for key release
		do {
			keyboard_get_key_state(&input);
    8002:	ce 01       	movw	r24, r28
    8004:	01 96       	adiw	r24, 0x01	; 1
    8006:	ff da       	rcall	.-2562   	; 0x7606 <keyboard_get_key_state>
		} while (input.type != KEYBOARD_RELEASE);
    8008:	8a 81       	ldd	r24, Y+2	; 0x02
    800a:	82 30       	cpi	r24, 0x02	; 2
    800c:	d1 f7       	brne	.-12     	; 0x8002 <timezone_select_application+0x5c>

		// send key to menu system
		menu_status = gfx_mono_menu_process_key(&tz_minutes_menu,
    800e:	69 81       	ldd	r22, Y+1	; 0x01
    8010:	8a e2       	ldi	r24, 0x2A	; 42
    8012:	91 e2       	ldi	r25, 0x21	; 33
    8014:	0e 94 ed 15 	call	0x2bda	; 0x2bda <gfx_mono_menu_process_key>
    8018:	18 2f       	mov	r17, r24
				input.keycode);
	} while ((menu_status == GFX_MONO_MENU_EVENT_IDLE) ||
			(menu_status == GFX_MONO_MENU_EVENT_EXIT));
    801a:	82 e0       	ldi	r24, 0x02	; 2
    801c:	81 0f       	add	r24, r17
    801e:	82 30       	cpi	r24, 0x02	; 2

	// Convert tz_minutes_menu index to actual minutes
	tz_minutes = tz_index_to_minutes(menu_status);
    8020:	80 f3       	brcs	.-32     	; 0x8002 <timezone_select_application+0x5c>
    8022:	81 2f       	mov	r24, r17
    8024:	ac df       	rcall	.-168    	; 0x7f7e <tz_index_to_minutes>
    8026:	80 93 73 2b 	sts	0x2B73, r24	; 0x802b73 <tz_minutes>

	// Update EEPROM if setting differs from the one stored in EEPROM
	readback = nvm_eeprom_read_byte(TZ_MINUTES_EEPROM_ADDR);
    802a:	85 e0       	ldi	r24, 0x05	; 5
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	0e 94 5d 25 	call	0x4aba	; 0x4aba <nvm_eeprom_read_byte>
	if(menu_status != readback) {
    8032:	18 17       	cp	r17, r24
    8034:	29 f0       	breq	.+10     	; 0x8040 <timezone_select_application+0x9a>
		nvm_eeprom_write_byte(TZ_MINUTES_EEPROM_ADDR, menu_status);
    8036:	61 2f       	mov	r22, r17
    8038:	85 e0       	ldi	r24, 0x05	; 5
    803a:	90 e0       	ldi	r25, 0x00	; 0
    803c:	0e 94 91 25 	call	0x4b22	; 0x4b22 <nvm_eeprom_write_byte>
	}
}
    8040:	0f 90       	pop	r0
    8042:	0f 90       	pop	r0
    8044:	df 91       	pop	r29
    8046:	cf 91       	pop	r28
    8048:	1f 91       	pop	r17
    804a:	08 95       	ret

0000804c <timezone_init>:
 * If this is the case it will be set, and used by the date&time application.
 * If it is not set, the "select timezone" application will be started to set
 * it
 */
void timezone_init(void)
{
    804c:	cf 93       	push	r28
	uint8_t temp;
	uint8_t invalid_tz = false;

	// Read timezone (hours) from EEPROM
	temp = nvm_eeprom_read_byte(TZ_HOURS_EEPROM_ADDR);
    804e:	84 e0       	ldi	r24, 0x04	; 4
    8050:	90 e0       	ldi	r25, 0x00	; 0
    8052:	0e 94 5d 25 	call	0x4aba	; 0x4aba <nvm_eeprom_read_byte>

	// convert tz_hours_menu index to actual timezone offset
	tz_hours = ((int8_t)temp) - 12;
    8056:	94 ef       	ldi	r25, 0xF4	; 244
    8058:	98 0f       	add	r25, r24
    805a:	90 93 74 2b 	sts	0x2B74, r25	; 0x802b74 <tz_hours>

	// Check if the timezone is valid
	if((tz_hours <= 12) && (tz_hours >= -12)) {
    805e:	89 31       	cpi	r24, 0x19	; 25
    8060:	50 f4       	brcc	.+20     	; 0x8076 <timezone_init+0x2a>
		// Set timezone menu selection to the selected timezone
		tz_hours_menu.current_selection = temp;
    8062:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <tz_hours_menu+0x5>
		tz_hours = 0;
		tz_hours_menu.current_selection = 12;
		invalid_tz = true;
	}

	temp = nvm_eeprom_read_byte(TZ_MINUTES_EEPROM_ADDR);
    8066:	85 e0       	ldi	r24, 0x05	; 5
    8068:	90 e0       	ldi	r25, 0x00	; 0
    806a:	0e 94 5d 25 	call	0x4aba	; 0x4aba <nvm_eeprom_read_byte>
    806e:	c8 2f       	mov	r28, r24

	// Check if we have a valid timezone_minutes_menu index
	if(temp < 4) {
    8070:	84 30       	cpi	r24, 0x04	; 4
    8072:	c8 f0       	brcs	.+50     	; 0x80a6 <timezone_init+0x5a>
    8074:	0c c0       	rjmp	.+24     	; 0x808e <timezone_init+0x42>
	} else {
		/*
		 * Timezone is outside the range; reset to default and set
		 * invalid.
		 */
		tz_hours = 0;
    8076:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <tz_hours>
		tz_hours_menu.current_selection = 12;
    807a:	8c e0       	ldi	r24, 0x0C	; 12
    807c:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <tz_hours_menu+0x5>
		invalid_tz = true;
	}

	temp = nvm_eeprom_read_byte(TZ_MINUTES_EEPROM_ADDR);
    8080:	85 e0       	ldi	r24, 0x05	; 5
    8082:	90 e0       	ldi	r25, 0x00	; 0
    8084:	0e 94 5d 25 	call	0x4aba	; 0x4aba <nvm_eeprom_read_byte>
    8088:	c8 2f       	mov	r28, r24

	// Check if we have a valid timezone_minutes_menu index
	if(temp < 4) {
    808a:	84 30       	cpi	r24, 0x04	; 4
    808c:	30 f0       	brcs	.+12     	; 0x809a <timezone_init+0x4e>
		tz_minutes = tz_index_to_minutes(temp);
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
	} else {
		// Outside the range, reset to default and set invalid
		tz_minutes = 0;
    808e:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <tz_minutes>
		tz_minutes_menu.current_selection = 0;
    8092:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <tz_minutes_menu+0x5>
	if(invalid_tz == true) {
		/*
		 * One (or both) of the stored settings where invalid. start
		 * timezone selection.
		 */
		timezone_select_application();
    8096:	87 df       	rcall	.-242    	; 0x7fa6 <timezone_select_application>
	temp = nvm_eeprom_read_byte(TZ_MINUTES_EEPROM_ADDR);

	// Check if we have a valid timezone_minutes_menu index
	if(temp < 4) {
		// Convert to actual minutes from stored menu index
		tz_minutes = tz_index_to_minutes(temp);
    8098:	0b c0       	rjmp	.+22     	; 0x80b0 <timezone_init+0x64>
    809a:	71 df       	rcall	.-286    	; 0x7f7e <tz_index_to_minutes>
    809c:	80 93 73 2b 	sts	0x2B73, r24	; 0x802b73 <tz_minutes>
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
    80a0:	c0 93 2f 21 	sts	0x212F, r28	; 0x80212f <tz_minutes_menu+0x5>
	temp = nvm_eeprom_read_byte(TZ_MINUTES_EEPROM_ADDR);

	// Check if we have a valid timezone_minutes_menu index
	if(temp < 4) {
		// Convert to actual minutes from stored menu index
		tz_minutes = tz_index_to_minutes(temp);
    80a4:	f8 cf       	rjmp	.-16     	; 0x8096 <timezone_init+0x4a>
    80a6:	6b df       	rcall	.-298    	; 0x7f7e <tz_index_to_minutes>
    80a8:	80 93 73 2b 	sts	0x2B73, r24	; 0x802b73 <tz_minutes>
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
    80ac:	c0 93 2f 21 	sts	0x212F, r28	; 0x80212f <tz_minutes_menu+0x5>
		 * One (or both) of the stored settings where invalid. start
		 * timezone selection.
		 */
		timezone_select_application();
	}
}
    80b0:	cf 91       	pop	r28
    80b2:	08 95       	ret

000080b4 <__subsf3>:
    80b4:	50 58       	subi	r21, 0x80	; 128

000080b6 <__addsf3>:
    80b6:	bb 27       	eor	r27, r27
    80b8:	aa 27       	eor	r26, r26
    80ba:	0e d0       	rcall	.+28     	; 0x80d8 <__addsf3x>
    80bc:	e5 c0       	rjmp	.+458    	; 0x8288 <__fp_round>
    80be:	d6 d0       	rcall	.+428    	; 0x826c <__fp_pscA>
    80c0:	30 f0       	brcs	.+12     	; 0x80ce <__addsf3+0x18>
    80c2:	db d0       	rcall	.+438    	; 0x827a <__fp_pscB>
    80c4:	20 f0       	brcs	.+8      	; 0x80ce <__addsf3+0x18>
    80c6:	31 f4       	brne	.+12     	; 0x80d4 <__addsf3+0x1e>
    80c8:	9f 3f       	cpi	r25, 0xFF	; 255
    80ca:	11 f4       	brne	.+4      	; 0x80d0 <__addsf3+0x1a>
    80cc:	1e f4       	brtc	.+6      	; 0x80d4 <__addsf3+0x1e>
    80ce:	cb c0       	rjmp	.+406    	; 0x8266 <__fp_nan>
    80d0:	0e f4       	brtc	.+2      	; 0x80d4 <__addsf3+0x1e>
    80d2:	e0 95       	com	r30
    80d4:	e7 fb       	bst	r30, 7
    80d6:	c1 c0       	rjmp	.+386    	; 0x825a <__fp_inf>

000080d8 <__addsf3x>:
    80d8:	e9 2f       	mov	r30, r25
    80da:	e7 d0       	rcall	.+462    	; 0x82aa <__fp_split3>
    80dc:	80 f3       	brcs	.-32     	; 0x80be <__addsf3+0x8>
    80de:	ba 17       	cp	r27, r26
    80e0:	62 07       	cpc	r22, r18
    80e2:	73 07       	cpc	r23, r19
    80e4:	84 07       	cpc	r24, r20
    80e6:	95 07       	cpc	r25, r21
    80e8:	18 f0       	brcs	.+6      	; 0x80f0 <__addsf3x+0x18>
    80ea:	71 f4       	brne	.+28     	; 0x8108 <__addsf3x+0x30>
    80ec:	9e f5       	brtc	.+102    	; 0x8154 <__addsf3x+0x7c>
    80ee:	ff c0       	rjmp	.+510    	; 0x82ee <__fp_zero>
    80f0:	0e f4       	brtc	.+2      	; 0x80f4 <__addsf3x+0x1c>
    80f2:	e0 95       	com	r30
    80f4:	0b 2e       	mov	r0, r27
    80f6:	ba 2f       	mov	r27, r26
    80f8:	a0 2d       	mov	r26, r0
    80fa:	0b 01       	movw	r0, r22
    80fc:	b9 01       	movw	r22, r18
    80fe:	90 01       	movw	r18, r0
    8100:	0c 01       	movw	r0, r24
    8102:	ca 01       	movw	r24, r20
    8104:	a0 01       	movw	r20, r0
    8106:	11 24       	eor	r1, r1
    8108:	ff 27       	eor	r31, r31
    810a:	59 1b       	sub	r21, r25
    810c:	99 f0       	breq	.+38     	; 0x8134 <__addsf3x+0x5c>
    810e:	59 3f       	cpi	r21, 0xF9	; 249
    8110:	50 f4       	brcc	.+20     	; 0x8126 <__addsf3x+0x4e>
    8112:	50 3e       	cpi	r21, 0xE0	; 224
    8114:	68 f1       	brcs	.+90     	; 0x8170 <__addsf3x+0x98>
    8116:	1a 16       	cp	r1, r26
    8118:	f0 40       	sbci	r31, 0x00	; 0
    811a:	a2 2f       	mov	r26, r18
    811c:	23 2f       	mov	r18, r19
    811e:	34 2f       	mov	r19, r20
    8120:	44 27       	eor	r20, r20
    8122:	58 5f       	subi	r21, 0xF8	; 248
    8124:	f3 cf       	rjmp	.-26     	; 0x810c <__addsf3x+0x34>
    8126:	46 95       	lsr	r20
    8128:	37 95       	ror	r19
    812a:	27 95       	ror	r18
    812c:	a7 95       	ror	r26
    812e:	f0 40       	sbci	r31, 0x00	; 0
    8130:	53 95       	inc	r21
    8132:	c9 f7       	brne	.-14     	; 0x8126 <__addsf3x+0x4e>
    8134:	7e f4       	brtc	.+30     	; 0x8154 <__addsf3x+0x7c>
    8136:	1f 16       	cp	r1, r31
    8138:	ba 0b       	sbc	r27, r26
    813a:	62 0b       	sbc	r22, r18
    813c:	73 0b       	sbc	r23, r19
    813e:	84 0b       	sbc	r24, r20
    8140:	ba f0       	brmi	.+46     	; 0x8170 <__addsf3x+0x98>
    8142:	91 50       	subi	r25, 0x01	; 1
    8144:	a1 f0       	breq	.+40     	; 0x816e <__addsf3x+0x96>
    8146:	ff 0f       	add	r31, r31
    8148:	bb 1f       	adc	r27, r27
    814a:	66 1f       	adc	r22, r22
    814c:	77 1f       	adc	r23, r23
    814e:	88 1f       	adc	r24, r24
    8150:	c2 f7       	brpl	.-16     	; 0x8142 <__addsf3x+0x6a>
    8152:	0e c0       	rjmp	.+28     	; 0x8170 <__addsf3x+0x98>
    8154:	ba 0f       	add	r27, r26
    8156:	62 1f       	adc	r22, r18
    8158:	73 1f       	adc	r23, r19
    815a:	84 1f       	adc	r24, r20
    815c:	48 f4       	brcc	.+18     	; 0x8170 <__addsf3x+0x98>
    815e:	87 95       	ror	r24
    8160:	77 95       	ror	r23
    8162:	67 95       	ror	r22
    8164:	b7 95       	ror	r27
    8166:	f7 95       	ror	r31
    8168:	9e 3f       	cpi	r25, 0xFE	; 254
    816a:	08 f0       	brcs	.+2      	; 0x816e <__addsf3x+0x96>
    816c:	b3 cf       	rjmp	.-154    	; 0x80d4 <__addsf3+0x1e>
    816e:	93 95       	inc	r25
    8170:	88 0f       	add	r24, r24
    8172:	08 f0       	brcs	.+2      	; 0x8176 <__addsf3x+0x9e>
    8174:	99 27       	eor	r25, r25
    8176:	ee 0f       	add	r30, r30
    8178:	97 95       	ror	r25
    817a:	87 95       	ror	r24
    817c:	08 95       	ret

0000817e <__fixsfsi>:
    817e:	04 d0       	rcall	.+8      	; 0x8188 <__fixunssfsi>
    8180:	68 94       	set
    8182:	b1 11       	cpse	r27, r1
    8184:	b5 c0       	rjmp	.+362    	; 0x82f0 <__fp_szero>
    8186:	08 95       	ret

00008188 <__fixunssfsi>:
    8188:	98 d0       	rcall	.+304    	; 0x82ba <__fp_splitA>
    818a:	88 f0       	brcs	.+34     	; 0x81ae <__fixunssfsi+0x26>
    818c:	9f 57       	subi	r25, 0x7F	; 127
    818e:	90 f0       	brcs	.+36     	; 0x81b4 <__fixunssfsi+0x2c>
    8190:	b9 2f       	mov	r27, r25
    8192:	99 27       	eor	r25, r25
    8194:	b7 51       	subi	r27, 0x17	; 23
    8196:	a0 f0       	brcs	.+40     	; 0x81c0 <__fixunssfsi+0x38>
    8198:	d1 f0       	breq	.+52     	; 0x81ce <__fixunssfsi+0x46>
    819a:	66 0f       	add	r22, r22
    819c:	77 1f       	adc	r23, r23
    819e:	88 1f       	adc	r24, r24
    81a0:	99 1f       	adc	r25, r25
    81a2:	1a f0       	brmi	.+6      	; 0x81aa <__fixunssfsi+0x22>
    81a4:	ba 95       	dec	r27
    81a6:	c9 f7       	brne	.-14     	; 0x819a <__fixunssfsi+0x12>
    81a8:	12 c0       	rjmp	.+36     	; 0x81ce <__fixunssfsi+0x46>
    81aa:	b1 30       	cpi	r27, 0x01	; 1
    81ac:	81 f0       	breq	.+32     	; 0x81ce <__fixunssfsi+0x46>
    81ae:	9f d0       	rcall	.+318    	; 0x82ee <__fp_zero>
    81b0:	b1 e0       	ldi	r27, 0x01	; 1
    81b2:	08 95       	ret
    81b4:	9c c0       	rjmp	.+312    	; 0x82ee <__fp_zero>
    81b6:	67 2f       	mov	r22, r23
    81b8:	78 2f       	mov	r23, r24
    81ba:	88 27       	eor	r24, r24
    81bc:	b8 5f       	subi	r27, 0xF8	; 248
    81be:	39 f0       	breq	.+14     	; 0x81ce <__fixunssfsi+0x46>
    81c0:	b9 3f       	cpi	r27, 0xF9	; 249
    81c2:	cc f3       	brlt	.-14     	; 0x81b6 <__fixunssfsi+0x2e>
    81c4:	86 95       	lsr	r24
    81c6:	77 95       	ror	r23
    81c8:	67 95       	ror	r22
    81ca:	b3 95       	inc	r27
    81cc:	d9 f7       	brne	.-10     	; 0x81c4 <__fixunssfsi+0x3c>
    81ce:	3e f4       	brtc	.+14     	; 0x81de <__fixunssfsi+0x56>
    81d0:	90 95       	com	r25
    81d2:	80 95       	com	r24
    81d4:	70 95       	com	r23
    81d6:	61 95       	neg	r22
    81d8:	7f 4f       	sbci	r23, 0xFF	; 255
    81da:	8f 4f       	sbci	r24, 0xFF	; 255
    81dc:	9f 4f       	sbci	r25, 0xFF	; 255
    81de:	08 95       	ret

000081e0 <__floatunsisf>:
    81e0:	e8 94       	clt
    81e2:	09 c0       	rjmp	.+18     	; 0x81f6 <__floatsisf+0x12>

000081e4 <__floatsisf>:
    81e4:	97 fb       	bst	r25, 7
    81e6:	3e f4       	brtc	.+14     	; 0x81f6 <__floatsisf+0x12>
    81e8:	90 95       	com	r25
    81ea:	80 95       	com	r24
    81ec:	70 95       	com	r23
    81ee:	61 95       	neg	r22
    81f0:	7f 4f       	sbci	r23, 0xFF	; 255
    81f2:	8f 4f       	sbci	r24, 0xFF	; 255
    81f4:	9f 4f       	sbci	r25, 0xFF	; 255
    81f6:	99 23       	and	r25, r25
    81f8:	a9 f0       	breq	.+42     	; 0x8224 <__floatsisf+0x40>
    81fa:	f9 2f       	mov	r31, r25
    81fc:	96 e9       	ldi	r25, 0x96	; 150
    81fe:	bb 27       	eor	r27, r27
    8200:	93 95       	inc	r25
    8202:	f6 95       	lsr	r31
    8204:	87 95       	ror	r24
    8206:	77 95       	ror	r23
    8208:	67 95       	ror	r22
    820a:	b7 95       	ror	r27
    820c:	f1 11       	cpse	r31, r1
    820e:	f8 cf       	rjmp	.-16     	; 0x8200 <__floatsisf+0x1c>
    8210:	fa f4       	brpl	.+62     	; 0x8250 <__floatsisf+0x6c>
    8212:	bb 0f       	add	r27, r27
    8214:	11 f4       	brne	.+4      	; 0x821a <__floatsisf+0x36>
    8216:	60 ff       	sbrs	r22, 0
    8218:	1b c0       	rjmp	.+54     	; 0x8250 <__floatsisf+0x6c>
    821a:	6f 5f       	subi	r22, 0xFF	; 255
    821c:	7f 4f       	sbci	r23, 0xFF	; 255
    821e:	8f 4f       	sbci	r24, 0xFF	; 255
    8220:	9f 4f       	sbci	r25, 0xFF	; 255
    8222:	16 c0       	rjmp	.+44     	; 0x8250 <__floatsisf+0x6c>
    8224:	88 23       	and	r24, r24
    8226:	11 f0       	breq	.+4      	; 0x822c <__floatsisf+0x48>
    8228:	96 e9       	ldi	r25, 0x96	; 150
    822a:	11 c0       	rjmp	.+34     	; 0x824e <__floatsisf+0x6a>
    822c:	77 23       	and	r23, r23
    822e:	21 f0       	breq	.+8      	; 0x8238 <__floatsisf+0x54>
    8230:	9e e8       	ldi	r25, 0x8E	; 142
    8232:	87 2f       	mov	r24, r23
    8234:	76 2f       	mov	r23, r22
    8236:	05 c0       	rjmp	.+10     	; 0x8242 <__floatsisf+0x5e>
    8238:	66 23       	and	r22, r22
    823a:	71 f0       	breq	.+28     	; 0x8258 <__floatsisf+0x74>
    823c:	96 e8       	ldi	r25, 0x86	; 134
    823e:	86 2f       	mov	r24, r22
    8240:	70 e0       	ldi	r23, 0x00	; 0
    8242:	60 e0       	ldi	r22, 0x00	; 0
    8244:	2a f0       	brmi	.+10     	; 0x8250 <__floatsisf+0x6c>
    8246:	9a 95       	dec	r25
    8248:	66 0f       	add	r22, r22
    824a:	77 1f       	adc	r23, r23
    824c:	88 1f       	adc	r24, r24
    824e:	da f7       	brpl	.-10     	; 0x8246 <__floatsisf+0x62>
    8250:	88 0f       	add	r24, r24
    8252:	96 95       	lsr	r25
    8254:	87 95       	ror	r24
    8256:	97 f9       	bld	r25, 7
    8258:	08 95       	ret

0000825a <__fp_inf>:
    825a:	97 f9       	bld	r25, 7
    825c:	9f 67       	ori	r25, 0x7F	; 127
    825e:	80 e8       	ldi	r24, 0x80	; 128
    8260:	70 e0       	ldi	r23, 0x00	; 0
    8262:	60 e0       	ldi	r22, 0x00	; 0
    8264:	08 95       	ret

00008266 <__fp_nan>:
    8266:	9f ef       	ldi	r25, 0xFF	; 255
    8268:	80 ec       	ldi	r24, 0xC0	; 192
    826a:	08 95       	ret

0000826c <__fp_pscA>:
    826c:	00 24       	eor	r0, r0
    826e:	0a 94       	dec	r0
    8270:	16 16       	cp	r1, r22
    8272:	17 06       	cpc	r1, r23
    8274:	18 06       	cpc	r1, r24
    8276:	09 06       	cpc	r0, r25
    8278:	08 95       	ret

0000827a <__fp_pscB>:
    827a:	00 24       	eor	r0, r0
    827c:	0a 94       	dec	r0
    827e:	12 16       	cp	r1, r18
    8280:	13 06       	cpc	r1, r19
    8282:	14 06       	cpc	r1, r20
    8284:	05 06       	cpc	r0, r21
    8286:	08 95       	ret

00008288 <__fp_round>:
    8288:	09 2e       	mov	r0, r25
    828a:	03 94       	inc	r0
    828c:	00 0c       	add	r0, r0
    828e:	11 f4       	brne	.+4      	; 0x8294 <__fp_round+0xc>
    8290:	88 23       	and	r24, r24
    8292:	52 f0       	brmi	.+20     	; 0x82a8 <__fp_round+0x20>
    8294:	bb 0f       	add	r27, r27
    8296:	40 f4       	brcc	.+16     	; 0x82a8 <__fp_round+0x20>
    8298:	bf 2b       	or	r27, r31
    829a:	11 f4       	brne	.+4      	; 0x82a0 <__fp_round+0x18>
    829c:	60 ff       	sbrs	r22, 0
    829e:	04 c0       	rjmp	.+8      	; 0x82a8 <__fp_round+0x20>
    82a0:	6f 5f       	subi	r22, 0xFF	; 255
    82a2:	7f 4f       	sbci	r23, 0xFF	; 255
    82a4:	8f 4f       	sbci	r24, 0xFF	; 255
    82a6:	9f 4f       	sbci	r25, 0xFF	; 255
    82a8:	08 95       	ret

000082aa <__fp_split3>:
    82aa:	57 fd       	sbrc	r21, 7
    82ac:	90 58       	subi	r25, 0x80	; 128
    82ae:	44 0f       	add	r20, r20
    82b0:	55 1f       	adc	r21, r21
    82b2:	59 f0       	breq	.+22     	; 0x82ca <__fp_splitA+0x10>
    82b4:	5f 3f       	cpi	r21, 0xFF	; 255
    82b6:	71 f0       	breq	.+28     	; 0x82d4 <__fp_splitA+0x1a>
    82b8:	47 95       	ror	r20

000082ba <__fp_splitA>:
    82ba:	88 0f       	add	r24, r24
    82bc:	97 fb       	bst	r25, 7
    82be:	99 1f       	adc	r25, r25
    82c0:	61 f0       	breq	.+24     	; 0x82da <__fp_splitA+0x20>
    82c2:	9f 3f       	cpi	r25, 0xFF	; 255
    82c4:	79 f0       	breq	.+30     	; 0x82e4 <__fp_splitA+0x2a>
    82c6:	87 95       	ror	r24
    82c8:	08 95       	ret
    82ca:	12 16       	cp	r1, r18
    82cc:	13 06       	cpc	r1, r19
    82ce:	14 06       	cpc	r1, r20
    82d0:	55 1f       	adc	r21, r21
    82d2:	f2 cf       	rjmp	.-28     	; 0x82b8 <__fp_split3+0xe>
    82d4:	46 95       	lsr	r20
    82d6:	f1 df       	rcall	.-30     	; 0x82ba <__fp_splitA>
    82d8:	08 c0       	rjmp	.+16     	; 0x82ea <__fp_splitA+0x30>
    82da:	16 16       	cp	r1, r22
    82dc:	17 06       	cpc	r1, r23
    82de:	18 06       	cpc	r1, r24
    82e0:	99 1f       	adc	r25, r25
    82e2:	f1 cf       	rjmp	.-30     	; 0x82c6 <__fp_splitA+0xc>
    82e4:	86 95       	lsr	r24
    82e6:	71 05       	cpc	r23, r1
    82e8:	61 05       	cpc	r22, r1
    82ea:	08 94       	sec
    82ec:	08 95       	ret

000082ee <__fp_zero>:
    82ee:	e8 94       	clt

000082f0 <__fp_szero>:
    82f0:	bb 27       	eor	r27, r27
    82f2:	66 27       	eor	r22, r22
    82f4:	77 27       	eor	r23, r23
    82f6:	cb 01       	movw	r24, r22
    82f8:	97 f9       	bld	r25, 7
    82fa:	08 95       	ret

000082fc <__mulsf3>:
    82fc:	0b d0       	rcall	.+22     	; 0x8314 <__mulsf3x>
    82fe:	c4 cf       	rjmp	.-120    	; 0x8288 <__fp_round>
    8300:	b5 df       	rcall	.-150    	; 0x826c <__fp_pscA>
    8302:	28 f0       	brcs	.+10     	; 0x830e <__mulsf3+0x12>
    8304:	ba df       	rcall	.-140    	; 0x827a <__fp_pscB>
    8306:	18 f0       	brcs	.+6      	; 0x830e <__mulsf3+0x12>
    8308:	95 23       	and	r25, r21
    830a:	09 f0       	breq	.+2      	; 0x830e <__mulsf3+0x12>
    830c:	a6 cf       	rjmp	.-180    	; 0x825a <__fp_inf>
    830e:	ab cf       	rjmp	.-170    	; 0x8266 <__fp_nan>
    8310:	11 24       	eor	r1, r1
    8312:	ee cf       	rjmp	.-36     	; 0x82f0 <__fp_szero>

00008314 <__mulsf3x>:
    8314:	ca df       	rcall	.-108    	; 0x82aa <__fp_split3>
    8316:	a0 f3       	brcs	.-24     	; 0x8300 <__mulsf3+0x4>

00008318 <__mulsf3_pse>:
    8318:	95 9f       	mul	r25, r21
    831a:	d1 f3       	breq	.-12     	; 0x8310 <__mulsf3+0x14>
    831c:	95 0f       	add	r25, r21
    831e:	50 e0       	ldi	r21, 0x00	; 0
    8320:	55 1f       	adc	r21, r21
    8322:	62 9f       	mul	r22, r18
    8324:	f0 01       	movw	r30, r0
    8326:	72 9f       	mul	r23, r18
    8328:	bb 27       	eor	r27, r27
    832a:	f0 0d       	add	r31, r0
    832c:	b1 1d       	adc	r27, r1
    832e:	63 9f       	mul	r22, r19
    8330:	aa 27       	eor	r26, r26
    8332:	f0 0d       	add	r31, r0
    8334:	b1 1d       	adc	r27, r1
    8336:	aa 1f       	adc	r26, r26
    8338:	64 9f       	mul	r22, r20
    833a:	66 27       	eor	r22, r22
    833c:	b0 0d       	add	r27, r0
    833e:	a1 1d       	adc	r26, r1
    8340:	66 1f       	adc	r22, r22
    8342:	82 9f       	mul	r24, r18
    8344:	22 27       	eor	r18, r18
    8346:	b0 0d       	add	r27, r0
    8348:	a1 1d       	adc	r26, r1
    834a:	62 1f       	adc	r22, r18
    834c:	73 9f       	mul	r23, r19
    834e:	b0 0d       	add	r27, r0
    8350:	a1 1d       	adc	r26, r1
    8352:	62 1f       	adc	r22, r18
    8354:	83 9f       	mul	r24, r19
    8356:	a0 0d       	add	r26, r0
    8358:	61 1d       	adc	r22, r1
    835a:	22 1f       	adc	r18, r18
    835c:	74 9f       	mul	r23, r20
    835e:	33 27       	eor	r19, r19
    8360:	a0 0d       	add	r26, r0
    8362:	61 1d       	adc	r22, r1
    8364:	23 1f       	adc	r18, r19
    8366:	84 9f       	mul	r24, r20
    8368:	60 0d       	add	r22, r0
    836a:	21 1d       	adc	r18, r1
    836c:	82 2f       	mov	r24, r18
    836e:	76 2f       	mov	r23, r22
    8370:	6a 2f       	mov	r22, r26
    8372:	11 24       	eor	r1, r1
    8374:	9f 57       	subi	r25, 0x7F	; 127
    8376:	50 40       	sbci	r21, 0x00	; 0
    8378:	8a f0       	brmi	.+34     	; 0x839c <__mulsf3_pse+0x84>
    837a:	e1 f0       	breq	.+56     	; 0x83b4 <__mulsf3_pse+0x9c>
    837c:	88 23       	and	r24, r24
    837e:	4a f0       	brmi	.+18     	; 0x8392 <__mulsf3_pse+0x7a>
    8380:	ee 0f       	add	r30, r30
    8382:	ff 1f       	adc	r31, r31
    8384:	bb 1f       	adc	r27, r27
    8386:	66 1f       	adc	r22, r22
    8388:	77 1f       	adc	r23, r23
    838a:	88 1f       	adc	r24, r24
    838c:	91 50       	subi	r25, 0x01	; 1
    838e:	50 40       	sbci	r21, 0x00	; 0
    8390:	a9 f7       	brne	.-22     	; 0x837c <__mulsf3_pse+0x64>
    8392:	9e 3f       	cpi	r25, 0xFE	; 254
    8394:	51 05       	cpc	r21, r1
    8396:	70 f0       	brcs	.+28     	; 0x83b4 <__mulsf3_pse+0x9c>
    8398:	60 cf       	rjmp	.-320    	; 0x825a <__fp_inf>
    839a:	aa cf       	rjmp	.-172    	; 0x82f0 <__fp_szero>
    839c:	5f 3f       	cpi	r21, 0xFF	; 255
    839e:	ec f3       	brlt	.-6      	; 0x839a <__mulsf3_pse+0x82>
    83a0:	98 3e       	cpi	r25, 0xE8	; 232
    83a2:	dc f3       	brlt	.-10     	; 0x839a <__mulsf3_pse+0x82>
    83a4:	86 95       	lsr	r24
    83a6:	77 95       	ror	r23
    83a8:	67 95       	ror	r22
    83aa:	b7 95       	ror	r27
    83ac:	f7 95       	ror	r31
    83ae:	e7 95       	ror	r30
    83b0:	9f 5f       	subi	r25, 0xFF	; 255
    83b2:	c1 f7       	brne	.-16     	; 0x83a4 <__mulsf3_pse+0x8c>
    83b4:	fe 2b       	or	r31, r30
    83b6:	88 0f       	add	r24, r24
    83b8:	91 1d       	adc	r25, r1
    83ba:	96 95       	lsr	r25
    83bc:	87 95       	ror	r24
    83be:	97 f9       	bld	r25, 7
    83c0:	08 95       	ret

000083c2 <__udivmodhi4>:
    83c2:	aa 1b       	sub	r26, r26
    83c4:	bb 1b       	sub	r27, r27
    83c6:	51 e1       	ldi	r21, 0x11	; 17
    83c8:	07 c0       	rjmp	.+14     	; 0x83d8 <__udivmodhi4_ep>

000083ca <__udivmodhi4_loop>:
    83ca:	aa 1f       	adc	r26, r26
    83cc:	bb 1f       	adc	r27, r27
    83ce:	a6 17       	cp	r26, r22
    83d0:	b7 07       	cpc	r27, r23
    83d2:	10 f0       	brcs	.+4      	; 0x83d8 <__udivmodhi4_ep>
    83d4:	a6 1b       	sub	r26, r22
    83d6:	b7 0b       	sbc	r27, r23

000083d8 <__udivmodhi4_ep>:
    83d8:	88 1f       	adc	r24, r24
    83da:	99 1f       	adc	r25, r25
    83dc:	5a 95       	dec	r21
    83de:	a9 f7       	brne	.-22     	; 0x83ca <__udivmodhi4_loop>
    83e0:	80 95       	com	r24
    83e2:	90 95       	com	r25
    83e4:	bc 01       	movw	r22, r24
    83e6:	cd 01       	movw	r24, r26
    83e8:	08 95       	ret

000083ea <__udivmodsi4>:
    83ea:	a1 e2       	ldi	r26, 0x21	; 33
    83ec:	1a 2e       	mov	r1, r26
    83ee:	aa 1b       	sub	r26, r26
    83f0:	bb 1b       	sub	r27, r27
    83f2:	fd 01       	movw	r30, r26
    83f4:	0d c0       	rjmp	.+26     	; 0x8410 <__udivmodsi4_ep>

000083f6 <__udivmodsi4_loop>:
    83f6:	aa 1f       	adc	r26, r26
    83f8:	bb 1f       	adc	r27, r27
    83fa:	ee 1f       	adc	r30, r30
    83fc:	ff 1f       	adc	r31, r31
    83fe:	a2 17       	cp	r26, r18
    8400:	b3 07       	cpc	r27, r19
    8402:	e4 07       	cpc	r30, r20
    8404:	f5 07       	cpc	r31, r21
    8406:	20 f0       	brcs	.+8      	; 0x8410 <__udivmodsi4_ep>
    8408:	a2 1b       	sub	r26, r18
    840a:	b3 0b       	sbc	r27, r19
    840c:	e4 0b       	sbc	r30, r20
    840e:	f5 0b       	sbc	r31, r21

00008410 <__udivmodsi4_ep>:
    8410:	66 1f       	adc	r22, r22
    8412:	77 1f       	adc	r23, r23
    8414:	88 1f       	adc	r24, r24
    8416:	99 1f       	adc	r25, r25
    8418:	1a 94       	dec	r1
    841a:	69 f7       	brne	.-38     	; 0x83f6 <__udivmodsi4_loop>
    841c:	60 95       	com	r22
    841e:	70 95       	com	r23
    8420:	80 95       	com	r24
    8422:	90 95       	com	r25
    8424:	9b 01       	movw	r18, r22
    8426:	ac 01       	movw	r20, r24
    8428:	bd 01       	movw	r22, r26
    842a:	cf 01       	movw	r24, r30
    842c:	08 95       	ret

0000842e <__tablejump2__>:
    842e:	ee 0f       	add	r30, r30
    8430:	ff 1f       	adc	r31, r31
    8432:	88 1f       	adc	r24, r24
    8434:	8b bf       	out	0x3b, r24	; 59
    8436:	07 90       	elpm	r0, Z+
    8438:	f6 91       	elpm	r31, Z
    843a:	e0 2d       	mov	r30, r0
    843c:	19 94       	eijmp

0000843e <__umulhisi3>:
    843e:	a2 9f       	mul	r26, r18
    8440:	b0 01       	movw	r22, r0
    8442:	b3 9f       	mul	r27, r19
    8444:	c0 01       	movw	r24, r0
    8446:	a3 9f       	mul	r26, r19
    8448:	70 0d       	add	r23, r0
    844a:	81 1d       	adc	r24, r1
    844c:	11 24       	eor	r1, r1
    844e:	91 1d       	adc	r25, r1
    8450:	b2 9f       	mul	r27, r18
    8452:	70 0d       	add	r23, r0
    8454:	81 1d       	adc	r24, r1
    8456:	11 24       	eor	r1, r1
    8458:	91 1d       	adc	r25, r1
    845a:	08 95       	ret

0000845c <__usmulhisi3>:
    845c:	f0 df       	rcall	.-32     	; 0x843e <__umulhisi3>

0000845e <__usmulhisi3_tail>:
    845e:	b7 ff       	sbrs	r27, 7
    8460:	08 95       	ret
    8462:	82 1b       	sub	r24, r18
    8464:	93 0b       	sbc	r25, r19
    8466:	08 95       	ret

00008468 <__muluhisi3>:
    8468:	ea df       	rcall	.-44     	; 0x843e <__umulhisi3>
    846a:	a5 9f       	mul	r26, r21
    846c:	90 0d       	add	r25, r0
    846e:	b4 9f       	mul	r27, r20
    8470:	90 0d       	add	r25, r0
    8472:	a4 9f       	mul	r26, r20
    8474:	80 0d       	add	r24, r0
    8476:	91 1d       	adc	r25, r1
    8478:	11 24       	eor	r1, r1
    847a:	08 95       	ret

0000847c <__prologue_saves__>:
    847c:	2f 92       	push	r2
    847e:	3f 92       	push	r3
    8480:	4f 92       	push	r4
    8482:	5f 92       	push	r5
    8484:	6f 92       	push	r6
    8486:	7f 92       	push	r7
    8488:	8f 92       	push	r8
    848a:	9f 92       	push	r9
    848c:	af 92       	push	r10
    848e:	bf 92       	push	r11
    8490:	cf 92       	push	r12
    8492:	df 92       	push	r13
    8494:	ef 92       	push	r14
    8496:	ff 92       	push	r15
    8498:	0f 93       	push	r16
    849a:	1f 93       	push	r17
    849c:	cf 93       	push	r28
    849e:	df 93       	push	r29
    84a0:	cd b7       	in	r28, 0x3d	; 61
    84a2:	de b7       	in	r29, 0x3e	; 62
    84a4:	ca 1b       	sub	r28, r26
    84a6:	db 0b       	sbc	r29, r27
    84a8:	cd bf       	out	0x3d, r28	; 61
    84aa:	de bf       	out	0x3e, r29	; 62
    84ac:	19 94       	eijmp

000084ae <__epilogue_restores__>:
    84ae:	2a 88       	ldd	r2, Y+18	; 0x12
    84b0:	39 88       	ldd	r3, Y+17	; 0x11
    84b2:	48 88       	ldd	r4, Y+16	; 0x10
    84b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    84b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    84b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    84ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    84bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    84be:	aa 84       	ldd	r10, Y+10	; 0x0a
    84c0:	b9 84       	ldd	r11, Y+9	; 0x09
    84c2:	c8 84       	ldd	r12, Y+8	; 0x08
    84c4:	df 80       	ldd	r13, Y+7	; 0x07
    84c6:	ee 80       	ldd	r14, Y+6	; 0x06
    84c8:	fd 80       	ldd	r15, Y+5	; 0x05
    84ca:	0c 81       	ldd	r16, Y+4	; 0x04
    84cc:	1b 81       	ldd	r17, Y+3	; 0x03
    84ce:	aa 81       	ldd	r26, Y+2	; 0x02
    84d0:	b9 81       	ldd	r27, Y+1	; 0x01
    84d2:	ce 0f       	add	r28, r30
    84d4:	d1 1d       	adc	r29, r1
    84d6:	cd bf       	out	0x3d, r28	; 61
    84d8:	de bf       	out	0x3e, r29	; 62
    84da:	ed 01       	movw	r28, r26
    84dc:	08 95       	ret

000084de <memcpy>:
    84de:	fb 01       	movw	r30, r22
    84e0:	dc 01       	movw	r26, r24
    84e2:	02 c0       	rjmp	.+4      	; 0x84e8 <memcpy+0xa>
    84e4:	01 90       	ld	r0, Z+
    84e6:	0d 92       	st	X+, r0
    84e8:	41 50       	subi	r20, 0x01	; 1
    84ea:	50 40       	sbci	r21, 0x00	; 0
    84ec:	d8 f7       	brcc	.-10     	; 0x84e4 <memcpy+0x6>
    84ee:	08 95       	ret

000084f0 <snprintf>:
    84f0:	0f 93       	push	r16
    84f2:	1f 93       	push	r17
    84f4:	cf 93       	push	r28
    84f6:	df 93       	push	r29
    84f8:	cd b7       	in	r28, 0x3d	; 61
    84fa:	de b7       	in	r29, 0x3e	; 62
    84fc:	2e 97       	sbiw	r28, 0x0e	; 14
    84fe:	cd bf       	out	0x3d, r28	; 61
    8500:	de bf       	out	0x3e, r29	; 62
    8502:	0e 89       	ldd	r16, Y+22	; 0x16
    8504:	1f 89       	ldd	r17, Y+23	; 0x17
    8506:	88 8d       	ldd	r24, Y+24	; 0x18
    8508:	99 8d       	ldd	r25, Y+25	; 0x19
    850a:	26 e0       	ldi	r18, 0x06	; 6
    850c:	2c 83       	std	Y+4, r18	; 0x04
    850e:	09 83       	std	Y+1, r16	; 0x01
    8510:	1a 83       	std	Y+2, r17	; 0x02
    8512:	97 ff       	sbrs	r25, 7
    8514:	02 c0       	rjmp	.+4      	; 0x851a <snprintf+0x2a>
    8516:	80 e0       	ldi	r24, 0x00	; 0
    8518:	90 e8       	ldi	r25, 0x80	; 128
    851a:	01 97       	sbiw	r24, 0x01	; 1
    851c:	8d 83       	std	Y+5, r24	; 0x05
    851e:	9e 83       	std	Y+6, r25	; 0x06
    8520:	ae 01       	movw	r20, r28
    8522:	44 5e       	subi	r20, 0xE4	; 228
    8524:	5f 4f       	sbci	r21, 0xFF	; 255
    8526:	6a 8d       	ldd	r22, Y+26	; 0x1a
    8528:	7b 8d       	ldd	r23, Y+27	; 0x1b
    852a:	ce 01       	movw	r24, r28
    852c:	01 96       	adiw	r24, 0x01	; 1
    852e:	16 d0       	rcall	.+44     	; 0x855c <vfprintf>
    8530:	4d 81       	ldd	r20, Y+5	; 0x05
    8532:	5e 81       	ldd	r21, Y+6	; 0x06
    8534:	57 fd       	sbrc	r21, 7
    8536:	0a c0       	rjmp	.+20     	; 0x854c <snprintf+0x5c>
    8538:	2f 81       	ldd	r18, Y+7	; 0x07
    853a:	38 85       	ldd	r19, Y+8	; 0x08
    853c:	42 17       	cp	r20, r18
    853e:	53 07       	cpc	r21, r19
    8540:	0c f4       	brge	.+2      	; 0x8544 <snprintf+0x54>
    8542:	9a 01       	movw	r18, r20
    8544:	f8 01       	movw	r30, r16
    8546:	e2 0f       	add	r30, r18
    8548:	f3 1f       	adc	r31, r19
    854a:	10 82       	st	Z, r1
    854c:	2e 96       	adiw	r28, 0x0e	; 14
    854e:	cd bf       	out	0x3d, r28	; 61
    8550:	de bf       	out	0x3e, r29	; 62
    8552:	df 91       	pop	r29
    8554:	cf 91       	pop	r28
    8556:	1f 91       	pop	r17
    8558:	0f 91       	pop	r16
    855a:	08 95       	ret

0000855c <vfprintf>:
    855c:	2f 92       	push	r2
    855e:	3f 92       	push	r3
    8560:	4f 92       	push	r4
    8562:	5f 92       	push	r5
    8564:	6f 92       	push	r6
    8566:	7f 92       	push	r7
    8568:	8f 92       	push	r8
    856a:	9f 92       	push	r9
    856c:	af 92       	push	r10
    856e:	bf 92       	push	r11
    8570:	cf 92       	push	r12
    8572:	df 92       	push	r13
    8574:	ef 92       	push	r14
    8576:	ff 92       	push	r15
    8578:	0f 93       	push	r16
    857a:	1f 93       	push	r17
    857c:	cf 93       	push	r28
    857e:	df 93       	push	r29
    8580:	cd b7       	in	r28, 0x3d	; 61
    8582:	de b7       	in	r29, 0x3e	; 62
    8584:	2b 97       	sbiw	r28, 0x0b	; 11
    8586:	cd bf       	out	0x3d, r28	; 61
    8588:	de bf       	out	0x3e, r29	; 62
    858a:	6c 01       	movw	r12, r24
    858c:	7b 01       	movw	r14, r22
    858e:	8a 01       	movw	r16, r20
    8590:	fc 01       	movw	r30, r24
    8592:	16 82       	std	Z+6, r1	; 0x06
    8594:	17 82       	std	Z+7, r1	; 0x07
    8596:	83 81       	ldd	r24, Z+3	; 0x03
    8598:	81 ff       	sbrs	r24, 1
    859a:	bf c1       	rjmp	.+894    	; 0x891a <vfprintf+0x3be>
    859c:	ce 01       	movw	r24, r28
    859e:	01 96       	adiw	r24, 0x01	; 1
    85a0:	3c 01       	movw	r6, r24
    85a2:	f6 01       	movw	r30, r12
    85a4:	93 81       	ldd	r25, Z+3	; 0x03
    85a6:	f7 01       	movw	r30, r14
    85a8:	93 fd       	sbrc	r25, 3
    85aa:	85 91       	lpm	r24, Z+
    85ac:	93 ff       	sbrs	r25, 3
    85ae:	81 91       	ld	r24, Z+
    85b0:	7f 01       	movw	r14, r30
    85b2:	88 23       	and	r24, r24
    85b4:	09 f4       	brne	.+2      	; 0x85b8 <vfprintf+0x5c>
    85b6:	ad c1       	rjmp	.+858    	; 0x8912 <vfprintf+0x3b6>
    85b8:	85 32       	cpi	r24, 0x25	; 37
    85ba:	39 f4       	brne	.+14     	; 0x85ca <vfprintf+0x6e>
    85bc:	93 fd       	sbrc	r25, 3
    85be:	85 91       	lpm	r24, Z+
    85c0:	93 ff       	sbrs	r25, 3
    85c2:	81 91       	ld	r24, Z+
    85c4:	7f 01       	movw	r14, r30
    85c6:	85 32       	cpi	r24, 0x25	; 37
    85c8:	21 f4       	brne	.+8      	; 0x85d2 <vfprintf+0x76>
    85ca:	b6 01       	movw	r22, r12
    85cc:	90 e0       	ldi	r25, 0x00	; 0
    85ce:	d3 d1       	rcall	.+934    	; 0x8976 <fputc>
    85d0:	e8 cf       	rjmp	.-48     	; 0x85a2 <vfprintf+0x46>
    85d2:	91 2c       	mov	r9, r1
    85d4:	21 2c       	mov	r2, r1
    85d6:	31 2c       	mov	r3, r1
    85d8:	ff e1       	ldi	r31, 0x1F	; 31
    85da:	f3 15       	cp	r31, r3
    85dc:	d8 f0       	brcs	.+54     	; 0x8614 <vfprintf+0xb8>
    85de:	8b 32       	cpi	r24, 0x2B	; 43
    85e0:	79 f0       	breq	.+30     	; 0x8600 <vfprintf+0xa4>
    85e2:	38 f4       	brcc	.+14     	; 0x85f2 <vfprintf+0x96>
    85e4:	80 32       	cpi	r24, 0x20	; 32
    85e6:	79 f0       	breq	.+30     	; 0x8606 <vfprintf+0xaa>
    85e8:	83 32       	cpi	r24, 0x23	; 35
    85ea:	a1 f4       	brne	.+40     	; 0x8614 <vfprintf+0xb8>
    85ec:	23 2d       	mov	r18, r3
    85ee:	20 61       	ori	r18, 0x10	; 16
    85f0:	1d c0       	rjmp	.+58     	; 0x862c <vfprintf+0xd0>
    85f2:	8d 32       	cpi	r24, 0x2D	; 45
    85f4:	61 f0       	breq	.+24     	; 0x860e <vfprintf+0xb2>
    85f6:	80 33       	cpi	r24, 0x30	; 48
    85f8:	69 f4       	brne	.+26     	; 0x8614 <vfprintf+0xb8>
    85fa:	23 2d       	mov	r18, r3
    85fc:	21 60       	ori	r18, 0x01	; 1
    85fe:	16 c0       	rjmp	.+44     	; 0x862c <vfprintf+0xd0>
    8600:	83 2d       	mov	r24, r3
    8602:	82 60       	ori	r24, 0x02	; 2
    8604:	38 2e       	mov	r3, r24
    8606:	e3 2d       	mov	r30, r3
    8608:	e4 60       	ori	r30, 0x04	; 4
    860a:	3e 2e       	mov	r3, r30
    860c:	2a c0       	rjmp	.+84     	; 0x8662 <vfprintf+0x106>
    860e:	f3 2d       	mov	r31, r3
    8610:	f8 60       	ori	r31, 0x08	; 8
    8612:	1d c0       	rjmp	.+58     	; 0x864e <vfprintf+0xf2>
    8614:	37 fc       	sbrc	r3, 7
    8616:	2d c0       	rjmp	.+90     	; 0x8672 <vfprintf+0x116>
    8618:	20 ed       	ldi	r18, 0xD0	; 208
    861a:	28 0f       	add	r18, r24
    861c:	2a 30       	cpi	r18, 0x0A	; 10
    861e:	40 f0       	brcs	.+16     	; 0x8630 <vfprintf+0xd4>
    8620:	8e 32       	cpi	r24, 0x2E	; 46
    8622:	b9 f4       	brne	.+46     	; 0x8652 <vfprintf+0xf6>
    8624:	36 fc       	sbrc	r3, 6
    8626:	75 c1       	rjmp	.+746    	; 0x8912 <vfprintf+0x3b6>
    8628:	23 2d       	mov	r18, r3
    862a:	20 64       	ori	r18, 0x40	; 64
    862c:	32 2e       	mov	r3, r18
    862e:	19 c0       	rjmp	.+50     	; 0x8662 <vfprintf+0x106>
    8630:	36 fe       	sbrs	r3, 6
    8632:	06 c0       	rjmp	.+12     	; 0x8640 <vfprintf+0xe4>
    8634:	8a e0       	ldi	r24, 0x0A	; 10
    8636:	98 9e       	mul	r9, r24
    8638:	20 0d       	add	r18, r0
    863a:	11 24       	eor	r1, r1
    863c:	92 2e       	mov	r9, r18
    863e:	11 c0       	rjmp	.+34     	; 0x8662 <vfprintf+0x106>
    8640:	ea e0       	ldi	r30, 0x0A	; 10
    8642:	2e 9e       	mul	r2, r30
    8644:	20 0d       	add	r18, r0
    8646:	11 24       	eor	r1, r1
    8648:	22 2e       	mov	r2, r18
    864a:	f3 2d       	mov	r31, r3
    864c:	f0 62       	ori	r31, 0x20	; 32
    864e:	3f 2e       	mov	r3, r31
    8650:	08 c0       	rjmp	.+16     	; 0x8662 <vfprintf+0x106>
    8652:	8c 36       	cpi	r24, 0x6C	; 108
    8654:	21 f4       	brne	.+8      	; 0x865e <vfprintf+0x102>
    8656:	83 2d       	mov	r24, r3
    8658:	80 68       	ori	r24, 0x80	; 128
    865a:	38 2e       	mov	r3, r24
    865c:	02 c0       	rjmp	.+4      	; 0x8662 <vfprintf+0x106>
    865e:	88 36       	cpi	r24, 0x68	; 104
    8660:	41 f4       	brne	.+16     	; 0x8672 <vfprintf+0x116>
    8662:	f7 01       	movw	r30, r14
    8664:	93 fd       	sbrc	r25, 3
    8666:	85 91       	lpm	r24, Z+
    8668:	93 ff       	sbrs	r25, 3
    866a:	81 91       	ld	r24, Z+
    866c:	7f 01       	movw	r14, r30
    866e:	81 11       	cpse	r24, r1
    8670:	b3 cf       	rjmp	.-154    	; 0x85d8 <vfprintf+0x7c>
    8672:	98 2f       	mov	r25, r24
    8674:	9f 7d       	andi	r25, 0xDF	; 223
    8676:	95 54       	subi	r25, 0x45	; 69
    8678:	93 30       	cpi	r25, 0x03	; 3
    867a:	28 f4       	brcc	.+10     	; 0x8686 <vfprintf+0x12a>
    867c:	0c 5f       	subi	r16, 0xFC	; 252
    867e:	1f 4f       	sbci	r17, 0xFF	; 255
    8680:	9f e3       	ldi	r25, 0x3F	; 63
    8682:	99 83       	std	Y+1, r25	; 0x01
    8684:	0d c0       	rjmp	.+26     	; 0x86a0 <vfprintf+0x144>
    8686:	83 36       	cpi	r24, 0x63	; 99
    8688:	31 f0       	breq	.+12     	; 0x8696 <vfprintf+0x13a>
    868a:	83 37       	cpi	r24, 0x73	; 115
    868c:	71 f0       	breq	.+28     	; 0x86aa <vfprintf+0x14e>
    868e:	83 35       	cpi	r24, 0x53	; 83
    8690:	09 f0       	breq	.+2      	; 0x8694 <vfprintf+0x138>
    8692:	55 c0       	rjmp	.+170    	; 0x873e <vfprintf+0x1e2>
    8694:	20 c0       	rjmp	.+64     	; 0x86d6 <vfprintf+0x17a>
    8696:	f8 01       	movw	r30, r16
    8698:	80 81       	ld	r24, Z
    869a:	89 83       	std	Y+1, r24	; 0x01
    869c:	0e 5f       	subi	r16, 0xFE	; 254
    869e:	1f 4f       	sbci	r17, 0xFF	; 255
    86a0:	88 24       	eor	r8, r8
    86a2:	83 94       	inc	r8
    86a4:	91 2c       	mov	r9, r1
    86a6:	53 01       	movw	r10, r6
    86a8:	12 c0       	rjmp	.+36     	; 0x86ce <vfprintf+0x172>
    86aa:	28 01       	movw	r4, r16
    86ac:	f2 e0       	ldi	r31, 0x02	; 2
    86ae:	4f 0e       	add	r4, r31
    86b0:	51 1c       	adc	r5, r1
    86b2:	f8 01       	movw	r30, r16
    86b4:	a0 80       	ld	r10, Z
    86b6:	b1 80       	ldd	r11, Z+1	; 0x01
    86b8:	36 fe       	sbrs	r3, 6
    86ba:	03 c0       	rjmp	.+6      	; 0x86c2 <vfprintf+0x166>
    86bc:	69 2d       	mov	r22, r9
    86be:	70 e0       	ldi	r23, 0x00	; 0
    86c0:	02 c0       	rjmp	.+4      	; 0x86c6 <vfprintf+0x16a>
    86c2:	6f ef       	ldi	r22, 0xFF	; 255
    86c4:	7f ef       	ldi	r23, 0xFF	; 255
    86c6:	c5 01       	movw	r24, r10
    86c8:	4b d1       	rcall	.+662    	; 0x8960 <strnlen>
    86ca:	4c 01       	movw	r8, r24
    86cc:	82 01       	movw	r16, r4
    86ce:	f3 2d       	mov	r31, r3
    86d0:	ff 77       	andi	r31, 0x7F	; 127
    86d2:	3f 2e       	mov	r3, r31
    86d4:	15 c0       	rjmp	.+42     	; 0x8700 <vfprintf+0x1a4>
    86d6:	28 01       	movw	r4, r16
    86d8:	22 e0       	ldi	r18, 0x02	; 2
    86da:	42 0e       	add	r4, r18
    86dc:	51 1c       	adc	r5, r1
    86de:	f8 01       	movw	r30, r16
    86e0:	a0 80       	ld	r10, Z
    86e2:	b1 80       	ldd	r11, Z+1	; 0x01
    86e4:	36 fe       	sbrs	r3, 6
    86e6:	03 c0       	rjmp	.+6      	; 0x86ee <vfprintf+0x192>
    86e8:	69 2d       	mov	r22, r9
    86ea:	70 e0       	ldi	r23, 0x00	; 0
    86ec:	02 c0       	rjmp	.+4      	; 0x86f2 <vfprintf+0x196>
    86ee:	6f ef       	ldi	r22, 0xFF	; 255
    86f0:	7f ef       	ldi	r23, 0xFF	; 255
    86f2:	c5 01       	movw	r24, r10
    86f4:	2a d1       	rcall	.+596    	; 0x894a <strnlen_P>
    86f6:	4c 01       	movw	r8, r24
    86f8:	f3 2d       	mov	r31, r3
    86fa:	f0 68       	ori	r31, 0x80	; 128
    86fc:	3f 2e       	mov	r3, r31
    86fe:	82 01       	movw	r16, r4
    8700:	33 fc       	sbrc	r3, 3
    8702:	19 c0       	rjmp	.+50     	; 0x8736 <vfprintf+0x1da>
    8704:	82 2d       	mov	r24, r2
    8706:	90 e0       	ldi	r25, 0x00	; 0
    8708:	88 16       	cp	r8, r24
    870a:	99 06       	cpc	r9, r25
    870c:	a0 f4       	brcc	.+40     	; 0x8736 <vfprintf+0x1da>
    870e:	b6 01       	movw	r22, r12
    8710:	80 e2       	ldi	r24, 0x20	; 32
    8712:	90 e0       	ldi	r25, 0x00	; 0
    8714:	30 d1       	rcall	.+608    	; 0x8976 <fputc>
    8716:	2a 94       	dec	r2
    8718:	f5 cf       	rjmp	.-22     	; 0x8704 <vfprintf+0x1a8>
    871a:	f5 01       	movw	r30, r10
    871c:	37 fc       	sbrc	r3, 7
    871e:	85 91       	lpm	r24, Z+
    8720:	37 fe       	sbrs	r3, 7
    8722:	81 91       	ld	r24, Z+
    8724:	5f 01       	movw	r10, r30
    8726:	b6 01       	movw	r22, r12
    8728:	90 e0       	ldi	r25, 0x00	; 0
    872a:	25 d1       	rcall	.+586    	; 0x8976 <fputc>
    872c:	21 10       	cpse	r2, r1
    872e:	2a 94       	dec	r2
    8730:	21 e0       	ldi	r18, 0x01	; 1
    8732:	82 1a       	sub	r8, r18
    8734:	91 08       	sbc	r9, r1
    8736:	81 14       	cp	r8, r1
    8738:	91 04       	cpc	r9, r1
    873a:	79 f7       	brne	.-34     	; 0x871a <vfprintf+0x1be>
    873c:	e1 c0       	rjmp	.+450    	; 0x8900 <vfprintf+0x3a4>
    873e:	84 36       	cpi	r24, 0x64	; 100
    8740:	11 f0       	breq	.+4      	; 0x8746 <vfprintf+0x1ea>
    8742:	89 36       	cpi	r24, 0x69	; 105
    8744:	39 f5       	brne	.+78     	; 0x8794 <vfprintf+0x238>
    8746:	f8 01       	movw	r30, r16
    8748:	37 fe       	sbrs	r3, 7
    874a:	07 c0       	rjmp	.+14     	; 0x875a <vfprintf+0x1fe>
    874c:	60 81       	ld	r22, Z
    874e:	71 81       	ldd	r23, Z+1	; 0x01
    8750:	82 81       	ldd	r24, Z+2	; 0x02
    8752:	93 81       	ldd	r25, Z+3	; 0x03
    8754:	0c 5f       	subi	r16, 0xFC	; 252
    8756:	1f 4f       	sbci	r17, 0xFF	; 255
    8758:	08 c0       	rjmp	.+16     	; 0x876a <vfprintf+0x20e>
    875a:	60 81       	ld	r22, Z
    875c:	71 81       	ldd	r23, Z+1	; 0x01
    875e:	07 2e       	mov	r0, r23
    8760:	00 0c       	add	r0, r0
    8762:	88 0b       	sbc	r24, r24
    8764:	99 0b       	sbc	r25, r25
    8766:	0e 5f       	subi	r16, 0xFE	; 254
    8768:	1f 4f       	sbci	r17, 0xFF	; 255
    876a:	f3 2d       	mov	r31, r3
    876c:	ff 76       	andi	r31, 0x6F	; 111
    876e:	3f 2e       	mov	r3, r31
    8770:	97 ff       	sbrs	r25, 7
    8772:	09 c0       	rjmp	.+18     	; 0x8786 <vfprintf+0x22a>
    8774:	90 95       	com	r25
    8776:	80 95       	com	r24
    8778:	70 95       	com	r23
    877a:	61 95       	neg	r22
    877c:	7f 4f       	sbci	r23, 0xFF	; 255
    877e:	8f 4f       	sbci	r24, 0xFF	; 255
    8780:	9f 4f       	sbci	r25, 0xFF	; 255
    8782:	f0 68       	ori	r31, 0x80	; 128
    8784:	3f 2e       	mov	r3, r31
    8786:	2a e0       	ldi	r18, 0x0A	; 10
    8788:	30 e0       	ldi	r19, 0x00	; 0
    878a:	a3 01       	movw	r20, r6
    878c:	30 d1       	rcall	.+608    	; 0x89ee <__ultoa_invert>
    878e:	88 2e       	mov	r8, r24
    8790:	86 18       	sub	r8, r6
    8792:	44 c0       	rjmp	.+136    	; 0x881c <vfprintf+0x2c0>
    8794:	85 37       	cpi	r24, 0x75	; 117
    8796:	31 f4       	brne	.+12     	; 0x87a4 <vfprintf+0x248>
    8798:	23 2d       	mov	r18, r3
    879a:	2f 7e       	andi	r18, 0xEF	; 239
    879c:	b2 2e       	mov	r11, r18
    879e:	2a e0       	ldi	r18, 0x0A	; 10
    87a0:	30 e0       	ldi	r19, 0x00	; 0
    87a2:	25 c0       	rjmp	.+74     	; 0x87ee <vfprintf+0x292>
    87a4:	93 2d       	mov	r25, r3
    87a6:	99 7f       	andi	r25, 0xF9	; 249
    87a8:	b9 2e       	mov	r11, r25
    87aa:	8f 36       	cpi	r24, 0x6F	; 111
    87ac:	c1 f0       	breq	.+48     	; 0x87de <vfprintf+0x282>
    87ae:	18 f4       	brcc	.+6      	; 0x87b6 <vfprintf+0x25a>
    87b0:	88 35       	cpi	r24, 0x58	; 88
    87b2:	79 f0       	breq	.+30     	; 0x87d2 <vfprintf+0x276>
    87b4:	ae c0       	rjmp	.+348    	; 0x8912 <vfprintf+0x3b6>
    87b6:	80 37       	cpi	r24, 0x70	; 112
    87b8:	19 f0       	breq	.+6      	; 0x87c0 <vfprintf+0x264>
    87ba:	88 37       	cpi	r24, 0x78	; 120
    87bc:	21 f0       	breq	.+8      	; 0x87c6 <vfprintf+0x26a>
    87be:	a9 c0       	rjmp	.+338    	; 0x8912 <vfprintf+0x3b6>
    87c0:	e9 2f       	mov	r30, r25
    87c2:	e0 61       	ori	r30, 0x10	; 16
    87c4:	be 2e       	mov	r11, r30
    87c6:	b4 fe       	sbrs	r11, 4
    87c8:	0d c0       	rjmp	.+26     	; 0x87e4 <vfprintf+0x288>
    87ca:	fb 2d       	mov	r31, r11
    87cc:	f4 60       	ori	r31, 0x04	; 4
    87ce:	bf 2e       	mov	r11, r31
    87d0:	09 c0       	rjmp	.+18     	; 0x87e4 <vfprintf+0x288>
    87d2:	34 fe       	sbrs	r3, 4
    87d4:	0a c0       	rjmp	.+20     	; 0x87ea <vfprintf+0x28e>
    87d6:	29 2f       	mov	r18, r25
    87d8:	26 60       	ori	r18, 0x06	; 6
    87da:	b2 2e       	mov	r11, r18
    87dc:	06 c0       	rjmp	.+12     	; 0x87ea <vfprintf+0x28e>
    87de:	28 e0       	ldi	r18, 0x08	; 8
    87e0:	30 e0       	ldi	r19, 0x00	; 0
    87e2:	05 c0       	rjmp	.+10     	; 0x87ee <vfprintf+0x292>
    87e4:	20 e1       	ldi	r18, 0x10	; 16
    87e6:	30 e0       	ldi	r19, 0x00	; 0
    87e8:	02 c0       	rjmp	.+4      	; 0x87ee <vfprintf+0x292>
    87ea:	20 e1       	ldi	r18, 0x10	; 16
    87ec:	32 e0       	ldi	r19, 0x02	; 2
    87ee:	f8 01       	movw	r30, r16
    87f0:	b7 fe       	sbrs	r11, 7
    87f2:	07 c0       	rjmp	.+14     	; 0x8802 <vfprintf+0x2a6>
    87f4:	60 81       	ld	r22, Z
    87f6:	71 81       	ldd	r23, Z+1	; 0x01
    87f8:	82 81       	ldd	r24, Z+2	; 0x02
    87fa:	93 81       	ldd	r25, Z+3	; 0x03
    87fc:	0c 5f       	subi	r16, 0xFC	; 252
    87fe:	1f 4f       	sbci	r17, 0xFF	; 255
    8800:	06 c0       	rjmp	.+12     	; 0x880e <vfprintf+0x2b2>
    8802:	60 81       	ld	r22, Z
    8804:	71 81       	ldd	r23, Z+1	; 0x01
    8806:	80 e0       	ldi	r24, 0x00	; 0
    8808:	90 e0       	ldi	r25, 0x00	; 0
    880a:	0e 5f       	subi	r16, 0xFE	; 254
    880c:	1f 4f       	sbci	r17, 0xFF	; 255
    880e:	a3 01       	movw	r20, r6
    8810:	ee d0       	rcall	.+476    	; 0x89ee <__ultoa_invert>
    8812:	88 2e       	mov	r8, r24
    8814:	86 18       	sub	r8, r6
    8816:	fb 2d       	mov	r31, r11
    8818:	ff 77       	andi	r31, 0x7F	; 127
    881a:	3f 2e       	mov	r3, r31
    881c:	36 fe       	sbrs	r3, 6
    881e:	0d c0       	rjmp	.+26     	; 0x883a <vfprintf+0x2de>
    8820:	23 2d       	mov	r18, r3
    8822:	2e 7f       	andi	r18, 0xFE	; 254
    8824:	a2 2e       	mov	r10, r18
    8826:	89 14       	cp	r8, r9
    8828:	58 f4       	brcc	.+22     	; 0x8840 <vfprintf+0x2e4>
    882a:	34 fe       	sbrs	r3, 4
    882c:	0b c0       	rjmp	.+22     	; 0x8844 <vfprintf+0x2e8>
    882e:	32 fc       	sbrc	r3, 2
    8830:	09 c0       	rjmp	.+18     	; 0x8844 <vfprintf+0x2e8>
    8832:	83 2d       	mov	r24, r3
    8834:	8e 7e       	andi	r24, 0xEE	; 238
    8836:	a8 2e       	mov	r10, r24
    8838:	05 c0       	rjmp	.+10     	; 0x8844 <vfprintf+0x2e8>
    883a:	b8 2c       	mov	r11, r8
    883c:	a3 2c       	mov	r10, r3
    883e:	03 c0       	rjmp	.+6      	; 0x8846 <vfprintf+0x2ea>
    8840:	b8 2c       	mov	r11, r8
    8842:	01 c0       	rjmp	.+2      	; 0x8846 <vfprintf+0x2ea>
    8844:	b9 2c       	mov	r11, r9
    8846:	a4 fe       	sbrs	r10, 4
    8848:	0f c0       	rjmp	.+30     	; 0x8868 <vfprintf+0x30c>
    884a:	fe 01       	movw	r30, r28
    884c:	e8 0d       	add	r30, r8
    884e:	f1 1d       	adc	r31, r1
    8850:	80 81       	ld	r24, Z
    8852:	80 33       	cpi	r24, 0x30	; 48
    8854:	21 f4       	brne	.+8      	; 0x885e <vfprintf+0x302>
    8856:	9a 2d       	mov	r25, r10
    8858:	99 7e       	andi	r25, 0xE9	; 233
    885a:	a9 2e       	mov	r10, r25
    885c:	09 c0       	rjmp	.+18     	; 0x8870 <vfprintf+0x314>
    885e:	a2 fe       	sbrs	r10, 2
    8860:	06 c0       	rjmp	.+12     	; 0x886e <vfprintf+0x312>
    8862:	b3 94       	inc	r11
    8864:	b3 94       	inc	r11
    8866:	04 c0       	rjmp	.+8      	; 0x8870 <vfprintf+0x314>
    8868:	8a 2d       	mov	r24, r10
    886a:	86 78       	andi	r24, 0x86	; 134
    886c:	09 f0       	breq	.+2      	; 0x8870 <vfprintf+0x314>
    886e:	b3 94       	inc	r11
    8870:	a3 fc       	sbrc	r10, 3
    8872:	10 c0       	rjmp	.+32     	; 0x8894 <vfprintf+0x338>
    8874:	a0 fe       	sbrs	r10, 0
    8876:	06 c0       	rjmp	.+12     	; 0x8884 <vfprintf+0x328>
    8878:	b2 14       	cp	r11, r2
    887a:	80 f4       	brcc	.+32     	; 0x889c <vfprintf+0x340>
    887c:	28 0c       	add	r2, r8
    887e:	92 2c       	mov	r9, r2
    8880:	9b 18       	sub	r9, r11
    8882:	0d c0       	rjmp	.+26     	; 0x889e <vfprintf+0x342>
    8884:	b2 14       	cp	r11, r2
    8886:	58 f4       	brcc	.+22     	; 0x889e <vfprintf+0x342>
    8888:	b6 01       	movw	r22, r12
    888a:	80 e2       	ldi	r24, 0x20	; 32
    888c:	90 e0       	ldi	r25, 0x00	; 0
    888e:	73 d0       	rcall	.+230    	; 0x8976 <fputc>
    8890:	b3 94       	inc	r11
    8892:	f8 cf       	rjmp	.-16     	; 0x8884 <vfprintf+0x328>
    8894:	b2 14       	cp	r11, r2
    8896:	18 f4       	brcc	.+6      	; 0x889e <vfprintf+0x342>
    8898:	2b 18       	sub	r2, r11
    889a:	02 c0       	rjmp	.+4      	; 0x88a0 <vfprintf+0x344>
    889c:	98 2c       	mov	r9, r8
    889e:	21 2c       	mov	r2, r1
    88a0:	a4 fe       	sbrs	r10, 4
    88a2:	0f c0       	rjmp	.+30     	; 0x88c2 <vfprintf+0x366>
    88a4:	b6 01       	movw	r22, r12
    88a6:	80 e3       	ldi	r24, 0x30	; 48
    88a8:	90 e0       	ldi	r25, 0x00	; 0
    88aa:	65 d0       	rcall	.+202    	; 0x8976 <fputc>
    88ac:	a2 fe       	sbrs	r10, 2
    88ae:	16 c0       	rjmp	.+44     	; 0x88dc <vfprintf+0x380>
    88b0:	a1 fc       	sbrc	r10, 1
    88b2:	03 c0       	rjmp	.+6      	; 0x88ba <vfprintf+0x35e>
    88b4:	88 e7       	ldi	r24, 0x78	; 120
    88b6:	90 e0       	ldi	r25, 0x00	; 0
    88b8:	02 c0       	rjmp	.+4      	; 0x88be <vfprintf+0x362>
    88ba:	88 e5       	ldi	r24, 0x58	; 88
    88bc:	90 e0       	ldi	r25, 0x00	; 0
    88be:	b6 01       	movw	r22, r12
    88c0:	0c c0       	rjmp	.+24     	; 0x88da <vfprintf+0x37e>
    88c2:	8a 2d       	mov	r24, r10
    88c4:	86 78       	andi	r24, 0x86	; 134
    88c6:	51 f0       	breq	.+20     	; 0x88dc <vfprintf+0x380>
    88c8:	a1 fe       	sbrs	r10, 1
    88ca:	02 c0       	rjmp	.+4      	; 0x88d0 <vfprintf+0x374>
    88cc:	8b e2       	ldi	r24, 0x2B	; 43
    88ce:	01 c0       	rjmp	.+2      	; 0x88d2 <vfprintf+0x376>
    88d0:	80 e2       	ldi	r24, 0x20	; 32
    88d2:	a7 fc       	sbrc	r10, 7
    88d4:	8d e2       	ldi	r24, 0x2D	; 45
    88d6:	b6 01       	movw	r22, r12
    88d8:	90 e0       	ldi	r25, 0x00	; 0
    88da:	4d d0       	rcall	.+154    	; 0x8976 <fputc>
    88dc:	89 14       	cp	r8, r9
    88de:	30 f4       	brcc	.+12     	; 0x88ec <vfprintf+0x390>
    88e0:	b6 01       	movw	r22, r12
    88e2:	80 e3       	ldi	r24, 0x30	; 48
    88e4:	90 e0       	ldi	r25, 0x00	; 0
    88e6:	47 d0       	rcall	.+142    	; 0x8976 <fputc>
    88e8:	9a 94       	dec	r9
    88ea:	f8 cf       	rjmp	.-16     	; 0x88dc <vfprintf+0x380>
    88ec:	8a 94       	dec	r8
    88ee:	f3 01       	movw	r30, r6
    88f0:	e8 0d       	add	r30, r8
    88f2:	f1 1d       	adc	r31, r1
    88f4:	80 81       	ld	r24, Z
    88f6:	b6 01       	movw	r22, r12
    88f8:	90 e0       	ldi	r25, 0x00	; 0
    88fa:	3d d0       	rcall	.+122    	; 0x8976 <fputc>
    88fc:	81 10       	cpse	r8, r1
    88fe:	f6 cf       	rjmp	.-20     	; 0x88ec <vfprintf+0x390>
    8900:	22 20       	and	r2, r2
    8902:	09 f4       	brne	.+2      	; 0x8906 <vfprintf+0x3aa>
    8904:	4e ce       	rjmp	.-868    	; 0x85a2 <vfprintf+0x46>
    8906:	b6 01       	movw	r22, r12
    8908:	80 e2       	ldi	r24, 0x20	; 32
    890a:	90 e0       	ldi	r25, 0x00	; 0
    890c:	34 d0       	rcall	.+104    	; 0x8976 <fputc>
    890e:	2a 94       	dec	r2
    8910:	f7 cf       	rjmp	.-18     	; 0x8900 <vfprintf+0x3a4>
    8912:	f6 01       	movw	r30, r12
    8914:	86 81       	ldd	r24, Z+6	; 0x06
    8916:	97 81       	ldd	r25, Z+7	; 0x07
    8918:	02 c0       	rjmp	.+4      	; 0x891e <vfprintf+0x3c2>
    891a:	8f ef       	ldi	r24, 0xFF	; 255
    891c:	9f ef       	ldi	r25, 0xFF	; 255
    891e:	2b 96       	adiw	r28, 0x0b	; 11
    8920:	cd bf       	out	0x3d, r28	; 61
    8922:	de bf       	out	0x3e, r29	; 62
    8924:	df 91       	pop	r29
    8926:	cf 91       	pop	r28
    8928:	1f 91       	pop	r17
    892a:	0f 91       	pop	r16
    892c:	ff 90       	pop	r15
    892e:	ef 90       	pop	r14
    8930:	df 90       	pop	r13
    8932:	cf 90       	pop	r12
    8934:	bf 90       	pop	r11
    8936:	af 90       	pop	r10
    8938:	9f 90       	pop	r9
    893a:	8f 90       	pop	r8
    893c:	7f 90       	pop	r7
    893e:	6f 90       	pop	r6
    8940:	5f 90       	pop	r5
    8942:	4f 90       	pop	r4
    8944:	3f 90       	pop	r3
    8946:	2f 90       	pop	r2
    8948:	08 95       	ret

0000894a <strnlen_P>:
    894a:	fc 01       	movw	r30, r24
    894c:	05 90       	lpm	r0, Z+
    894e:	61 50       	subi	r22, 0x01	; 1
    8950:	70 40       	sbci	r23, 0x00	; 0
    8952:	01 10       	cpse	r0, r1
    8954:	d8 f7       	brcc	.-10     	; 0x894c <strnlen_P+0x2>
    8956:	80 95       	com	r24
    8958:	90 95       	com	r25
    895a:	8e 0f       	add	r24, r30
    895c:	9f 1f       	adc	r25, r31
    895e:	08 95       	ret

00008960 <strnlen>:
    8960:	fc 01       	movw	r30, r24
    8962:	61 50       	subi	r22, 0x01	; 1
    8964:	70 40       	sbci	r23, 0x00	; 0
    8966:	01 90       	ld	r0, Z+
    8968:	01 10       	cpse	r0, r1
    896a:	d8 f7       	brcc	.-10     	; 0x8962 <strnlen+0x2>
    896c:	80 95       	com	r24
    896e:	90 95       	com	r25
    8970:	8e 0f       	add	r24, r30
    8972:	9f 1f       	adc	r25, r31
    8974:	08 95       	ret

00008976 <fputc>:
    8976:	0f 93       	push	r16
    8978:	1f 93       	push	r17
    897a:	cf 93       	push	r28
    897c:	df 93       	push	r29
    897e:	fb 01       	movw	r30, r22
    8980:	23 81       	ldd	r18, Z+3	; 0x03
    8982:	21 fd       	sbrc	r18, 1
    8984:	03 c0       	rjmp	.+6      	; 0x898c <fputc+0x16>
    8986:	8f ef       	ldi	r24, 0xFF	; 255
    8988:	9f ef       	ldi	r25, 0xFF	; 255
    898a:	2c c0       	rjmp	.+88     	; 0x89e4 <fputc+0x6e>
    898c:	22 ff       	sbrs	r18, 2
    898e:	16 c0       	rjmp	.+44     	; 0x89bc <fputc+0x46>
    8990:	46 81       	ldd	r20, Z+6	; 0x06
    8992:	57 81       	ldd	r21, Z+7	; 0x07
    8994:	24 81       	ldd	r18, Z+4	; 0x04
    8996:	35 81       	ldd	r19, Z+5	; 0x05
    8998:	42 17       	cp	r20, r18
    899a:	53 07       	cpc	r21, r19
    899c:	44 f4       	brge	.+16     	; 0x89ae <fputc+0x38>
    899e:	a0 81       	ld	r26, Z
    89a0:	b1 81       	ldd	r27, Z+1	; 0x01
    89a2:	9d 01       	movw	r18, r26
    89a4:	2f 5f       	subi	r18, 0xFF	; 255
    89a6:	3f 4f       	sbci	r19, 0xFF	; 255
    89a8:	20 83       	st	Z, r18
    89aa:	31 83       	std	Z+1, r19	; 0x01
    89ac:	8c 93       	st	X, r24
    89ae:	26 81       	ldd	r18, Z+6	; 0x06
    89b0:	37 81       	ldd	r19, Z+7	; 0x07
    89b2:	2f 5f       	subi	r18, 0xFF	; 255
    89b4:	3f 4f       	sbci	r19, 0xFF	; 255
    89b6:	26 83       	std	Z+6, r18	; 0x06
    89b8:	37 83       	std	Z+7, r19	; 0x07
    89ba:	14 c0       	rjmp	.+40     	; 0x89e4 <fputc+0x6e>
    89bc:	8b 01       	movw	r16, r22
    89be:	ec 01       	movw	r28, r24
    89c0:	fb 01       	movw	r30, r22
    89c2:	00 84       	ldd	r0, Z+8	; 0x08
    89c4:	f1 85       	ldd	r31, Z+9	; 0x09
    89c6:	e0 2d       	mov	r30, r0
    89c8:	19 95       	eicall
    89ca:	89 2b       	or	r24, r25
    89cc:	e1 f6       	brne	.-72     	; 0x8986 <fputc+0x10>
    89ce:	d8 01       	movw	r26, r16
    89d0:	16 96       	adiw	r26, 0x06	; 6
    89d2:	8d 91       	ld	r24, X+
    89d4:	9c 91       	ld	r25, X
    89d6:	17 97       	sbiw	r26, 0x07	; 7
    89d8:	01 96       	adiw	r24, 0x01	; 1
    89da:	16 96       	adiw	r26, 0x06	; 6
    89dc:	8d 93       	st	X+, r24
    89de:	9c 93       	st	X, r25
    89e0:	17 97       	sbiw	r26, 0x07	; 7
    89e2:	ce 01       	movw	r24, r28
    89e4:	df 91       	pop	r29
    89e6:	cf 91       	pop	r28
    89e8:	1f 91       	pop	r17
    89ea:	0f 91       	pop	r16
    89ec:	08 95       	ret

000089ee <__ultoa_invert>:
    89ee:	fa 01       	movw	r30, r20
    89f0:	aa 27       	eor	r26, r26
    89f2:	28 30       	cpi	r18, 0x08	; 8
    89f4:	51 f1       	breq	.+84     	; 0x8a4a <__ultoa_invert+0x5c>
    89f6:	20 31       	cpi	r18, 0x10	; 16
    89f8:	81 f1       	breq	.+96     	; 0x8a5a <__ultoa_invert+0x6c>
    89fa:	e8 94       	clt
    89fc:	6f 93       	push	r22
    89fe:	6e 7f       	andi	r22, 0xFE	; 254
    8a00:	6e 5f       	subi	r22, 0xFE	; 254
    8a02:	7f 4f       	sbci	r23, 0xFF	; 255
    8a04:	8f 4f       	sbci	r24, 0xFF	; 255
    8a06:	9f 4f       	sbci	r25, 0xFF	; 255
    8a08:	af 4f       	sbci	r26, 0xFF	; 255
    8a0a:	b1 e0       	ldi	r27, 0x01	; 1
    8a0c:	3e d0       	rcall	.+124    	; 0x8a8a <__ultoa_invert+0x9c>
    8a0e:	b4 e0       	ldi	r27, 0x04	; 4
    8a10:	3c d0       	rcall	.+120    	; 0x8a8a <__ultoa_invert+0x9c>
    8a12:	67 0f       	add	r22, r23
    8a14:	78 1f       	adc	r23, r24
    8a16:	89 1f       	adc	r24, r25
    8a18:	9a 1f       	adc	r25, r26
    8a1a:	a1 1d       	adc	r26, r1
    8a1c:	68 0f       	add	r22, r24
    8a1e:	79 1f       	adc	r23, r25
    8a20:	8a 1f       	adc	r24, r26
    8a22:	91 1d       	adc	r25, r1
    8a24:	a1 1d       	adc	r26, r1
    8a26:	6a 0f       	add	r22, r26
    8a28:	71 1d       	adc	r23, r1
    8a2a:	81 1d       	adc	r24, r1
    8a2c:	91 1d       	adc	r25, r1
    8a2e:	a1 1d       	adc	r26, r1
    8a30:	20 d0       	rcall	.+64     	; 0x8a72 <__ultoa_invert+0x84>
    8a32:	09 f4       	brne	.+2      	; 0x8a36 <__ultoa_invert+0x48>
    8a34:	68 94       	set
    8a36:	3f 91       	pop	r19
    8a38:	2a e0       	ldi	r18, 0x0A	; 10
    8a3a:	26 9f       	mul	r18, r22
    8a3c:	11 24       	eor	r1, r1
    8a3e:	30 19       	sub	r19, r0
    8a40:	30 5d       	subi	r19, 0xD0	; 208
    8a42:	31 93       	st	Z+, r19
    8a44:	de f6       	brtc	.-74     	; 0x89fc <__ultoa_invert+0xe>
    8a46:	cf 01       	movw	r24, r30
    8a48:	08 95       	ret
    8a4a:	46 2f       	mov	r20, r22
    8a4c:	47 70       	andi	r20, 0x07	; 7
    8a4e:	40 5d       	subi	r20, 0xD0	; 208
    8a50:	41 93       	st	Z+, r20
    8a52:	b3 e0       	ldi	r27, 0x03	; 3
    8a54:	0f d0       	rcall	.+30     	; 0x8a74 <__ultoa_invert+0x86>
    8a56:	c9 f7       	brne	.-14     	; 0x8a4a <__ultoa_invert+0x5c>
    8a58:	f6 cf       	rjmp	.-20     	; 0x8a46 <__ultoa_invert+0x58>
    8a5a:	46 2f       	mov	r20, r22
    8a5c:	4f 70       	andi	r20, 0x0F	; 15
    8a5e:	40 5d       	subi	r20, 0xD0	; 208
    8a60:	4a 33       	cpi	r20, 0x3A	; 58
    8a62:	18 f0       	brcs	.+6      	; 0x8a6a <__ultoa_invert+0x7c>
    8a64:	49 5d       	subi	r20, 0xD9	; 217
    8a66:	31 fd       	sbrc	r19, 1
    8a68:	40 52       	subi	r20, 0x20	; 32
    8a6a:	41 93       	st	Z+, r20
    8a6c:	02 d0       	rcall	.+4      	; 0x8a72 <__ultoa_invert+0x84>
    8a6e:	a9 f7       	brne	.-22     	; 0x8a5a <__ultoa_invert+0x6c>
    8a70:	ea cf       	rjmp	.-44     	; 0x8a46 <__ultoa_invert+0x58>
    8a72:	b4 e0       	ldi	r27, 0x04	; 4
    8a74:	a6 95       	lsr	r26
    8a76:	97 95       	ror	r25
    8a78:	87 95       	ror	r24
    8a7a:	77 95       	ror	r23
    8a7c:	67 95       	ror	r22
    8a7e:	ba 95       	dec	r27
    8a80:	c9 f7       	brne	.-14     	; 0x8a74 <__ultoa_invert+0x86>
    8a82:	00 97       	sbiw	r24, 0x00	; 0
    8a84:	61 05       	cpc	r22, r1
    8a86:	71 05       	cpc	r23, r1
    8a88:	08 95       	ret
    8a8a:	9b 01       	movw	r18, r22
    8a8c:	ac 01       	movw	r20, r24
    8a8e:	0a 2e       	mov	r0, r26
    8a90:	06 94       	lsr	r0
    8a92:	57 95       	ror	r21
    8a94:	47 95       	ror	r20
    8a96:	37 95       	ror	r19
    8a98:	27 95       	ror	r18
    8a9a:	ba 95       	dec	r27
    8a9c:	c9 f7       	brne	.-14     	; 0x8a90 <__ultoa_invert+0xa2>
    8a9e:	62 0f       	add	r22, r18
    8aa0:	73 1f       	adc	r23, r19
    8aa2:	84 1f       	adc	r24, r20
    8aa4:	95 1f       	adc	r25, r21
    8aa6:	a0 1d       	adc	r26, r0
    8aa8:	08 95       	ret

00008aaa <_exit>:
    8aaa:	f8 94       	cli

00008aac <__stop_program>:
    8aac:	ff cf       	rjmp	.-2      	; 0x8aac <__stop_program>
