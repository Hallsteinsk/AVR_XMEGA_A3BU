
EXAMPLE_SPINCTRL1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  000020ce  00002162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000202  0080201c  0080201c  0000217e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000217e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000021dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00002220  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e173  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c38  00000000  00000000  000106e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007db5  00000000  00000000  0001531b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a80  00000000  00000000  0001d0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00031e48  00000000  00000000  0001db50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005fc5  00000000  00000000  0004f998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  0005595d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c124  00000000  00000000  00055d85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	69 c2       	rjmp	.+1234   	; 0x4d4 <__ctors_end>
       2:	00 00       	nop
       4:	88 c2       	rjmp	.+1296   	; 0x516 <__bad_interrupt>
       6:	00 00       	nop
       8:	86 c2       	rjmp	.+1292   	; 0x516 <__bad_interrupt>
       a:	00 00       	nop
       c:	84 c2       	rjmp	.+1288   	; 0x516 <__bad_interrupt>
       e:	00 00       	nop
      10:	82 c2       	rjmp	.+1284   	; 0x516 <__bad_interrupt>
      12:	00 00       	nop
      14:	80 c2       	rjmp	.+1280   	; 0x516 <__bad_interrupt>
      16:	00 00       	nop
      18:	7e c2       	rjmp	.+1276   	; 0x516 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7c c2       	rjmp	.+1272   	; 0x516 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7a c2       	rjmp	.+1268   	; 0x516 <__bad_interrupt>
      22:	00 00       	nop
      24:	78 c2       	rjmp	.+1264   	; 0x516 <__bad_interrupt>
      26:	00 00       	nop
      28:	76 c2       	rjmp	.+1260   	; 0x516 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	74 c2       	rjmp	.+1256   	; 0x516 <__bad_interrupt>
      2e:	00 00       	nop
      30:	72 c2       	rjmp	.+1252   	; 0x516 <__bad_interrupt>
      32:	00 00       	nop
      34:	70 c2       	rjmp	.+1248   	; 0x516 <__bad_interrupt>
      36:	00 00       	nop
      38:	6e c2       	rjmp	.+1244   	; 0x516 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6c c2       	rjmp	.+1240   	; 0x516 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6a c2       	rjmp	.+1236   	; 0x516 <__bad_interrupt>
      42:	00 00       	nop
      44:	68 c2       	rjmp	.+1232   	; 0x516 <__bad_interrupt>
      46:	00 00       	nop
      48:	66 c2       	rjmp	.+1228   	; 0x516 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	64 c2       	rjmp	.+1224   	; 0x516 <__bad_interrupt>
      4e:	00 00       	nop
      50:	62 c2       	rjmp	.+1220   	; 0x516 <__bad_interrupt>
      52:	00 00       	nop
      54:	60 c2       	rjmp	.+1216   	; 0x516 <__bad_interrupt>
      56:	00 00       	nop
      58:	5e c2       	rjmp	.+1212   	; 0x516 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5c c2       	rjmp	.+1208   	; 0x516 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5a c2       	rjmp	.+1204   	; 0x516 <__bad_interrupt>
      62:	00 00       	nop
      64:	58 c2       	rjmp	.+1200   	; 0x516 <__bad_interrupt>
      66:	00 00       	nop
      68:	56 c2       	rjmp	.+1196   	; 0x516 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	54 c2       	rjmp	.+1192   	; 0x516 <__bad_interrupt>
      6e:	00 00       	nop
      70:	52 c2       	rjmp	.+1188   	; 0x516 <__bad_interrupt>
      72:	00 00       	nop
      74:	50 c2       	rjmp	.+1184   	; 0x516 <__bad_interrupt>
      76:	00 00       	nop
      78:	4e c2       	rjmp	.+1180   	; 0x516 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4c c2       	rjmp	.+1176   	; 0x516 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4a c2       	rjmp	.+1172   	; 0x516 <__bad_interrupt>
      82:	00 00       	nop
      84:	48 c2       	rjmp	.+1168   	; 0x516 <__bad_interrupt>
      86:	00 00       	nop
      88:	46 c2       	rjmp	.+1164   	; 0x516 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	44 c2       	rjmp	.+1160   	; 0x516 <__bad_interrupt>
      8e:	00 00       	nop
      90:	42 c2       	rjmp	.+1156   	; 0x516 <__bad_interrupt>
      92:	00 00       	nop
      94:	40 c2       	rjmp	.+1152   	; 0x516 <__bad_interrupt>
      96:	00 00       	nop
      98:	3e c2       	rjmp	.+1148   	; 0x516 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3c c2       	rjmp	.+1144   	; 0x516 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3a c2       	rjmp	.+1140   	; 0x516 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	38 c2       	rjmp	.+1136   	; 0x516 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	36 c2       	rjmp	.+1132   	; 0x516 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	34 c2       	rjmp	.+1128   	; 0x516 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	32 c2       	rjmp	.+1124   	; 0x516 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	30 c2       	rjmp	.+1120   	; 0x516 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2e c2       	rjmp	.+1116   	; 0x516 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2c c2       	rjmp	.+1112   	; 0x516 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2a c2       	rjmp	.+1108   	; 0x516 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	28 c2       	rjmp	.+1104   	; 0x516 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	26 c2       	rjmp	.+1100   	; 0x516 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	24 c2       	rjmp	.+1096   	; 0x516 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	22 c2       	rjmp	.+1092   	; 0x516 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	20 c2       	rjmp	.+1088   	; 0x516 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	1e c2       	rjmp	.+1084   	; 0x516 <__bad_interrupt>
      da:	00 00       	nop
      dc:	1c c2       	rjmp	.+1080   	; 0x516 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1a c2       	rjmp	.+1076   	; 0x516 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	18 c2       	rjmp	.+1072   	; 0x516 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	16 c2       	rjmp	.+1068   	; 0x516 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	14 c2       	rjmp	.+1064   	; 0x516 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	12 c2       	rjmp	.+1060   	; 0x516 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	10 c2       	rjmp	.+1056   	; 0x516 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	0e c2       	rjmp	.+1052   	; 0x516 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	0c c2       	rjmp	.+1048   	; 0x516 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0a c2       	rjmp	.+1044   	; 0x516 <__bad_interrupt>
     102:	00 00       	nop
     104:	08 c2       	rjmp	.+1040   	; 0x516 <__bad_interrupt>
     106:	00 00       	nop
     108:	06 c2       	rjmp	.+1036   	; 0x516 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	04 c2       	rjmp	.+1032   	; 0x516 <__bad_interrupt>
     10e:	00 00       	nop
     110:	02 c2       	rjmp	.+1028   	; 0x516 <__bad_interrupt>
     112:	00 00       	nop
     114:	00 c2       	rjmp	.+1024   	; 0x516 <__bad_interrupt>
     116:	00 00       	nop
     118:	fe c1       	rjmp	.+1020   	; 0x516 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	fc c1       	rjmp	.+1016   	; 0x516 <__bad_interrupt>
     11e:	00 00       	nop
     120:	fa c1       	rjmp	.+1012   	; 0x516 <__bad_interrupt>
     122:	00 00       	nop
     124:	f8 c1       	rjmp	.+1008   	; 0x516 <__bad_interrupt>
     126:	00 00       	nop
     128:	f6 c1       	rjmp	.+1004   	; 0x516 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	f4 c1       	rjmp	.+1000   	; 0x516 <__bad_interrupt>
     12e:	00 00       	nop
     130:	f2 c1       	rjmp	.+996    	; 0x516 <__bad_interrupt>
     132:	00 00       	nop
     134:	f0 c1       	rjmp	.+992    	; 0x516 <__bad_interrupt>
     136:	00 00       	nop
     138:	ee c1       	rjmp	.+988    	; 0x516 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	ec c1       	rjmp	.+984    	; 0x516 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ea c1       	rjmp	.+980    	; 0x516 <__bad_interrupt>
     142:	00 00       	nop
     144:	e8 c1       	rjmp	.+976    	; 0x516 <__bad_interrupt>
     146:	00 00       	nop
     148:	e6 c1       	rjmp	.+972    	; 0x516 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	e4 c1       	rjmp	.+968    	; 0x516 <__bad_interrupt>
     14e:	00 00       	nop
     150:	e2 c1       	rjmp	.+964    	; 0x516 <__bad_interrupt>
     152:	00 00       	nop
     154:	e0 c1       	rjmp	.+960    	; 0x516 <__bad_interrupt>
     156:	00 00       	nop
     158:	de c1       	rjmp	.+956    	; 0x516 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	dc c1       	rjmp	.+952    	; 0x516 <__bad_interrupt>
     15e:	00 00       	nop
     160:	da c1       	rjmp	.+948    	; 0x516 <__bad_interrupt>
     162:	00 00       	nop
     164:	d8 c1       	rjmp	.+944    	; 0x516 <__bad_interrupt>
     166:	00 00       	nop
     168:	d6 c1       	rjmp	.+940    	; 0x516 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	d4 c1       	rjmp	.+936    	; 0x516 <__bad_interrupt>
     16e:	00 00       	nop
     170:	d2 c1       	rjmp	.+932    	; 0x516 <__bad_interrupt>
     172:	00 00       	nop
     174:	d0 c1       	rjmp	.+928    	; 0x516 <__bad_interrupt>
     176:	00 00       	nop
     178:	ce c1       	rjmp	.+924    	; 0x516 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	cc c1       	rjmp	.+920    	; 0x516 <__bad_interrupt>
     17e:	00 00       	nop
     180:	ca c1       	rjmp	.+916    	; 0x516 <__bad_interrupt>
     182:	00 00       	nop
     184:	c8 c1       	rjmp	.+912    	; 0x516 <__bad_interrupt>
     186:	00 00       	nop
     188:	c6 c1       	rjmp	.+908    	; 0x516 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	c4 c1       	rjmp	.+904    	; 0x516 <__bad_interrupt>
     18e:	00 00       	nop
     190:	c2 c1       	rjmp	.+900    	; 0x516 <__bad_interrupt>
     192:	00 00       	nop
     194:	c0 c1       	rjmp	.+896    	; 0x516 <__bad_interrupt>
     196:	00 00       	nop
     198:	be c1       	rjmp	.+892    	; 0x516 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	bc c1       	rjmp	.+888    	; 0x516 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ba c1       	rjmp	.+884    	; 0x516 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	b8 c1       	rjmp	.+880    	; 0x516 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	b6 c1       	rjmp	.+876    	; 0x516 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	b4 c1       	rjmp	.+872    	; 0x516 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	b2 c1       	rjmp	.+868    	; 0x516 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	b0 c1       	rjmp	.+864    	; 0x516 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	ae c1       	rjmp	.+860    	; 0x516 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	ac c1       	rjmp	.+856    	; 0x516 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	aa c1       	rjmp	.+852    	; 0x516 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	a8 c1       	rjmp	.+848    	; 0x516 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	a6 c1       	rjmp	.+844    	; 0x516 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	a4 c1       	rjmp	.+840    	; 0x516 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	a2 c1       	rjmp	.+836    	; 0x516 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	a0 c1       	rjmp	.+832    	; 0x516 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	9e c1       	rjmp	.+828    	; 0x516 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	9c c1       	rjmp	.+824    	; 0x516 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	9a c1       	rjmp	.+820    	; 0x516 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	98 c1       	rjmp	.+816    	; 0x516 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	96 c1       	rjmp	.+812    	; 0x516 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	94 c1       	rjmp	.+808    	; 0x516 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	92 c1       	rjmp	.+804    	; 0x516 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	90 c1       	rjmp	.+800    	; 0x516 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	8e c1       	rjmp	.+796    	; 0x516 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	ff 7e       	andi	r31, 0xEF	; 239
     1fe:	3c 18       	sub	r3, r12

00000200 <spin_indicator_data>:
     200:	18 3c 7e ff                                         .<~.

00000204 <sysfont_glyphs>:
     204:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     214:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     224:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     234:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     244:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     254:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     264:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     274:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     284:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     294:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     2a4:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     2b4:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     2c4:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     2d4:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     2e4:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     2f4:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     304:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     314:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     324:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     334:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     344:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     354:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     364:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     374:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     384:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     394:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     3a4:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     3b4:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     3c4:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     3d4:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     3e4:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     3f4:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     404:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     414:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     424:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     434:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     444:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     454:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     464:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     474:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     484:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     494:	20 40                                                @

00000496 <spinner_choice4>:
     496:	53 74 72 69 6e 67 20 34 00                          String 4.

0000049f <spinner_choice3>:
     49f:	53 74 72 69 6e 67 20 33 00                          String 3.

000004a8 <spinner_choice2>:
     4a8:	53 74 72 69 6e 67 20 32 00                          String 2.

000004b1 <spinner_choice1>:
     4b1:	53 74 72 69 6e 67 00                                String.

000004b8 <spinnertitle3>:
     4b8:	4e 75 6d 62 65 72 73 32 3a 00                       Numbers2:.

000004c2 <spinnertitle2>:
     4c2:	4e 75 6d 62 65 72 73 3a 00                          Numbers:.

000004cb <spinnertitle>:
     4cb:	53 74 72 69 6e 67 73 3a 00                          Strings:.

000004d4 <__ctors_end>:
     4d4:	11 24       	eor	r1, r1
     4d6:	1f be       	out	0x3f, r1	; 63
     4d8:	cf ef       	ldi	r28, 0xFF	; 255
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	df e5       	ldi	r29, 0x5F	; 95
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	00 e0       	ldi	r16, 0x00	; 0
     4e2:	0c bf       	out	0x3c, r16	; 60

000004e4 <__do_copy_data>:
     4e4:	10 e2       	ldi	r17, 0x20	; 32
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b0 e2       	ldi	r27, 0x20	; 32
     4ea:	ee ec       	ldi	r30, 0xCE	; 206
     4ec:	f0 e2       	ldi	r31, 0x20	; 32
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0b bf       	out	0x3b, r16	; 59
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x14>
     4f4:	07 90       	elpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	ac 31       	cpi	r26, 0x1C	; 28
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0x10>

000004fe <__do_clear_bss>:
     4fe:	22 e2       	ldi	r18, 0x22	; 34
     500:	ac e1       	ldi	r26, 0x1C	; 28
     502:	b0 e2       	ldi	r27, 0x20	; 32
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	ae 31       	cpi	r26, 0x1E	; 30
     50a:	b2 07       	cpc	r27, r18
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <main>
     512:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <_exit>

00000516 <__bad_interrupt>:
     516:	74 cd       	rjmp	.-1304   	; 0x0 <__vectors>

00000518 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     518:	04 c0       	rjmp	.+8      	; 0x522 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     51a:	61 50       	subi	r22, 0x01	; 1
     51c:	71 09       	sbc	r23, r1
     51e:	81 09       	sbc	r24, r1
     520:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     522:	61 15       	cp	r22, r1
     524:	71 05       	cpc	r23, r1
     526:	81 05       	cpc	r24, r1
     528:	91 05       	cpc	r25, r1
     52a:	b9 f7       	brne	.-18     	; 0x51a <__portable_avr_delay_cycles+0x2>
     52c:	08 95       	ret

0000052e <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	1f 92       	push	r1
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     546:	00 e0       	ldi	r16, 0x00	; 0
     548:	16 e0       	ldi	r17, 0x06	; 6
     54a:	68 94       	set
     54c:	ff 24       	eor	r15, r15
     54e:	f3 f8       	bld	r15, 3
     550:	f8 01       	movw	r30, r16
     552:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     554:	6e e0       	ldi	r22, 0x0E	; 14
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	dd df       	rcall	.-70     	; 0x518 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     55e:	f8 01       	movw	r30, r16
     560:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     562:	6e e0       	ldi	r22, 0x0E	; 14
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	d6 df       	rcall	.-84     	; 0x518 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     56c:	0f 2e       	mov	r0, r31
     56e:	fb e2       	ldi	r31, 0x2B	; 43
     570:	bf 2e       	mov	r11, r31
     572:	f0 2d       	mov	r31, r0
     574:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     576:	80 ea       	ldi	r24, 0xA0	; 160
     578:	99 e0       	ldi	r25, 0x09	; 9
     57a:	74 d7       	rcall	.+3816   	; 0x1464 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     57c:	c1 2c       	mov	r12, r1
     57e:	d1 2c       	mov	r13, r1
     580:	76 01       	movw	r14, r12
     582:	00 e4       	ldi	r16, 0x40	; 64
     584:	12 e4       	ldi	r17, 0x42	; 66
     586:	2f e0       	ldi	r18, 0x0F	; 15
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	43 e0       	ldi	r20, 0x03	; 3
     58c:	be 01       	movw	r22, r28
     58e:	6f 5f       	subi	r22, 0xFF	; 255
     590:	7f 4f       	sbci	r23, 0xFF	; 255
     592:	80 ea       	ldi	r24, 0xA0	; 160
     594:	99 e0       	ldi	r25, 0x09	; 9
     596:	95 d7       	rcall	.+3882   	; 0x14c2 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     598:	00 e6       	ldi	r16, 0x60	; 96
     59a:	16 e0       	ldi	r17, 0x06	; 6
     59c:	ff 24       	eor	r15, r15
     59e:	f3 94       	inc	r15
     5a0:	f8 01       	movw	r30, r16
     5a2:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a4:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	80 ea       	ldi	r24, 0xA0	; 160
     5ae:	99 e0       	ldi	r25, 0x09	; 9
     5b0:	a2 d7       	rcall	.+3908   	; 0x14f6 <usart_spi_select_device>
     5b2:	f8 01       	movw	r30, r16
     5b4:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5bc:	85 ff       	sbrs	r24, 5
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c0:	80 ea       	ldi	r24, 0xA0	; 160
     5c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	80 e4       	ldi	r24, 0x40	; 64
     5d6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	99 e0       	ldi	r25, 0x09	; 9
     5e4:	9e d7       	rcall	.+3900   	; 0x1522 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e6:	8b e2       	ldi	r24, 0x2B	; 43
     5e8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	99 e0       	ldi	r25, 0x09	; 9
     5f4:	80 d7       	rcall	.+3840   	; 0x14f6 <usart_spi_select_device>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fc:	e0 ea       	ldi	r30, 0xA0	; 160
     5fe:	f9 e0       	ldi	r31, 0x09	; 9
     600:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     602:	85 ff       	sbrs	r24, 5
     604:	fd cf       	rjmp	.-6      	; 0x600 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     606:	86 ea       	ldi	r24, 0xA6	; 166
     608:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60c:	e0 ea       	ldi	r30, 0xA0	; 160
     60e:	f9 e0       	ldi	r31, 0x09	; 9
     610:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     612:	86 ff       	sbrs	r24, 6
     614:	fd cf       	rjmp	.-6      	; 0x610 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     616:	e0 ea       	ldi	r30, 0xA0	; 160
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	80 e4       	ldi	r24, 0x40	; 64
     61c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61e:	80 81       	ld	r24, Z
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	80 ea       	ldi	r24, 0xA0	; 160
     628:	99 e0       	ldi	r25, 0x09	; 9
     62a:	7b d7       	rcall	.+3830   	; 0x1522 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     62c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	be 01       	movw	r22, r28
     632:	6f 5f       	subi	r22, 0xFF	; 255
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	80 ea       	ldi	r24, 0xA0	; 160
     638:	99 e0       	ldi	r25, 0x09	; 9
     63a:	5d d7       	rcall	.+3770   	; 0x14f6 <usart_spi_select_device>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     648:	85 ff       	sbrs	r24, 5
     64a:	fd cf       	rjmp	.-6      	; 0x646 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64c:	88 ec       	ldi	r24, 0xC8	; 200
     64e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     652:	e0 ea       	ldi	r30, 0xA0	; 160
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     658:	86 ff       	sbrs	r24, 6
     65a:	fd cf       	rjmp	.-6      	; 0x656 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f9 e0       	ldi	r31, 0x09	; 9
     660:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     662:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     664:	80 81       	ld	r24, Z
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     670:	58 d7       	rcall	.+3760   	; 0x1522 <usart_spi_deselect_device>
     672:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 ea       	ldi	r24, 0xA0	; 160
     67e:	99 e0       	ldi	r25, 0x09	; 9
     680:	3a d7       	rcall	.+3700   	; 0x14f6 <usart_spi_select_device>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68e:	85 ff       	sbrs	r24, 5
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     692:	82 ea       	ldi	r24, 0xA2	; 162
     694:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     698:	e0 ea       	ldi	r30, 0xA0	; 160
     69a:	f9 e0       	ldi	r31, 0x09	; 9
     69c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69e:	86 ff       	sbrs	r24, 6
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <st7565r_init+0x16e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6a2:	e0 ea       	ldi	r30, 0xA0	; 160
     6a4:	f9 e0       	ldi	r31, 0x09	; 9
     6a6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6aa:	80 81       	ld	r24, Z
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b6:	35 d7       	rcall	.+3690   	; 0x1522 <usart_spi_deselect_device>
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	80 ea       	ldi	r24, 0xA0	; 160
     6c4:	99 e0       	ldi	r25, 0x09	; 9
     6c6:	17 d7       	rcall	.+3630   	; 0x14f6 <usart_spi_select_device>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f9 e0       	ldi	r31, 0x09	; 9
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d4:	85 ff       	sbrs	r24, 5
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d8:	8f e2       	ldi	r24, 0x2F	; 47
     6da:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <st7565r_init+0x1b4>
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
     6ec:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ee:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6f0:	80 81       	ld	r24, Z
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fc:	12 d7       	rcall	.+3620   	; 0x1522 <usart_spi_deselect_device>
     6fe:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	80 ea       	ldi	r24, 0xA0	; 160
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	f4 d6       	rcall	.+3560   	; 0x14f6 <usart_spi_select_device>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     71a:	85 ff       	sbrs	r24, 5
     71c:	fd cf       	rjmp	.-6      	; 0x718 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71e:	88 ef       	ldi	r24, 0xF8	; 248
     720:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     724:	e0 ea       	ldi	r30, 0xA0	; 160
     726:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     728:	81 81       	ldd	r24, Z+1	; 0x01
     72a:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     72c:	fd cf       	rjmp	.-6      	; 0x728 <st7565r_init+0x1fa>
     72e:	e0 ea       	ldi	r30, 0xA0	; 160
     730:	f9 e0       	ldi	r31, 0x09	; 9
     732:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     734:	81 83       	std	Z+1, r24	; 0x01
     736:	80 81       	ld	r24, Z
     738:	be 01       	movw	r22, r28
     73a:	6f 5f       	subi	r22, 0xFF	; 255
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	80 ea       	ldi	r24, 0xA0	; 160
     740:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     742:	ef d6       	rcall	.+3550   	; 0x1522 <usart_spi_deselect_device>
     744:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	be 01       	movw	r22, r28
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	80 ea       	ldi	r24, 0xA0	; 160
     750:	99 e0       	ldi	r25, 0x09	; 9
     752:	d1 d6       	rcall	.+3490   	; 0x14f6 <usart_spi_select_device>
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     75a:	e0 ea       	ldi	r30, 0xA0	; 160
     75c:	f9 e0       	ldi	r31, 0x09	; 9
     75e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     760:	85 ff       	sbrs	r24, 5
     762:	fd cf       	rjmp	.-6      	; 0x75e <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     764:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     768:	e0 ea       	ldi	r30, 0xA0	; 160
     76a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	81 81       	ldd	r24, Z+1	; 0x01
     76e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     770:	fd cf       	rjmp	.-6      	; 0x76c <st7565r_init+0x23e>
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     776:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	80 81       	ld	r24, Z
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	cd d6       	rcall	.+3482   	; 0x1522 <usart_spi_deselect_device>
     788:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	af d6       	rcall	.+3422   	; 0x14f6 <usart_spi_select_device>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a4:	85 ff       	sbrs	r24, 5
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <st7565r_init+0x274>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a8:	81 e2       	ldi	r24, 0x21	; 33
     7aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ae:	e0 ea       	ldi	r30, 0xA0	; 160
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
     7b4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <st7565r_init+0x284>
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7bc:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7be:	81 83       	std	Z+1, r24	; 0x01
     7c0:	80 81       	ld	r24, Z
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7cc:	aa d6       	rcall	.+3412   	; 0x1522 <usart_spi_deselect_device>
     7ce:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	be 01       	movw	r22, r28
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	99 e0       	ldi	r25, 0x09	; 9
     7dc:	8c d6       	rcall	.+3352   	; 0x14f6 <usart_spi_select_device>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f9 e0       	ldi	r31, 0x09	; 9
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7ea:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <st7565r_init+0x2ba>
     7ee:	81 e8       	ldi	r24, 0x81	; 129
     7f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7fa:	86 ff       	sbrs	r24, 6
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <st7565r_init+0x2ca>
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
     800:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     802:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     804:	81 83       	std	Z+1, r24	; 0x01
     806:	80 81       	ld	r24, Z
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     812:	87 d6       	rcall	.+3342   	; 0x1522 <usart_spi_deselect_device>
     814:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	69 d6       	rcall	.+3282   	; 0x14f6 <usart_spi_select_device>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     832:	fd cf       	rjmp	.-6      	; 0x82e <st7565r_init+0x300>
     834:	81 e2       	ldi	r24, 0x21	; 33
     836:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83c:	f9 e0       	ldi	r31, 0x09	; 9
     83e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     840:	86 ff       	sbrs	r24, 6
     842:	fd cf       	rjmp	.-6      	; 0x83e <st7565r_init+0x310>
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     848:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84a:	81 83       	std	Z+1, r24	; 0x01
     84c:	80 81       	ld	r24, Z
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 ea       	ldi	r24, 0xA0	; 160
     856:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     858:	64 d6       	rcall	.+3272   	; 0x1522 <usart_spi_deselect_device>
     85a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	be 01       	movw	r22, r28
     860:	6f 5f       	subi	r22, 0xFF	; 255
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	80 ea       	ldi	r24, 0xA0	; 160
     866:	99 e0       	ldi	r25, 0x09	; 9
     868:	46 d6       	rcall	.+3212   	; 0x14f6 <usart_spi_select_device>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     870:	e0 ea       	ldi	r30, 0xA0	; 160
     872:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     874:	81 81       	ldd	r24, Z+1	; 0x01
     876:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     878:	fd cf       	rjmp	.-6      	; 0x874 <st7565r_init+0x346>
     87a:	8f ea       	ldi	r24, 0xAF	; 175
     87c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     880:	e0 ea       	ldi	r30, 0xA0	; 160
     882:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     884:	81 81       	ldd	r24, Z+1	; 0x01
     886:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     888:	fd cf       	rjmp	.-6      	; 0x884 <st7565r_init+0x356>
     88a:	e0 ea       	ldi	r30, 0xA0	; 160
     88c:	f9 e0       	ldi	r31, 0x09	; 9
     88e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     890:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     892:	80 81       	ld	r24, Z
     894:	be 01       	movw	r22, r28
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	80 ea       	ldi	r24, 0xA0	; 160
     89c:	99 e0       	ldi	r25, 0x09	; 9
     89e:	41 d6       	rcall	.+3202   	; 0x1522 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     8a0:	0f 90       	pop	r0
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	08 95       	ret

000008b6 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	1f 92       	push	r1
     8bc:	1f 92       	push	r1
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     8c8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     8cc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     8d0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     8d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     8d8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     8dc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     8e0:	6c e0       	ldi	r22, 0x0C	; 12
     8e2:	81 e4       	ldi	r24, 0x41	; 65
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	82 d6       	rcall	.+3332   	; 0x15ec <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8e8:	8f b7       	in	r24, 0x3f	; 63
     8ea:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     8ec:	f8 94       	cli
	return flags;
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     8f0:	e0 e5       	ldi	r30, 0x50	; 80
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	82 60       	ori	r24, 0x02	; 2
     8f8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8fa:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     8fc:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     8fe:	81 ff       	sbrs	r24, 1
     900:	fd cf       	rjmp	.-6      	; 0x8fc <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	80 e4       	ldi	r24, 0x40	; 64
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	71 d6       	rcall	.+3298   	; 0x15ec <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     90a:	8f b7       	in	r24, 0x3f	; 63
     90c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     90e:	f8 94       	cli
	return flags;
     910:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     912:	e0 e5       	ldi	r30, 0x50	; 80
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	8e 7f       	andi	r24, 0xFE	; 254
     91a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     91c:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	1f 92       	push	r1
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     932:	9f b7       	in	r25, 0x3f	; 63
     934:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     936:	f8 94       	cli
	return flags;
     938:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     93a:	e8 2f       	mov	r30, r24
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	e0 59       	subi	r30, 0x90	; 144
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	60 95       	com	r22
     944:	80 81       	ld	r24, Z
     946:	68 23       	and	r22, r24
     948:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     94a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <gfx_mono_st7565r_put_page>:
 */
void gfx_mono_st7565r_get_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_get_page(data, page, column, width);
     954:	6f 92       	push	r6
     956:	7f 92       	push	r7
     958:	8f 92       	push	r8
     95a:	9f 92       	push	r9
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	1f 92       	push	r1
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	8c 01       	movw	r16, r24
     978:	e6 2e       	mov	r14, r22
     97a:	f4 2e       	mov	r15, r20
     97c:	d2 2e       	mov	r13, r18
     97e:	e3 d1       	rcall	.+966    	; 0xd46 <gfx_mono_framebuffer_put_page>
     980:	8e 2d       	mov	r24, r14
     982:	8f 70       	andi	r24, 0x0F	; 15
     984:	80 6b       	ori	r24, 0xB0	; 176
     986:	e8 2e       	mov	r14, r24
     988:	8b e2       	ldi	r24, 0x2B	; 43
     98a:	89 83       	std	Y+1, r24	; 0x01
     98c:	be 01       	movw	r22, r28
     98e:	6f 5f       	subi	r22, 0xFF	; 255
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	80 ea       	ldi	r24, 0xA0	; 160
     994:	99 e0       	ldi	r25, 0x09	; 9
     996:	af d5       	rcall	.+2910   	; 0x14f6 <usart_spi_select_device>
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     99e:	e0 ea       	ldi	r30, 0xA0	; 160
     9a0:	f9 e0       	ldi	r31, 0x09	; 9
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
     9a4:	85 ff       	sbrs	r24, 5
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <gfx_mono_st7565r_put_page+0x4e>
     9a8:	e0 92 a0 09 	sts	0x09A0, r14	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     9ac:	e0 ea       	ldi	r30, 0xA0	; 160
     9ae:	f9 e0       	ldi	r31, 0x09	; 9
     9b0:	81 81       	ldd	r24, Z+1	; 0x01
     9b2:	86 ff       	sbrs	r24, 6
     9b4:	fd cf       	rjmp	.-6      	; 0x9b0 <gfx_mono_st7565r_put_page+0x5c>
     9b6:	e0 ea       	ldi	r30, 0xA0	; 160
     9b8:	f9 e0       	ldi	r31, 0x09	; 9
     9ba:	80 e4       	ldi	r24, 0x40	; 64
     9bc:	81 83       	std	Z+1, r24	; 0x01
     9be:	80 81       	ld	r24, Z
     9c0:	be 01       	movw	r22, r28
     9c2:	6f 5f       	subi	r22, 0xFF	; 255
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	80 ea       	ldi	r24, 0xA0	; 160
     9c8:	99 e0       	ldi	r25, 0x09	; 9
     9ca:	ab d5       	rcall	.+2902   	; 0x1522 <usart_spi_deselect_device>
     9cc:	8f 2d       	mov	r24, r15
     9ce:	8f 77       	andi	r24, 0x7F	; 127
     9d0:	82 95       	swap	r24
     9d2:	8f 70       	andi	r24, 0x0F	; 15
     9d4:	80 61       	ori	r24, 0x10	; 16
     9d6:	e8 2e       	mov	r14, r24
     9d8:	8b e2       	ldi	r24, 0x2B	; 43
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	be 01       	movw	r22, r28
     9de:	6f 5f       	subi	r22, 0xFF	; 255
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	80 ea       	ldi	r24, 0xA0	; 160
     9e4:	99 e0       	ldi	r25, 0x09	; 9
     9e6:	87 d5       	rcall	.+2830   	; 0x14f6 <usart_spi_select_device>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     9ee:	e0 ea       	ldi	r30, 0xA0	; 160
     9f0:	f9 e0       	ldi	r31, 0x09	; 9
     9f2:	81 81       	ldd	r24, Z+1	; 0x01
     9f4:	85 ff       	sbrs	r24, 5
     9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <gfx_mono_st7565r_put_page+0x9e>
     9f8:	e0 92 a0 09 	sts	0x09A0, r14	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     9fc:	e0 ea       	ldi	r30, 0xA0	; 160
     9fe:	f9 e0       	ldi	r31, 0x09	; 9
     a00:	81 81       	ldd	r24, Z+1	; 0x01
     a02:	86 ff       	sbrs	r24, 6
     a04:	fd cf       	rjmp	.-6      	; 0xa00 <gfx_mono_st7565r_put_page+0xac>
     a06:	e0 ea       	ldi	r30, 0xA0	; 160
     a08:	f9 e0       	ldi	r31, 0x09	; 9
     a0a:	80 e4       	ldi	r24, 0x40	; 64
     a0c:	81 83       	std	Z+1, r24	; 0x01
     a0e:	80 81       	ld	r24, Z
     a10:	be 01       	movw	r22, r28
     a12:	6f 5f       	subi	r22, 0xFF	; 255
     a14:	7f 4f       	sbci	r23, 0xFF	; 255
     a16:	80 ea       	ldi	r24, 0xA0	; 160
     a18:	99 e0       	ldi	r25, 0x09	; 9
     a1a:	83 d5       	rcall	.+2822   	; 0x1522 <usart_spi_deselect_device>
     a1c:	8f 2d       	mov	r24, r15
     a1e:	8f 70       	andi	r24, 0x0F	; 15
     a20:	f8 2e       	mov	r15, r24
     a22:	8b e2       	ldi	r24, 0x2B	; 43
     a24:	89 83       	std	Y+1, r24	; 0x01
     a26:	be 01       	movw	r22, r28
     a28:	6f 5f       	subi	r22, 0xFF	; 255
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
     a2c:	80 ea       	ldi	r24, 0xA0	; 160
     a2e:	99 e0       	ldi	r25, 0x09	; 9
     a30:	62 d5       	rcall	.+2756   	; 0x14f6 <usart_spi_select_device>
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a38:	e0 ea       	ldi	r30, 0xA0	; 160
     a3a:	f9 e0       	ldi	r31, 0x09	; 9
     a3c:	81 81       	ldd	r24, Z+1	; 0x01
     a3e:	85 ff       	sbrs	r24, 5
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <gfx_mono_st7565r_put_page+0xe8>
     a42:	f0 92 a0 09 	sts	0x09A0, r15	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a46:	e0 ea       	ldi	r30, 0xA0	; 160
     a48:	f9 e0       	ldi	r31, 0x09	; 9
     a4a:	81 81       	ldd	r24, Z+1	; 0x01
     a4c:	86 ff       	sbrs	r24, 6
     a4e:	fd cf       	rjmp	.-6      	; 0xa4a <gfx_mono_st7565r_put_page+0xf6>
     a50:	e0 ea       	ldi	r30, 0xA0	; 160
     a52:	f9 e0       	ldi	r31, 0x09	; 9
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	81 83       	std	Z+1, r24	; 0x01
     a58:	80 81       	ld	r24, Z
     a5a:	be 01       	movw	r22, r28
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	80 ea       	ldi	r24, 0xA0	; 160
     a62:	99 e0       	ldi	r25, 0x09	; 9
     a64:	5e d5       	rcall	.+2748   	; 0x1522 <usart_spi_deselect_device>
     a66:	78 01       	movw	r14, r16
     a68:	da 94       	dec	r13
     a6a:	ad 2c       	mov	r10, r13
     a6c:	b1 2c       	mov	r11, r1
     a6e:	ef ef       	ldi	r30, 0xFF	; 255
     a70:	ae 1a       	sub	r10, r30
     a72:	be 0a       	sbc	r11, r30
     a74:	a0 0e       	add	r10, r16
     a76:	b1 1e       	adc	r11, r17
     a78:	0f 2e       	mov	r0, r31
     a7a:	fb e2       	ldi	r31, 0x2B	; 43
     a7c:	6f 2e       	mov	r6, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	00 ea       	ldi	r16, 0xA0	; 160
     a82:	19 e0       	ldi	r17, 0x09	; 9
     a84:	0f 2e       	mov	r0, r31
     a86:	f0 e6       	ldi	r31, 0x60	; 96
     a88:	cf 2e       	mov	r12, r31
     a8a:	f6 e0       	ldi	r31, 0x06	; 6
     a8c:	df 2e       	mov	r13, r31
     a8e:	f0 2d       	mov	r31, r0
     a90:	99 24       	eor	r9, r9
     a92:	93 94       	inc	r9
     a94:	68 94       	set
     a96:	77 24       	eor	r7, r7
     a98:	76 f8       	bld	r7, 6
     a9a:	f7 01       	movw	r30, r14
     a9c:	81 90       	ld	r8, Z+
     a9e:	7f 01       	movw	r14, r30
     aa0:	69 82       	std	Y+1, r6	; 0x01
     aa2:	be 01       	movw	r22, r28
     aa4:	6f 5f       	subi	r22, 0xFF	; 255
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	c8 01       	movw	r24, r16
     aaa:	25 d5       	rcall	.+2634   	; 0x14f6 <usart_spi_select_device>
     aac:	f6 01       	movw	r30, r12
     aae:	95 82       	std	Z+5, r9	; 0x05
     ab0:	f8 01       	movw	r30, r16
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	95 ff       	sbrs	r25, 5
     ab6:	fc cf       	rjmp	.-8      	; 0xab0 <gfx_mono_st7565r_put_page+0x15c>
     ab8:	80 82       	st	Z, r8
     aba:	f8 01       	movw	r30, r16
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	96 ff       	sbrs	r25, 6
     ac0:	fc cf       	rjmp	.-8      	; 0xaba <gfx_mono_st7565r_put_page+0x166>
     ac2:	71 82       	std	Z+1, r7	; 0x01
     ac4:	80 81       	ld	r24, Z
     ac6:	f6 01       	movw	r30, r12
     ac8:	96 82       	std	Z+6, r9	; 0x06
     aca:	be 01       	movw	r22, r28
     acc:	6f 5f       	subi	r22, 0xFF	; 255
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	c8 01       	movw	r24, r16
     ad2:	27 d5       	rcall	.+2638   	; 0x1522 <usart_spi_deselect_device>
     ad4:	ea 14       	cp	r14, r10
     ad6:	fb 04       	cpc	r15, r11
     ad8:	01 f7       	brne	.-64     	; 0xa9a <gfx_mono_st7565r_put_page+0x146>
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	7f 90       	pop	r7
     af6:	6f 90       	pop	r6
     af8:	08 95       	ret

00000afa <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	1f 92       	push	r1
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	08 2f       	mov	r16, r24
     b0c:	f6 2e       	mov	r15, r22
     b0e:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     b10:	2e d1       	rcall	.+604    	; 0xd6e <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     b12:	0f 70       	andi	r16, 0x0F	; 15
     b14:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b16:	8b e2       	ldi	r24, 0x2B	; 43
     b18:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b1a:	be 01       	movw	r22, r28
     b1c:	6f 5f       	subi	r22, 0xFF	; 255
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	80 ea       	ldi	r24, 0xA0	; 160
     b22:	99 e0       	ldi	r25, 0x09	; 9
     b24:	e8 d4       	rcall	.+2512   	; 0x14f6 <usart_spi_select_device>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b2c:	e0 ea       	ldi	r30, 0xA0	; 160
     b2e:	f9 e0       	ldi	r31, 0x09	; 9
     b30:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b32:	95 ff       	sbrs	r25, 5
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b36:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b3a:	e0 ea       	ldi	r30, 0xA0	; 160
     b3c:	f9 e0       	ldi	r31, 0x09	; 9
     b3e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b40:	86 ff       	sbrs	r24, 6
     b42:	fd cf       	rjmp	.-6      	; 0xb3e <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b44:	e0 ea       	ldi	r30, 0xA0	; 160
     b46:	f9 e0       	ldi	r31, 0x09	; 9
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b4c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b4e:	be 01       	movw	r22, r28
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	80 ea       	ldi	r24, 0xA0	; 160
     b56:	99 e0       	ldi	r25, 0x09	; 9
     b58:	e4 d4       	rcall	.+2504   	; 0x1522 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     b5a:	0f 2d       	mov	r16, r15
     b5c:	0f 77       	andi	r16, 0x7F	; 127
     b5e:	02 95       	swap	r16
     b60:	0f 70       	andi	r16, 0x0F	; 15
     b62:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b64:	8b e2       	ldi	r24, 0x2B	; 43
     b66:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b68:	be 01       	movw	r22, r28
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	80 ea       	ldi	r24, 0xA0	; 160
     b70:	99 e0       	ldi	r25, 0x09	; 9
     b72:	c1 d4       	rcall	.+2434   	; 0x14f6 <usart_spi_select_device>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b7a:	e0 ea       	ldi	r30, 0xA0	; 160
     b7c:	f9 e0       	ldi	r31, 0x09	; 9
     b7e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b80:	85 ff       	sbrs	r24, 5
     b82:	fd cf       	rjmp	.-6      	; 0xb7e <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b84:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b88:	e0 ea       	ldi	r30, 0xA0	; 160
     b8a:	f9 e0       	ldi	r31, 0x09	; 9
     b8c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b8e:	86 ff       	sbrs	r24, 6
     b90:	fd cf       	rjmp	.-6      	; 0xb8c <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b92:	e0 ea       	ldi	r30, 0xA0	; 160
     b94:	f9 e0       	ldi	r31, 0x09	; 9
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b9a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b9c:	be 01       	movw	r22, r28
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	80 ea       	ldi	r24, 0xA0	; 160
     ba4:	99 e0       	ldi	r25, 0x09	; 9
     ba6:	bd d4       	rcall	.+2426   	; 0x1522 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     ba8:	0f 2d       	mov	r16, r15
     baa:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bac:	8b e2       	ldi	r24, 0x2B	; 43
     bae:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bb0:	be 01       	movw	r22, r28
     bb2:	6f 5f       	subi	r22, 0xFF	; 255
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	80 ea       	ldi	r24, 0xA0	; 160
     bb8:	99 e0       	ldi	r25, 0x09	; 9
     bba:	9d d4       	rcall	.+2362   	; 0x14f6 <usart_spi_select_device>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     bc2:	e0 ea       	ldi	r30, 0xA0	; 160
     bc4:	f9 e0       	ldi	r31, 0x09	; 9
     bc6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     bc8:	85 ff       	sbrs	r24, 5
     bca:	fd cf       	rjmp	.-6      	; 0xbc6 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     bcc:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     bd0:	e0 ea       	ldi	r30, 0xA0	; 160
     bd2:	f9 e0       	ldi	r31, 0x09	; 9
     bd4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     bd6:	86 ff       	sbrs	r24, 6
     bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     bda:	e0 ea       	ldi	r30, 0xA0	; 160
     bdc:	f9 e0       	ldi	r31, 0x09	; 9
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     be2:	80 81       	ld	r24, Z
     be4:	be 01       	movw	r22, r28
     be6:	6f 5f       	subi	r22, 0xFF	; 255
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	80 ea       	ldi	r24, 0xA0	; 160
     bec:	99 e0       	ldi	r25, 0x09	; 9
     bee:	99 d4       	rcall	.+2354   	; 0x1522 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bf0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	be 01       	movw	r22, r28
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	80 ea       	ldi	r24, 0xA0	; 160
     bfc:	99 e0       	ldi	r25, 0x09	; 9
     bfe:	7b d4       	rcall	.+2294   	; 0x14f6 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c06:	e0 ea       	ldi	r30, 0xA0	; 160
     c08:	f9 e0       	ldi	r31, 0x09	; 9
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c0c:	85 ff       	sbrs	r24, 5
     c0e:	fd cf       	rjmp	.-6      	; 0xc0a <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c10:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c14:	e0 ea       	ldi	r30, 0xA0	; 160
     c16:	f9 e0       	ldi	r31, 0x09	; 9
     c18:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c1a:	86 ff       	sbrs	r24, 6
     c1c:	fd cf       	rjmp	.-6      	; 0xc18 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c1e:	e0 ea       	ldi	r30, 0xA0	; 160
     c20:	f9 e0       	ldi	r31, 0x09	; 9
     c22:	80 e4       	ldi	r24, 0x40	; 64
     c24:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c26:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c2e:	be 01       	movw	r22, r28
     c30:	6f 5f       	subi	r22, 0xFF	; 255
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	80 ea       	ldi	r24, 0xA0	; 160
     c36:	99 e0       	ldi	r25, 0x09	; 9
     c38:	74 d4       	rcall	.+2280   	; 0x1522 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     c3a:	0f 90       	pop	r0
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	08 95       	ret

00000c48 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	1f 92       	push	r1
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     c56:	8c e1       	ldi	r24, 0x1C	; 28
     c58:	90 e2       	ldi	r25, 0x20	; 32
     c5a:	70 d0       	rcall	.+224    	; 0xd3c <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     c5c:	68 dc       	rcall	.-1840   	; 0x52e <st7565r_init>
     c5e:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	80 ea       	ldi	r24, 0xA0	; 160
     c6a:	99 e0       	ldi	r25, 0x09	; 9
     c6c:	44 d4       	rcall	.+2184   	; 0x14f6 <usart_spi_select_device>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     c74:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c76:	f9 e0       	ldi	r31, 0x09	; 9
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <gfx_mono_st7565r_init+0x30>
     c7e:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c80:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     c84:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c86:	f9 e0       	ldi	r31, 0x09	; 9
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c8c:	fd cf       	rjmp	.-6      	; 0xc88 <gfx_mono_st7565r_init+0x40>
     c8e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c90:	f9 e0       	ldi	r31, 0x09	; 9
     c92:	80 e4       	ldi	r24, 0x40	; 64
     c94:	81 83       	std	Z+1, r24	; 0x01
     c96:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c98:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c9a:	6f 5f       	subi	r22, 0xFF	; 255
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	80 ea       	ldi	r24, 0xA0	; 160
     ca0:	99 e0       	ldi	r25, 0x09	; 9
     ca2:	3f d4       	rcall	.+2174   	; 0x1522 <usart_spi_deselect_device>
     ca4:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     ca6:	0a c0       	rjmp	.+20     	; 0xcbc <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	61 2f       	mov	r22, r17
     cac:	80 2f       	mov	r24, r16
     cae:	25 df       	rcall	.-438    	; 0xafa <gfx_mono_st7565r_put_byte>
     cb0:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     cb2:	10 38       	cpi	r17, 0x80	; 128
     cb4:	c9 f7       	brne	.-14     	; 0xca8 <gfx_mono_st7565r_init+0x60>
     cb6:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     cb8:	04 30       	cpi	r16, 0x04	; 4
     cba:	11 f0       	breq	.+4      	; 0xcc0 <gfx_mono_st7565r_init+0x78>
     cbc:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     cbe:	f4 cf       	rjmp	.-24     	; 0xca8 <gfx_mono_st7565r_init+0x60>
     cc0:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	08 95       	ret

00000ccc <gfx_mono_st7565r_draw_pixel>:
     ccc:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     cd6:	88 23       	and	r24, r24
     cd8:	4c f1       	brlt	.+82     	; 0xd2c <gfx_mono_st7565r_draw_pixel+0x60>
     cda:	60 32       	cpi	r22, 0x20	; 32
     cdc:	38 f5       	brcc	.+78     	; 0xd2c <gfx_mono_st7565r_draw_pixel+0x60>
     cde:	d4 2f       	mov	r29, r20
     ce0:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ce2:	f6 2e       	mov	r15, r22
     ce4:	f6 94       	lsr	r15
     ce6:	f6 94       	lsr	r15
     ce8:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	88 e0       	ldi	r24, 0x08	; 8
     cee:	f8 9e       	mul	r15, r24
     cf0:	60 19       	sub	r22, r0
     cf2:	71 09       	sbc	r23, r1
     cf4:	11 24       	eor	r1, r1
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	8c 01       	movw	r16, r24
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <gfx_mono_st7565r_draw_pixel+0x36>
     cfe:	00 0f       	add	r16, r16
     d00:	11 1f       	adc	r17, r17
     d02:	6a 95       	dec	r22
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     d06:	6c 2f       	mov	r22, r28
     d08:	8f 2d       	mov	r24, r15
     d0a:	3f d0       	rcall	.+126    	; 0xd8a <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     d0c:	d1 30       	cpi	r29, 0x01	; 1
     d0e:	21 f0       	breq	.+8      	; 0xd18 <gfx_mono_st7565r_draw_pixel+0x4c>
     d10:	28 f0       	brcs	.+10     	; 0xd1c <gfx_mono_st7565r_draw_pixel+0x50>
     d12:	d2 30       	cpi	r29, 0x02	; 2
     d14:	31 f0       	breq	.+12     	; 0xd22 <gfx_mono_st7565r_draw_pixel+0x56>
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     d18:	80 2b       	or	r24, r16
		break;
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     d1c:	00 95       	com	r16
     d1e:	80 23       	and	r24, r16
		break;
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     d22:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     d24:	48 2f       	mov	r20, r24
     d26:	6c 2f       	mov	r22, r28
     d28:	8f 2d       	mov	r24, r15
     d2a:	e7 de       	rcall	.-562    	; 0xafa <gfx_mono_st7565r_put_byte>
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	08 95       	ret

00000d38 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     d38:	28 c0       	rjmp	.+80     	; 0xd8a <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     d3a:	08 95       	ret

00000d3c <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     d3c:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <fbpointer>
     d40:	90 93 1d 22 	sts	0x221D, r25	; 0x80221d <fbpointer+0x1>
     d44:	08 95       	ret

00000d46 <gfx_mono_framebuffer_put_page>:
     d46:	dc 01       	movw	r26, r24
     d48:	e4 2f       	mov	r30, r20
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	af 01       	movw	r20, r30
     d4e:	80 e8       	ldi	r24, 0x80	; 128
     d50:	68 9f       	mul	r22, r24
     d52:	40 0d       	add	r20, r0
     d54:	51 1d       	adc	r21, r1
     d56:	11 24       	eor	r1, r1
     d58:	e0 91 1c 22 	lds	r30, 0x221C	; 0x80221c <fbpointer>
     d5c:	f0 91 1d 22 	lds	r31, 0x221D	; 0x80221d <fbpointer+0x1>
     d60:	e4 0f       	add	r30, r20
     d62:	f5 1f       	adc	r31, r21
     d64:	8d 91       	ld	r24, X+
     d66:	81 93       	st	Z+, r24
     d68:	21 50       	subi	r18, 0x01	; 1
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <gfx_mono_framebuffer_put_page+0x1e>
     d6c:	08 95       	ret

00000d6e <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     d6e:	20 91 1c 22 	lds	r18, 0x221C	; 0x80221c <fbpointer>
     d72:	30 91 1d 22 	lds	r19, 0x221D	; 0x80221d <fbpointer+0x1>
     d76:	90 e8       	ldi	r25, 0x80	; 128
     d78:	89 9f       	mul	r24, r25
     d7a:	20 0d       	add	r18, r0
     d7c:	31 1d       	adc	r19, r1
     d7e:	11 24       	eor	r1, r1
     d80:	f9 01       	movw	r30, r18
     d82:	e6 0f       	add	r30, r22
     d84:	f1 1d       	adc	r31, r1
     d86:	40 83       	st	Z, r20
     d88:	08 95       	ret

00000d8a <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     d8a:	20 91 1c 22 	lds	r18, 0x221C	; 0x80221c <fbpointer>
     d8e:	30 91 1d 22 	lds	r19, 0x221D	; 0x80221d <fbpointer+0x1>
     d92:	90 e8       	ldi	r25, 0x80	; 128
     d94:	89 9f       	mul	r24, r25
     d96:	20 0d       	add	r18, r0
     d98:	31 1d       	adc	r19, r1
     d9a:	11 24       	eor	r1, r1
     d9c:	f9 01       	movw	r30, r18
     d9e:	e6 0f       	add	r30, r22
     da0:	f1 1d       	adc	r31, r1
}
     da2:	80 81       	ld	r24, Z
     da4:	08 95       	ret

00000da6 <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	e4 2f       	mov	r30, r20
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	e8 0f       	add	r30, r24
     db6:	f1 1d       	adc	r31, r1
     db8:	e1 38       	cpi	r30, 0x81	; 129
     dba:	f1 05       	cpc	r31, r1
     dbc:	1c f0       	brlt	.+6      	; 0xdc4 <gfx_mono_generic_draw_horizontal_line+0x1e>
     dbe:	c0 e8       	ldi	r28, 0x80	; 128
     dc0:	4c 2f       	mov	r20, r28
     dc2:	48 1b       	sub	r20, r24
     dc4:	44 23       	and	r20, r20
     dc6:	09 f4       	brne	.+2      	; 0xdca <gfx_mono_generic_draw_horizontal_line+0x24>
     dc8:	4a c0       	rjmp	.+148    	; 0xe5e <gfx_mono_generic_draw_horizontal_line+0xb8>
     dca:	d6 2f       	mov	r29, r22
     dcc:	d6 95       	lsr	r29
     dce:	d6 95       	lsr	r29
     dd0:	d6 95       	lsr	r29
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	98 e0       	ldi	r25, 0x08	; 8
     dd6:	d9 9f       	mul	r29, r25
     dd8:	60 19       	sub	r22, r0
     dda:	71 09       	sbc	r23, r1
     ddc:	11 24       	eor	r1, r1
     dde:	e1 e0       	ldi	r30, 0x01	; 1
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	df 01       	movw	r26, r30
     de4:	02 c0       	rjmp	.+4      	; 0xdea <gfx_mono_generic_draw_horizontal_line+0x44>
     de6:	aa 0f       	add	r26, r26
     de8:	bb 1f       	adc	r27, r27
     dea:	6a 95       	dec	r22
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <gfx_mono_generic_draw_horizontal_line+0x40>
     dee:	fa 2e       	mov	r15, r26
     df0:	21 30       	cpi	r18, 0x01	; 1
     df2:	21 f0       	breq	.+8      	; 0xdfc <gfx_mono_generic_draw_horizontal_line+0x56>
     df4:	98 f0       	brcs	.+38     	; 0xe1c <gfx_mono_generic_draw_horizontal_line+0x76>
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	19 f1       	breq	.+70     	; 0xe40 <gfx_mono_generic_draw_horizontal_line+0x9a>
     dfa:	31 c0       	rjmp	.+98     	; 0xe5e <gfx_mono_generic_draw_horizontal_line+0xb8>
     dfc:	c4 2f       	mov	r28, r20
     dfe:	1f ef       	ldi	r17, 0xFF	; 255
     e00:	18 0f       	add	r17, r24
     e02:	01 2f       	mov	r16, r17
     e04:	0c 0f       	add	r16, r28
     e06:	60 2f       	mov	r22, r16
     e08:	8d 2f       	mov	r24, r29
     e0a:	96 df       	rcall	.-212    	; 0xd38 <gfx_mono_st7565r_get_byte>
     e0c:	4f 2d       	mov	r20, r15
     e0e:	48 2b       	or	r20, r24
     e10:	60 2f       	mov	r22, r16
     e12:	8d 2f       	mov	r24, r29
     e14:	72 de       	rcall	.-796    	; 0xafa <gfx_mono_st7565r_put_byte>
     e16:	c1 50       	subi	r28, 0x01	; 1
     e18:	a1 f7       	brne	.-24     	; 0xe02 <gfx_mono_generic_draw_horizontal_line+0x5c>
     e1a:	21 c0       	rjmp	.+66     	; 0xe5e <gfx_mono_generic_draw_horizontal_line+0xb8>
     e1c:	c4 2f       	mov	r28, r20
     e1e:	1f ef       	ldi	r17, 0xFF	; 255
     e20:	18 0f       	add	r17, r24
     e22:	fa 2e       	mov	r15, r26
     e24:	f0 94       	com	r15
     e26:	01 2f       	mov	r16, r17
     e28:	0c 0f       	add	r16, r28
     e2a:	60 2f       	mov	r22, r16
     e2c:	8d 2f       	mov	r24, r29
     e2e:	84 df       	rcall	.-248    	; 0xd38 <gfx_mono_st7565r_get_byte>
     e30:	4f 2d       	mov	r20, r15
     e32:	48 23       	and	r20, r24
     e34:	60 2f       	mov	r22, r16
     e36:	8d 2f       	mov	r24, r29
     e38:	60 de       	rcall	.-832    	; 0xafa <gfx_mono_st7565r_put_byte>
     e3a:	c1 50       	subi	r28, 0x01	; 1
     e3c:	a1 f7       	brne	.-24     	; 0xe26 <gfx_mono_generic_draw_horizontal_line+0x80>
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <gfx_mono_generic_draw_horizontal_line+0xb8>
     e40:	c4 2f       	mov	r28, r20
     e42:	1f ef       	ldi	r17, 0xFF	; 255
     e44:	18 0f       	add	r17, r24
     e46:	01 2f       	mov	r16, r17
     e48:	0c 0f       	add	r16, r28
     e4a:	60 2f       	mov	r22, r16
     e4c:	8d 2f       	mov	r24, r29
     e4e:	74 df       	rcall	.-280    	; 0xd38 <gfx_mono_st7565r_get_byte>
     e50:	4f 2d       	mov	r20, r15
     e52:	48 27       	eor	r20, r24
     e54:	60 2f       	mov	r22, r16
     e56:	8d 2f       	mov	r24, r29
     e58:	50 de       	rcall	.-864    	; 0xafa <gfx_mono_st7565r_put_byte>
     e5a:	c1 50       	subi	r28, 0x01	; 1
     e5c:	a1 f7       	brne	.-24     	; 0xe46 <gfx_mono_generic_draw_horizontal_line+0xa0>
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	08 95       	ret

00000e6a <gfx_mono_generic_draw_filled_rect>:
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	22 23       	and	r18, r18
     e76:	69 f0       	breq	.+26     	; 0xe92 <gfx_mono_generic_draw_filled_rect+0x28>
     e78:	f4 2e       	mov	r15, r20
     e7a:	18 2f       	mov	r17, r24
     e7c:	c2 2f       	mov	r28, r18
     e7e:	df ef       	ldi	r29, 0xFF	; 255
     e80:	d6 0f       	add	r29, r22
     e82:	6d 2f       	mov	r22, r29
     e84:	6c 0f       	add	r22, r28
     e86:	20 2f       	mov	r18, r16
     e88:	4f 2d       	mov	r20, r15
     e8a:	81 2f       	mov	r24, r17
     e8c:	8c df       	rcall	.-232    	; 0xda6 <gfx_mono_generic_draw_horizontal_line>
     e8e:	c1 50       	subi	r28, 0x01	; 1
     e90:	c1 f7       	brne	.-16     	; 0xe82 <gfx_mono_generic_draw_filled_rect+0x18>
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	08 95       	ret

00000e9e <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	7c 01       	movw	r14, r24
     eb0:	d6 2e       	mov	r13, r22
	gfx_coord_t num_pages = bitmap->height / 8;
     eb2:	dc 01       	movw	r26, r24
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	cc 90       	ld	r12, X
     eb8:	11 97       	sbiw	r26, 0x01	; 1
     eba:	c6 94       	lsr	r12
     ebc:	c6 94       	lsr	r12
     ebe:	c6 94       	lsr	r12
	gfx_coord_t page = y / 8;
     ec0:	46 95       	lsr	r20
     ec2:	46 95       	lsr	r20
     ec4:	46 95       	lsr	r20
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
     ec6:	12 96       	adiw	r26, 0x02	; 2
     ec8:	8c 91       	ld	r24, X
     eca:	88 23       	and	r24, r24
     ecc:	31 f0       	breq	.+12     	; 0xeda <gfx_mono_generic_put_bitmap+0x3c>
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	09 f0       	breq	.+2      	; 0xed4 <gfx_mono_generic_put_bitmap+0x36>
     ed2:	45 c0       	rjmp	.+138    	; 0xf5e <gfx_mono_generic_put_bitmap+0xc0>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
     ed4:	c1 10       	cpse	r12, r1
     ed6:	23 c0       	rjmp	.+70     	; 0xf1e <gfx_mono_generic_put_bitmap+0x80>
     ed8:	42 c0       	rjmp	.+132    	; 0xf5e <gfx_mono_generic_put_bitmap+0xc0>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     eda:	c1 10       	cpse	r12, r1
     edc:	28 c0       	rjmp	.+80     	; 0xf2e <gfx_mono_generic_put_bitmap+0x90>
     ede:	3f c0       	rjmp	.+126    	; 0xf5e <gfx_mono_generic_put_bitmap+0xc0>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
     ee0:	c0 e0       	ldi	r28, 0x00	; 0
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
     ee2:	80 9f       	mul	r24, r16
     ee4:	f0 01       	movw	r30, r0
     ee6:	81 9f       	mul	r24, r17
     ee8:	f0 0d       	add	r31, r0
     eea:	11 24       	eor	r1, r1
     eec:	ec 0f       	add	r30, r28
     eee:	f1 1d       	adc	r31, r1
     ef0:	d7 01       	movw	r26, r14
     ef2:	13 96       	adiw	r26, 0x03	; 3
     ef4:	4d 91       	ld	r20, X+
     ef6:	5c 91       	ld	r21, X
     ef8:	14 97       	sbiw	r26, 0x04	; 4
     efa:	e4 0f       	add	r30, r20
     efc:	f5 1f       	adc	r31, r21
     efe:	44 91       	lpm	r20, Z
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
     f00:	6d 2d       	mov	r22, r13
     f02:	6c 0f       	add	r22, r28
     f04:	8d 2f       	mov	r24, r29
     f06:	f9 dd       	rcall	.-1038   	; 0xafa <gfx_mono_st7565r_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
     f08:	cf 5f       	subi	r28, 0xFF	; 255
     f0a:	f7 01       	movw	r30, r14
     f0c:	80 81       	ld	r24, Z
     f0e:	c8 17       	cp	r28, r24
     f10:	40 f3       	brcs	.-48     	; 0xee2 <gfx_mono_generic_put_bitmap+0x44>
     f12:	0f 5f       	subi	r16, 0xFF	; 255
     f14:	1f 4f       	sbci	r17, 0xFF	; 255
     f16:	df 5f       	subi	r29, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
     f18:	0c 15       	cp	r16, r12
     f1a:	20 f0       	brcs	.+8      	; 0xf24 <gfx_mono_generic_put_bitmap+0x86>
     f1c:	20 c0       	rjmp	.+64     	; 0xf5e <gfx_mono_generic_put_bitmap+0xc0>
     f1e:	d4 2f       	mov	r29, r20
     f20:	00 e0       	ldi	r16, 0x00	; 0
     f22:	10 e0       	ldi	r17, 0x00	; 0
			for (column = 0; column < bitmap->width; column++) {
     f24:	d7 01       	movw	r26, r14
     f26:	8c 91       	ld	r24, X
     f28:	81 11       	cpse	r24, r1
     f2a:	da cf       	rjmp	.-76     	; 0xee0 <gfx_mono_generic_put_bitmap+0x42>
     f2c:	f2 cf       	rjmp	.-28     	; 0xf12 <gfx_mono_generic_put_bitmap+0x74>
     f2e:	c4 0e       	add	r12, r20
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     f30:	d4 2f       	mov	r29, r20
     f32:	00 e0       	ldi	r16, 0x00	; 0
     f34:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
     f36:	f7 01       	movw	r30, r14
     f38:	20 81       	ld	r18, Z
     f3a:	20 9f       	mul	r18, r16
     f3c:	c0 01       	movw	r24, r0
     f3e:	21 9f       	mul	r18, r17
     f40:	90 0d       	add	r25, r0
     f42:	11 24       	eor	r1, r1
     f44:	03 80       	ldd	r0, Z+3	; 0x03
     f46:	f4 81       	ldd	r31, Z+4	; 0x04
     f48:	e0 2d       	mov	r30, r0
     f4a:	4d 2d       	mov	r20, r13
     f4c:	6d 2f       	mov	r22, r29
     f4e:	8e 0f       	add	r24, r30
     f50:	9f 1f       	adc	r25, r31
     f52:	00 dd       	rcall	.-1536   	; 0x954 <gfx_mono_st7565r_put_page>
     f54:	0f 5f       	subi	r16, 0xFF	; 255
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	df 5f       	subi	r29, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     f5a:	cd 12       	cpse	r12, r29
     f5c:	ec cf       	rjmp	.-40     	; 0xf36 <gfx_mono_generic_put_bitmap+0x98>
		break;

	default:
		break;
	}
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	08 95       	ret

00000f70 <gfx_mono_spinctrl_draw_indicator>:
 * \param *spinner initialized gfx_mono_spinctrl struct
 * \param draw     true on draw, false on delete
 */
static void gfx_mono_spinctrl_draw_indicator(struct gfx_mono_spinctrl *spinner,
		bool draw)
{
     f70:	0f 93       	push	r16
	if (draw) {
     f72:	66 23       	and	r22, r22
     f74:	39 f0       	breq	.+14     	; 0xf84 <gfx_mono_spinctrl_draw_indicator+0x14>
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator, 0,
     f76:	fc 01       	movw	r30, r24
     f78:	44 85       	ldd	r20, Z+12	; 0x0c
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e2       	ldi	r25, 0x20	; 32
     f80:	8e df       	rcall	.-228    	; 0xe9e <gfx_mono_generic_put_bitmap>
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <gfx_mono_spinctrl_draw_indicator+0x22>
				spinner->y);
	} else {
		gfx_mono_draw_filled_rect(0, spinner->y,
     f84:	00 e0       	ldi	r16, 0x00	; 0
     f86:	28 e0       	ldi	r18, 0x08	; 8
     f88:	44 e0       	ldi	r20, 0x04	; 4
     f8a:	fc 01       	movw	r30, r24
     f8c:	64 85       	ldd	r22, Z+12	; 0x0c
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	6c df       	rcall	.-296    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
				GFX_MONO_SPINCTRL_INDICATOR_HEIGHT,
				GFX_PIXEL_CLR);
	}
}
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <gfx_mono_spinctrl_draw_button>:
 *
 * \param draw       true on draw, false on delete
 * \param indicator  true on draw indicator, false on delete
 */
static void gfx_mono_spinctrl_draw_button(bool draw, bool indicator)
{
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	68 97       	sbiw	r28, 0x18	; 24
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	18 2f       	mov	r17, r24
     fb0:	d6 2e       	mov	r13, r22
	uint8_t height;
	uint8_t offset;
	char string_buf[22];

	/* Clear bottom line */
	gfx_mono_draw_filled_rect(0,
     fb2:	00 e0       	ldi	r16, 0x00	; 0
     fb4:	27 e0       	ldi	r18, 0x07	; 7
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	68 e1       	ldi	r22, 0x18	; 24
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	56 df       	rcall	.-340    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
			(SYSFONT_HEIGHT + 1) *
			GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION,
			GFX_MONO_LCD_WIDTH, SYSFONT_HEIGHT, GFX_PIXEL_CLR);

	snprintf(string_buf, sizeof(string_buf), "OK");
     fbe:	8f e4       	ldi	r24, 0x4F	; 79
     fc0:	9b e4       	ldi	r25, 0x4B	; 75
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	1d 82       	std	Y+5, r1	; 0x05
	gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width, &height);
     fc8:	9e 01       	movw	r18, r28
     fca:	2e 5f       	subi	r18, 0xFE	; 254
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	ae 01       	movw	r20, r28
     fd0:	4f 5f       	subi	r20, 0xFF	; 255
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	6a e0       	ldi	r22, 0x0A	; 10
     fd6:	70 e2       	ldi	r23, 0x20	; 32
     fd8:	ce 01       	movw	r24, r28
     fda:	03 96       	adiw	r24, 0x03	; 3
     fdc:	fd d1       	rcall	.+1018   	; 0x13d8 <gfx_mono_get_string_bounding_box>
	offset = (GFX_MONO_LCD_WIDTH - width) / 2;
     fde:	29 81       	ldd	r18, Y+1	; 0x01
     fe0:	80 e8       	ldi	r24, 0x80	; 128
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	82 1b       	sub	r24, r18
     fe6:	91 09       	sbc	r25, r1
     fe8:	bc 01       	movw	r22, r24
     fea:	12 f4       	brpl	.+4      	; 0xff0 <gfx_mono_spinctrl_draw_button+0x5a>
     fec:	6f 5f       	subi	r22, 0xFF	; 255
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	7b 01       	movw	r14, r22
     ff2:	f5 94       	asr	r15
     ff4:	e7 94       	ror	r14

	if (draw) {
     ff6:	11 23       	and	r17, r17
     ff8:	c1 f0       	breq	.+48     	; 0x102a <gfx_mono_spinctrl_draw_button+0x94>
		/* Draw OK button in the middle of the last line */
		gfx_mono_draw_string(string_buf, offset,
     ffa:	2a e0       	ldi	r18, 0x0A	; 10
     ffc:	30 e2       	ldi	r19, 0x20	; 32
     ffe:	48 e1       	ldi	r20, 0x18	; 24
    1000:	6e 2d       	mov	r22, r14
    1002:	ce 01       	movw	r24, r28
    1004:	03 96       	adiw	r24, 0x03	; 3
    1006:	91 d1       	rcall	.+802    	; 0x132a <gfx_mono_draw_string>
				(SYSFONT_HEIGHT + 1) *
				GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION,
				&sysfont);
		if (indicator) {
    1008:	dd 20       	and	r13, r13
    100a:	39 f0       	breq	.+14     	; 0x101a <gfx_mono_spinctrl_draw_button+0x84>
			/* Draw indicator arrow in front of button */
			gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator,
    100c:	6c ef       	ldi	r22, 0xFC	; 252
    100e:	6e 0d       	add	r22, r14
    1010:	48 e1       	ldi	r20, 0x18	; 24
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e2       	ldi	r25, 0x20	; 32
    1016:	43 df       	rcall	.-378    	; 0xe9e <gfx_mono_generic_put_bitmap>
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <gfx_mono_spinctrl_draw_button+0xa2>
					offset - GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
					(SYSFONT_HEIGHT + 1) *
					GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION);
		} else {
			/* Delete indicator */
			gfx_mono_draw_filled_rect(offset -
    101a:	00 e0       	ldi	r16, 0x00	; 0
    101c:	28 e0       	ldi	r18, 0x08	; 8
    101e:	44 e0       	ldi	r20, 0x04	; 4
    1020:	68 e1       	ldi	r22, 0x18	; 24
    1022:	8c ef       	ldi	r24, 0xFC	; 252
    1024:	8e 0d       	add	r24, r14
    1026:	21 df       	rcall	.-446    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
    1028:	07 c0       	rjmp	.+14     	; 0x1038 <gfx_mono_spinctrl_draw_button+0xa2>
					GFX_MONO_SPINCTRL_INDICATOR_HEIGHT,
					GFX_PIXEL_CLR);
		}
	} else {
		/* Delete OK button */
		gfx_mono_draw_filled_rect(
    102a:	00 e0       	ldi	r16, 0x00	; 0
    102c:	27 e0       	ldi	r18, 0x07	; 7
    102e:	44 e1       	ldi	r20, 0x14	; 20
    1030:	68 e1       	ldi	r22, 0x18	; 24
    1032:	8c ef       	ldi	r24, 0xFC	; 252
    1034:	8e 0d       	add	r24, r14
    1036:	19 df       	rcall	.-462    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
				offset - GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
				(SYSFONT_HEIGHT + 1) *
				GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION, 20,
				SYSFONT_HEIGHT, GFX_PIXEL_CLR);
	}
}
    1038:	68 96       	adiw	r28, 0x18	; 24
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	08 95       	ret

0000104e <gfx_mono_spinctrl_draw>:
 *
 * \param spinner  pointer to initialized gfx_mono_spinctrl struct
 * \param redraw   true if title of spinner should be drawn
 */
void gfx_mono_spinctrl_draw(struct gfx_mono_spinctrl *spinner, bool redraw)
{
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	29 97       	sbiw	r28, 0x09	; 9
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	7c 01       	movw	r14, r24
	char string_buf[GFX_MONO_SPINCTRL_INT_SPINNER_WIDTH];
	uint8_t index;
	uint8_t offset;

	if (redraw) {
    106a:	66 23       	and	r22, r22
    106c:	81 f0       	breq	.+32     	; 0x108e <gfx_mono_spinctrl_draw+0x40>
		/* Clear line */
		gfx_mono_draw_filled_rect(0, spinner->y, GFX_MONO_LCD_WIDTH,
    106e:	00 e0       	ldi	r16, 0x00	; 0
    1070:	27 e0       	ldi	r18, 0x07	; 7
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	dc 01       	movw	r26, r24
    1076:	1c 96       	adiw	r26, 0x0c	; 12
    1078:	6c 91       	ld	r22, X
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	f6 de       	rcall	.-532    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
				SYSFONT_HEIGHT, GFX_PIXEL_CLR);
		/* Draw title */
		gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)spinner->title,
    107e:	2a e0       	ldi	r18, 0x0A	; 10
    1080:	30 e2       	ldi	r19, 0x20	; 32
    1082:	f7 01       	movw	r30, r14
    1084:	44 85       	ldd	r20, Z+12	; 0x0c
    1086:	65 e0       	ldi	r22, 0x05	; 5
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	77 d1       	rcall	.+750    	; 0x137c <gfx_mono_draw_progmem_string>
				GFX_MONO_SPINCTRL_INDICATOR_WIDTH + 1,
				spinner->y, &sysfont);
	}

	if (spinner->in_focus) {
    108e:	d7 01       	movw	r26, r14
    1090:	1d 96       	adiw	r26, 0x0d	; 13
    1092:	8c 91       	ld	r24, X
    1094:	1d 97       	sbiw	r26, 0x0d	; 13
    1096:	88 23       	and	r24, r24
    1098:	39 f0       	breq	.+14     	; 0x10a8 <gfx_mono_spinctrl_draw+0x5a>
 */
static void gfx_mono_spinctrl_draw_spin_indicator(struct gfx_mono_spinctrl
		*spinner, bool draw)
{
	if (draw) {
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_spin_indicator,
    109a:	1c 96       	adiw	r26, 0x0c	; 12
    109c:	4c 91       	ld	r20, X
    109e:	6c e7       	ldi	r22, 0x7C	; 124
    10a0:	85 e0       	ldi	r24, 0x05	; 5
    10a2:	90 e2       	ldi	r25, 0x20	; 32
    10a4:	fc de       	rcall	.-520    	; 0xe9e <gfx_mono_generic_put_bitmap>
    10a6:	07 c0       	rjmp	.+14     	; 0x10b6 <gfx_mono_spinctrl_draw+0x68>
				GFX_MONO_LCD_WIDTH - GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				spinner->y);
	} else {
		gfx_mono_draw_filled_rect(GFX_MONO_LCD_WIDTH -
    10a8:	00 e0       	ldi	r16, 0x00	; 0
    10aa:	28 e0       	ldi	r18, 0x08	; 8
    10ac:	44 e0       	ldi	r20, 0x04	; 4
    10ae:	f7 01       	movw	r30, r14
    10b0:	64 85       	ldd	r22, Z+12	; 0x0c
    10b2:	8c e7       	ldi	r24, 0x7C	; 124
    10b4:	da de       	rcall	.-588    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
		gfx_mono_spinctrl_draw_spin_indicator(spinner, true);
	} else {
		gfx_mono_spinctrl_draw_spin_indicator(spinner, false);
	}

	if (spinner->datatype == SPINTYPE_INTEGER) {
    10b6:	d7 01       	movw	r26, r14
    10b8:	12 96       	adiw	r26, 0x02	; 2
    10ba:	8c 91       	ld	r24, X
    10bc:	12 97       	sbiw	r26, 0x02	; 2
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	31 f5       	brne	.+76     	; 0x110e <gfx_mono_spinctrl_draw+0xc0>
		offset = GFX_MONO_LCD_WIDTH -
				(SYSFONT_WIDTH *
				GFX_MONO_SPINCTRL_INT_SPINNER_WIDTH);
		snprintf(string_buf, sizeof(string_buf), "%d",
    10c2:	14 96       	adiw	r26, 0x04	; 4
    10c4:	8c 91       	ld	r24, X
    10c6:	14 97       	sbiw	r26, 0x04	; 4
    10c8:	8f 93       	push	r24
    10ca:	13 96       	adiw	r26, 0x03	; 3
    10cc:	8c 91       	ld	r24, X
    10ce:	8f 93       	push	r24
    10d0:	89 e1       	ldi	r24, 0x19	; 25
    10d2:	90 e2       	ldi	r25, 0x20	; 32
    10d4:	9f 93       	push	r25
    10d6:	8f 93       	push	r24
    10d8:	1f 92       	push	r1
    10da:	89 e0       	ldi	r24, 0x09	; 9
    10dc:	8f 93       	push	r24
    10de:	fe 01       	movw	r30, r28
    10e0:	31 96       	adiw	r30, 0x01	; 1
    10e2:	6f 01       	movw	r12, r30
    10e4:	ff 93       	push	r31
    10e6:	ef 93       	push	r30
    10e8:	13 d5       	rcall	.+2598   	; 0x1b10 <snprintf>
				spinner->integer_data);
		/* Delete previous spinner data */
		gfx_mono_draw_filled_rect(offset, spinner->y,
    10ea:	00 e0       	ldi	r16, 0x00	; 0
    10ec:	27 e0       	ldi	r18, 0x07	; 7
    10ee:	42 e3       	ldi	r20, 0x32	; 50
    10f0:	d7 01       	movw	r26, r14
    10f2:	1c 96       	adiw	r26, 0x0c	; 12
    10f4:	6c 91       	ld	r22, X
    10f6:	8a e4       	ldi	r24, 0x4A	; 74
    10f8:	b8 de       	rcall	.-656    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_LCD_WIDTH - offset -
				GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				SYSFONT_HEIGHT,
				GFX_PIXEL_CLR);
		/* Draw integer data */
		gfx_mono_draw_string(string_buf, offset, spinner->y, &sysfont);
    10fa:	2a e0       	ldi	r18, 0x0A	; 10
    10fc:	30 e2       	ldi	r19, 0x20	; 32
    10fe:	f7 01       	movw	r30, r14
    1100:	44 85       	ldd	r20, Z+12	; 0x0c
    1102:	6a e4       	ldi	r22, 0x4A	; 74
    1104:	c6 01       	movw	r24, r12
    1106:	11 d1       	rcall	.+546    	; 0x132a <gfx_mono_draw_string>
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	20 c0       	rjmp	.+64     	; 0x114e <gfx_mono_spinctrl_draw+0x100>
	} else if (spinner->datatype == SPINTYPE_STRING) {
    110e:	81 11       	cpse	r24, r1
    1110:	1e c0       	rjmp	.+60     	; 0x114e <gfx_mono_spinctrl_draw+0x100>
		index = spinner->strings.index;
    1112:	d7 01       	movw	r26, r14
    1114:	15 96       	adiw	r26, 0x05	; 5
    1116:	1c 91       	ld	r17, X
		offset = GFX_MONO_LCD_WIDTH -
				(SYSFONT_WIDTH *
				GFX_MONO_SPINCTRL_STRING_SPINNER_WIDTH);

		/* Delete previous spinner data */
		gfx_mono_draw_filled_rect(offset, spinner->y,
    1118:	15 97       	sbiw	r26, 0x05	; 5
    111a:	00 e0       	ldi	r16, 0x00	; 0
    111c:	27 e0       	ldi	r18, 0x07	; 7
    111e:	42 e3       	ldi	r20, 0x32	; 50
    1120:	1c 96       	adiw	r26, 0x0c	; 12
    1122:	6c 91       	ld	r22, X
    1124:	8a e4       	ldi	r24, 0x4A	; 74
    1126:	a1 de       	rcall	.-702    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				SYSFONT_HEIGHT,
				GFX_PIXEL_CLR);

		/* Draw string data */
		gfx_mono_draw_progmem_string(
    1128:	e1 2f       	mov	r30, r17
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	d7 01       	movw	r26, r14
    1132:	13 96       	adiw	r26, 0x03	; 3
    1134:	8d 91       	ld	r24, X+
    1136:	9c 91       	ld	r25, X
    1138:	14 97       	sbiw	r26, 0x04	; 4
    113a:	e8 0f       	add	r30, r24
    113c:	f9 1f       	adc	r31, r25
    113e:	2a e0       	ldi	r18, 0x0A	; 10
    1140:	30 e2       	ldi	r19, 0x20	; 32
    1142:	1c 96       	adiw	r26, 0x0c	; 12
    1144:	4c 91       	ld	r20, X
    1146:	6a e4       	ldi	r22, 0x4A	; 74
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	17 d1       	rcall	.+558    	; 0x137c <gfx_mono_draw_progmem_string>
				(char PROGMEM_PTR_T)spinner->strings.data[index], offset,
				spinner->y, &sysfont);
	}
}
    114e:	29 96       	adiw	r28, 0x09	; 9
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	08 95       	ret

00001166 <gfx_mono_spinctrl_init>:
void gfx_mono_spinctrl_init(struct gfx_mono_spinctrl *spinner,
		gfx_mono_spinctrl_type_t datatype, PROGMEM_STRING_T title,
		PROGMEM_STRING_T *data, int16_t lower_limit,
		int16_t upper_limit,
		gfx_coord_t y)
{
    1166:	cf 92       	push	r12
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	fc 01       	movw	r30, r24
	/* Initialization of spinner parameters */
	spinner->title = title;
    1172:	40 83       	st	Z, r20
    1174:	51 83       	std	Z+1, r21	; 0x01
	spinner->datatype = datatype;
    1176:	62 83       	std	Z+2, r22	; 0x02
	spinner->lower_limit = lower_limit;
    1178:	00 87       	std	Z+8, r16	; 0x08
    117a:	11 87       	std	Z+9, r17	; 0x09
	spinner->upper_limit = upper_limit;
    117c:	e2 86       	std	Z+10, r14	; 0x0a
    117e:	f3 86       	std	Z+11, r15	; 0x0b
	spinner->y = y;
    1180:	c4 86       	std	Z+12, r12	; 0x0c
	spinner->in_focus = false;
    1182:	15 86       	std	Z+13, r1	; 0x0d
	spinner->last_saved_value = spinner->lower_limit;
    1184:	06 83       	std	Z+6, r16	; 0x06
    1186:	17 83       	std	Z+7, r17	; 0x07

	if (datatype == SPINTYPE_STRING) {
    1188:	61 11       	cpse	r22, r1
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <gfx_mono_spinctrl_init+0x2e>
		spinner->strings.data = data;
    118c:	23 83       	std	Z+3, r18	; 0x03
    118e:	34 83       	std	Z+4, r19	; 0x04
		spinner->strings.index = lower_limit;
    1190:	05 83       	std	Z+5, r16	; 0x05
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <gfx_mono_spinctrl_init+0x32>
	} else {
		spinner->integer_data = lower_limit;
    1194:	03 83       	std	Z+3, r16	; 0x03
    1196:	14 83       	std	Z+4, r17	; 0x04
	}
}
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	cf 90       	pop	r12
    11a2:	08 95       	ret

000011a4 <gfx_mono_spinctrl_spincollection_init>:
 *
 * \param collection pointer to gfx_mono_spinctrl_spincollection to Initialize
 */
void gfx_mono_spinctrl_spincollection_init(struct
		gfx_mono_spinctrl_spincollection *collection)
{
    11a4:	fc 01       	movw	r30, r24
	collection->active_spinner = false;
    11a6:	10 86       	std	Z+8, r1	; 0x08
	collection->current_selection = 0;
    11a8:	15 82       	std	Z+5, r1	; 0x05
	collection->number_of_spinners = 0;
    11aa:	14 82       	std	Z+4, r1	; 0x04
	collection->init = true;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	81 87       	std	Z+9, r24	; 0x09
    11b0:	08 95       	ret

000011b2 <gfx_mono_spinctrl_spincollection_add_spinner>:
 *
 */
void gfx_mono_spinctrl_spincollection_add_spinner(struct
		gfx_mono_spinctrl *spinner,
		struct gfx_mono_spinctrl_spincollection *spinners)
{
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ec 01       	movw	r28, r24
    11b8:	db 01       	movw	r26, r22
	uint8_t i;
	struct gfx_mono_spinctrl *lastspinner;

	/* Do not add more spinner elements than maximum number of spinners */
	if (spinners->number_of_spinners >=
    11ba:	14 96       	adiw	r26, 0x04	; 4
    11bc:	9c 91       	ld	r25, X
    11be:	14 97       	sbiw	r26, 0x04	; 4
    11c0:	93 30       	cpi	r25, 0x03	; 3
    11c2:	38 f5       	brcc	.+78     	; 0x1212 <gfx_mono_spinctrl_spincollection_add_spinner+0x60>
			GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION) {
		return;
	}

	/* Place new spinner below previous spinners on screen */
	spinner->y = (SYSFONT_HEIGHT + 1) * spinners->number_of_spinners;
    11c4:	99 0f       	add	r25, r25
    11c6:	99 0f       	add	r25, r25
    11c8:	99 0f       	add	r25, r25
    11ca:	9c 87       	std	Y+12, r25	; 0x0c

	/* Add pointer to the spinner in spincollection if empty */
	if (spinners->number_of_spinners == 0) {
    11cc:	14 96       	adiw	r26, 0x04	; 4
    11ce:	2c 91       	ld	r18, X
    11d0:	14 97       	sbiw	r26, 0x04	; 4
    11d2:	21 11       	cpse	r18, r1
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <gfx_mono_spinctrl_spincollection_add_spinner+0x2c>
		spinners->collection = spinner;
    11d6:	cd 93       	st	X+, r28
    11d8:	dc 93       	st	X, r29
    11da:	11 97       	sbiw	r26, 0x01	; 1
    11dc:	10 c0       	rjmp	.+32     	; 0x11fe <gfx_mono_spinctrl_spincollection_add_spinner+0x4c>
	} else {
		lastspinner = spinners->collection;
    11de:	ed 91       	ld	r30, X+
    11e0:	fc 91       	ld	r31, X
    11e2:	11 97       	sbiw	r26, 0x01	; 1
		for (i = 1; i < spinners->number_of_spinners; i++) {
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	38 f0       	brcs	.+14     	; 0x11f6 <gfx_mono_spinctrl_spincollection_add_spinner+0x44>
    11e8:	91 e0       	ldi	r25, 0x01	; 1
			lastspinner = lastspinner->next;
    11ea:	06 84       	ldd	r0, Z+14	; 0x0e
    11ec:	f7 85       	ldd	r31, Z+15	; 0x0f
    11ee:	e0 2d       	mov	r30, r0
	/* Add pointer to the spinner in spincollection if empty */
	if (spinners->number_of_spinners == 0) {
		spinners->collection = spinner;
	} else {
		lastspinner = spinners->collection;
		for (i = 1; i < spinners->number_of_spinners; i++) {
    11f0:	9f 5f       	subi	r25, 0xFF	; 255
    11f2:	29 13       	cpse	r18, r25
    11f4:	fa cf       	rjmp	.-12     	; 0x11ea <gfx_mono_spinctrl_spincollection_add_spinner+0x38>
			lastspinner = lastspinner->next;
		}
		/* Link the new spinner to the current last spinner in the
		 * collection */
		lastspinner->next = spinner;
    11f6:	c6 87       	std	Z+14, r28	; 0x0e
    11f8:	d7 87       	std	Z+15, r29	; 0x0f
		/* Link the current last spinner as previous spinner for new
		 * spinner */
		spinner->prev = lastspinner;
    11fa:	e8 8b       	std	Y+16, r30	; 0x10
    11fc:	f9 8b       	std	Y+17, r31	; 0x11
	}

	/* Set added spinner as last spinner in collection */
	spinners->collection_last = spinner;
    11fe:	12 96       	adiw	r26, 0x02	; 2
    1200:	cd 93       	st	X+, r28
    1202:	dc 93       	st	X, r29
    1204:	13 97       	sbiw	r26, 0x03	; 3
	/* Update number of spinners in collection */
	spinners->number_of_spinners++;
    1206:	14 96       	adiw	r26, 0x04	; 4
    1208:	8c 91       	ld	r24, X
    120a:	14 97       	sbiw	r26, 0x04	; 4
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	14 96       	adiw	r26, 0x04	; 4
    1210:	8c 93       	st	X, r24
}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <gfx_mono_spinctrl_spincollection_show>:
 *
 * \param spinners pointer to initialized spincollection to display
 */
void gfx_mono_spinctrl_spincollection_show(struct
		gfx_mono_spinctrl_spincollection *spinners)
{
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	7c 01       	movw	r14, r24
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    1224:	00 e0       	ldi	r16, 0x00	; 0
    1226:	20 e2       	ldi	r18, 0x20	; 32
    1228:	40 e8       	ldi	r20, 0x80	; 128
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	1d de       	rcall	.-966    	; 0xe6a <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	/* Make sure there are spinners in the collection */
	if (spinners->number_of_spinners == 0) {
    1230:	f7 01       	movw	r30, r14
    1232:	84 81       	ldd	r24, Z+4	; 0x04
    1234:	88 23       	and	r24, r24
    1236:	b1 f0       	breq	.+44     	; 0x1264 <gfx_mono_spinctrl_spincollection_show+0x4c>
		return;
	}

	/* Draw spinners on screen */
	iterator = spinners->collection;
    1238:	00 81       	ld	r16, Z
    123a:	11 81       	ldd	r17, Z+1	; 0x01
    123c:	c0 e0       	ldi	r28, 0x00	; 0
	for (i = 0; i < spinners->number_of_spinners; i++) {
		gfx_mono_spinctrl_draw(iterator, true);
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	c8 01       	movw	r24, r16
    1242:	05 df       	rcall	.-502    	; 0x104e <gfx_mono_spinctrl_draw>
		iterator = iterator->next;
    1244:	f8 01       	movw	r30, r16
    1246:	06 85       	ldd	r16, Z+14	; 0x0e
    1248:	17 85       	ldd	r17, Z+15	; 0x0f
		return;
	}

	/* Draw spinners on screen */
	iterator = spinners->collection;
	for (i = 0; i < spinners->number_of_spinners; i++) {
    124a:	cf 5f       	subi	r28, 0xFF	; 255
    124c:	f7 01       	movw	r30, r14
    124e:	84 81       	ldd	r24, Z+4	; 0x04
    1250:	c8 17       	cp	r28, r24
    1252:	a8 f3       	brcs	.-22     	; 0x123e <gfx_mono_spinctrl_spincollection_show+0x26>
		gfx_mono_spinctrl_draw(iterator, true);
		iterator = iterator->next;
	}
	/* Draw OK button at bottom of screen */
	gfx_mono_spinctrl_draw_button(true, false);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	9e de       	rcall	.-708    	; 0xf96 <gfx_mono_spinctrl_draw_button>
	/* Draw indicator arrow in front of first spinner */
	gfx_mono_spinctrl_draw_indicator(spinners->collection, true);
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	f7 01       	movw	r30, r14
    125e:	80 81       	ld	r24, Z
    1260:	91 81       	ldd	r25, Z+1	; 0x01
    1262:	86 de       	rcall	.-756    	; 0xf70 <gfx_mono_spinctrl_draw_indicator>
}
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	08 95       	ret

00001270 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	c8 2f       	mov	r28, r24
    1286:	e6 2e       	mov	r14, r22
    1288:	b4 2e       	mov	r11, r20
    128a:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    128c:	00 e0       	ldi	r16, 0x00	; 0
    128e:	f9 01       	movw	r30, r18
    1290:	24 81       	ldd	r18, Z+4	; 0x04
    1292:	43 81       	ldd	r20, Z+3	; 0x03
    1294:	6b 2d       	mov	r22, r11
    1296:	8e 2d       	mov	r24, r14
    1298:	e8 dd       	rcall	.-1072   	; 0xe6a <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    129a:	f6 01       	movw	r30, r12
    129c:	80 81       	ld	r24, Z
    129e:	81 11       	cpse	r24, r1
    12a0:	39 c0       	rjmp	.+114    	; 0x1314 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    12a2:	83 81       	ldd	r24, Z+3	; 0x03
    12a4:	28 2f       	mov	r18, r24
    12a6:	26 95       	lsr	r18
    12a8:	26 95       	lsr	r18
    12aa:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    12ac:	87 70       	andi	r24, 0x07	; 7
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <gfx_mono_draw_char+0x42>
		char_row_size++;
    12b0:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    12b2:	f6 01       	movw	r30, r12
    12b4:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    12b6:	8c 2f       	mov	r24, r28
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	35 81       	ldd	r19, Z+5	; 0x05
    12bc:	83 1b       	sub	r24, r19
    12be:	91 09       	sbc	r25, r1
    12c0:	2a 9d       	mul	r18, r10
    12c2:	90 01       	movw	r18, r0
    12c4:	11 24       	eor	r1, r1
    12c6:	82 9f       	mul	r24, r18
    12c8:	a0 01       	movw	r20, r0
    12ca:	83 9f       	mul	r24, r19
    12cc:	50 0d       	add	r21, r0
    12ce:	92 9f       	mul	r25, r18
    12d0:	50 0d       	add	r21, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	01 81       	ldd	r16, Z+1	; 0x01
    12d6:	12 81       	ldd	r17, Z+2	; 0x02
    12d8:	04 0f       	add	r16, r20
    12da:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    12dc:	f6 01       	movw	r30, r12
    12de:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    12e0:	ff 20       	and	r15, r15
    12e2:	a1 f0       	breq	.+40     	; 0x130c <gfx_mono_draw_char+0x9c>
    12e4:	d0 e0       	ldi	r29, 0x00	; 0
    12e6:	c0 e0       	ldi	r28, 0x00	; 0
    12e8:	8e 2d       	mov	r24, r14
    12ea:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    12ec:	9c 2f       	mov	r25, r28
    12ee:	97 70       	andi	r25, 0x07	; 7
    12f0:	21 f4       	brne	.+8      	; 0x12fa <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    12f2:	f8 01       	movw	r30, r16
    12f4:	d4 91       	lpm	r29, Z
				glyph_data++;
    12f6:	0f 5f       	subi	r16, 0xFF	; 255
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    12fa:	dd 23       	and	r29, r29
    12fc:	1c f4       	brge	.+6      	; 0x1304 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	6b 2d       	mov	r22, r11
    1302:	e4 dc       	rcall	.-1592   	; 0xccc <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1304:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1306:	cf 5f       	subi	r28, 0xFF	; 255
    1308:	fc 12       	cpse	r15, r28
    130a:	ee cf       	rjmp	.-36     	; 0x12e8 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    130c:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    130e:	aa 94       	dec	r10
	} while (rows_left > 0);
    1310:	a1 10       	cpse	r10, r1
    1312:	e4 cf       	rjmp	.-56     	; 0x12dc <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	08 95       	ret

0000132a <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	d6 2e       	mov	r13, r22
    133a:	04 2f       	mov	r16, r20
    133c:	79 01       	movw	r14, r18
    133e:	ec 01       	movw	r28, r24
    1340:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1342:	89 91       	ld	r24, Y+
    1344:	8a 30       	cpi	r24, 0x0A	; 10
    1346:	31 f4       	brne	.+12     	; 0x1354 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    1348:	f7 01       	movw	r30, r14
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1350:	1d 2d       	mov	r17, r13
    1352:	09 c0       	rjmp	.+18     	; 0x1366 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    1354:	8d 30       	cpi	r24, 0x0D	; 13
    1356:	39 f0       	breq	.+14     	; 0x1366 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1358:	97 01       	movw	r18, r14
    135a:	40 2f       	mov	r20, r16
    135c:	61 2f       	mov	r22, r17
    135e:	88 df       	rcall	.-240    	; 0x1270 <gfx_mono_draw_char>
			x += font->width;
    1360:	f7 01       	movw	r30, r14
    1362:	83 81       	ldd	r24, Z+3	; 0x03
    1364:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1366:	88 81       	ld	r24, Y
    1368:	81 11       	cpse	r24, r1
    136a:	eb cf       	rjmp	.-42     	; 0x1342 <gfx_mono_draw_string+0x18>
}
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	df 90       	pop	r13
    137a:	08 95       	ret

0000137c <gfx_mono_draw_progmem_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_progmem_string(char PROGMEM_PTR_T str, gfx_coord_t x,
		gfx_coord_t y, const struct font *font)
{
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	ec 01       	movw	r28, r24
    138c:	d6 2e       	mov	r13, r22
    138e:	04 2f       	mov	r16, r20
    1390:	79 01       	movw	r14, r18

	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
    1392:	fc 01       	movw	r30, r24
    1394:	84 91       	lpm	r24, Z

	while (temp_char) {
    1396:	88 23       	and	r24, r24
    1398:	b9 f0       	breq	.+46     	; 0x13c8 <gfx_mono_draw_progmem_string+0x4c>
    139a:	16 2f       	mov	r17, r22
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
    139c:	8a 30       	cpi	r24, 0x0A	; 10
    139e:	31 f4       	brne	.+12     	; 0x13ac <gfx_mono_draw_progmem_string+0x30>
			x = start_of_string_position_x;
			y += font->height + 1;
    13a0:	f7 01       	movw	r30, r14
    13a2:	84 81       	ldd	r24, Z+4	; 0x04
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	08 0f       	add	r16, r24
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
    13a8:	1d 2d       	mov	r17, r13
    13aa:	09 c0       	rjmp	.+18     	; 0x13be <gfx_mono_draw_progmem_string+0x42>
			y += font->height + 1;
		} else if (temp_char == '\r') {
    13ac:	8d 30       	cpi	r24, 0x0D	; 13
    13ae:	39 f0       	breq	.+14     	; 0x13be <gfx_mono_draw_progmem_string+0x42>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(temp_char, x, y, font);
    13b0:	97 01       	movw	r18, r14
    13b2:	40 2f       	mov	r20, r16
    13b4:	61 2f       	mov	r22, r17
    13b6:	5c df       	rcall	.-328    	; 0x1270 <gfx_mono_draw_char>
			x += font->width;
    13b8:	f7 01       	movw	r30, r14
    13ba:	83 81       	ldd	r24, Z+3	; 0x03
    13bc:	18 0f       	add	r17, r24
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
    13be:	21 96       	adiw	r28, 0x01	; 1
    13c0:	fe 01       	movw	r30, r28
    13c2:	84 91       	lpm	r24, Z
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
    13c4:	81 11       	cpse	r24, r1
    13c6:	ea cf       	rjmp	.-44     	; 0x139c <gfx_mono_draw_progmem_string+0x20>
			x += font->width;
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
	}
}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	08 95       	ret

000013d8 <gfx_mono_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_mono_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	fb 01       	movw	r30, r22
    13de:	ea 01       	movw	r28, r20
    13e0:	d9 01       	movw	r26, r18
	gfx_coord_t font_width = font->width;
    13e2:	73 81       	ldd	r23, Z+3	; 0x03
	gfx_coord_t font_height = font->height;
    13e4:	64 81       	ldd	r22, Z+4	; 0x04
    13e6:	fc 01       	movw	r30, r24

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
    13e8:	56 2f       	mov	r21, r22
	gfx_coord_t x = 0;
    13ea:	90 e0       	ldi	r25, 0x00	; 0
		gfx_coord_t *width, gfx_coord_t *height)
{
	gfx_coord_t font_width = font->width;
	gfx_coord_t font_height = font->height;

	gfx_coord_t max_width = 1;
    13ec:	31 e0       	ldi	r19, 0x01	; 1
	Assert(font != NULL);

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    13ee:	81 91       	ld	r24, Z+
    13f0:	8a 30       	cpi	r24, 0x0A	; 10
    13f2:	19 f4       	brne	.+6      	; 0x13fa <gfx_mono_get_string_bounding_box+0x22>
			x = 0;
			max_height += font_height;
    13f4:	56 0f       	add	r21, r22

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <gfx_mono_get_string_bounding_box+0x2e>
			max_height += font_height;
		} else if (*str == '\r') {
    13fa:	8d 30       	cpi	r24, 0x0D	; 13
    13fc:	21 f0       	breq	.+8      	; 0x1406 <gfx_mono_get_string_bounding_box+0x2e>
			/* Skip '\r' characters. */
		} else {
			x += font_width;
    13fe:	97 0f       	add	r25, r23
    1400:	39 17       	cp	r19, r25
    1402:	08 f4       	brcc	.+2      	; 0x1406 <gfx_mono_get_string_bounding_box+0x2e>
    1404:	39 2f       	mov	r19, r25
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
    1406:	80 81       	ld	r24, Z
    1408:	81 11       	cpse	r24, r1
    140a:	f1 cf       	rjmp	.-30     	; 0x13ee <gfx_mono_get_string_bounding_box+0x16>

	/* Return values through references */
	*width = max_width;
    140c:	38 83       	st	Y, r19
	*height = max_height;
    140e:	5c 93       	st	X, r21
}
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1420:	c6 2f       	mov	r28, r22
    1422:	d0 e0       	ldi	r29, 0x00	; 0
    1424:	de 01       	movw	r26, r28
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <ioport_configure_port_pin+0x18>
    142a:	b5 95       	asr	r27
    142c:	a7 95       	ror	r26
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <ioport_configure_port_pin+0x14>
    1432:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1434:	50 8b       	std	Z+16, r21	; 0x10
    1436:	2f 5f       	subi	r18, 0xFF	; 255
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    143c:	28 30       	cpi	r18, 0x08	; 8
    143e:	31 05       	cpc	r19, r1
    1440:	89 f7       	brne	.-30     	; 0x1424 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1442:	40 ff       	sbrs	r20, 0
    1444:	0a c0       	rjmp	.+20     	; 0x145a <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1446:	41 ff       	sbrs	r20, 1
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    144a:	fc 01       	movw	r30, r24
    144c:	65 83       	std	Z+5, r22	; 0x05
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1450:	fc 01       	movw	r30, r24
    1452:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1454:	fc 01       	movw	r30, r24
    1456:	61 83       	std	Z+1, r22	; 0x01
    1458:	02 c0       	rjmp	.+4      	; 0x145e <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    145a:	fc 01       	movw	r30, r24
    145c:	62 83       	std	Z+2, r22	; 0x02
	}
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1464:	80 3a       	cpi	r24, 0xA0	; 160
    1466:	28 e0       	ldi	r18, 0x08	; 8
    1468:	92 07       	cpc	r25, r18
    146a:	21 f4       	brne	.+8      	; 0x1474 <usart_spi_init+0x10>
    146c:	60 e1       	ldi	r22, 0x10	; 16
    146e:	83 e0       	ldi	r24, 0x03	; 3
    1470:	5b ca       	rjmp	.-2890   	; 0x928 <sysclk_enable_module>
    1472:	08 95       	ret
    1474:	80 3b       	cpi	r24, 0xB0	; 176
    1476:	28 e0       	ldi	r18, 0x08	; 8
    1478:	92 07       	cpc	r25, r18
    147a:	21 f4       	brne	.+8      	; 0x1484 <usart_spi_init+0x20>
    147c:	60 e2       	ldi	r22, 0x20	; 32
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	53 ca       	rjmp	.-2906   	; 0x928 <sysclk_enable_module>
    1482:	08 95       	ret
    1484:	80 3a       	cpi	r24, 0xA0	; 160
    1486:	29 e0       	ldi	r18, 0x09	; 9
    1488:	92 07       	cpc	r25, r18
    148a:	21 f4       	brne	.+8      	; 0x1494 <usart_spi_init+0x30>
    148c:	60 e1       	ldi	r22, 0x10	; 16
    148e:	84 e0       	ldi	r24, 0x04	; 4
    1490:	4b ca       	rjmp	.-2922   	; 0x928 <sysclk_enable_module>
    1492:	08 95       	ret
    1494:	80 3b       	cpi	r24, 0xB0	; 176
    1496:	29 e0       	ldi	r18, 0x09	; 9
    1498:	92 07       	cpc	r25, r18
    149a:	21 f4       	brne	.+8      	; 0x14a4 <usart_spi_init+0x40>
    149c:	60 e2       	ldi	r22, 0x20	; 32
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	43 ca       	rjmp	.-2938   	; 0x928 <sysclk_enable_module>
    14a2:	08 95       	ret
    14a4:	80 3a       	cpi	r24, 0xA0	; 160
    14a6:	2a e0       	ldi	r18, 0x0A	; 10
    14a8:	92 07       	cpc	r25, r18
    14aa:	21 f4       	brne	.+8      	; 0x14b4 <usart_spi_init+0x50>
    14ac:	60 e1       	ldi	r22, 0x10	; 16
    14ae:	85 e0       	ldi	r24, 0x05	; 5
    14b0:	3b ca       	rjmp	.-2954   	; 0x928 <sysclk_enable_module>
    14b2:	08 95       	ret
    14b4:	80 3a       	cpi	r24, 0xA0	; 160
    14b6:	9b 40       	sbci	r25, 0x0B	; 11
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <usart_spi_init+0x5c>
    14ba:	60 e1       	ldi	r22, 0x10	; 16
    14bc:	86 e0       	ldi	r24, 0x06	; 6
    14be:	34 ca       	rjmp	.-2968   	; 0x928 <sysclk_enable_module>
    14c0:	08 95       	ret

000014c2 <usart_spi_setup_device>:
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <usart_spi_setup_device+0xa>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <usart_spi_setup_device+0xc>
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	09 83       	std	Y+1, r16	; 0x01
    14d4:	1a 83       	std	Y+2, r17	; 0x02
    14d6:	2b 83       	std	Y+3, r18	; 0x03
    14d8:	3c 83       	std	Y+4, r19	; 0x04
    14da:	4d 83       	std	Y+5, r20	; 0x05
    14dc:	1e 82       	std	Y+6, r1	; 0x06
    14de:	be 01       	movw	r22, r28
    14e0:	6f 5f       	subi	r22, 0xFF	; 255
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255
    14e4:	ba d0       	rcall	.+372    	; 0x165a <usart_init_spi>
    14e6:	26 96       	adiw	r28, 0x06	; 6
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    14f6:	fb 01       	movw	r30, r22
    14f8:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    14fa:	e8 2f       	mov	r30, r24
    14fc:	e6 95       	lsr	r30
    14fe:	e6 95       	lsr	r30
    1500:	e6 95       	lsr	r30
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	e4 9f       	mul	r30, r20
    1506:	f0 01       	movw	r30, r0
    1508:	11 24       	eor	r1, r1
    150a:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    150c:	87 70       	andi	r24, 0x07	; 7
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <usart_spi_select_device+0x24>
    1516:	44 0f       	add	r20, r20
    1518:	55 1f       	adc	r21, r21
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    151e:	46 83       	std	Z+6, r20	; 0x06
    1520:	08 95       	ret

00001522 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1522:	fb 01       	movw	r30, r22
    1524:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1526:	e8 2f       	mov	r30, r24
    1528:	e6 95       	lsr	r30
    152a:	e6 95       	lsr	r30
    152c:	e6 95       	lsr	r30
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	e4 9f       	mul	r30, r20
    1532:	f0 01       	movw	r30, r0
    1534:	11 24       	eor	r1, r1
    1536:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1538:	87 70       	andi	r24, 0x07	; 7
    153a:	21 e0       	ldi	r18, 0x01	; 1
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	a9 01       	movw	r20, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <usart_spi_deselect_device+0x24>
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	8a 95       	dec	r24
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    154a:	45 83       	std	Z+5, r20	; 0x05
    154c:	08 95       	ret

0000154e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    154e:	43 e0       	ldi	r20, 0x03	; 3
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	61 e0       	ldi	r22, 0x01	; 1
    1554:	80 ee       	ldi	r24, 0xE0	; 224
    1556:	97 e0       	ldi	r25, 0x07	; 7
    1558:	5e df       	rcall	.-324    	; 0x1416 <ioport_configure_port_pin>
    155a:	43 e0       	ldi	r20, 0x03	; 3
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	62 e0       	ldi	r22, 0x02	; 2
    1560:	80 ee       	ldi	r24, 0xE0	; 224
    1562:	97 e0       	ldi	r25, 0x07	; 7
    1564:	58 df       	rcall	.-336    	; 0x1416 <ioport_configure_port_pin>
    1566:	43 e0       	ldi	r20, 0x03	; 3
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	60 e1       	ldi	r22, 0x10	; 16
    156c:	80 e6       	ldi	r24, 0x60	; 96
    156e:	96 e0       	ldi	r25, 0x06	; 6
    1570:	52 df       	rcall	.-348    	; 0x1416 <ioport_configure_port_pin>
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	50 e4       	ldi	r21, 0x40	; 64
    1576:	60 e2       	ldi	r22, 0x20	; 32
    1578:	80 e6       	ldi	r24, 0x60	; 96
    157a:	96 e0       	ldi	r25, 0x06	; 6
    157c:	4c df       	rcall	.-360    	; 0x1416 <ioport_configure_port_pin>
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	5b e1       	ldi	r21, 0x1B	; 27
    1582:	60 e2       	ldi	r22, 0x20	; 32
    1584:	80 e8       	ldi	r24, 0x80	; 128
    1586:	96 e0       	ldi	r25, 0x06	; 6
    1588:	46 df       	rcall	.-372    	; 0x1416 <ioport_configure_port_pin>
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	5b e1       	ldi	r21, 0x1B	; 27
    158e:	62 e0       	ldi	r22, 0x02	; 2
    1590:	80 ea       	ldi	r24, 0xA0	; 160
    1592:	96 e0       	ldi	r25, 0x06	; 6
    1594:	40 df       	rcall	.-384    	; 0x1416 <ioport_configure_port_pin>
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	5b e1       	ldi	r21, 0x1B	; 27
    159a:	64 e0       	ldi	r22, 0x04	; 4
    159c:	80 ea       	ldi	r24, 0xA0	; 160
    159e:	96 e0       	ldi	r25, 0x06	; 6
    15a0:	3a df       	rcall	.-396    	; 0x1416 <ioport_configure_port_pin>
    15a2:	43 e0       	ldi	r20, 0x03	; 3
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	62 e0       	ldi	r22, 0x02	; 2
    15a8:	80 e6       	ldi	r24, 0x60	; 96
    15aa:	96 e0       	ldi	r25, 0x06	; 6
    15ac:	34 df       	rcall	.-408    	; 0x1416 <ioport_configure_port_pin>
    15ae:	43 e0       	ldi	r20, 0x03	; 3
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	68 e0       	ldi	r22, 0x08	; 8
    15b4:	80 e6       	ldi	r24, 0x60	; 96
    15b6:	96 e0       	ldi	r25, 0x06	; 6
    15b8:	2e df       	rcall	.-420    	; 0x1416 <ioport_configure_port_pin>
    15ba:	43 e0       	ldi	r20, 0x03	; 3
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	68 e0       	ldi	r22, 0x08	; 8
    15c0:	80 ea       	ldi	r24, 0xA0	; 160
    15c2:	96 e0       	ldi	r25, 0x06	; 6
    15c4:	28 df       	rcall	.-432    	; 0x1416 <ioport_configure_port_pin>
    15c6:	43 e0       	ldi	r20, 0x03	; 3
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	80 e6       	ldi	r24, 0x60	; 96
    15ce:	96 e0       	ldi	r25, 0x06	; 6
    15d0:	22 df       	rcall	.-444    	; 0x1416 <ioport_configure_port_pin>
    15d2:	43 e0       	ldi	r20, 0x03	; 3
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	68 e0       	ldi	r22, 0x08	; 8
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	96 e0       	ldi	r25, 0x06	; 6
    15dc:	1c df       	rcall	.-456    	; 0x1416 <ioport_configure_port_pin>
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	60 e1       	ldi	r22, 0x10	; 16
    15e4:	80 e8       	ldi	r24, 0x80	; 128
    15e6:	96 e0       	ldi	r25, 0x06	; 6
    15e8:	16 cf       	rjmp	.-468    	; 0x1416 <ioport_configure_port_pin>
    15ea:	08 95       	ret

000015ec <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    15ec:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    15ee:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    15f0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    15f2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    15f4:	60 83       	st	Z, r22
	ret                             // Return to caller
    15f6:	08 95       	ret

000015f8 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    15f8:	cf 92       	push	r12
    15fa:	df 92       	push	r13
    15fc:	ef 92       	push	r14
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    160a:	d9 01       	movw	r26, r18
    160c:	c8 01       	movw	r24, r16
    160e:	b6 95       	lsr	r27
    1610:	a7 95       	ror	r26
    1612:	97 95       	ror	r25
    1614:	87 95       	ror	r24
    1616:	48 17       	cp	r20, r24
    1618:	59 07       	cpc	r21, r25
    161a:	6a 07       	cpc	r22, r26
    161c:	7b 07       	cpc	r23, r27
    161e:	70 f4       	brcc	.+28     	; 0x163c <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1620:	6a 01       	movw	r12, r20
    1622:	7b 01       	movw	r14, r22
    1624:	cc 0c       	add	r12, r12
    1626:	dd 1c       	adc	r13, r13
    1628:	ee 1c       	adc	r14, r14
    162a:	ff 1c       	adc	r15, r15
    162c:	c9 01       	movw	r24, r18
    162e:	b8 01       	movw	r22, r16
    1630:	a7 01       	movw	r20, r14
    1632:	96 01       	movw	r18, r12
    1634:	4b d2       	rcall	.+1174   	; 0x1acc <__udivmodsi4>
    1636:	21 50       	subi	r18, 0x01	; 1
    1638:	31 09       	sbc	r19, r1
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1640:	83 2f       	mov	r24, r19
    1642:	8f 70       	andi	r24, 0x0F	; 15
    1644:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1646:	2e 83       	std	Y+6, r18	; 0x06
}
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	08 95       	ret

0000165a <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	1f 92       	push	r1
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	7c 01       	movw	r14, r24
    1670:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	09 f4       	brne	.+2      	; 0x1678 <usart_init_spi+0x1e>
    1676:	b2 c1       	rjmp	.+868    	; 0x19dc <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1678:	80 3c       	cpi	r24, 0xC0	; 192
    167a:	91 05       	cpc	r25, r1
    167c:	21 f4       	brne	.+8      	; 0x1686 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    167e:	60 e1       	ldi	r22, 0x10	; 16
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	52 d9       	rcall	.-3420   	; 0x928 <sysclk_enable_module>
    1684:	ab c1       	rjmp	.+854    	; 0x19dc <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1686:	80 e8       	ldi	r24, 0x80	; 128
    1688:	e8 16       	cp	r14, r24
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	f8 06       	cpc	r15, r24
    168e:	21 f4       	brne	.+8      	; 0x1698 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1690:	62 e0       	ldi	r22, 0x02	; 2
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	49 d9       	rcall	.-3438   	; 0x928 <sysclk_enable_module>
    1696:	a2 c1       	rjmp	.+836    	; 0x19dc <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1698:	e1 14       	cp	r14, r1
    169a:	e1 e0       	ldi	r30, 0x01	; 1
    169c:	fe 06       	cpc	r15, r30
    169e:	21 f4       	brne	.+8      	; 0x16a8 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	41 d9       	rcall	.-3454   	; 0x928 <sysclk_enable_module>
    16a6:	9a c1       	rjmp	.+820    	; 0x19dc <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    16a8:	f0 e8       	ldi	r31, 0x80	; 128
    16aa:	ef 16       	cp	r14, r31
    16ac:	f3 e0       	ldi	r31, 0x03	; 3
    16ae:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    16b0:	21 f4       	brne	.+8      	; 0x16ba <usart_init_spi+0x60>
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	38 d9       	rcall	.-3472   	; 0x928 <sysclk_enable_module>
    16b8:	91 c1       	rjmp	.+802    	; 0x19dc <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    16ba:	30 e9       	ldi	r19, 0x90	; 144
    16bc:	e3 16       	cp	r14, r19
    16be:	33 e0       	ldi	r19, 0x03	; 3
    16c0:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    16c2:	21 f4       	brne	.+8      	; 0x16cc <usart_init_spi+0x72>
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	2f d9       	rcall	.-3490   	; 0x928 <sysclk_enable_module>
    16ca:	88 c1       	rjmp	.+784    	; 0x19dc <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    16cc:	e1 14       	cp	r14, r1
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    16d2:	21 f4       	brne	.+8      	; 0x16dc <usart_init_spi+0x82>
    16d4:	62 e0       	ldi	r22, 0x02	; 2
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	27 d9       	rcall	.-3506   	; 0x928 <sysclk_enable_module>
    16da:	80 c1       	rjmp	.+768    	; 0x19dc <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    16dc:	e0 e4       	ldi	r30, 0x40	; 64
    16de:	ee 16       	cp	r14, r30
    16e0:	e2 e0       	ldi	r30, 0x02	; 2
    16e2:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    16e4:	21 f4       	brne	.+8      	; 0x16ee <usart_init_spi+0x94>
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	1e d9       	rcall	.-3524   	; 0x928 <sysclk_enable_module>
    16ec:	77 c1       	rjmp	.+750    	; 0x19dc <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    16ee:	f0 e2       	ldi	r31, 0x20	; 32
    16f0:	ef 16       	cp	r14, r31
    16f2:	f3 e0       	ldi	r31, 0x03	; 3
    16f4:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    16f6:	21 f4       	brne	.+8      	; 0x1700 <usart_init_spi+0xa6>
    16f8:	64 e0       	ldi	r22, 0x04	; 4
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	15 d9       	rcall	.-3542   	; 0x928 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    16fe:	6e c1       	rjmp	.+732    	; 0x19dc <usart_init_spi+0x382>
    1700:	e1 14       	cp	r14, r1
    1702:	38 e0       	ldi	r19, 0x08	; 8
    1704:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1706:	21 f4       	brne	.+8      	; 0x1710 <usart_init_spi+0xb6>
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	0d d9       	rcall	.-3558   	; 0x928 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    170e:	66 c1       	rjmp	.+716    	; 0x19dc <usart_init_spi+0x382>
    1710:	e1 14       	cp	r14, r1
    1712:	89 e0       	ldi	r24, 0x09	; 9
    1714:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1716:	21 f4       	brne	.+8      	; 0x1720 <usart_init_spi+0xc6>
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	84 e0       	ldi	r24, 0x04	; 4
    171c:	05 d9       	rcall	.-3574   	; 0x928 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    171e:	5e c1       	rjmp	.+700    	; 0x19dc <usart_init_spi+0x382>
    1720:	e1 14       	cp	r14, r1
    1722:	ea e0       	ldi	r30, 0x0A	; 10
    1724:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1726:	21 f4       	brne	.+8      	; 0x1730 <usart_init_spi+0xd6>
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	85 e0       	ldi	r24, 0x05	; 5
    172c:	fd d8       	rcall	.-3590   	; 0x928 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    172e:	56 c1       	rjmp	.+684    	; 0x19dc <usart_init_spi+0x382>
    1730:	e1 14       	cp	r14, r1
    1732:	fb e0       	ldi	r31, 0x0B	; 11
    1734:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1736:	21 f4       	brne	.+8      	; 0x1740 <usart_init_spi+0xe6>
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	86 e0       	ldi	r24, 0x06	; 6
    173c:	f5 d8       	rcall	.-3606   	; 0x928 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    173e:	4e c1       	rjmp	.+668    	; 0x19dc <usart_init_spi+0x382>
    1740:	30 e4       	ldi	r19, 0x40	; 64
    1742:	e3 16       	cp	r14, r19
    1744:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1746:	f3 06       	cpc	r15, r19
    1748:	21 f4       	brne	.+8      	; 0x1752 <usart_init_spi+0xf8>
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	ec d8       	rcall	.-3624   	; 0x928 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1750:	45 c1       	rjmp	.+650    	; 0x19dc <usart_init_spi+0x382>
    1752:	80 e4       	ldi	r24, 0x40	; 64
    1754:	e8 16       	cp	r14, r24
    1756:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1758:	f8 06       	cpc	r15, r24
    175a:	21 f4       	brne	.+8      	; 0x1764 <usart_init_spi+0x10a>
    175c:	62 e0       	ldi	r22, 0x02	; 2
    175e:	84 e0       	ldi	r24, 0x04	; 4
    1760:	e3 d8       	rcall	.-3642   	; 0x928 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1762:	3c c1       	rjmp	.+632    	; 0x19dc <usart_init_spi+0x382>
    1764:	e0 e4       	ldi	r30, 0x40	; 64
    1766:	ee 16       	cp	r14, r30
    1768:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    176a:	fe 06       	cpc	r15, r30
    176c:	21 f4       	brne	.+8      	; 0x1776 <usart_init_spi+0x11c>
    176e:	62 e0       	ldi	r22, 0x02	; 2
    1770:	85 e0       	ldi	r24, 0x05	; 5
    1772:	da d8       	rcall	.-3660   	; 0x928 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1774:	33 c1       	rjmp	.+614    	; 0x19dc <usart_init_spi+0x382>
    1776:	f0 e9       	ldi	r31, 0x90	; 144
    1778:	ef 16       	cp	r14, r31
    177a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    177c:	ff 06       	cpc	r15, r31
    177e:	21 f4       	brne	.+8      	; 0x1788 <usart_init_spi+0x12e>
    1780:	64 e0       	ldi	r22, 0x04	; 4
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	d1 d8       	rcall	.-3678   	; 0x928 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1786:	2a c1       	rjmp	.+596    	; 0x19dc <usart_init_spi+0x382>
    1788:	30 e9       	ldi	r19, 0x90	; 144
    178a:	e3 16       	cp	r14, r19
    178c:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    178e:	f3 06       	cpc	r15, r19
    1790:	21 f4       	brne	.+8      	; 0x179a <usart_init_spi+0x140>
    1792:	64 e0       	ldi	r22, 0x04	; 4
    1794:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1796:	c8 d8       	rcall	.-3696   	; 0x928 <sysclk_enable_module>
    1798:	21 c1       	rjmp	.+578    	; 0x19dc <usart_init_spi+0x382>
    179a:	80 e9       	ldi	r24, 0x90	; 144
    179c:	e8 16       	cp	r14, r24
    179e:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    17a0:	f8 06       	cpc	r15, r24
    17a2:	21 f4       	brne	.+8      	; 0x17ac <usart_init_spi+0x152>
    17a4:	64 e0       	ldi	r22, 0x04	; 4
    17a6:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    17a8:	bf d8       	rcall	.-3714   	; 0x928 <sysclk_enable_module>
    17aa:	18 c1       	rjmp	.+560    	; 0x19dc <usart_init_spi+0x382>
    17ac:	e0 e9       	ldi	r30, 0x90	; 144
    17ae:	ee 16       	cp	r14, r30
    17b0:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    17b2:	fe 06       	cpc	r15, r30
    17b4:	21 f4       	brne	.+8      	; 0x17be <usart_init_spi+0x164>
    17b6:	64 e0       	ldi	r22, 0x04	; 4
    17b8:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    17ba:	b6 d8       	rcall	.-3732   	; 0x928 <sysclk_enable_module>
    17bc:	0f c1       	rjmp	.+542    	; 0x19dc <usart_init_spi+0x382>
    17be:	f0 ec       	ldi	r31, 0xC0	; 192
    17c0:	ef 16       	cp	r14, r31
    17c2:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    17c4:	ff 06       	cpc	r15, r31
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <usart_init_spi+0x176>
    17c8:	68 e0       	ldi	r22, 0x08	; 8
    17ca:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    17cc:	ad d8       	rcall	.-3750   	; 0x928 <sysclk_enable_module>
    17ce:	06 c1       	rjmp	.+524    	; 0x19dc <usart_init_spi+0x382>
    17d0:	30 ec       	ldi	r19, 0xC0	; 192
    17d2:	e3 16       	cp	r14, r19
    17d4:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    17d6:	f3 06       	cpc	r15, r19
    17d8:	21 f4       	brne	.+8      	; 0x17e2 <usart_init_spi+0x188>
    17da:	68 e0       	ldi	r22, 0x08	; 8
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	a4 d8       	rcall	.-3768   	; 0x928 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    17e0:	fd c0       	rjmp	.+506    	; 0x19dc <usart_init_spi+0x382>
    17e2:	80 ea       	ldi	r24, 0xA0	; 160
    17e4:	e8 16       	cp	r14, r24
    17e6:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    17e8:	f8 06       	cpc	r15, r24
    17ea:	61 f4       	brne	.+24     	; 0x1804 <usart_init_spi+0x1aa>
    17ec:	60 e1       	ldi	r22, 0x10	; 16
    17ee:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    17f0:	9b d8       	rcall	.-3786   	; 0x928 <sysclk_enable_module>
    17f2:	e0 ea       	ldi	r30, 0xA0	; 160
    17f4:	f8 e0       	ldi	r31, 0x08	; 8
    17f6:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    17f8:	8f 7e       	andi	r24, 0xEF	; 239
    17fa:	84 83       	std	Z+4, r24	; 0x04
    17fc:	f8 01       	movw	r30, r16
    17fe:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1800:	22 50       	subi	r18, 0x02	; 2
    1802:	4c c0       	rjmp	.+152    	; 0x189c <usart_init_spi+0x242>
    1804:	f0 ea       	ldi	r31, 0xA0	; 160
    1806:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1808:	f9 e0       	ldi	r31, 0x09	; 9
    180a:	ff 06       	cpc	r15, r31
    180c:	21 f4       	brne	.+8      	; 0x1816 <usart_init_spi+0x1bc>
    180e:	60 e1       	ldi	r22, 0x10	; 16
    1810:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1812:	8a d8       	rcall	.-3820   	; 0x928 <sysclk_enable_module>
    1814:	e3 c0       	rjmp	.+454    	; 0x19dc <usart_init_spi+0x382>
    1816:	30 ea       	ldi	r19, 0xA0	; 160
    1818:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    181a:	3a e0       	ldi	r19, 0x0A	; 10
    181c:	f3 06       	cpc	r15, r19
    181e:	21 f4       	brne	.+8      	; 0x1828 <usart_init_spi+0x1ce>
    1820:	60 e1       	ldi	r22, 0x10	; 16
    1822:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1824:	81 d8       	rcall	.-3838   	; 0x928 <sysclk_enable_module>
    1826:	da c0       	rjmp	.+436    	; 0x19dc <usart_init_spi+0x382>
    1828:	80 ea       	ldi	r24, 0xA0	; 160
    182a:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    182c:	8b e0       	ldi	r24, 0x0B	; 11
    182e:	f8 06       	cpc	r15, r24
    1830:	21 f4       	brne	.+8      	; 0x183a <usart_init_spi+0x1e0>
    1832:	60 e1       	ldi	r22, 0x10	; 16
    1834:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1836:	78 d8       	rcall	.-3856   	; 0x928 <sysclk_enable_module>
    1838:	d1 c0       	rjmp	.+418    	; 0x19dc <usart_init_spi+0x382>
    183a:	e0 eb       	ldi	r30, 0xB0	; 176
    183c:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    183e:	e8 e0       	ldi	r30, 0x08	; 8
    1840:	fe 06       	cpc	r15, r30
    1842:	21 f4       	brne	.+8      	; 0x184c <usart_init_spi+0x1f2>
    1844:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	6f d8       	rcall	.-3874   	; 0x928 <sysclk_enable_module>
    184a:	c8 c0       	rjmp	.+400    	; 0x19dc <usart_init_spi+0x382>
    184c:	f0 eb       	ldi	r31, 0xB0	; 176
    184e:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1850:	f9 e0       	ldi	r31, 0x09	; 9
    1852:	ff 06       	cpc	r15, r31
    1854:	21 f4       	brne	.+8      	; 0x185e <usart_init_spi+0x204>
    1856:	60 e2       	ldi	r22, 0x20	; 32
    1858:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    185a:	66 d8       	rcall	.-3892   	; 0x928 <sysclk_enable_module>
    185c:	bf c0       	rjmp	.+382    	; 0x19dc <usart_init_spi+0x382>
    185e:	30 e8       	ldi	r19, 0x80	; 128
    1860:	e3 16       	cp	r14, r19
    1862:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1864:	f3 06       	cpc	r15, r19
    1866:	21 f4       	brne	.+8      	; 0x1870 <usart_init_spi+0x216>
    1868:	60 e4       	ldi	r22, 0x40	; 64
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	5d d8       	rcall	.-3910   	; 0x928 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    186e:	b6 c0       	rjmp	.+364    	; 0x19dc <usart_init_spi+0x382>
    1870:	80 ea       	ldi	r24, 0xA0	; 160
    1872:	e8 16       	cp	r14, r24
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1878:	21 f4       	brne	.+8      	; 0x1882 <usart_init_spi+0x228>
    187a:	60 e4       	ldi	r22, 0x40	; 64
    187c:	85 e0       	ldi	r24, 0x05	; 5
    187e:	54 d8       	rcall	.-3928   	; 0x928 <sysclk_enable_module>
    1880:	ad c0       	rjmp	.+346    	; 0x19dc <usart_init_spi+0x382>
    1882:	f7 01       	movw	r30, r14
    1884:	84 81       	ldd	r24, Z+4	; 0x04
    1886:	8f 7e       	andi	r24, 0xEF	; 239
    1888:	84 83       	std	Z+4, r24	; 0x04
    188a:	fb 01       	movw	r30, r22
    188c:	24 81       	ldd	r18, Z+4	; 0x04
    188e:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1890:	c7 01       	movw	r24, r14
    1892:	f0 ea       	ldi	r31, 0xA0	; 160
    1894:	ef 16       	cp	r14, r31
    1896:	f8 e0       	ldi	r31, 0x08	; 8
    1898:	ff 06       	cpc	r15, r31
    189a:	49 f4       	brne	.+18     	; 0x18ae <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    189c:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    18a0:	84 fd       	sbrc	r24, 4
    18a2:	a5 c0       	rjmp	.+330    	; 0x19ee <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    18a4:	0f 2e       	mov	r0, r31
    18a6:	f1 e1       	ldi	r31, 0x11	; 17
    18a8:	df 2e       	mov	r13, r31
    18aa:	f0 2d       	mov	r31, r0
    18ac:	a4 c0       	rjmp	.+328    	; 0x19f6 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    18ae:	80 3b       	cpi	r24, 0xB0	; 176
    18b0:	38 e0       	ldi	r19, 0x08	; 8
    18b2:	93 07       	cpc	r25, r19
    18b4:	91 f0       	breq	.+36     	; 0x18da <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    18b6:	80 3a       	cpi	r24, 0xA0	; 160
    18b8:	e9 e0       	ldi	r30, 0x09	; 9
    18ba:	9e 07       	cpc	r25, r30
    18bc:	49 f4       	brne	.+18     	; 0x18d0 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    18be:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    18c2:	34 fd       	sbrc	r19, 4
    18c4:	9b c0       	rjmp	.+310    	; 0x19fc <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    18c6:	0f 2e       	mov	r0, r31
    18c8:	f9 e1       	ldi	r31, 0x19	; 25
    18ca:	df 2e       	mov	r13, r31
    18cc:	f0 2d       	mov	r31, r0
    18ce:	16 c0       	rjmp	.+44     	; 0x18fc <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    18d0:	80 3b       	cpi	r24, 0xB0	; 176
    18d2:	f9 e0       	ldi	r31, 0x09	; 9
    18d4:	9f 07       	cpc	r25, r31
    18d6:	f1 f0       	breq	.+60     	; 0x1914 <usart_init_spi+0x2ba>
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    18da:	0f 2e       	mov	r0, r31
    18dc:	f5 e1       	ldi	r31, 0x15	; 21
    18de:	df 2e       	mov	r13, r31
    18e0:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    18e2:	80 3a       	cpi	r24, 0xA0	; 160
    18e4:	3a e0       	ldi	r19, 0x0A	; 10
    18e6:	93 07       	cpc	r25, r19
    18e8:	49 f4       	brne	.+18     	; 0x18fc <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    18ea:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    18ee:	84 fd       	sbrc	r24, 4
    18f0:	8a c0       	rjmp	.+276    	; 0x1a06 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    18f2:	0f 2e       	mov	r0, r31
    18f4:	f1 e2       	ldi	r31, 0x21	; 33
    18f6:	df 2e       	mov	r13, r31
    18f8:	f0 2d       	mov	r31, r0
    18fa:	15 c0       	rjmp	.+42     	; 0x1926 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    18fc:	80 3a       	cpi	r24, 0xA0	; 160
    18fe:	9b 40       	sbci	r25, 0x0B	; 11
    1900:	91 f4       	brne	.+36     	; 0x1926 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1902:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1906:	84 fd       	sbrc	r24, 4
    1908:	0a c0       	rjmp	.+20     	; 0x191e <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    190a:	0f 2e       	mov	r0, r31
    190c:	f9 e2       	ldi	r31, 0x29	; 41
    190e:	df 2e       	mov	r13, r31
    1910:	f0 2d       	mov	r31, r0
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1914:	0f 2e       	mov	r0, r31
    1916:	fd e1       	ldi	r31, 0x1D	; 29
    1918:	df 2e       	mov	r13, r31
    191a:	f0 2d       	mov	r31, r0
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    191e:	0f 2e       	mov	r0, r31
    1920:	fd e2       	ldi	r31, 0x2D	; 45
    1922:	df 2e       	mov	r13, r31
    1924:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1926:	ed 2d       	mov	r30, r13
    1928:	e6 95       	lsr	r30
    192a:	e6 95       	lsr	r30
    192c:	e6 95       	lsr	r30
    192e:	30 e2       	ldi	r19, 0x20	; 32
    1930:	e3 9f       	mul	r30, r19
    1932:	f0 01       	movw	r30, r0
    1934:	11 24       	eor	r1, r1
    1936:	fa 5f       	subi	r31, 0xFA	; 250
    1938:	3d 2d       	mov	r19, r13
    193a:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	03 2e       	mov	r0, r19
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <usart_init_spi+0x2ee>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    194c:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	10 f0       	brcs	.+4      	; 0x1956 <usart_init_spi+0x2fc>
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <usart_init_spi+0x2fe>
    1956:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1958:	df 01       	movw	r26, r30
    195a:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    195c:	a3 0f       	add	r26, r19
    195e:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1960:	9f b7       	in	r25, 0x3f	; 63
    1962:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1964:	f8 94       	cli
	return flags;
    1966:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1968:	2c 91       	ld	r18, X
    196a:	27 70       	andi	r18, 0x07	; 7
    196c:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    196e:	9c 91       	ld	r25, X
    1970:	94 2b       	or	r25, r20
    1972:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1974:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1976:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1978:	f7 01       	movw	r30, r14
    197a:	85 81       	ldd	r24, Z+5	; 0x05
    197c:	80 6c       	ori	r24, 0xC0	; 192
    197e:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1980:	f8 01       	movw	r30, r16
    1982:	84 81       	ldd	r24, Z+4	; 0x04
    1984:	8d 7f       	andi	r24, 0xFD	; 253
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	29 f4       	brne	.+10     	; 0x1994 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    198a:	f7 01       	movw	r30, r14
    198c:	85 81       	ldd	r24, Z+5	; 0x05
    198e:	82 60       	ori	r24, 0x02	; 2
    1990:	85 83       	std	Z+5, r24	; 0x05
    1992:	04 c0       	rjmp	.+8      	; 0x199c <usart_init_spi+0x342>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1994:	f7 01       	movw	r30, r14
    1996:	85 81       	ldd	r24, Z+5	; 0x05
    1998:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    199a:	85 83       	std	Z+5, r24	; 0x05
    199c:	f8 01       	movw	r30, r16
    199e:	85 81       	ldd	r24, Z+5	; 0x05
    19a0:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    19a2:	29 f0       	breq	.+10     	; 0x19ae <usart_init_spi+0x354>
    19a4:	f7 01       	movw	r30, r14
    19a6:	85 81       	ldd	r24, Z+5	; 0x05
    19a8:	84 60       	ori	r24, 0x04	; 4
    19aa:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <usart_init_spi+0x35c>
    19ae:	f7 01       	movw	r30, r14
    19b0:	85 81       	ldd	r24, Z+5	; 0x05
    19b2:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    19b4:	85 83       	std	Z+5, r24	; 0x05
    19b6:	f8 01       	movw	r30, r16
    19b8:	40 81       	ld	r20, Z
    19ba:	51 81       	ldd	r21, Z+1	; 0x01
    19bc:	62 81       	ldd	r22, Z+2	; 0x02
    19be:	73 81       	ldd	r23, Z+3	; 0x03
    19c0:	00 e0       	ldi	r16, 0x00	; 0
    19c2:	12 e1       	ldi	r17, 0x12	; 18
    19c4:	2a e7       	ldi	r18, 0x7A	; 122
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	c7 01       	movw	r24, r14
    19ca:	16 de       	rcall	.-980    	; 0x15f8 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    19cc:	f7 01       	movw	r30, r14
    19ce:	84 81       	ldd	r24, Z+4	; 0x04
    19d0:	88 60       	ori	r24, 0x08	; 8
    19d2:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    19d4:	84 81       	ldd	r24, Z+4	; 0x04
    19d6:	80 61       	ori	r24, 0x10	; 16
    19d8:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    19da:	1a c0       	rjmp	.+52     	; 0x1a10 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    19dc:	f7 01       	movw	r30, r14
    19de:	84 81       	ldd	r24, Z+4	; 0x04
    19e0:	8f 7e       	andi	r24, 0xEF	; 239
    19e2:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    19e4:	f8 01       	movw	r30, r16
    19e6:	24 81       	ldd	r18, Z+4	; 0x04
    19e8:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    19ea:	c7 01       	movw	r24, r14
    19ec:	60 cf       	rjmp	.-320    	; 0x18ae <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    19ee:	0f 2e       	mov	r0, r31
    19f0:	f5 e1       	ldi	r31, 0x15	; 21
    19f2:	df 2e       	mov	r13, r31
    19f4:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    19f6:	80 ea       	ldi	r24, 0xA0	; 160
    19f8:	98 e0       	ldi	r25, 0x08	; 8
    19fa:	6a cf       	rjmp	.-300    	; 0x18d0 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    19fc:	0f 2e       	mov	r0, r31
    19fe:	fd e1       	ldi	r31, 0x1D	; 29
    1a00:	df 2e       	mov	r13, r31
    1a02:	f0 2d       	mov	r31, r0
    1a04:	7b cf       	rjmp	.-266    	; 0x18fc <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1a06:	0f 2e       	mov	r0, r31
    1a08:	f5 e2       	ldi	r31, 0x25	; 37
    1a0a:	df 2e       	mov	r13, r31
    1a0c:	f0 2d       	mov	r31, r0
    1a0e:	8b cf       	rjmp	.-234    	; 0x1926 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1a10:	0f 90       	pop	r0
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	08 95       	ret

00001a22 <main>:

/**
 * \brief Main entry of example application
 */
int main(void)
{
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	c0 54       	subi	r28, 0x40	; 64
    1a2c:	d1 09       	sbc	r29, r1
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	de bf       	out	0x3e, r29	; 62

	/**
	 * Starts off by initializing the system clock before configuring the
	 * board and the monochrome graphical system.
	 */
	board_init();
    1a32:	8d dd       	rcall	.-1254   	; 0x154e <board_init>
	sysclk_init();
    1a34:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sysclk_init>
	gfx_mono_init();
    1a38:	07 d9       	rcall	.-3570   	; 0xc48 <gfx_mono_st7565r_init>

	// Initialize spinners
	gfx_mono_spinctrl_init(&spinner1, SPINTYPE_STRING, spinnertitle,
    1a3a:	c1 2c       	mov	r12, r1
    1a3c:	0f 2e       	mov	r0, r31
    1a3e:	f3 e0       	ldi	r31, 0x03	; 3
    1a40:	ef 2e       	mov	r14, r31
    1a42:	f1 2c       	mov	r15, r1
    1a44:	f0 2d       	mov	r31, r0
    1a46:	00 e0       	ldi	r16, 0x00	; 0
    1a48:	10 e0       	ldi	r17, 0x00	; 0
    1a4a:	21 e1       	ldi	r18, 0x11	; 17
    1a4c:	30 e2       	ldi	r19, 0x20	; 32
    1a4e:	4b ec       	ldi	r20, 0xCB	; 203
    1a50:	54 e0       	ldi	r21, 0x04	; 4
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	ce 01       	movw	r24, r28
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	86 db       	rcall	.-2292   	; 0x1166 <gfx_mono_spinctrl_init>
			spinner_choicestrings, 0, 3, 0);
	gfx_mono_spinctrl_init(&spinner2, SPINTYPE_INTEGER,
    1a5a:	0f 2e       	mov	r0, r31
    1a5c:	f7 ed       	ldi	r31, 0xD7	; 215
    1a5e:	ef 2e       	mov	r14, r31
    1a60:	ff 24       	eor	r15, r15
    1a62:	fa 94       	dec	r15
    1a64:	f0 2d       	mov	r31, r0
    1a66:	04 ec       	ldi	r16, 0xC4	; 196
    1a68:	1f ef       	ldi	r17, 0xFF	; 255
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	42 ec       	ldi	r20, 0xC2	; 194
    1a70:	54 e0       	ldi	r21, 0x04	; 4
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	ce 01       	movw	r24, r28
    1a76:	43 96       	adiw	r24, 0x13	; 19
    1a78:	76 db       	rcall	.-2324   	; 0x1166 <gfx_mono_spinctrl_init>
			spinnertitle2, NULL, -60, -41, 0);
	gfx_mono_spinctrl_init(&spinner3, SPINTYPE_INTEGER,
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f8 ee       	ldi	r31, 0xE8	; 232
    1a7e:	ef 2e       	mov	r14, r31
    1a80:	fe e4       	ldi	r31, 0x4E	; 78
    1a82:	ff 2e       	mov	r15, r31
    1a84:	f0 2d       	mov	r31, r0
    1a86:	0f e1       	ldi	r16, 0x1F	; 31
    1a88:	1e e4       	ldi	r17, 0x4E	; 78
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	48 eb       	ldi	r20, 0xB8	; 184
    1a90:	54 e0       	ldi	r21, 0x04	; 4
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	ce 01       	movw	r24, r28
    1a96:	85 96       	adiw	r24, 0x25	; 37
			spinnertitle3, NULL, 19999, 20200, 0);

	// Initialize spincollection
	gfx_mono_spinctrl_spincollection_init(&spinners);
    1a98:	66 db       	rcall	.-2356   	; 0x1166 <gfx_mono_spinctrl_init>
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	c7 96       	adiw	r24, 0x37	; 55

	// Add spinners to spincollection
	gfx_mono_spinctrl_spincollection_add_spinner(&spinner1, &spinners);
    1a9e:	82 db       	rcall	.-2300   	; 0x11a4 <gfx_mono_spinctrl_spincollection_init>
    1aa0:	be 01       	movw	r22, r28
    1aa2:	69 5c       	subi	r22, 0xC9	; 201
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	01 96       	adiw	r24, 0x01	; 1
	gfx_mono_spinctrl_spincollection_add_spinner(&spinner2, &spinners);
    1aaa:	83 db       	rcall	.-2298   	; 0x11b2 <gfx_mono_spinctrl_spincollection_add_spinner>
    1aac:	be 01       	movw	r22, r28
    1aae:	69 5c       	subi	r22, 0xC9	; 201
    1ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	43 96       	adiw	r24, 0x13	; 19
	gfx_mono_spinctrl_spincollection_add_spinner(&spinner3, &spinners);
    1ab6:	7d db       	rcall	.-2310   	; 0x11b2 <gfx_mono_spinctrl_spincollection_add_spinner>
    1ab8:	be 01       	movw	r22, r28
    1aba:	69 5c       	subi	r22, 0xC9	; 201
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	ce 01       	movw	r24, r28
    1ac0:	85 96       	adiw	r24, 0x25	; 37

	// Show spincollection on screen
	gfx_mono_spinctrl_spincollection_show(&spinners);
    1ac2:	77 db       	rcall	.-2322   	; 0x11b2 <gfx_mono_spinctrl_spincollection_add_spinner>
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	c7 96       	adiw	r24, 0x37	; 55
    1ac8:	a7 db       	rcall	.-2226   	; 0x1218 <gfx_mono_spinctrl_spincollection_show>
    1aca:	ff cf       	rjmp	.-2      	; 0x1aca <main+0xa8>

00001acc <__udivmodsi4>:
    1acc:	a1 e2       	ldi	r26, 0x21	; 33
    1ace:	1a 2e       	mov	r1, r26
    1ad0:	aa 1b       	sub	r26, r26
    1ad2:	bb 1b       	sub	r27, r27
    1ad4:	fd 01       	movw	r30, r26
    1ad6:	0d c0       	rjmp	.+26     	; 0x1af2 <__udivmodsi4_ep>

00001ad8 <__udivmodsi4_loop>:
    1ad8:	aa 1f       	adc	r26, r26
    1ada:	bb 1f       	adc	r27, r27
    1adc:	ee 1f       	adc	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	a2 17       	cp	r26, r18
    1ae2:	b3 07       	cpc	r27, r19
    1ae4:	e4 07       	cpc	r30, r20
    1ae6:	f5 07       	cpc	r31, r21
    1ae8:	20 f0       	brcs	.+8      	; 0x1af2 <__udivmodsi4_ep>
    1aea:	a2 1b       	sub	r26, r18
    1aec:	b3 0b       	sbc	r27, r19
    1aee:	e4 0b       	sbc	r30, r20
    1af0:	f5 0b       	sbc	r31, r21

00001af2 <__udivmodsi4_ep>:
    1af2:	66 1f       	adc	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	1a 94       	dec	r1
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <__udivmodsi4_loop>
    1afe:	60 95       	com	r22
    1b00:	70 95       	com	r23
    1b02:	80 95       	com	r24
    1b04:	90 95       	com	r25
    1b06:	9b 01       	movw	r18, r22
    1b08:	ac 01       	movw	r20, r24
    1b0a:	bd 01       	movw	r22, r26
    1b0c:	cf 01       	movw	r24, r30
    1b0e:	08 95       	ret

00001b10 <snprintf>:
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0e 89       	ldd	r16, Y+22	; 0x16
    1b24:	1f 89       	ldd	r17, Y+23	; 0x17
    1b26:	88 8d       	ldd	r24, Y+24	; 0x18
    1b28:	99 8d       	ldd	r25, Y+25	; 0x19
    1b2a:	26 e0       	ldi	r18, 0x06	; 6
    1b2c:	2c 83       	std	Y+4, r18	; 0x04
    1b2e:	09 83       	std	Y+1, r16	; 0x01
    1b30:	1a 83       	std	Y+2, r17	; 0x02
    1b32:	97 ff       	sbrs	r25, 7
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <snprintf+0x2a>
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e8       	ldi	r25, 0x80	; 128
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	ae 01       	movw	r20, r28
    1b42:	44 5e       	subi	r20, 0xE4	; 228
    1b44:	5f 4f       	sbci	r21, 0xFF	; 255
    1b46:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b48:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	16 d0       	rcall	.+44     	; 0x1b7c <vfprintf>
    1b50:	4d 81       	ldd	r20, Y+5	; 0x05
    1b52:	5e 81       	ldd	r21, Y+6	; 0x06
    1b54:	57 fd       	sbrc	r21, 7
    1b56:	0a c0       	rjmp	.+20     	; 0x1b6c <snprintf+0x5c>
    1b58:	2f 81       	ldd	r18, Y+7	; 0x07
    1b5a:	38 85       	ldd	r19, Y+8	; 0x08
    1b5c:	42 17       	cp	r20, r18
    1b5e:	53 07       	cpc	r21, r19
    1b60:	0c f4       	brge	.+2      	; 0x1b64 <snprintf+0x54>
    1b62:	9a 01       	movw	r18, r20
    1b64:	f8 01       	movw	r30, r16
    1b66:	e2 0f       	add	r30, r18
    1b68:	f3 1f       	adc	r31, r19
    1b6a:	10 82       	st	Z, r1
    1b6c:	2e 96       	adiw	r28, 0x0e	; 14
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <vfprintf>:
    1b7c:	2f 92       	push	r2
    1b7e:	3f 92       	push	r3
    1b80:	4f 92       	push	r4
    1b82:	5f 92       	push	r5
    1b84:	6f 92       	push	r6
    1b86:	7f 92       	push	r7
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	2b 97       	sbiw	r28, 0x0b	; 11
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	6c 01       	movw	r12, r24
    1bac:	7b 01       	movw	r14, r22
    1bae:	8a 01       	movw	r16, r20
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	16 82       	std	Z+6, r1	; 0x06
    1bb4:	17 82       	std	Z+7, r1	; 0x07
    1bb6:	83 81       	ldd	r24, Z+3	; 0x03
    1bb8:	81 ff       	sbrs	r24, 1
    1bba:	bf c1       	rjmp	.+894    	; 0x1f3a <vfprintf+0x3be>
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	3c 01       	movw	r6, r24
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	f7 01       	movw	r30, r14
    1bc8:	93 fd       	sbrc	r25, 3
    1bca:	85 91       	lpm	r24, Z+
    1bcc:	93 ff       	sbrs	r25, 3
    1bce:	81 91       	ld	r24, Z+
    1bd0:	7f 01       	movw	r14, r30
    1bd2:	88 23       	and	r24, r24
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <vfprintf+0x5c>
    1bd6:	ad c1       	rjmp	.+858    	; 0x1f32 <vfprintf+0x3b6>
    1bd8:	85 32       	cpi	r24, 0x25	; 37
    1bda:	39 f4       	brne	.+14     	; 0x1bea <vfprintf+0x6e>
    1bdc:	93 fd       	sbrc	r25, 3
    1bde:	85 91       	lpm	r24, Z+
    1be0:	93 ff       	sbrs	r25, 3
    1be2:	81 91       	ld	r24, Z+
    1be4:	7f 01       	movw	r14, r30
    1be6:	85 32       	cpi	r24, 0x25	; 37
    1be8:	21 f4       	brne	.+8      	; 0x1bf2 <vfprintf+0x76>
    1bea:	b6 01       	movw	r22, r12
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	d3 d1       	rcall	.+934    	; 0x1f96 <fputc>
    1bf0:	e8 cf       	rjmp	.-48     	; 0x1bc2 <vfprintf+0x46>
    1bf2:	91 2c       	mov	r9, r1
    1bf4:	21 2c       	mov	r2, r1
    1bf6:	31 2c       	mov	r3, r1
    1bf8:	ff e1       	ldi	r31, 0x1F	; 31
    1bfa:	f3 15       	cp	r31, r3
    1bfc:	d8 f0       	brcs	.+54     	; 0x1c34 <vfprintf+0xb8>
    1bfe:	8b 32       	cpi	r24, 0x2B	; 43
    1c00:	79 f0       	breq	.+30     	; 0x1c20 <vfprintf+0xa4>
    1c02:	38 f4       	brcc	.+14     	; 0x1c12 <vfprintf+0x96>
    1c04:	80 32       	cpi	r24, 0x20	; 32
    1c06:	79 f0       	breq	.+30     	; 0x1c26 <vfprintf+0xaa>
    1c08:	83 32       	cpi	r24, 0x23	; 35
    1c0a:	a1 f4       	brne	.+40     	; 0x1c34 <vfprintf+0xb8>
    1c0c:	23 2d       	mov	r18, r3
    1c0e:	20 61       	ori	r18, 0x10	; 16
    1c10:	1d c0       	rjmp	.+58     	; 0x1c4c <vfprintf+0xd0>
    1c12:	8d 32       	cpi	r24, 0x2D	; 45
    1c14:	61 f0       	breq	.+24     	; 0x1c2e <vfprintf+0xb2>
    1c16:	80 33       	cpi	r24, 0x30	; 48
    1c18:	69 f4       	brne	.+26     	; 0x1c34 <vfprintf+0xb8>
    1c1a:	23 2d       	mov	r18, r3
    1c1c:	21 60       	ori	r18, 0x01	; 1
    1c1e:	16 c0       	rjmp	.+44     	; 0x1c4c <vfprintf+0xd0>
    1c20:	83 2d       	mov	r24, r3
    1c22:	82 60       	ori	r24, 0x02	; 2
    1c24:	38 2e       	mov	r3, r24
    1c26:	e3 2d       	mov	r30, r3
    1c28:	e4 60       	ori	r30, 0x04	; 4
    1c2a:	3e 2e       	mov	r3, r30
    1c2c:	2a c0       	rjmp	.+84     	; 0x1c82 <vfprintf+0x106>
    1c2e:	f3 2d       	mov	r31, r3
    1c30:	f8 60       	ori	r31, 0x08	; 8
    1c32:	1d c0       	rjmp	.+58     	; 0x1c6e <vfprintf+0xf2>
    1c34:	37 fc       	sbrc	r3, 7
    1c36:	2d c0       	rjmp	.+90     	; 0x1c92 <vfprintf+0x116>
    1c38:	20 ed       	ldi	r18, 0xD0	; 208
    1c3a:	28 0f       	add	r18, r24
    1c3c:	2a 30       	cpi	r18, 0x0A	; 10
    1c3e:	40 f0       	brcs	.+16     	; 0x1c50 <vfprintf+0xd4>
    1c40:	8e 32       	cpi	r24, 0x2E	; 46
    1c42:	b9 f4       	brne	.+46     	; 0x1c72 <vfprintf+0xf6>
    1c44:	36 fc       	sbrc	r3, 6
    1c46:	75 c1       	rjmp	.+746    	; 0x1f32 <vfprintf+0x3b6>
    1c48:	23 2d       	mov	r18, r3
    1c4a:	20 64       	ori	r18, 0x40	; 64
    1c4c:	32 2e       	mov	r3, r18
    1c4e:	19 c0       	rjmp	.+50     	; 0x1c82 <vfprintf+0x106>
    1c50:	36 fe       	sbrs	r3, 6
    1c52:	06 c0       	rjmp	.+12     	; 0x1c60 <vfprintf+0xe4>
    1c54:	8a e0       	ldi	r24, 0x0A	; 10
    1c56:	98 9e       	mul	r9, r24
    1c58:	20 0d       	add	r18, r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	92 2e       	mov	r9, r18
    1c5e:	11 c0       	rjmp	.+34     	; 0x1c82 <vfprintf+0x106>
    1c60:	ea e0       	ldi	r30, 0x0A	; 10
    1c62:	2e 9e       	mul	r2, r30
    1c64:	20 0d       	add	r18, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	22 2e       	mov	r2, r18
    1c6a:	f3 2d       	mov	r31, r3
    1c6c:	f0 62       	ori	r31, 0x20	; 32
    1c6e:	3f 2e       	mov	r3, r31
    1c70:	08 c0       	rjmp	.+16     	; 0x1c82 <vfprintf+0x106>
    1c72:	8c 36       	cpi	r24, 0x6C	; 108
    1c74:	21 f4       	brne	.+8      	; 0x1c7e <vfprintf+0x102>
    1c76:	83 2d       	mov	r24, r3
    1c78:	80 68       	ori	r24, 0x80	; 128
    1c7a:	38 2e       	mov	r3, r24
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <vfprintf+0x106>
    1c7e:	88 36       	cpi	r24, 0x68	; 104
    1c80:	41 f4       	brne	.+16     	; 0x1c92 <vfprintf+0x116>
    1c82:	f7 01       	movw	r30, r14
    1c84:	93 fd       	sbrc	r25, 3
    1c86:	85 91       	lpm	r24, Z+
    1c88:	93 ff       	sbrs	r25, 3
    1c8a:	81 91       	ld	r24, Z+
    1c8c:	7f 01       	movw	r14, r30
    1c8e:	81 11       	cpse	r24, r1
    1c90:	b3 cf       	rjmp	.-154    	; 0x1bf8 <vfprintf+0x7c>
    1c92:	98 2f       	mov	r25, r24
    1c94:	9f 7d       	andi	r25, 0xDF	; 223
    1c96:	95 54       	subi	r25, 0x45	; 69
    1c98:	93 30       	cpi	r25, 0x03	; 3
    1c9a:	28 f4       	brcc	.+10     	; 0x1ca6 <vfprintf+0x12a>
    1c9c:	0c 5f       	subi	r16, 0xFC	; 252
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	9f e3       	ldi	r25, 0x3F	; 63
    1ca2:	99 83       	std	Y+1, r25	; 0x01
    1ca4:	0d c0       	rjmp	.+26     	; 0x1cc0 <vfprintf+0x144>
    1ca6:	83 36       	cpi	r24, 0x63	; 99
    1ca8:	31 f0       	breq	.+12     	; 0x1cb6 <vfprintf+0x13a>
    1caa:	83 37       	cpi	r24, 0x73	; 115
    1cac:	71 f0       	breq	.+28     	; 0x1cca <vfprintf+0x14e>
    1cae:	83 35       	cpi	r24, 0x53	; 83
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <vfprintf+0x138>
    1cb2:	55 c0       	rjmp	.+170    	; 0x1d5e <vfprintf+0x1e2>
    1cb4:	20 c0       	rjmp	.+64     	; 0x1cf6 <vfprintf+0x17a>
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	80 81       	ld	r24, Z
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	0e 5f       	subi	r16, 0xFE	; 254
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	88 24       	eor	r8, r8
    1cc2:	83 94       	inc	r8
    1cc4:	91 2c       	mov	r9, r1
    1cc6:	53 01       	movw	r10, r6
    1cc8:	12 c0       	rjmp	.+36     	; 0x1cee <vfprintf+0x172>
    1cca:	28 01       	movw	r4, r16
    1ccc:	f2 e0       	ldi	r31, 0x02	; 2
    1cce:	4f 0e       	add	r4, r31
    1cd0:	51 1c       	adc	r5, r1
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	a0 80       	ld	r10, Z
    1cd6:	b1 80       	ldd	r11, Z+1	; 0x01
    1cd8:	36 fe       	sbrs	r3, 6
    1cda:	03 c0       	rjmp	.+6      	; 0x1ce2 <vfprintf+0x166>
    1cdc:	69 2d       	mov	r22, r9
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <vfprintf+0x16a>
    1ce2:	6f ef       	ldi	r22, 0xFF	; 255
    1ce4:	7f ef       	ldi	r23, 0xFF	; 255
    1ce6:	c5 01       	movw	r24, r10
    1ce8:	4b d1       	rcall	.+662    	; 0x1f80 <strnlen>
    1cea:	4c 01       	movw	r8, r24
    1cec:	82 01       	movw	r16, r4
    1cee:	f3 2d       	mov	r31, r3
    1cf0:	ff 77       	andi	r31, 0x7F	; 127
    1cf2:	3f 2e       	mov	r3, r31
    1cf4:	15 c0       	rjmp	.+42     	; 0x1d20 <vfprintf+0x1a4>
    1cf6:	28 01       	movw	r4, r16
    1cf8:	22 e0       	ldi	r18, 0x02	; 2
    1cfa:	42 0e       	add	r4, r18
    1cfc:	51 1c       	adc	r5, r1
    1cfe:	f8 01       	movw	r30, r16
    1d00:	a0 80       	ld	r10, Z
    1d02:	b1 80       	ldd	r11, Z+1	; 0x01
    1d04:	36 fe       	sbrs	r3, 6
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <vfprintf+0x192>
    1d08:	69 2d       	mov	r22, r9
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0x196>
    1d0e:	6f ef       	ldi	r22, 0xFF	; 255
    1d10:	7f ef       	ldi	r23, 0xFF	; 255
    1d12:	c5 01       	movw	r24, r10
    1d14:	2a d1       	rcall	.+596    	; 0x1f6a <strnlen_P>
    1d16:	4c 01       	movw	r8, r24
    1d18:	f3 2d       	mov	r31, r3
    1d1a:	f0 68       	ori	r31, 0x80	; 128
    1d1c:	3f 2e       	mov	r3, r31
    1d1e:	82 01       	movw	r16, r4
    1d20:	33 fc       	sbrc	r3, 3
    1d22:	19 c0       	rjmp	.+50     	; 0x1d56 <vfprintf+0x1da>
    1d24:	82 2d       	mov	r24, r2
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	88 16       	cp	r8, r24
    1d2a:	99 06       	cpc	r9, r25
    1d2c:	a0 f4       	brcc	.+40     	; 0x1d56 <vfprintf+0x1da>
    1d2e:	b6 01       	movw	r22, r12
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	30 d1       	rcall	.+608    	; 0x1f96 <fputc>
    1d36:	2a 94       	dec	r2
    1d38:	f5 cf       	rjmp	.-22     	; 0x1d24 <vfprintf+0x1a8>
    1d3a:	f5 01       	movw	r30, r10
    1d3c:	37 fc       	sbrc	r3, 7
    1d3e:	85 91       	lpm	r24, Z+
    1d40:	37 fe       	sbrs	r3, 7
    1d42:	81 91       	ld	r24, Z+
    1d44:	5f 01       	movw	r10, r30
    1d46:	b6 01       	movw	r22, r12
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	25 d1       	rcall	.+586    	; 0x1f96 <fputc>
    1d4c:	21 10       	cpse	r2, r1
    1d4e:	2a 94       	dec	r2
    1d50:	21 e0       	ldi	r18, 0x01	; 1
    1d52:	82 1a       	sub	r8, r18
    1d54:	91 08       	sbc	r9, r1
    1d56:	81 14       	cp	r8, r1
    1d58:	91 04       	cpc	r9, r1
    1d5a:	79 f7       	brne	.-34     	; 0x1d3a <vfprintf+0x1be>
    1d5c:	e1 c0       	rjmp	.+450    	; 0x1f20 <vfprintf+0x3a4>
    1d5e:	84 36       	cpi	r24, 0x64	; 100
    1d60:	11 f0       	breq	.+4      	; 0x1d66 <vfprintf+0x1ea>
    1d62:	89 36       	cpi	r24, 0x69	; 105
    1d64:	39 f5       	brne	.+78     	; 0x1db4 <vfprintf+0x238>
    1d66:	f8 01       	movw	r30, r16
    1d68:	37 fe       	sbrs	r3, 7
    1d6a:	07 c0       	rjmp	.+14     	; 0x1d7a <vfprintf+0x1fe>
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	0c 5f       	subi	r16, 0xFC	; 252
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	08 c0       	rjmp	.+16     	; 0x1d8a <vfprintf+0x20e>
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	07 2e       	mov	r0, r23
    1d80:	00 0c       	add	r0, r0
    1d82:	88 0b       	sbc	r24, r24
    1d84:	99 0b       	sbc	r25, r25
    1d86:	0e 5f       	subi	r16, 0xFE	; 254
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	f3 2d       	mov	r31, r3
    1d8c:	ff 76       	andi	r31, 0x6F	; 111
    1d8e:	3f 2e       	mov	r3, r31
    1d90:	97 ff       	sbrs	r25, 7
    1d92:	09 c0       	rjmp	.+18     	; 0x1da6 <vfprintf+0x22a>
    1d94:	90 95       	com	r25
    1d96:	80 95       	com	r24
    1d98:	70 95       	com	r23
    1d9a:	61 95       	neg	r22
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1da0:	9f 4f       	sbci	r25, 0xFF	; 255
    1da2:	f0 68       	ori	r31, 0x80	; 128
    1da4:	3f 2e       	mov	r3, r31
    1da6:	2a e0       	ldi	r18, 0x0A	; 10
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	a3 01       	movw	r20, r6
    1dac:	30 d1       	rcall	.+608    	; 0x200e <__ultoa_invert>
    1dae:	88 2e       	mov	r8, r24
    1db0:	86 18       	sub	r8, r6
    1db2:	44 c0       	rjmp	.+136    	; 0x1e3c <vfprintf+0x2c0>
    1db4:	85 37       	cpi	r24, 0x75	; 117
    1db6:	31 f4       	brne	.+12     	; 0x1dc4 <vfprintf+0x248>
    1db8:	23 2d       	mov	r18, r3
    1dba:	2f 7e       	andi	r18, 0xEF	; 239
    1dbc:	b2 2e       	mov	r11, r18
    1dbe:	2a e0       	ldi	r18, 0x0A	; 10
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	25 c0       	rjmp	.+74     	; 0x1e0e <vfprintf+0x292>
    1dc4:	93 2d       	mov	r25, r3
    1dc6:	99 7f       	andi	r25, 0xF9	; 249
    1dc8:	b9 2e       	mov	r11, r25
    1dca:	8f 36       	cpi	r24, 0x6F	; 111
    1dcc:	c1 f0       	breq	.+48     	; 0x1dfe <vfprintf+0x282>
    1dce:	18 f4       	brcc	.+6      	; 0x1dd6 <vfprintf+0x25a>
    1dd0:	88 35       	cpi	r24, 0x58	; 88
    1dd2:	79 f0       	breq	.+30     	; 0x1df2 <vfprintf+0x276>
    1dd4:	ae c0       	rjmp	.+348    	; 0x1f32 <vfprintf+0x3b6>
    1dd6:	80 37       	cpi	r24, 0x70	; 112
    1dd8:	19 f0       	breq	.+6      	; 0x1de0 <vfprintf+0x264>
    1dda:	88 37       	cpi	r24, 0x78	; 120
    1ddc:	21 f0       	breq	.+8      	; 0x1de6 <vfprintf+0x26a>
    1dde:	a9 c0       	rjmp	.+338    	; 0x1f32 <vfprintf+0x3b6>
    1de0:	e9 2f       	mov	r30, r25
    1de2:	e0 61       	ori	r30, 0x10	; 16
    1de4:	be 2e       	mov	r11, r30
    1de6:	b4 fe       	sbrs	r11, 4
    1de8:	0d c0       	rjmp	.+26     	; 0x1e04 <vfprintf+0x288>
    1dea:	fb 2d       	mov	r31, r11
    1dec:	f4 60       	ori	r31, 0x04	; 4
    1dee:	bf 2e       	mov	r11, r31
    1df0:	09 c0       	rjmp	.+18     	; 0x1e04 <vfprintf+0x288>
    1df2:	34 fe       	sbrs	r3, 4
    1df4:	0a c0       	rjmp	.+20     	; 0x1e0a <vfprintf+0x28e>
    1df6:	29 2f       	mov	r18, r25
    1df8:	26 60       	ori	r18, 0x06	; 6
    1dfa:	b2 2e       	mov	r11, r18
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <vfprintf+0x28e>
    1dfe:	28 e0       	ldi	r18, 0x08	; 8
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	05 c0       	rjmp	.+10     	; 0x1e0e <vfprintf+0x292>
    1e04:	20 e1       	ldi	r18, 0x10	; 16
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <vfprintf+0x292>
    1e0a:	20 e1       	ldi	r18, 0x10	; 16
    1e0c:	32 e0       	ldi	r19, 0x02	; 2
    1e0e:	f8 01       	movw	r30, r16
    1e10:	b7 fe       	sbrs	r11, 7
    1e12:	07 c0       	rjmp	.+14     	; 0x1e22 <vfprintf+0x2a6>
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	0c 5f       	subi	r16, 0xFC	; 252
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	06 c0       	rjmp	.+12     	; 0x1e2e <vfprintf+0x2b2>
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 5f       	subi	r16, 0xFE	; 254
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	a3 01       	movw	r20, r6
    1e30:	ee d0       	rcall	.+476    	; 0x200e <__ultoa_invert>
    1e32:	88 2e       	mov	r8, r24
    1e34:	86 18       	sub	r8, r6
    1e36:	fb 2d       	mov	r31, r11
    1e38:	ff 77       	andi	r31, 0x7F	; 127
    1e3a:	3f 2e       	mov	r3, r31
    1e3c:	36 fe       	sbrs	r3, 6
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <vfprintf+0x2de>
    1e40:	23 2d       	mov	r18, r3
    1e42:	2e 7f       	andi	r18, 0xFE	; 254
    1e44:	a2 2e       	mov	r10, r18
    1e46:	89 14       	cp	r8, r9
    1e48:	58 f4       	brcc	.+22     	; 0x1e60 <vfprintf+0x2e4>
    1e4a:	34 fe       	sbrs	r3, 4
    1e4c:	0b c0       	rjmp	.+22     	; 0x1e64 <vfprintf+0x2e8>
    1e4e:	32 fc       	sbrc	r3, 2
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <vfprintf+0x2e8>
    1e52:	83 2d       	mov	r24, r3
    1e54:	8e 7e       	andi	r24, 0xEE	; 238
    1e56:	a8 2e       	mov	r10, r24
    1e58:	05 c0       	rjmp	.+10     	; 0x1e64 <vfprintf+0x2e8>
    1e5a:	b8 2c       	mov	r11, r8
    1e5c:	a3 2c       	mov	r10, r3
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <vfprintf+0x2ea>
    1e60:	b8 2c       	mov	r11, r8
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <vfprintf+0x2ea>
    1e64:	b9 2c       	mov	r11, r9
    1e66:	a4 fe       	sbrs	r10, 4
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <vfprintf+0x30c>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e8 0d       	add	r30, r8
    1e6e:	f1 1d       	adc	r31, r1
    1e70:	80 81       	ld	r24, Z
    1e72:	80 33       	cpi	r24, 0x30	; 48
    1e74:	21 f4       	brne	.+8      	; 0x1e7e <vfprintf+0x302>
    1e76:	9a 2d       	mov	r25, r10
    1e78:	99 7e       	andi	r25, 0xE9	; 233
    1e7a:	a9 2e       	mov	r10, r25
    1e7c:	09 c0       	rjmp	.+18     	; 0x1e90 <vfprintf+0x314>
    1e7e:	a2 fe       	sbrs	r10, 2
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <vfprintf+0x312>
    1e82:	b3 94       	inc	r11
    1e84:	b3 94       	inc	r11
    1e86:	04 c0       	rjmp	.+8      	; 0x1e90 <vfprintf+0x314>
    1e88:	8a 2d       	mov	r24, r10
    1e8a:	86 78       	andi	r24, 0x86	; 134
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <vfprintf+0x314>
    1e8e:	b3 94       	inc	r11
    1e90:	a3 fc       	sbrc	r10, 3
    1e92:	10 c0       	rjmp	.+32     	; 0x1eb4 <vfprintf+0x338>
    1e94:	a0 fe       	sbrs	r10, 0
    1e96:	06 c0       	rjmp	.+12     	; 0x1ea4 <vfprintf+0x328>
    1e98:	b2 14       	cp	r11, r2
    1e9a:	80 f4       	brcc	.+32     	; 0x1ebc <vfprintf+0x340>
    1e9c:	28 0c       	add	r2, r8
    1e9e:	92 2c       	mov	r9, r2
    1ea0:	9b 18       	sub	r9, r11
    1ea2:	0d c0       	rjmp	.+26     	; 0x1ebe <vfprintf+0x342>
    1ea4:	b2 14       	cp	r11, r2
    1ea6:	58 f4       	brcc	.+22     	; 0x1ebe <vfprintf+0x342>
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	80 e2       	ldi	r24, 0x20	; 32
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	73 d0       	rcall	.+230    	; 0x1f96 <fputc>
    1eb0:	b3 94       	inc	r11
    1eb2:	f8 cf       	rjmp	.-16     	; 0x1ea4 <vfprintf+0x328>
    1eb4:	b2 14       	cp	r11, r2
    1eb6:	18 f4       	brcc	.+6      	; 0x1ebe <vfprintf+0x342>
    1eb8:	2b 18       	sub	r2, r11
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <vfprintf+0x344>
    1ebc:	98 2c       	mov	r9, r8
    1ebe:	21 2c       	mov	r2, r1
    1ec0:	a4 fe       	sbrs	r10, 4
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <vfprintf+0x366>
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	80 e3       	ldi	r24, 0x30	; 48
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	65 d0       	rcall	.+202    	; 0x1f96 <fputc>
    1ecc:	a2 fe       	sbrs	r10, 2
    1ece:	16 c0       	rjmp	.+44     	; 0x1efc <vfprintf+0x380>
    1ed0:	a1 fc       	sbrc	r10, 1
    1ed2:	03 c0       	rjmp	.+6      	; 0x1eda <vfprintf+0x35e>
    1ed4:	88 e7       	ldi	r24, 0x78	; 120
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <vfprintf+0x362>
    1eda:	88 e5       	ldi	r24, 0x58	; 88
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	b6 01       	movw	r22, r12
    1ee0:	0c c0       	rjmp	.+24     	; 0x1efa <vfprintf+0x37e>
    1ee2:	8a 2d       	mov	r24, r10
    1ee4:	86 78       	andi	r24, 0x86	; 134
    1ee6:	51 f0       	breq	.+20     	; 0x1efc <vfprintf+0x380>
    1ee8:	a1 fe       	sbrs	r10, 1
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vfprintf+0x374>
    1eec:	8b e2       	ldi	r24, 0x2B	; 43
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <vfprintf+0x376>
    1ef0:	80 e2       	ldi	r24, 0x20	; 32
    1ef2:	a7 fc       	sbrc	r10, 7
    1ef4:	8d e2       	ldi	r24, 0x2D	; 45
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	4d d0       	rcall	.+154    	; 0x1f96 <fputc>
    1efc:	89 14       	cp	r8, r9
    1efe:	30 f4       	brcc	.+12     	; 0x1f0c <vfprintf+0x390>
    1f00:	b6 01       	movw	r22, r12
    1f02:	80 e3       	ldi	r24, 0x30	; 48
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	47 d0       	rcall	.+142    	; 0x1f96 <fputc>
    1f08:	9a 94       	dec	r9
    1f0a:	f8 cf       	rjmp	.-16     	; 0x1efc <vfprintf+0x380>
    1f0c:	8a 94       	dec	r8
    1f0e:	f3 01       	movw	r30, r6
    1f10:	e8 0d       	add	r30, r8
    1f12:	f1 1d       	adc	r31, r1
    1f14:	80 81       	ld	r24, Z
    1f16:	b6 01       	movw	r22, r12
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	3d d0       	rcall	.+122    	; 0x1f96 <fputc>
    1f1c:	81 10       	cpse	r8, r1
    1f1e:	f6 cf       	rjmp	.-20     	; 0x1f0c <vfprintf+0x390>
    1f20:	22 20       	and	r2, r2
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <vfprintf+0x3aa>
    1f24:	4e ce       	rjmp	.-868    	; 0x1bc2 <vfprintf+0x46>
    1f26:	b6 01       	movw	r22, r12
    1f28:	80 e2       	ldi	r24, 0x20	; 32
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	34 d0       	rcall	.+104    	; 0x1f96 <fputc>
    1f2e:	2a 94       	dec	r2
    1f30:	f7 cf       	rjmp	.-18     	; 0x1f20 <vfprintf+0x3a4>
    1f32:	f6 01       	movw	r30, r12
    1f34:	86 81       	ldd	r24, Z+6	; 0x06
    1f36:	97 81       	ldd	r25, Z+7	; 0x07
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <vfprintf+0x3c2>
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	2b 96       	adiw	r28, 0x0b	; 11
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	ef 90       	pop	r14
    1f50:	df 90       	pop	r13
    1f52:	cf 90       	pop	r12
    1f54:	bf 90       	pop	r11
    1f56:	af 90       	pop	r10
    1f58:	9f 90       	pop	r9
    1f5a:	8f 90       	pop	r8
    1f5c:	7f 90       	pop	r7
    1f5e:	6f 90       	pop	r6
    1f60:	5f 90       	pop	r5
    1f62:	4f 90       	pop	r4
    1f64:	3f 90       	pop	r3
    1f66:	2f 90       	pop	r2
    1f68:	08 95       	ret

00001f6a <strnlen_P>:
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	05 90       	lpm	r0, Z+
    1f6e:	61 50       	subi	r22, 0x01	; 1
    1f70:	70 40       	sbci	r23, 0x00	; 0
    1f72:	01 10       	cpse	r0, r1
    1f74:	d8 f7       	brcc	.-10     	; 0x1f6c <strnlen_P+0x2>
    1f76:	80 95       	com	r24
    1f78:	90 95       	com	r25
    1f7a:	8e 0f       	add	r24, r30
    1f7c:	9f 1f       	adc	r25, r31
    1f7e:	08 95       	ret

00001f80 <strnlen>:
    1f80:	fc 01       	movw	r30, r24
    1f82:	61 50       	subi	r22, 0x01	; 1
    1f84:	70 40       	sbci	r23, 0x00	; 0
    1f86:	01 90       	ld	r0, Z+
    1f88:	01 10       	cpse	r0, r1
    1f8a:	d8 f7       	brcc	.-10     	; 0x1f82 <strnlen+0x2>
    1f8c:	80 95       	com	r24
    1f8e:	90 95       	com	r25
    1f90:	8e 0f       	add	r24, r30
    1f92:	9f 1f       	adc	r25, r31
    1f94:	08 95       	ret

00001f96 <fputc>:
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	fb 01       	movw	r30, r22
    1fa0:	23 81       	ldd	r18, Z+3	; 0x03
    1fa2:	21 fd       	sbrc	r18, 1
    1fa4:	03 c0       	rjmp	.+6      	; 0x1fac <fputc+0x16>
    1fa6:	8f ef       	ldi	r24, 0xFF	; 255
    1fa8:	9f ef       	ldi	r25, 0xFF	; 255
    1faa:	2c c0       	rjmp	.+88     	; 0x2004 <fputc+0x6e>
    1fac:	22 ff       	sbrs	r18, 2
    1fae:	16 c0       	rjmp	.+44     	; 0x1fdc <fputc+0x46>
    1fb0:	46 81       	ldd	r20, Z+6	; 0x06
    1fb2:	57 81       	ldd	r21, Z+7	; 0x07
    1fb4:	24 81       	ldd	r18, Z+4	; 0x04
    1fb6:	35 81       	ldd	r19, Z+5	; 0x05
    1fb8:	42 17       	cp	r20, r18
    1fba:	53 07       	cpc	r21, r19
    1fbc:	44 f4       	brge	.+16     	; 0x1fce <fputc+0x38>
    1fbe:	a0 81       	ld	r26, Z
    1fc0:	b1 81       	ldd	r27, Z+1	; 0x01
    1fc2:	9d 01       	movw	r18, r26
    1fc4:	2f 5f       	subi	r18, 0xFF	; 255
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	20 83       	st	Z, r18
    1fca:	31 83       	std	Z+1, r19	; 0x01
    1fcc:	8c 93       	st	X, r24
    1fce:	26 81       	ldd	r18, Z+6	; 0x06
    1fd0:	37 81       	ldd	r19, Z+7	; 0x07
    1fd2:	2f 5f       	subi	r18, 0xFF	; 255
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	26 83       	std	Z+6, r18	; 0x06
    1fd8:	37 83       	std	Z+7, r19	; 0x07
    1fda:	14 c0       	rjmp	.+40     	; 0x2004 <fputc+0x6e>
    1fdc:	8b 01       	movw	r16, r22
    1fde:	ec 01       	movw	r28, r24
    1fe0:	fb 01       	movw	r30, r22
    1fe2:	00 84       	ldd	r0, Z+8	; 0x08
    1fe4:	f1 85       	ldd	r31, Z+9	; 0x09
    1fe6:	e0 2d       	mov	r30, r0
    1fe8:	19 95       	eicall
    1fea:	89 2b       	or	r24, r25
    1fec:	e1 f6       	brne	.-72     	; 0x1fa6 <fputc+0x10>
    1fee:	d8 01       	movw	r26, r16
    1ff0:	16 96       	adiw	r26, 0x06	; 6
    1ff2:	8d 91       	ld	r24, X+
    1ff4:	9c 91       	ld	r25, X
    1ff6:	17 97       	sbiw	r26, 0x07	; 7
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	16 96       	adiw	r26, 0x06	; 6
    1ffc:	8d 93       	st	X+, r24
    1ffe:	9c 93       	st	X, r25
    2000:	17 97       	sbiw	r26, 0x07	; 7
    2002:	ce 01       	movw	r24, r28
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <__ultoa_invert>:
    200e:	fa 01       	movw	r30, r20
    2010:	aa 27       	eor	r26, r26
    2012:	28 30       	cpi	r18, 0x08	; 8
    2014:	51 f1       	breq	.+84     	; 0x206a <__ultoa_invert+0x5c>
    2016:	20 31       	cpi	r18, 0x10	; 16
    2018:	81 f1       	breq	.+96     	; 0x207a <__ultoa_invert+0x6c>
    201a:	e8 94       	clt
    201c:	6f 93       	push	r22
    201e:	6e 7f       	andi	r22, 0xFE	; 254
    2020:	6e 5f       	subi	r22, 0xFE	; 254
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	8f 4f       	sbci	r24, 0xFF	; 255
    2026:	9f 4f       	sbci	r25, 0xFF	; 255
    2028:	af 4f       	sbci	r26, 0xFF	; 255
    202a:	b1 e0       	ldi	r27, 0x01	; 1
    202c:	3e d0       	rcall	.+124    	; 0x20aa <__ultoa_invert+0x9c>
    202e:	b4 e0       	ldi	r27, 0x04	; 4
    2030:	3c d0       	rcall	.+120    	; 0x20aa <__ultoa_invert+0x9c>
    2032:	67 0f       	add	r22, r23
    2034:	78 1f       	adc	r23, r24
    2036:	89 1f       	adc	r24, r25
    2038:	9a 1f       	adc	r25, r26
    203a:	a1 1d       	adc	r26, r1
    203c:	68 0f       	add	r22, r24
    203e:	79 1f       	adc	r23, r25
    2040:	8a 1f       	adc	r24, r26
    2042:	91 1d       	adc	r25, r1
    2044:	a1 1d       	adc	r26, r1
    2046:	6a 0f       	add	r22, r26
    2048:	71 1d       	adc	r23, r1
    204a:	81 1d       	adc	r24, r1
    204c:	91 1d       	adc	r25, r1
    204e:	a1 1d       	adc	r26, r1
    2050:	20 d0       	rcall	.+64     	; 0x2092 <__ultoa_invert+0x84>
    2052:	09 f4       	brne	.+2      	; 0x2056 <__ultoa_invert+0x48>
    2054:	68 94       	set
    2056:	3f 91       	pop	r19
    2058:	2a e0       	ldi	r18, 0x0A	; 10
    205a:	26 9f       	mul	r18, r22
    205c:	11 24       	eor	r1, r1
    205e:	30 19       	sub	r19, r0
    2060:	30 5d       	subi	r19, 0xD0	; 208
    2062:	31 93       	st	Z+, r19
    2064:	de f6       	brtc	.-74     	; 0x201c <__ultoa_invert+0xe>
    2066:	cf 01       	movw	r24, r30
    2068:	08 95       	ret
    206a:	46 2f       	mov	r20, r22
    206c:	47 70       	andi	r20, 0x07	; 7
    206e:	40 5d       	subi	r20, 0xD0	; 208
    2070:	41 93       	st	Z+, r20
    2072:	b3 e0       	ldi	r27, 0x03	; 3
    2074:	0f d0       	rcall	.+30     	; 0x2094 <__ultoa_invert+0x86>
    2076:	c9 f7       	brne	.-14     	; 0x206a <__ultoa_invert+0x5c>
    2078:	f6 cf       	rjmp	.-20     	; 0x2066 <__ultoa_invert+0x58>
    207a:	46 2f       	mov	r20, r22
    207c:	4f 70       	andi	r20, 0x0F	; 15
    207e:	40 5d       	subi	r20, 0xD0	; 208
    2080:	4a 33       	cpi	r20, 0x3A	; 58
    2082:	18 f0       	brcs	.+6      	; 0x208a <__ultoa_invert+0x7c>
    2084:	49 5d       	subi	r20, 0xD9	; 217
    2086:	31 fd       	sbrc	r19, 1
    2088:	40 52       	subi	r20, 0x20	; 32
    208a:	41 93       	st	Z+, r20
    208c:	02 d0       	rcall	.+4      	; 0x2092 <__ultoa_invert+0x84>
    208e:	a9 f7       	brne	.-22     	; 0x207a <__ultoa_invert+0x6c>
    2090:	ea cf       	rjmp	.-44     	; 0x2066 <__ultoa_invert+0x58>
    2092:	b4 e0       	ldi	r27, 0x04	; 4
    2094:	a6 95       	lsr	r26
    2096:	97 95       	ror	r25
    2098:	87 95       	ror	r24
    209a:	77 95       	ror	r23
    209c:	67 95       	ror	r22
    209e:	ba 95       	dec	r27
    20a0:	c9 f7       	brne	.-14     	; 0x2094 <__ultoa_invert+0x86>
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	61 05       	cpc	r22, r1
    20a6:	71 05       	cpc	r23, r1
    20a8:	08 95       	ret
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	0a 2e       	mov	r0, r26
    20b0:	06 94       	lsr	r0
    20b2:	57 95       	ror	r21
    20b4:	47 95       	ror	r20
    20b6:	37 95       	ror	r19
    20b8:	27 95       	ror	r18
    20ba:	ba 95       	dec	r27
    20bc:	c9 f7       	brne	.-14     	; 0x20b0 <__ultoa_invert+0xa2>
    20be:	62 0f       	add	r22, r18
    20c0:	73 1f       	adc	r23, r19
    20c2:	84 1f       	adc	r24, r20
    20c4:	95 1f       	adc	r25, r21
    20c6:	a0 1d       	adc	r26, r0
    20c8:	08 95       	ret

000020ca <_exit>:
    20ca:	f8 94       	cli

000020cc <__stop_program>:
    20cc:	ff cf       	rjmp	.-2      	; 0x20cc <__stop_program>
